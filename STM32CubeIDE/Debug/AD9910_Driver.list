
AD9910_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a83c  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000314  0800ab0c  0800ab0c  0001ab0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ae20  0800ae20  0001ae20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ae28  0800ae28  0001ae28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800ae2c  0800ae2c  0001ae2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  0800ae30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  2400006c  0800ae9c  0002006c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000cc  0800aefc  000200cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000458  24000130  0800af5c  00020130  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  24000588  0800af5c  00020588  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002015a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017c18  00000000  00000000  0002019d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ba2  00000000  00000000  00037db5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fd8  00000000  00000000  0003a958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c37  00000000  00000000  0003b930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003444a  00000000  00000000  0003c567  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016ced  00000000  00000000  000709b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0014cc2b  00000000  00000000  0008769e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004afc  00000000  00000000  001d42cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  001d8dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000130 	.word	0x24000130
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800aaf4 	.word	0x0800aaf4

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000134 	.word	0x24000134
 800030c:	0800aaf4 	.word	0x0800aaf4

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b970 	b.w	80006b8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9e08      	ldr	r6, [sp, #32]
 80003f6:	460d      	mov	r5, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	460f      	mov	r7, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4694      	mov	ip, r2
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0xe2>
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	b143      	cbz	r3, 800041e <__udivmoddi4+0x2e>
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	f1c3 0220 	rsb	r2, r3, #32
 8000414:	409f      	lsls	r7, r3
 8000416:	fa20 f202 	lsr.w	r2, r0, r2
 800041a:	4317      	orrs	r7, r2
 800041c:	409c      	lsls	r4, r3
 800041e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000422:	fa1f f58c 	uxth.w	r5, ip
 8000426:	fbb7 f1fe 	udiv	r1, r7, lr
 800042a:	0c22      	lsrs	r2, r4, #16
 800042c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000430:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000434:	fb01 f005 	mul.w	r0, r1, r5
 8000438:	4290      	cmp	r0, r2
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x62>
 800043c:	eb1c 0202 	adds.w	r2, ip, r2
 8000440:	f101 37ff 	add.w	r7, r1, #4294967295
 8000444:	f080 811c 	bcs.w	8000680 <__udivmoddi4+0x290>
 8000448:	4290      	cmp	r0, r2
 800044a:	f240 8119 	bls.w	8000680 <__udivmoddi4+0x290>
 800044e:	3902      	subs	r1, #2
 8000450:	4462      	add	r2, ip
 8000452:	1a12      	subs	r2, r2, r0
 8000454:	b2a4      	uxth	r4, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000462:	fb00 f505 	mul.w	r5, r0, r5
 8000466:	42a5      	cmp	r5, r4
 8000468:	d90a      	bls.n	8000480 <__udivmoddi4+0x90>
 800046a:	eb1c 0404 	adds.w	r4, ip, r4
 800046e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000472:	f080 8107 	bcs.w	8000684 <__udivmoddi4+0x294>
 8000476:	42a5      	cmp	r5, r4
 8000478:	f240 8104 	bls.w	8000684 <__udivmoddi4+0x294>
 800047c:	4464      	add	r4, ip
 800047e:	3802      	subs	r0, #2
 8000480:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000484:	1b64      	subs	r4, r4, r5
 8000486:	2100      	movs	r1, #0
 8000488:	b11e      	cbz	r6, 8000492 <__udivmoddi4+0xa2>
 800048a:	40dc      	lsrs	r4, r3
 800048c:	2300      	movs	r3, #0
 800048e:	e9c6 4300 	strd	r4, r3, [r6]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0xbc>
 800049a:	2e00      	cmp	r6, #0
 800049c:	f000 80ed 	beq.w	800067a <__udivmoddi4+0x28a>
 80004a0:	2100      	movs	r1, #0
 80004a2:	e9c6 0500 	strd	r0, r5, [r6]
 80004a6:	4608      	mov	r0, r1
 80004a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ac:	fab3 f183 	clz	r1, r3
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d149      	bne.n	8000548 <__udivmoddi4+0x158>
 80004b4:	42ab      	cmp	r3, r5
 80004b6:	d302      	bcc.n	80004be <__udivmoddi4+0xce>
 80004b8:	4282      	cmp	r2, r0
 80004ba:	f200 80f8 	bhi.w	80006ae <__udivmoddi4+0x2be>
 80004be:	1a84      	subs	r4, r0, r2
 80004c0:	eb65 0203 	sbc.w	r2, r5, r3
 80004c4:	2001      	movs	r0, #1
 80004c6:	4617      	mov	r7, r2
 80004c8:	2e00      	cmp	r6, #0
 80004ca:	d0e2      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	e9c6 4700 	strd	r4, r7, [r6]
 80004d0:	e7df      	b.n	8000492 <__udivmoddi4+0xa2>
 80004d2:	b902      	cbnz	r2, 80004d6 <__udivmoddi4+0xe6>
 80004d4:	deff      	udf	#255	; 0xff
 80004d6:	fab2 f382 	clz	r3, r2
 80004da:	2b00      	cmp	r3, #0
 80004dc:	f040 8090 	bne.w	8000600 <__udivmoddi4+0x210>
 80004e0:	1a8a      	subs	r2, r1, r2
 80004e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e6:	fa1f fe8c 	uxth.w	lr, ip
 80004ea:	2101      	movs	r1, #1
 80004ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80004f0:	fb07 2015 	mls	r0, r7, r5, r2
 80004f4:	0c22      	lsrs	r2, r4, #16
 80004f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004fa:	fb0e f005 	mul.w	r0, lr, r5
 80004fe:	4290      	cmp	r0, r2
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x124>
 8000502:	eb1c 0202 	adds.w	r2, ip, r2
 8000506:	f105 38ff 	add.w	r8, r5, #4294967295
 800050a:	d202      	bcs.n	8000512 <__udivmoddi4+0x122>
 800050c:	4290      	cmp	r0, r2
 800050e:	f200 80cb 	bhi.w	80006a8 <__udivmoddi4+0x2b8>
 8000512:	4645      	mov	r5, r8
 8000514:	1a12      	subs	r2, r2, r0
 8000516:	b2a4      	uxth	r4, r4
 8000518:	fbb2 f0f7 	udiv	r0, r2, r7
 800051c:	fb07 2210 	mls	r2, r7, r0, r2
 8000520:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000524:	fb0e fe00 	mul.w	lr, lr, r0
 8000528:	45a6      	cmp	lr, r4
 800052a:	d908      	bls.n	800053e <__udivmoddi4+0x14e>
 800052c:	eb1c 0404 	adds.w	r4, ip, r4
 8000530:	f100 32ff 	add.w	r2, r0, #4294967295
 8000534:	d202      	bcs.n	800053c <__udivmoddi4+0x14c>
 8000536:	45a6      	cmp	lr, r4
 8000538:	f200 80bb 	bhi.w	80006b2 <__udivmoddi4+0x2c2>
 800053c:	4610      	mov	r0, r2
 800053e:	eba4 040e 	sub.w	r4, r4, lr
 8000542:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000546:	e79f      	b.n	8000488 <__udivmoddi4+0x98>
 8000548:	f1c1 0720 	rsb	r7, r1, #32
 800054c:	408b      	lsls	r3, r1
 800054e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000552:	ea4c 0c03 	orr.w	ip, ip, r3
 8000556:	fa05 f401 	lsl.w	r4, r5, r1
 800055a:	fa20 f307 	lsr.w	r3, r0, r7
 800055e:	40fd      	lsrs	r5, r7
 8000560:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000564:	4323      	orrs	r3, r4
 8000566:	fbb5 f8f9 	udiv	r8, r5, r9
 800056a:	fa1f fe8c 	uxth.w	lr, ip
 800056e:	fb09 5518 	mls	r5, r9, r8, r5
 8000572:	0c1c      	lsrs	r4, r3, #16
 8000574:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000578:	fb08 f50e 	mul.w	r5, r8, lr
 800057c:	42a5      	cmp	r5, r4
 800057e:	fa02 f201 	lsl.w	r2, r2, r1
 8000582:	fa00 f001 	lsl.w	r0, r0, r1
 8000586:	d90b      	bls.n	80005a0 <__udivmoddi4+0x1b0>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000590:	f080 8088 	bcs.w	80006a4 <__udivmoddi4+0x2b4>
 8000594:	42a5      	cmp	r5, r4
 8000596:	f240 8085 	bls.w	80006a4 <__udivmoddi4+0x2b4>
 800059a:	f1a8 0802 	sub.w	r8, r8, #2
 800059e:	4464      	add	r4, ip
 80005a0:	1b64      	subs	r4, r4, r5
 80005a2:	b29d      	uxth	r5, r3
 80005a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80005a8:	fb09 4413 	mls	r4, r9, r3, r4
 80005ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005b4:	45a6      	cmp	lr, r4
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x1da>
 80005b8:	eb1c 0404 	adds.w	r4, ip, r4
 80005bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80005c0:	d26c      	bcs.n	800069c <__udivmoddi4+0x2ac>
 80005c2:	45a6      	cmp	lr, r4
 80005c4:	d96a      	bls.n	800069c <__udivmoddi4+0x2ac>
 80005c6:	3b02      	subs	r3, #2
 80005c8:	4464      	add	r4, ip
 80005ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005ce:	fba3 9502 	umull	r9, r5, r3, r2
 80005d2:	eba4 040e 	sub.w	r4, r4, lr
 80005d6:	42ac      	cmp	r4, r5
 80005d8:	46c8      	mov	r8, r9
 80005da:	46ae      	mov	lr, r5
 80005dc:	d356      	bcc.n	800068c <__udivmoddi4+0x29c>
 80005de:	d053      	beq.n	8000688 <__udivmoddi4+0x298>
 80005e0:	b156      	cbz	r6, 80005f8 <__udivmoddi4+0x208>
 80005e2:	ebb0 0208 	subs.w	r2, r0, r8
 80005e6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ea:	fa04 f707 	lsl.w	r7, r4, r7
 80005ee:	40ca      	lsrs	r2, r1
 80005f0:	40cc      	lsrs	r4, r1
 80005f2:	4317      	orrs	r7, r2
 80005f4:	e9c6 7400 	strd	r7, r4, [r6]
 80005f8:	4618      	mov	r0, r3
 80005fa:	2100      	movs	r1, #0
 80005fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000600:	f1c3 0120 	rsb	r1, r3, #32
 8000604:	fa02 fc03 	lsl.w	ip, r2, r3
 8000608:	fa20 f201 	lsr.w	r2, r0, r1
 800060c:	fa25 f101 	lsr.w	r1, r5, r1
 8000610:	409d      	lsls	r5, r3
 8000612:	432a      	orrs	r2, r5
 8000614:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000618:	fa1f fe8c 	uxth.w	lr, ip
 800061c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000620:	fb07 1510 	mls	r5, r7, r0, r1
 8000624:	0c11      	lsrs	r1, r2, #16
 8000626:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800062a:	fb00 f50e 	mul.w	r5, r0, lr
 800062e:	428d      	cmp	r5, r1
 8000630:	fa04 f403 	lsl.w	r4, r4, r3
 8000634:	d908      	bls.n	8000648 <__udivmoddi4+0x258>
 8000636:	eb1c 0101 	adds.w	r1, ip, r1
 800063a:	f100 38ff 	add.w	r8, r0, #4294967295
 800063e:	d22f      	bcs.n	80006a0 <__udivmoddi4+0x2b0>
 8000640:	428d      	cmp	r5, r1
 8000642:	d92d      	bls.n	80006a0 <__udivmoddi4+0x2b0>
 8000644:	3802      	subs	r0, #2
 8000646:	4461      	add	r1, ip
 8000648:	1b49      	subs	r1, r1, r5
 800064a:	b292      	uxth	r2, r2
 800064c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000650:	fb07 1115 	mls	r1, r7, r5, r1
 8000654:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000658:	fb05 f10e 	mul.w	r1, r5, lr
 800065c:	4291      	cmp	r1, r2
 800065e:	d908      	bls.n	8000672 <__udivmoddi4+0x282>
 8000660:	eb1c 0202 	adds.w	r2, ip, r2
 8000664:	f105 38ff 	add.w	r8, r5, #4294967295
 8000668:	d216      	bcs.n	8000698 <__udivmoddi4+0x2a8>
 800066a:	4291      	cmp	r1, r2
 800066c:	d914      	bls.n	8000698 <__udivmoddi4+0x2a8>
 800066e:	3d02      	subs	r5, #2
 8000670:	4462      	add	r2, ip
 8000672:	1a52      	subs	r2, r2, r1
 8000674:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000678:	e738      	b.n	80004ec <__udivmoddi4+0xfc>
 800067a:	4631      	mov	r1, r6
 800067c:	4630      	mov	r0, r6
 800067e:	e708      	b.n	8000492 <__udivmoddi4+0xa2>
 8000680:	4639      	mov	r1, r7
 8000682:	e6e6      	b.n	8000452 <__udivmoddi4+0x62>
 8000684:	4610      	mov	r0, r2
 8000686:	e6fb      	b.n	8000480 <__udivmoddi4+0x90>
 8000688:	4548      	cmp	r0, r9
 800068a:	d2a9      	bcs.n	80005e0 <__udivmoddi4+0x1f0>
 800068c:	ebb9 0802 	subs.w	r8, r9, r2
 8000690:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000694:	3b01      	subs	r3, #1
 8000696:	e7a3      	b.n	80005e0 <__udivmoddi4+0x1f0>
 8000698:	4645      	mov	r5, r8
 800069a:	e7ea      	b.n	8000672 <__udivmoddi4+0x282>
 800069c:	462b      	mov	r3, r5
 800069e:	e794      	b.n	80005ca <__udivmoddi4+0x1da>
 80006a0:	4640      	mov	r0, r8
 80006a2:	e7d1      	b.n	8000648 <__udivmoddi4+0x258>
 80006a4:	46d0      	mov	r8, sl
 80006a6:	e77b      	b.n	80005a0 <__udivmoddi4+0x1b0>
 80006a8:	3d02      	subs	r5, #2
 80006aa:	4462      	add	r2, ip
 80006ac:	e732      	b.n	8000514 <__udivmoddi4+0x124>
 80006ae:	4608      	mov	r0, r1
 80006b0:	e70a      	b.n	80004c8 <__udivmoddi4+0xd8>
 80006b2:	4464      	add	r4, ip
 80006b4:	3802      	subs	r0, #2
 80006b6:	e742      	b.n	800053e <__udivmoddi4+0x14e>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <_write>:
static void MX_ETH_Init(void);
static void MX_SPI1_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_USB_OTG_HS_USB_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	60b9      	str	r1, [r7, #8]
 80006c6:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	b29a      	uxth	r2, r3
 80006cc:	f04f 33ff 	mov.w	r3, #4294967295
 80006d0:	68b9      	ldr	r1, [r7, #8]
 80006d2:	4804      	ldr	r0, [pc, #16]	; (80006e4 <_write+0x28>)
 80006d4:	f006 fcc5 	bl	8007062 <HAL_UART_Transmit>
    return len;
 80006d8:	687b      	ldr	r3, [r7, #4]
}
 80006da:	4618      	mov	r0, r3
 80006dc:	3710      	adds	r7, #16
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	240002bc 	.word	0x240002bc

080006e8 <convert_hz_to_hex>:

void UART_SendString(char *message);

void processCommand(void);

uint64_t convert_hz_to_hex(int hz) {
 80006e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80006ec:	b086      	sub	sp, #24
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	6078      	str	r0, [r7, #4]
    uint32_t hex_value = (uint32_t)round((pow(2, 32) * hz) / 480000000.0);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	ee07 3a90 	vmov	s15, r3
 80006f8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80006fc:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8000758 <convert_hz_to_hex+0x70>
 8000700:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000704:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8000760 <convert_hz_to_hex+0x78>
 8000708:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800070c:	eeb0 0b46 	vmov.f64	d0, d6
 8000710:	f00a f9ac 	bl	800aa6c <round>
 8000714:	eeb0 7b40 	vmov.f64	d7, d0
 8000718:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800071c:	ee17 3a90 	vmov	r3, s15
 8000720:	617b      	str	r3, [r7, #20]

    // Combiner 0x3FFF0000 et la valeur calculée dans un uint64_t
    uint64_t result = ((uint64_t)0x3FFF0000 << 32) | hex_value;
 8000722:	697b      	ldr	r3, [r7, #20]
 8000724:	2200      	movs	r2, #0
 8000726:	4698      	mov	r8, r3
 8000728:	4691      	mov	r9, r2
 800072a:	4644      	mov	r4, r8
 800072c:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 8000730:	f445 157c 	orr.w	r5, r5, #4128768	; 0x3f0000
 8000734:	e9c7 4502 	strd	r4, r5, [r7, #8]
    printf("Valeur HEXA sur 8 octets : 0x%016llX\n", result);
 8000738:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800073c:	480a      	ldr	r0, [pc, #40]	; (8000768 <convert_hz_to_hex+0x80>)
 800073e:	f009 fac5 	bl	8009ccc <iprintf>

    return result;
 8000742:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8000746:	4610      	mov	r0, r2
 8000748:	4619      	mov	r1, r3
 800074a:	3718      	adds	r7, #24
 800074c:	46bd      	mov	sp, r7
 800074e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000752:	bf00      	nop
 8000754:	f3af 8000 	nop.w
 8000758:	00000000 	.word	0x00000000
 800075c:	41f00000 	.word	0x41f00000
 8000760:	00000000 	.word	0x00000000
 8000764:	41bc9c38 	.word	0x41bc9c38
 8000768:	0800ab0c 	.word	0x0800ab0c

0800076c <extract_int_from_string>:


int extract_int_from_string(const char *str) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
    return atoi(str + 2); // Ignorer les 2 premiers caractères et convertir en entier
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	3302      	adds	r3, #2
 8000778:	4618      	mov	r0, r3
 800077a:	f009 f955 	bl	8009a28 <atoi>
 800077e:	4603      	mov	r3, r0
}
 8000780:	4618      	mov	r0, r3
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <DDS_Test>:

void DDS_Test() {
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
    uint64_t read_value = 0x000000000000;
 800078e:	f04f 0200 	mov.w	r2, #0
 8000792:	f04f 0300 	mov.w	r3, #0
 8000796:	e9c7 2300 	strd	r2, r3, [r7]

    // Écriture dans un registre (par exemple 0x04 pour la fréquence de base)
    if (AD9910_WriteRegister(0x00, 0x00800302) == HAL_OK) {
 800079a:	4a16      	ldr	r2, [pc, #88]	; (80007f4 <DDS_Test+0x6c>)
 800079c:	f04f 0300 	mov.w	r3, #0
 80007a0:	2000      	movs	r0, #0
 80007a2:	f000 ff8d 	bl	80016c0 <AD9910_WriteRegister>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d103      	bne.n	80007b4 <DDS_Test+0x2c>
        printf("Registre écrit avec succès.\n");
 80007ac:	4812      	ldr	r0, [pc, #72]	; (80007f8 <DDS_Test+0x70>)
 80007ae:	f009 faf3 	bl	8009d98 <puts>
 80007b2:	e002      	b.n	80007ba <DDS_Test+0x32>
    } else {
        printf("Erreur d'écriture dans le registre.\n");
 80007b4:	4811      	ldr	r0, [pc, #68]	; (80007fc <DDS_Test+0x74>)
 80007b6:	f009 faef 	bl	8009d98 <puts>
    }
    AD9910_IOUpdate();
 80007ba:	f000 ff6b 	bl	8001694 <AD9910_IOUpdate>
    HAL_Delay(10);
 80007be:	200a      	movs	r0, #10
 80007c0:	f001 fac6 	bl	8001d50 <HAL_Delay>

    // Lecture dans un registre (par exemple 0x04 pour la fréquence de base)
    if (AD9910_ReadRegister(0x0E, &read_value) == HAL_OK) {
 80007c4:	463b      	mov	r3, r7
 80007c6:	4619      	mov	r1, r3
 80007c8:	200e      	movs	r0, #14
 80007ca:	f000 ffe9 	bl	80017a0 <AD9910_ReadRegister>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d105      	bne.n	80007e0 <DDS_Test+0x58>
        printf("Valeur lue du registre 0x00 : 0x%016lX\n", read_value);
 80007d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80007d8:	4809      	ldr	r0, [pc, #36]	; (8000800 <DDS_Test+0x78>)
 80007da:	f009 fa77 	bl	8009ccc <iprintf>
    } else {
        printf("Erreur de lecture dans le registre.");
        printf("Test commit develop");
    }
}
 80007de:	e005      	b.n	80007ec <DDS_Test+0x64>
        printf("Erreur de lecture dans le registre.");
 80007e0:	4808      	ldr	r0, [pc, #32]	; (8000804 <DDS_Test+0x7c>)
 80007e2:	f009 fa73 	bl	8009ccc <iprintf>
        printf("Test commit develop");
 80007e6:	4808      	ldr	r0, [pc, #32]	; (8000808 <DDS_Test+0x80>)
 80007e8:	f009 fa70 	bl	8009ccc <iprintf>
}
 80007ec:	bf00      	nop
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	00800302 	.word	0x00800302
 80007f8:	0800ab34 	.word	0x0800ab34
 80007fc:	0800ab54 	.word	0x0800ab54
 8000800:	0800ab7c 	.word	0x0800ab7c
 8000804:	0800aba4 	.word	0x0800aba4
 8000808:	0800abc8 	.word	0x0800abc8
 800080c:	00000000 	.word	0x00000000

08000810 <DDS_Reg_Update>:


void DDS_Reg_Update() {
 8000810:	b580      	push	{r7, lr}
 8000812:	b086      	sub	sp, #24
 8000814:	af00      	add	r7, sp, #0
	uint64_t readback = 0;
 8000816:	f04f 0200 	mov.w	r2, #0
 800081a:	f04f 0300 	mov.w	r3, #0
 800081e:	e9c7 2300 	strd	r2, r3, [r7]
	int concatenated_value = extract_int_from_string(command_buffer);
 8000822:	4875      	ldr	r0, [pc, #468]	; (80009f8 <DDS_Reg_Update+0x1e8>)
 8000824:	f7ff ffa2 	bl	800076c <extract_int_from_string>
 8000828:	60f8      	str	r0, [r7, #12]
	FTW = convert_hz_to_hex(concatenated_value);
 800082a:	68f8      	ldr	r0, [r7, #12]
 800082c:	f7ff ff5c 	bl	80006e8 <convert_hz_to_hex>
 8000830:	4602      	mov	r2, r0
 8000832:	460b      	mov	r3, r1
 8000834:	4971      	ldr	r1, [pc, #452]	; (80009fc <DDS_Reg_Update+0x1ec>)
 8000836:	e9c1 2300 	strd	r2, r3, [r1]


	ad9910_regs[0] 		= 0x00800302;
 800083a:	4971      	ldr	r1, [pc, #452]	; (8000a00 <DDS_Reg_Update+0x1f0>)
 800083c:	4a71      	ldr	r2, [pc, #452]	; (8000a04 <DDS_Reg_Update+0x1f4>)
 800083e:	f04f 0300 	mov.w	r3, #0
 8000842:	e9c1 2300 	strd	r2, r3, [r1]
	ad9910_regs[1] 		= 0x01000820;
 8000846:	496e      	ldr	r1, [pc, #440]	; (8000a00 <DDS_Reg_Update+0x1f0>)
 8000848:	4a6f      	ldr	r2, [pc, #444]	; (8000a08 <DDS_Reg_Update+0x1f8>)
 800084a:	f04f 0300 	mov.w	r3, #0
 800084e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	ad9910_regs[2] 		= 0x01204118; //PLL ON, VCO1, N=12
 8000852:	496b      	ldr	r1, [pc, #428]	; (8000a00 <DDS_Reg_Update+0x1f0>)
 8000854:	a366      	add	r3, pc, #408	; (adr r3, 80009f0 <DDS_Reg_Update+0x1e0>)
 8000856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800085a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	ad9910_regs[3] 		= 0x0000007F;
 800085e:	4968      	ldr	r1, [pc, #416]	; (8000a00 <DDS_Reg_Update+0x1f0>)
 8000860:	f04f 027f 	mov.w	r2, #127	; 0x7f
 8000864:	f04f 0300 	mov.w	r3, #0
 8000868:	e9c1 2306 	strd	r2, r3, [r1, #24]
	ad9910_regs[4] 		= 0xFFFFFFFF;
 800086c:	4964      	ldr	r1, [pc, #400]	; (8000a00 <DDS_Reg_Update+0x1f0>)
 800086e:	f04f 32ff 	mov.w	r2, #4294967295
 8000872:	f04f 0300 	mov.w	r3, #0
 8000876:	e9c1 2308 	strd	r2, r3, [r1, #32]
	ad9910_regs[5] 		= 0x000000000000;
 800087a:	4961      	ldr	r1, [pc, #388]	; (8000a00 <DDS_Reg_Update+0x1f0>)
 800087c:	f04f 0200 	mov.w	r2, #0
 8000880:	f04f 0300 	mov.w	r3, #0
 8000884:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	ad9910_regs[6] 		= 0x000000000000;
 8000888:	495d      	ldr	r1, [pc, #372]	; (8000a00 <DDS_Reg_Update+0x1f0>)
 800088a:	f04f 0200 	mov.w	r2, #0
 800088e:	f04f 0300 	mov.w	r3, #0
 8000892:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	ad9910_regs[7] 		= 0x00000000; //FTW 100MHz
 8000896:	495a      	ldr	r1, [pc, #360]	; (8000a00 <DDS_Reg_Update+0x1f0>)
 8000898:	f04f 0200 	mov.w	r2, #0
 800089c:	f04f 0300 	mov.w	r3, #0
 80008a0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	ad9910_regs[8] 		= 0x0000; //POW
 80008a4:	4956      	ldr	r1, [pc, #344]	; (8000a00 <DDS_Reg_Update+0x1f0>)
 80008a6:	f04f 0200 	mov.w	r2, #0
 80008aa:	f04f 0300 	mov.w	r3, #0
 80008ae:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	ad9910_regs[9] 		= 0x0001FFFC; //ASF full scale
 80008b2:	4953      	ldr	r1, [pc, #332]	; (8000a00 <DDS_Reg_Update+0x1f0>)
 80008b4:	4a55      	ldr	r2, [pc, #340]	; (8000a0c <DDS_Reg_Update+0x1fc>)
 80008b6:	f04f 0300 	mov.w	r3, #0
 80008ba:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	ad9910_regs[0x0A] 	= 0x00000000;
 80008be:	4950      	ldr	r1, [pc, #320]	; (8000a00 <DDS_Reg_Update+0x1f0>)
 80008c0:	f04f 0200 	mov.w	r2, #0
 80008c4:	f04f 0300 	mov.w	r3, #0
 80008c8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	ad9910_regs[0x0B] 	= 0x0000000000000000;
 80008cc:	494c      	ldr	r1, [pc, #304]	; (8000a00 <DDS_Reg_Update+0x1f0>)
 80008ce:	f04f 0200 	mov.w	r2, #0
 80008d2:	f04f 0300 	mov.w	r3, #0
 80008d6:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	ad9910_regs[0x0C] 	= 0x0000000000000000;
 80008da:	4949      	ldr	r1, [pc, #292]	; (8000a00 <DDS_Reg_Update+0x1f0>)
 80008dc:	f04f 0200 	mov.w	r2, #0
 80008e0:	f04f 0300 	mov.w	r3, #0
 80008e4:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	ad9910_regs[0x0D] 	= 0x00000000;
 80008e8:	4945      	ldr	r1, [pc, #276]	; (8000a00 <DDS_Reg_Update+0x1f0>)
 80008ea:	f04f 0200 	mov.w	r2, #0
 80008ee:	f04f 0300 	mov.w	r3, #0
 80008f2:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	ad9910_regs[0x0E] 	= FTW;
 80008f6:	4b41      	ldr	r3, [pc, #260]	; (80009fc <DDS_Reg_Update+0x1ec>)
 80008f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008fc:	4940      	ldr	r1, [pc, #256]	; (8000a00 <DDS_Reg_Update+0x1f0>)
 80008fe:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	ad9910_regs[0x0F] 	= FTW;
 8000902:	4b3e      	ldr	r3, [pc, #248]	; (80009fc <DDS_Reg_Update+0x1ec>)
 8000904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000908:	493d      	ldr	r1, [pc, #244]	; (8000a00 <DDS_Reg_Update+0x1f0>)
 800090a:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	ad9910_regs[0x10] 	= FTW;
 800090e:	4b3b      	ldr	r3, [pc, #236]	; (80009fc <DDS_Reg_Update+0x1ec>)
 8000910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000914:	493a      	ldr	r1, [pc, #232]	; (8000a00 <DDS_Reg_Update+0x1f0>)
 8000916:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
	ad9910_regs[0x11] 	= FTW;
 800091a:	4b38      	ldr	r3, [pc, #224]	; (80009fc <DDS_Reg_Update+0x1ec>)
 800091c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000920:	4937      	ldr	r1, [pc, #220]	; (8000a00 <DDS_Reg_Update+0x1f0>)
 8000922:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	ad9910_regs[0x12] 	= FTW;
 8000926:	4b35      	ldr	r3, [pc, #212]	; (80009fc <DDS_Reg_Update+0x1ec>)
 8000928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800092c:	4934      	ldr	r1, [pc, #208]	; (8000a00 <DDS_Reg_Update+0x1f0>)
 800092e:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
	ad9910_regs[0x13] 	= FTW;
 8000932:	4b32      	ldr	r3, [pc, #200]	; (80009fc <DDS_Reg_Update+0x1ec>)
 8000934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000938:	4931      	ldr	r1, [pc, #196]	; (8000a00 <DDS_Reg_Update+0x1f0>)
 800093a:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
	ad9910_regs[0x14] 	= FTW;
 800093e:	4b2f      	ldr	r3, [pc, #188]	; (80009fc <DDS_Reg_Update+0x1ec>)
 8000940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000944:	492e      	ldr	r1, [pc, #184]	; (8000a00 <DDS_Reg_Update+0x1f0>)
 8000946:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
	ad9910_regs[0x15] 	= FTW;
 800094a:	4b2c      	ldr	r3, [pc, #176]	; (80009fc <DDS_Reg_Update+0x1ec>)
 800094c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000950:	492b      	ldr	r1, [pc, #172]	; (8000a00 <DDS_Reg_Update+0x1f0>)
 8000952:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
	ad9910_regs[0x16] 	= 0x00000000;
 8000956:	492a      	ldr	r1, [pc, #168]	; (8000a00 <DDS_Reg_Update+0x1f0>)
 8000958:	f04f 0200 	mov.w	r2, #0
 800095c:	f04f 0300 	mov.w	r3, #0
 8000960:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0
	printf("Ecriture des registres.\n");
 8000964:	482a      	ldr	r0, [pc, #168]	; (8000a10 <DDS_Reg_Update+0x200>)
 8000966:	f009 fa17 	bl	8009d98 <puts>

	for (uint8_t i = 0; i < 23; i++) {
 800096a:	2300      	movs	r3, #0
 800096c:	75fb      	strb	r3, [r7, #23]
 800096e:	e00c      	b.n	800098a <DDS_Reg_Update+0x17a>
			AD9910_WriteRegister(i,ad9910_regs[i]);
 8000970:	7dfb      	ldrb	r3, [r7, #23]
 8000972:	4a23      	ldr	r2, [pc, #140]	; (8000a00 <DDS_Reg_Update+0x1f0>)
 8000974:	00db      	lsls	r3, r3, #3
 8000976:	4413      	add	r3, r2
 8000978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800097c:	7df9      	ldrb	r1, [r7, #23]
 800097e:	4608      	mov	r0, r1
 8000980:	f000 fe9e 	bl	80016c0 <AD9910_WriteRegister>
	for (uint8_t i = 0; i < 23; i++) {
 8000984:	7dfb      	ldrb	r3, [r7, #23]
 8000986:	3301      	adds	r3, #1
 8000988:	75fb      	strb	r3, [r7, #23]
 800098a:	7dfb      	ldrb	r3, [r7, #23]
 800098c:	2b16      	cmp	r3, #22
 800098e:	d9ef      	bls.n	8000970 <DDS_Reg_Update+0x160>
	    }
	printf("IO Update.\n");
 8000990:	4820      	ldr	r0, [pc, #128]	; (8000a14 <DDS_Reg_Update+0x204>)
 8000992:	f009 fa01 	bl	8009d98 <puts>
	AD9910_IOUpdate();
 8000996:	f000 fe7d 	bl	8001694 <AD9910_IOUpdate>
	HAL_Delay(10);
 800099a:	200a      	movs	r0, #10
 800099c:	f001 f9d8 	bl	8001d50 <HAL_Delay>
	for (int i = 0; i < 23; i++) {
 80009a0:	2300      	movs	r3, #0
 80009a2:	613b      	str	r3, [r7, #16]
 80009a4:	e01a      	b.n	80009dc <DDS_Reg_Update+0x1cc>
		 AD9910_ReadRegister(i,&readback);
 80009a6:	693b      	ldr	r3, [r7, #16]
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	463a      	mov	r2, r7
 80009ac:	4611      	mov	r1, r2
 80009ae:	4618      	mov	r0, r3
 80009b0:	f000 fef6 	bl	80017a0 <AD9910_ReadRegister>
		 printf("Valeur du registre 0x%X = 0x%08lX%08lX\n", i, (uint32_t)(readback >> 32), (uint32_t)(readback));
 80009b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80009b8:	f04f 0200 	mov.w	r2, #0
 80009bc:	f04f 0300 	mov.w	r3, #0
 80009c0:	000a      	movs	r2, r1
 80009c2:	2300      	movs	r3, #0
 80009c4:	4611      	mov	r1, r2
 80009c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80009ca:	4613      	mov	r3, r2
 80009cc:	460a      	mov	r2, r1
 80009ce:	6939      	ldr	r1, [r7, #16]
 80009d0:	4811      	ldr	r0, [pc, #68]	; (8000a18 <DDS_Reg_Update+0x208>)
 80009d2:	f009 f97b 	bl	8009ccc <iprintf>
	for (int i = 0; i < 23; i++) {
 80009d6:	693b      	ldr	r3, [r7, #16]
 80009d8:	3301      	adds	r3, #1
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]
 80009de:	2b16      	cmp	r3, #22
 80009e0:	dde1      	ble.n	80009a6 <DDS_Reg_Update+0x196>
	    }
}
 80009e2:	bf00      	nop
 80009e4:	bf00      	nop
 80009e6:	3718      	adds	r7, #24
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	f3af 8000 	nop.w
 80009f0:	01204118 	.word	0x01204118
 80009f4:	00000000 	.word	0x00000000
 80009f8:	24000354 	.word	0x24000354
 80009fc:	24000360 	.word	0x24000360
 8000a00:	24000370 	.word	0x24000370
 8000a04:	00800302 	.word	0x00800302
 8000a08:	01000820 	.word	0x01000820
 8000a0c:	0001fffc 	.word	0x0001fffc
 8000a10:	0800abdc 	.word	0x0800abdc
 8000a14:	0800abf4 	.word	0x0800abf4
 8000a18:	0800ac00 	.word	0x0800ac00

08000a1c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
    static uint8_t index = 0;

    if (huart->Instance == USART3) {
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a17      	ldr	r2, [pc, #92]	; (8000a88 <HAL_UART_RxCpltCallback+0x6c>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d128      	bne.n	8000a80 <HAL_UART_RxCpltCallback+0x64>
        if (rx_buffer[0] == '\n' || rx_buffer[0] == '\r') {  // Fin de commande
 8000a2e:	4b17      	ldr	r3, [pc, #92]	; (8000a8c <HAL_UART_RxCpltCallback+0x70>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	2b0a      	cmp	r3, #10
 8000a34:	d003      	beq.n	8000a3e <HAL_UART_RxCpltCallback+0x22>
 8000a36:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <HAL_UART_RxCpltCallback+0x70>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b0d      	cmp	r3, #13
 8000a3c:	d10c      	bne.n	8000a58 <HAL_UART_RxCpltCallback+0x3c>
            command_buffer[index] = '\0';
 8000a3e:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <HAL_UART_RxCpltCallback+0x74>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	461a      	mov	r2, r3
 8000a44:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <HAL_UART_RxCpltCallback+0x78>)
 8000a46:	2100      	movs	r1, #0
 8000a48:	5499      	strb	r1, [r3, r2]
            index = 0;
 8000a4a:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <HAL_UART_RxCpltCallback+0x74>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	701a      	strb	r2, [r3, #0]
            command_ready = 1;
 8000a50:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <HAL_UART_RxCpltCallback+0x7c>)
 8000a52:	2201      	movs	r2, #1
 8000a54:	701a      	strb	r2, [r3, #0]
 8000a56:	e00e      	b.n	8000a76 <HAL_UART_RxCpltCallback+0x5a>
        } else if (index < sizeof(command_buffer) - 1) {
 8000a58:	4b0d      	ldr	r3, [pc, #52]	; (8000a90 <HAL_UART_RxCpltCallback+0x74>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2b0a      	cmp	r3, #10
 8000a5e:	d80a      	bhi.n	8000a76 <HAL_UART_RxCpltCallback+0x5a>
            command_buffer[index++] = rx_buffer[0];
 8000a60:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <HAL_UART_RxCpltCallback+0x74>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	1c5a      	adds	r2, r3, #1
 8000a66:	b2d1      	uxtb	r1, r2
 8000a68:	4a09      	ldr	r2, [pc, #36]	; (8000a90 <HAL_UART_RxCpltCallback+0x74>)
 8000a6a:	7011      	strb	r1, [r2, #0]
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	4b07      	ldr	r3, [pc, #28]	; (8000a8c <HAL_UART_RxCpltCallback+0x70>)
 8000a70:	7819      	ldrb	r1, [r3, #0]
 8000a72:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <HAL_UART_RxCpltCallback+0x78>)
 8000a74:	5499      	strb	r1, [r3, r2]
        }

        // Relance la réception
        HAL_UART_Receive_IT(&huart3, (uint8_t *)rx_buffer, 1);
 8000a76:	2201      	movs	r2, #1
 8000a78:	4904      	ldr	r1, [pc, #16]	; (8000a8c <HAL_UART_RxCpltCallback+0x70>)
 8000a7a:	4808      	ldr	r0, [pc, #32]	; (8000a9c <HAL_UART_RxCpltCallback+0x80>)
 8000a7c:	f006 fb80 	bl	8007180 <HAL_UART_Receive_IT>
    }
}
 8000a80:	bf00      	nop
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40004800 	.word	0x40004800
 8000a8c:	24000350 	.word	0x24000350
 8000a90:	24000428 	.word	0x24000428
 8000a94:	24000354 	.word	0x24000354
 8000a98:	24000368 	.word	0x24000368
 8000a9c:	240002bc 	.word	0x240002bc

08000aa0 <UART_SendString>:

void UART_SendString(char *message) {
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f7ff fc31 	bl	8000310 <strlen>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	b29a      	uxth	r2, r3
 8000ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab6:	6879      	ldr	r1, [r7, #4]
 8000ab8:	4803      	ldr	r0, [pc, #12]	; (8000ac8 <UART_SendString+0x28>)
 8000aba:	f006 fad2 	bl	8007062 <HAL_UART_Transmit>
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	240002bc 	.word	0x240002bc

08000acc <processCommand>:

void processCommand(void) {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0

	if (command_buffer[0] == '1' || command_buffer[0] == '2' || command_buffer[0] == '3'){
 8000ad0:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <processCommand+0x58>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2b31      	cmp	r3, #49	; 0x31
 8000ad6:	d007      	beq.n	8000ae8 <processCommand+0x1c>
 8000ad8:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <processCommand+0x58>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2b32      	cmp	r3, #50	; 0x32
 8000ade:	d003      	beq.n	8000ae8 <processCommand+0x1c>
 8000ae0:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <processCommand+0x58>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b33      	cmp	r3, #51	; 0x33
 8000ae6:	d118      	bne.n	8000b1a <processCommand+0x4e>
        // Effectuer l'action correspondante
        switch (command_buffer[0]) {
 8000ae8:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <processCommand+0x58>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	2b33      	cmp	r3, #51	; 0x33
 8000aee:	d00c      	beq.n	8000b0a <processCommand+0x3e>
 8000af0:	2b33      	cmp	r3, #51	; 0x33
 8000af2:	dc0d      	bgt.n	8000b10 <processCommand+0x44>
 8000af4:	2b31      	cmp	r3, #49	; 0x31
 8000af6:	d002      	beq.n	8000afe <processCommand+0x32>
 8000af8:	2b32      	cmp	r3, #50	; 0x32
 8000afa:	d003      	beq.n	8000b04 <processCommand+0x38>
 8000afc:	e008      	b.n	8000b10 <processCommand+0x44>
            case '1': AD9910_Reset(); break;
 8000afe:	f000 fdb5 	bl	800166c <AD9910_Reset>
 8000b02:	e009      	b.n	8000b18 <processCommand+0x4c>
            case '2': DDS_Test(); break;
 8000b04:	f7ff fe40 	bl	8000788 <DDS_Test>
 8000b08:	e006      	b.n	8000b18 <processCommand+0x4c>
            case '3': DDS_Reg_Update();break;
 8000b0a:	f7ff fe81 	bl	8000810 <DDS_Reg_Update>
 8000b0e:	e003      	b.n	8000b18 <processCommand+0x4c>
            default:
                UART_SendString("IO invalide\r\n");
 8000b10:	4805      	ldr	r0, [pc, #20]	; (8000b28 <processCommand+0x5c>)
 8000b12:	f7ff ffc5 	bl	8000aa0 <UART_SendString>
                return;
 8000b16:	e004      	b.n	8000b22 <processCommand+0x56>
        switch (command_buffer[0]) {
 8000b18:	e003      	b.n	8000b22 <processCommand+0x56>
        }
	} else
        {
        	printf("Commande invalide\r\n");
 8000b1a:	4804      	ldr	r0, [pc, #16]	; (8000b2c <processCommand+0x60>)
 8000b1c:	f009 f93c 	bl	8009d98 <puts>
        	return;
 8000b20:	bf00      	nop
        }

        // Confirmation après exécution

}
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	24000354 	.word	0x24000354
 8000b28:	0800ac28 	.word	0x0800ac28
 8000b2c:	0800ac38 	.word	0x0800ac38

08000b30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b34:	f001 f87a 	bl	8001c2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b38:	f000 f828 	bl	8000b8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b3c:	f000 f98c 	bl	8000e58 <MX_GPIO_Init>
  MX_ETH_Init();
 8000b40:	f000 f894 	bl	8000c6c <MX_ETH_Init>
  MX_SPI1_Init();
 8000b44:	f000 f8de 	bl	8000d04 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8000b48:	f000 f932 	bl	8000db0 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000b4c:	f000 f97c 	bl	8000e48 <MX_USB_OTG_HS_USB_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, (uint8_t *)rx_buffer, 1);
 8000b50:	2201      	movs	r2, #1
 8000b52:	490a      	ldr	r1, [pc, #40]	; (8000b7c <main+0x4c>)
 8000b54:	480a      	ldr	r0, [pc, #40]	; (8000b80 <main+0x50>)
 8000b56:	f006 fb13 	bl	8007180 <HAL_UART_Receive_IT>
  AD9910_Reset();
 8000b5a:	f000 fd87 	bl	800166c <AD9910_Reset>
  UART_SendString("Programme de test. Entrez une commande.\r\n");
 8000b5e:	4809      	ldr	r0, [pc, #36]	; (8000b84 <main+0x54>)
 8000b60:	f7ff ff9e 	bl	8000aa0 <UART_SendString>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (command_ready) {
 8000b64:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <main+0x58>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d0fa      	beq.n	8000b64 <main+0x34>
	             command_ready = 0;
 8000b6e:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <main+0x58>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	701a      	strb	r2, [r3, #0]
	             processCommand();
 8000b74:	f7ff ffaa 	bl	8000acc <processCommand>
	  if (command_ready) {
 8000b78:	e7f4      	b.n	8000b64 <main+0x34>
 8000b7a:	bf00      	nop
 8000b7c:	24000350 	.word	0x24000350
 8000b80:	240002bc 	.word	0x240002bc
 8000b84:	0800ac4c 	.word	0x0800ac4c
 8000b88:	24000368 	.word	0x24000368

08000b8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b09c      	sub	sp, #112	; 0x70
 8000b90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b96:	224c      	movs	r2, #76	; 0x4c
 8000b98:	2100      	movs	r1, #0
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f009 f9dc 	bl	8009f58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba0:	1d3b      	adds	r3, r7, #4
 8000ba2:	2220      	movs	r2, #32
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f009 f9d6 	bl	8009f58 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000bac:	2002      	movs	r0, #2
 8000bae:	f002 fd71 	bl	8003694 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	603b      	str	r3, [r7, #0]
 8000bb6:	4b2c      	ldr	r3, [pc, #176]	; (8000c68 <SystemClock_Config+0xdc>)
 8000bb8:	699b      	ldr	r3, [r3, #24]
 8000bba:	4a2b      	ldr	r2, [pc, #172]	; (8000c68 <SystemClock_Config+0xdc>)
 8000bbc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000bc0:	6193      	str	r3, [r2, #24]
 8000bc2:	4b29      	ldr	r3, [pc, #164]	; (8000c68 <SystemClock_Config+0xdc>)
 8000bc4:	699b      	ldr	r3, [r3, #24]
 8000bc6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bca:	603b      	str	r3, [r7, #0]
 8000bcc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000bce:	bf00      	nop
 8000bd0:	4b25      	ldr	r3, [pc, #148]	; (8000c68 <SystemClock_Config+0xdc>)
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000bd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bdc:	d1f8      	bne.n	8000bd0 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000bde:	2321      	movs	r3, #33	; 0x21
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000be2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000be6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000be8:	2301      	movs	r3, #1
 8000bea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bec:	2302      	movs	r3, #2
 8000bee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000bf4:	2304      	movs	r3, #4
 8000bf6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000bf8:	f240 1313 	movw	r3, #275	; 0x113
 8000bfc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c02:	2304      	movs	r3, #4
 8000c04:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c06:	2302      	movs	r3, #2
 8000c08:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000c0a:	2304      	movs	r3, #4
 8000c0c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f002 fd74 	bl	8003708 <HAL_RCC_OscConfig>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000c26:	f000 fa39 	bl	800109c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c2a:	233f      	movs	r3, #63	; 0x3f
 8000c2c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c2e:	2303      	movs	r3, #3
 8000c30:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c32:	2300      	movs	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c36:	2308      	movs	r3, #8
 8000c38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c3a:	2340      	movs	r3, #64	; 0x40
 8000c3c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c3e:	2340      	movs	r3, #64	; 0x40
 8000c40:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c46:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c48:	2340      	movs	r3, #64	; 0x40
 8000c4a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c4c:	1d3b      	adds	r3, r7, #4
 8000c4e:	2103      	movs	r1, #3
 8000c50:	4618      	mov	r0, r3
 8000c52:	f003 f933 	bl	8003ebc <HAL_RCC_ClockConfig>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000c5c:	f000 fa1e 	bl	800109c <Error_Handler>
  }
}
 8000c60:	bf00      	nop
 8000c62:	3770      	adds	r7, #112	; 0x70
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	58024800 	.word	0x58024800

08000c6c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000c70:	4b1e      	ldr	r3, [pc, #120]	; (8000cec <MX_ETH_Init+0x80>)
 8000c72:	4a1f      	ldr	r2, [pc, #124]	; (8000cf0 <MX_ETH_Init+0x84>)
 8000c74:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000c76:	4b1f      	ldr	r3, [pc, #124]	; (8000cf4 <MX_ETH_Init+0x88>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000c7c:	4b1d      	ldr	r3, [pc, #116]	; (8000cf4 <MX_ETH_Init+0x88>)
 8000c7e:	2280      	movs	r2, #128	; 0x80
 8000c80:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000c82:	4b1c      	ldr	r3, [pc, #112]	; (8000cf4 <MX_ETH_Init+0x88>)
 8000c84:	22e1      	movs	r2, #225	; 0xe1
 8000c86:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000c88:	4b1a      	ldr	r3, [pc, #104]	; (8000cf4 <MX_ETH_Init+0x88>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000c8e:	4b19      	ldr	r3, [pc, #100]	; (8000cf4 <MX_ETH_Init+0x88>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000c94:	4b17      	ldr	r3, [pc, #92]	; (8000cf4 <MX_ETH_Init+0x88>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000c9a:	4b14      	ldr	r3, [pc, #80]	; (8000cec <MX_ETH_Init+0x80>)
 8000c9c:	4a15      	ldr	r2, [pc, #84]	; (8000cf4 <MX_ETH_Init+0x88>)
 8000c9e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000ca0:	4b12      	ldr	r3, [pc, #72]	; (8000cec <MX_ETH_Init+0x80>)
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000ca6:	4b11      	ldr	r3, [pc, #68]	; (8000cec <MX_ETH_Init+0x80>)
 8000ca8:	4a13      	ldr	r2, [pc, #76]	; (8000cf8 <MX_ETH_Init+0x8c>)
 8000caa:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000cac:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <MX_ETH_Init+0x80>)
 8000cae:	4a13      	ldr	r2, [pc, #76]	; (8000cfc <MX_ETH_Init+0x90>)
 8000cb0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <MX_ETH_Init+0x80>)
 8000cb4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000cb8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000cba:	480c      	ldr	r0, [pc, #48]	; (8000cec <MX_ETH_Init+0x80>)
 8000cbc:	f001 fef4 	bl	8002aa8 <HAL_ETH_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000cc6:	f000 f9e9 	bl	800109c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000cca:	2238      	movs	r2, #56	; 0x38
 8000ccc:	2100      	movs	r1, #0
 8000cce:	480c      	ldr	r0, [pc, #48]	; (8000d00 <MX_ETH_Init+0x94>)
 8000cd0:	f009 f942 	bl	8009f58 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000cd4:	4b0a      	ldr	r3, [pc, #40]	; (8000d00 <MX_ETH_Init+0x94>)
 8000cd6:	2221      	movs	r2, #33	; 0x21
 8000cd8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000cda:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <MX_ETH_Init+0x94>)
 8000cdc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000ce0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000ce2:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <MX_ETH_Init+0x94>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000ce8:	bf00      	nop
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	24000184 	.word	0x24000184
 8000cf0:	40028000 	.word	0x40028000
 8000cf4:	2400042c 	.word	0x2400042c
 8000cf8:	240000cc 	.word	0x240000cc
 8000cfc:	2400006c 	.word	0x2400006c
 8000d00:	2400014c 	.word	0x2400014c

08000d04 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d08:	4b27      	ldr	r3, [pc, #156]	; (8000da8 <MX_SPI1_Init+0xa4>)
 8000d0a:	4a28      	ldr	r2, [pc, #160]	; (8000dac <MX_SPI1_Init+0xa8>)
 8000d0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d0e:	4b26      	ldr	r3, [pc, #152]	; (8000da8 <MX_SPI1_Init+0xa4>)
 8000d10:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000d14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d16:	4b24      	ldr	r3, [pc, #144]	; (8000da8 <MX_SPI1_Init+0xa4>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d1c:	4b22      	ldr	r3, [pc, #136]	; (8000da8 <MX_SPI1_Init+0xa4>)
 8000d1e:	2207      	movs	r2, #7
 8000d20:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d22:	4b21      	ldr	r3, [pc, #132]	; (8000da8 <MX_SPI1_Init+0xa4>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d28:	4b1f      	ldr	r3, [pc, #124]	; (8000da8 <MX_SPI1_Init+0xa4>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d2e:	4b1e      	ldr	r3, [pc, #120]	; (8000da8 <MX_SPI1_Init+0xa4>)
 8000d30:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000d34:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000d36:	4b1c      	ldr	r3, [pc, #112]	; (8000da8 <MX_SPI1_Init+0xa4>)
 8000d38:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8000d3c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d3e:	4b1a      	ldr	r3, [pc, #104]	; (8000da8 <MX_SPI1_Init+0xa4>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d44:	4b18      	ldr	r3, [pc, #96]	; (8000da8 <MX_SPI1_Init+0xa4>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d4a:	4b17      	ldr	r3, [pc, #92]	; (8000da8 <MX_SPI1_Init+0xa4>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000d50:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <MX_SPI1_Init+0xa4>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d56:	4b14      	ldr	r3, [pc, #80]	; (8000da8 <MX_SPI1_Init+0xa4>)
 8000d58:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d5c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d5e:	4b12      	ldr	r3, [pc, #72]	; (8000da8 <MX_SPI1_Init+0xa4>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d64:	4b10      	ldr	r3, [pc, #64]	; (8000da8 <MX_SPI1_Init+0xa4>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d6a:	4b0f      	ldr	r3, [pc, #60]	; (8000da8 <MX_SPI1_Init+0xa4>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d70:	4b0d      	ldr	r3, [pc, #52]	; (8000da8 <MX_SPI1_Init+0xa4>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d76:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <MX_SPI1_Init+0xa4>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d7c:	4b0a      	ldr	r3, [pc, #40]	; (8000da8 <MX_SPI1_Init+0xa4>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d82:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <MX_SPI1_Init+0xa4>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d88:	4b07      	ldr	r3, [pc, #28]	; (8000da8 <MX_SPI1_Init+0xa4>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d8e:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <MX_SPI1_Init+0xa4>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d94:	4804      	ldr	r0, [pc, #16]	; (8000da8 <MX_SPI1_Init+0xa4>)
 8000d96:	f005 f9df 	bl	8006158 <HAL_SPI_Init>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000da0:	f000 f97c 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	24000234 	.word	0x24000234
 8000dac:	40013000 	.word	0x40013000

08000db0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000db4:	4b22      	ldr	r3, [pc, #136]	; (8000e40 <MX_USART3_UART_Init+0x90>)
 8000db6:	4a23      	ldr	r2, [pc, #140]	; (8000e44 <MX_USART3_UART_Init+0x94>)
 8000db8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000dba:	4b21      	ldr	r3, [pc, #132]	; (8000e40 <MX_USART3_UART_Init+0x90>)
 8000dbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dc0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dc2:	4b1f      	ldr	r3, [pc, #124]	; (8000e40 <MX_USART3_UART_Init+0x90>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000dc8:	4b1d      	ldr	r3, [pc, #116]	; (8000e40 <MX_USART3_UART_Init+0x90>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000dce:	4b1c      	ldr	r3, [pc, #112]	; (8000e40 <MX_USART3_UART_Init+0x90>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000dd4:	4b1a      	ldr	r3, [pc, #104]	; (8000e40 <MX_USART3_UART_Init+0x90>)
 8000dd6:	220c      	movs	r2, #12
 8000dd8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dda:	4b19      	ldr	r3, [pc, #100]	; (8000e40 <MX_USART3_UART_Init+0x90>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000de0:	4b17      	ldr	r3, [pc, #92]	; (8000e40 <MX_USART3_UART_Init+0x90>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000de6:	4b16      	ldr	r3, [pc, #88]	; (8000e40 <MX_USART3_UART_Init+0x90>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000dec:	4b14      	ldr	r3, [pc, #80]	; (8000e40 <MX_USART3_UART_Init+0x90>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000df2:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <MX_USART3_UART_Init+0x90>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000df8:	4811      	ldr	r0, [pc, #68]	; (8000e40 <MX_USART3_UART_Init+0x90>)
 8000dfa:	f006 f8e2 	bl	8006fc2 <HAL_UART_Init>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000e04:	f000 f94a 	bl	800109c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e08:	2100      	movs	r1, #0
 8000e0a:	480d      	ldr	r0, [pc, #52]	; (8000e40 <MX_USART3_UART_Init+0x90>)
 8000e0c:	f008 fd41 	bl	8009892 <HAL_UARTEx_SetTxFifoThreshold>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000e16:	f000 f941 	bl	800109c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	4808      	ldr	r0, [pc, #32]	; (8000e40 <MX_USART3_UART_Init+0x90>)
 8000e1e:	f008 fd76 	bl	800990e <HAL_UARTEx_SetRxFifoThreshold>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000e28:	f000 f938 	bl	800109c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000e2c:	4804      	ldr	r0, [pc, #16]	; (8000e40 <MX_USART3_UART_Init+0x90>)
 8000e2e:	f008 fcf7 	bl	8009820 <HAL_UARTEx_DisableFifoMode>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000e38:	f000 f930 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e3c:	bf00      	nop
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	240002bc 	.word	0x240002bc
 8000e44:	40004800 	.word	0x40004800

08000e48 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
	...

08000e58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08e      	sub	sp, #56	; 0x38
 8000e5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
 8000e6a:	60da      	str	r2, [r3, #12]
 8000e6c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e6e:	4b83      	ldr	r3, [pc, #524]	; (800107c <MX_GPIO_Init+0x224>)
 8000e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e74:	4a81      	ldr	r2, [pc, #516]	; (800107c <MX_GPIO_Init+0x224>)
 8000e76:	f043 0304 	orr.w	r3, r3, #4
 8000e7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e7e:	4b7f      	ldr	r3, [pc, #508]	; (800107c <MX_GPIO_Init+0x224>)
 8000e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e84:	f003 0304 	and.w	r3, r3, #4
 8000e88:	623b      	str	r3, [r7, #32]
 8000e8a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e8c:	4b7b      	ldr	r3, [pc, #492]	; (800107c <MX_GPIO_Init+0x224>)
 8000e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e92:	4a7a      	ldr	r2, [pc, #488]	; (800107c <MX_GPIO_Init+0x224>)
 8000e94:	f043 0320 	orr.w	r3, r3, #32
 8000e98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e9c:	4b77      	ldr	r3, [pc, #476]	; (800107c <MX_GPIO_Init+0x224>)
 8000e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea2:	f003 0320 	and.w	r3, r3, #32
 8000ea6:	61fb      	str	r3, [r7, #28]
 8000ea8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eaa:	4b74      	ldr	r3, [pc, #464]	; (800107c <MX_GPIO_Init+0x224>)
 8000eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb0:	4a72      	ldr	r2, [pc, #456]	; (800107c <MX_GPIO_Init+0x224>)
 8000eb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eba:	4b70      	ldr	r3, [pc, #448]	; (800107c <MX_GPIO_Init+0x224>)
 8000ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ec4:	61bb      	str	r3, [r7, #24]
 8000ec6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec8:	4b6c      	ldr	r3, [pc, #432]	; (800107c <MX_GPIO_Init+0x224>)
 8000eca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ece:	4a6b      	ldr	r2, [pc, #428]	; (800107c <MX_GPIO_Init+0x224>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ed8:	4b68      	ldr	r3, [pc, #416]	; (800107c <MX_GPIO_Init+0x224>)
 8000eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	617b      	str	r3, [r7, #20]
 8000ee4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee6:	4b65      	ldr	r3, [pc, #404]	; (800107c <MX_GPIO_Init+0x224>)
 8000ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eec:	4a63      	ldr	r2, [pc, #396]	; (800107c <MX_GPIO_Init+0x224>)
 8000eee:	f043 0302 	orr.w	r3, r3, #2
 8000ef2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ef6:	4b61      	ldr	r3, [pc, #388]	; (800107c <MX_GPIO_Init+0x224>)
 8000ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000efc:	f003 0302 	and.w	r3, r3, #2
 8000f00:	613b      	str	r3, [r7, #16]
 8000f02:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f04:	4b5d      	ldr	r3, [pc, #372]	; (800107c <MX_GPIO_Init+0x224>)
 8000f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f0a:	4a5c      	ldr	r2, [pc, #368]	; (800107c <MX_GPIO_Init+0x224>)
 8000f0c:	f043 0308 	orr.w	r3, r3, #8
 8000f10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f14:	4b59      	ldr	r3, [pc, #356]	; (800107c <MX_GPIO_Init+0x224>)
 8000f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f1a:	f003 0308 	and.w	r3, r3, #8
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f22:	4b56      	ldr	r3, [pc, #344]	; (800107c <MX_GPIO_Init+0x224>)
 8000f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f28:	4a54      	ldr	r2, [pc, #336]	; (800107c <MX_GPIO_Init+0x224>)
 8000f2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f32:	4b52      	ldr	r3, [pc, #328]	; (800107c <MX_GPIO_Init+0x224>)
 8000f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f3c:	60bb      	str	r3, [r7, #8]
 8000f3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f40:	4b4e      	ldr	r3, [pc, #312]	; (800107c <MX_GPIO_Init+0x224>)
 8000f42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f46:	4a4d      	ldr	r2, [pc, #308]	; (800107c <MX_GPIO_Init+0x224>)
 8000f48:	f043 0310 	orr.w	r3, r3, #16
 8000f4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f50:	4b4a      	ldr	r3, [pc, #296]	; (800107c <MX_GPIO_Init+0x224>)
 8000f52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f56:	f003 0310 	and.w	r3, r3, #16
 8000f5a:	607b      	str	r3, [r7, #4]
 8000f5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DDS_IO_Update_GPIO_Port, DDS_IO_Update_Pin, GPIO_PIN_RESET);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f64:	4846      	ldr	r0, [pc, #280]	; (8001080 <MX_GPIO_Init+0x228>)
 8000f66:	f002 fb7b 	bl	8003660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|DDS_CSn_Pin|DDS_Reset_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f244 0107 	movw	r1, #16391	; 0x4007
 8000f70:	4844      	ldr	r0, [pc, #272]	; (8001084 <MX_GPIO_Init+0x22c>)
 8000f72:	f002 fb75 	bl	8003660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f7c:	4842      	ldr	r0, [pc, #264]	; (8001088 <MX_GPIO_Init+0x230>)
 8000f7e:	f002 fb6f 	bl	8003660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2102      	movs	r1, #2
 8000f86:	4841      	ldr	r0, [pc, #260]	; (800108c <MX_GPIO_Init+0x234>)
 8000f88:	f002 fb6a 	bl	8003660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f92:	2300      	movs	r3, #0
 8000f94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	483b      	ldr	r0, [pc, #236]	; (8001090 <MX_GPIO_Init+0x238>)
 8000fa2:	f002 f9b5 	bl	8003310 <HAL_GPIO_Init>

  /*Configure GPIO pin : DDS_IO_Update_Pin */
  GPIO_InitStruct.Pin = DDS_IO_Update_Pin;
 8000fa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000faa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fac:	2301      	movs	r3, #1
 8000fae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DDS_IO_Update_GPIO_Port, &GPIO_InitStruct);
 8000fb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4830      	ldr	r0, [pc, #192]	; (8001080 <MX_GPIO_Init+0x228>)
 8000fc0:	f002 f9a6 	bl	8003310 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin DDS_CSn_Pin DDS_Reset_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|DDS_CSn_Pin|DDS_Reset_Pin|LED_RED_Pin;
 8000fc4:	f244 0307 	movw	r3, #16391	; 0x4007
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4829      	ldr	r0, [pc, #164]	; (8001084 <MX_GPIO_Init+0x22c>)
 8000fde:	f002 f997 	bl	8003310 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000fe2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000ff4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4823      	ldr	r0, [pc, #140]	; (8001088 <MX_GPIO_Init+0x230>)
 8000ffc:	f002 f988 	bl	8003310 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8001000:	2380      	movs	r3, #128	; 0x80
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001004:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001008:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800100e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001012:	4619      	mov	r1, r3
 8001014:	481f      	ldr	r0, [pc, #124]	; (8001094 <MX_GPIO_Init+0x23c>)
 8001016:	f002 f97b 	bl	8003310 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 800101a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001020:	2300      	movs	r3, #0
 8001022:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001028:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800102c:	4619      	mov	r1, r3
 800102e:	481a      	ldr	r0, [pc, #104]	; (8001098 <MX_GPIO_Init+0x240>)
 8001030:	f002 f96e 	bl	8003310 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001034:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103a:	2302      	movs	r3, #2
 800103c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001042:	2300      	movs	r3, #0
 8001044:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001046:	230a      	movs	r3, #10
 8001048:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 800104a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800104e:	4619      	mov	r1, r3
 8001050:	4811      	ldr	r0, [pc, #68]	; (8001098 <MX_GPIO_Init+0x240>)
 8001052:	f002 f95d 	bl	8003310 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8001056:	2302      	movs	r3, #2
 8001058:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105a:	2301      	movs	r3, #1
 800105c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001062:	2300      	movs	r3, #0
 8001064:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8001066:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800106a:	4619      	mov	r1, r3
 800106c:	4807      	ldr	r0, [pc, #28]	; (800108c <MX_GPIO_Init+0x234>)
 800106e:	f002 f94f 	bl	8003310 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001072:	bf00      	nop
 8001074:	3738      	adds	r7, #56	; 0x38
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	58024400 	.word	0x58024400
 8001080:	58021400 	.word	0x58021400
 8001084:	58020400 	.word	0x58020400
 8001088:	58020c00 	.word	0x58020c00
 800108c:	58021000 	.word	0x58021000
 8001090:	58020800 	.word	0x58020800
 8001094:	58021800 	.word	0x58021800
 8001098:	58020000 	.word	0x58020000

0800109c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a0:	b672      	cpsid	i
}
 80010a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <Error_Handler+0x8>
	...

080010a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ae:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <HAL_MspInit+0x30>)
 80010b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010b4:	4a08      	ldr	r2, [pc, #32]	; (80010d8 <HAL_MspInit+0x30>)
 80010b6:	f043 0302 	orr.w	r3, r3, #2
 80010ba:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <HAL_MspInit+0x30>)
 80010c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010c4:	f003 0302 	and.w	r3, r3, #2
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	58024400 	.word	0x58024400

080010dc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08e      	sub	sp, #56	; 0x38
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a59      	ldr	r2, [pc, #356]	; (8001260 <HAL_ETH_MspInit+0x184>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	f040 80ab 	bne.w	8001256 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001100:	4b58      	ldr	r3, [pc, #352]	; (8001264 <HAL_ETH_MspInit+0x188>)
 8001102:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001106:	4a57      	ldr	r2, [pc, #348]	; (8001264 <HAL_ETH_MspInit+0x188>)
 8001108:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800110c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001110:	4b54      	ldr	r3, [pc, #336]	; (8001264 <HAL_ETH_MspInit+0x188>)
 8001112:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001116:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800111a:	623b      	str	r3, [r7, #32]
 800111c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800111e:	4b51      	ldr	r3, [pc, #324]	; (8001264 <HAL_ETH_MspInit+0x188>)
 8001120:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001124:	4a4f      	ldr	r2, [pc, #316]	; (8001264 <HAL_ETH_MspInit+0x188>)
 8001126:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800112a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800112e:	4b4d      	ldr	r3, [pc, #308]	; (8001264 <HAL_ETH_MspInit+0x188>)
 8001130:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001134:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001138:	61fb      	str	r3, [r7, #28]
 800113a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800113c:	4b49      	ldr	r3, [pc, #292]	; (8001264 <HAL_ETH_MspInit+0x188>)
 800113e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001142:	4a48      	ldr	r2, [pc, #288]	; (8001264 <HAL_ETH_MspInit+0x188>)
 8001144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001148:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800114c:	4b45      	ldr	r3, [pc, #276]	; (8001264 <HAL_ETH_MspInit+0x188>)
 800114e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001156:	61bb      	str	r3, [r7, #24]
 8001158:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800115a:	4b42      	ldr	r3, [pc, #264]	; (8001264 <HAL_ETH_MspInit+0x188>)
 800115c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001160:	4a40      	ldr	r2, [pc, #256]	; (8001264 <HAL_ETH_MspInit+0x188>)
 8001162:	f043 0304 	orr.w	r3, r3, #4
 8001166:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800116a:	4b3e      	ldr	r3, [pc, #248]	; (8001264 <HAL_ETH_MspInit+0x188>)
 800116c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001170:	f003 0304 	and.w	r3, r3, #4
 8001174:	617b      	str	r3, [r7, #20]
 8001176:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001178:	4b3a      	ldr	r3, [pc, #232]	; (8001264 <HAL_ETH_MspInit+0x188>)
 800117a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800117e:	4a39      	ldr	r2, [pc, #228]	; (8001264 <HAL_ETH_MspInit+0x188>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001188:	4b36      	ldr	r3, [pc, #216]	; (8001264 <HAL_ETH_MspInit+0x188>)
 800118a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	613b      	str	r3, [r7, #16]
 8001194:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001196:	4b33      	ldr	r3, [pc, #204]	; (8001264 <HAL_ETH_MspInit+0x188>)
 8001198:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800119c:	4a31      	ldr	r2, [pc, #196]	; (8001264 <HAL_ETH_MspInit+0x188>)
 800119e:	f043 0302 	orr.w	r3, r3, #2
 80011a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011a6:	4b2f      	ldr	r3, [pc, #188]	; (8001264 <HAL_ETH_MspInit+0x188>)
 80011a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ac:	f003 0302 	and.w	r3, r3, #2
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80011b4:	4b2b      	ldr	r3, [pc, #172]	; (8001264 <HAL_ETH_MspInit+0x188>)
 80011b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ba:	4a2a      	ldr	r2, [pc, #168]	; (8001264 <HAL_ETH_MspInit+0x188>)
 80011bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011c4:	4b27      	ldr	r3, [pc, #156]	; (8001264 <HAL_ETH_MspInit+0x188>)
 80011c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011ce:	60bb      	str	r3, [r7, #8]
 80011d0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80011d2:	2332      	movs	r3, #50	; 0x32
 80011d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d6:	2302      	movs	r3, #2
 80011d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011de:	2300      	movs	r3, #0
 80011e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011e2:	230b      	movs	r3, #11
 80011e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ea:	4619      	mov	r1, r3
 80011ec:	481e      	ldr	r0, [pc, #120]	; (8001268 <HAL_ETH_MspInit+0x18c>)
 80011ee:	f002 f88f 	bl	8003310 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80011f2:	2386      	movs	r3, #134	; 0x86
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f6:	2302      	movs	r3, #2
 80011f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fe:	2300      	movs	r3, #0
 8001200:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001202:	230b      	movs	r3, #11
 8001204:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001206:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800120a:	4619      	mov	r1, r3
 800120c:	4817      	ldr	r0, [pc, #92]	; (800126c <HAL_ETH_MspInit+0x190>)
 800120e:	f002 f87f 	bl	8003310 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001212:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001216:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001218:	2302      	movs	r3, #2
 800121a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001220:	2300      	movs	r3, #0
 8001222:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001224:	230b      	movs	r3, #11
 8001226:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001228:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800122c:	4619      	mov	r1, r3
 800122e:	4810      	ldr	r0, [pc, #64]	; (8001270 <HAL_ETH_MspInit+0x194>)
 8001230:	f002 f86e 	bl	8003310 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001234:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001238:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123a:	2302      	movs	r3, #2
 800123c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001242:	2300      	movs	r3, #0
 8001244:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001246:	230b      	movs	r3, #11
 8001248:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800124a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800124e:	4619      	mov	r1, r3
 8001250:	4808      	ldr	r0, [pc, #32]	; (8001274 <HAL_ETH_MspInit+0x198>)
 8001252:	f002 f85d 	bl	8003310 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001256:	bf00      	nop
 8001258:	3738      	adds	r7, #56	; 0x38
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40028000 	.word	0x40028000
 8001264:	58024400 	.word	0x58024400
 8001268:	58020800 	.word	0x58020800
 800126c:	58020000 	.word	0x58020000
 8001270:	58020400 	.word	0x58020400
 8001274:	58021800 	.word	0x58021800

08001278 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b0ba      	sub	sp, #232	; 0xe8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001280:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
 800128e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001290:	f107 0318 	add.w	r3, r7, #24
 8001294:	22b8      	movs	r2, #184	; 0xb8
 8001296:	2100      	movs	r1, #0
 8001298:	4618      	mov	r0, r3
 800129a:	f008 fe5d 	bl	8009f58 <memset>
  if(hspi->Instance==SPI1)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a38      	ldr	r2, [pc, #224]	; (8001384 <HAL_SPI_MspInit+0x10c>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d168      	bne.n	800137a <HAL_SPI_MspInit+0x102>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80012a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012ac:	f04f 0300 	mov.w	r3, #0
 80012b0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012b8:	f107 0318 	add.w	r3, r7, #24
 80012bc:	4618      	mov	r0, r3
 80012be:	f003 f989 	bl	80045d4 <HAL_RCCEx_PeriphCLKConfig>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80012c8:	f7ff fee8 	bl	800109c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012cc:	4b2e      	ldr	r3, [pc, #184]	; (8001388 <HAL_SPI_MspInit+0x110>)
 80012ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80012d2:	4a2d      	ldr	r2, [pc, #180]	; (8001388 <HAL_SPI_MspInit+0x110>)
 80012d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012d8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80012dc:	4b2a      	ldr	r3, [pc, #168]	; (8001388 <HAL_SPI_MspInit+0x110>)
 80012de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80012e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012e6:	617b      	str	r3, [r7, #20]
 80012e8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ea:	4b27      	ldr	r3, [pc, #156]	; (8001388 <HAL_SPI_MspInit+0x110>)
 80012ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012f0:	4a25      	ldr	r2, [pc, #148]	; (8001388 <HAL_SPI_MspInit+0x110>)
 80012f2:	f043 0301 	orr.w	r3, r3, #1
 80012f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012fa:	4b23      	ldr	r3, [pc, #140]	; (8001388 <HAL_SPI_MspInit+0x110>)
 80012fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001300:	f003 0301 	and.w	r3, r3, #1
 8001304:	613b      	str	r3, [r7, #16]
 8001306:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001308:	4b1f      	ldr	r3, [pc, #124]	; (8001388 <HAL_SPI_MspInit+0x110>)
 800130a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800130e:	4a1e      	ldr	r2, [pc, #120]	; (8001388 <HAL_SPI_MspInit+0x110>)
 8001310:	f043 0308 	orr.w	r3, r3, #8
 8001314:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001318:	4b1b      	ldr	r3, [pc, #108]	; (8001388 <HAL_SPI_MspInit+0x110>)
 800131a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800131e:	f003 0308 	and.w	r3, r3, #8
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001326:	2360      	movs	r3, #96	; 0x60
 8001328:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132c:	2302      	movs	r3, #2
 800132e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001338:	2300      	movs	r3, #0
 800133a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800133e:	2305      	movs	r3, #5
 8001340:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001344:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001348:	4619      	mov	r1, r3
 800134a:	4810      	ldr	r0, [pc, #64]	; (800138c <HAL_SPI_MspInit+0x114>)
 800134c:	f001 ffe0 	bl	8003310 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001350:	2380      	movs	r3, #128	; 0x80
 8001352:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001356:	2302      	movs	r3, #2
 8001358:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001362:	2300      	movs	r3, #0
 8001364:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001368:	2305      	movs	r3, #5
 800136a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800136e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001372:	4619      	mov	r1, r3
 8001374:	4806      	ldr	r0, [pc, #24]	; (8001390 <HAL_SPI_MspInit+0x118>)
 8001376:	f001 ffcb 	bl	8003310 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800137a:	bf00      	nop
 800137c:	37e8      	adds	r7, #232	; 0xe8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40013000 	.word	0x40013000
 8001388:	58024400 	.word	0x58024400
 800138c:	58020000 	.word	0x58020000
 8001390:	58020c00 	.word	0x58020c00

08001394 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b0b8      	sub	sp, #224	; 0xe0
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013ac:	f107 0310 	add.w	r3, r7, #16
 80013b0:	22b8      	movs	r2, #184	; 0xb8
 80013b2:	2100      	movs	r1, #0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f008 fdcf 	bl	8009f58 <memset>
  if(huart->Instance==USART3)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a2b      	ldr	r2, [pc, #172]	; (800146c <HAL_UART_MspInit+0xd8>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d14e      	bne.n	8001462 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80013c4:	f04f 0202 	mov.w	r2, #2
 80013c8:	f04f 0300 	mov.w	r3, #0
 80013cc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80013d0:	2300      	movs	r3, #0
 80013d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013d6:	f107 0310 	add.w	r3, r7, #16
 80013da:	4618      	mov	r0, r3
 80013dc:	f003 f8fa 	bl	80045d4 <HAL_RCCEx_PeriphCLKConfig>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80013e6:	f7ff fe59 	bl	800109c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80013ea:	4b21      	ldr	r3, [pc, #132]	; (8001470 <HAL_UART_MspInit+0xdc>)
 80013ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013f0:	4a1f      	ldr	r2, [pc, #124]	; (8001470 <HAL_UART_MspInit+0xdc>)
 80013f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013f6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80013fa:	4b1d      	ldr	r3, [pc, #116]	; (8001470 <HAL_UART_MspInit+0xdc>)
 80013fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001400:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001408:	4b19      	ldr	r3, [pc, #100]	; (8001470 <HAL_UART_MspInit+0xdc>)
 800140a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800140e:	4a18      	ldr	r2, [pc, #96]	; (8001470 <HAL_UART_MspInit+0xdc>)
 8001410:	f043 0308 	orr.w	r3, r3, #8
 8001414:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001418:	4b15      	ldr	r3, [pc, #84]	; (8001470 <HAL_UART_MspInit+0xdc>)
 800141a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800141e:	f003 0308 	and.w	r3, r3, #8
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8001426:	f44f 7340 	mov.w	r3, #768	; 0x300
 800142a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142e:	2302      	movs	r3, #2
 8001430:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143a:	2300      	movs	r3, #0
 800143c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001440:	2307      	movs	r3, #7
 8001442:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001446:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800144a:	4619      	mov	r1, r3
 800144c:	4809      	ldr	r0, [pc, #36]	; (8001474 <HAL_UART_MspInit+0xe0>)
 800144e:	f001 ff5f 	bl	8003310 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001452:	2200      	movs	r2, #0
 8001454:	2100      	movs	r1, #0
 8001456:	2027      	movs	r0, #39	; 0x27
 8001458:	f000 fd8d 	bl	8001f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800145c:	2027      	movs	r0, #39	; 0x27
 800145e:	f000 fda4 	bl	8001faa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001462:	bf00      	nop
 8001464:	37e0      	adds	r7, #224	; 0xe0
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40004800 	.word	0x40004800
 8001470:	58024400 	.word	0x58024400
 8001474:	58020c00 	.word	0x58020c00

08001478 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800147c:	e7fe      	b.n	800147c <NMI_Handler+0x4>

0800147e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001482:	e7fe      	b.n	8001482 <HardFault_Handler+0x4>

08001484 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001488:	e7fe      	b.n	8001488 <MemManage_Handler+0x4>

0800148a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800148e:	e7fe      	b.n	800148e <BusFault_Handler+0x4>

08001490 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001494:	e7fe      	b.n	8001494 <UsageFault_Handler+0x4>

08001496 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr

080014b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014c4:	f000 fc24 	bl	8001d10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014c8:	bf00      	nop
 80014ca:	bd80      	pop	{r7, pc}

080014cc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80014d0:	4802      	ldr	r0, [pc, #8]	; (80014dc <USART3_IRQHandler+0x10>)
 80014d2:	f005 fea1 	bl	8007218 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	240002bc 	.word	0x240002bc

080014e0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	e00a      	b.n	8001508 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014f2:	f3af 8000 	nop.w
 80014f6:	4601      	mov	r1, r0
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	1c5a      	adds	r2, r3, #1
 80014fc:	60ba      	str	r2, [r7, #8]
 80014fe:	b2ca      	uxtb	r2, r1
 8001500:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	3301      	adds	r3, #1
 8001506:	617b      	str	r3, [r7, #20]
 8001508:	697a      	ldr	r2, [r7, #20]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	429a      	cmp	r2, r3
 800150e:	dbf0      	blt.n	80014f2 <_read+0x12>
  }

  return len;
 8001510:	687b      	ldr	r3, [r7, #4]
}
 8001512:	4618      	mov	r0, r3
 8001514:	3718      	adds	r7, #24
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <_close>:
  }
  return len;
}

int _close(int file)
{
 800151a:	b480      	push	{r7}
 800151c:	b083      	sub	sp, #12
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001522:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001526:	4618      	mov	r0, r3
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001532:	b480      	push	{r7}
 8001534:	b083      	sub	sp, #12
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
 800153a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001542:	605a      	str	r2, [r3, #4]
  return 0;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <_isatty>:

int _isatty(int file)
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800155a:	2301      	movs	r3, #1
}
 800155c:	4618      	mov	r0, r3
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3714      	adds	r7, #20
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
	...

08001584 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800158c:	4a14      	ldr	r2, [pc, #80]	; (80015e0 <_sbrk+0x5c>)
 800158e:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <_sbrk+0x60>)
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001598:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <_sbrk+0x64>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d102      	bne.n	80015a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015a0:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <_sbrk+0x64>)
 80015a2:	4a12      	ldr	r2, [pc, #72]	; (80015ec <_sbrk+0x68>)
 80015a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015a6:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <_sbrk+0x64>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4413      	add	r3, r2
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d207      	bcs.n	80015c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015b4:	f008 fd1e 	bl	8009ff4 <__errno>
 80015b8:	4603      	mov	r3, r0
 80015ba:	220c      	movs	r2, #12
 80015bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015be:	f04f 33ff 	mov.w	r3, #4294967295
 80015c2:	e009      	b.n	80015d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015c4:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <_sbrk+0x64>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ca:	4b07      	ldr	r3, [pc, #28]	; (80015e8 <_sbrk+0x64>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4413      	add	r3, r2
 80015d2:	4a05      	ldr	r2, [pc, #20]	; (80015e8 <_sbrk+0x64>)
 80015d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015d6:	68fb      	ldr	r3, [r7, #12]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3718      	adds	r7, #24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	24050000 	.word	0x24050000
 80015e4:	00000400 	.word	0x00000400
 80015e8:	24000434 	.word	0x24000434
 80015ec:	24000588 	.word	0x24000588

080015f0 <AD9910_GetRegSize>:
    // Reset DDS
    AD9910_Reset();
}


uint8_t AD9910_GetRegSize(uint8_t reg_id) {
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	71fb      	strb	r3, [r7, #7]
    // Renvoit la taille du buffer
	switch(reg_id)
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	2b16      	cmp	r3, #22
 80015fe:	bf8c      	ite	hi
 8001600:	2201      	movhi	r2, #1
 8001602:	2200      	movls	r2, #0
 8001604:	b2d2      	uxtb	r2, r2
 8001606:	2a00      	cmp	r2, #0
 8001608:	d123      	bne.n	8001652 <AD9910_GetRegSize+0x62>
 800160a:	2201      	movs	r2, #1
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	4a14      	ldr	r2, [pc, #80]	; (8001664 <AD9910_GetRegSize+0x74>)
 8001612:	401a      	ands	r2, r3
 8001614:	2a00      	cmp	r2, #0
 8001616:	bf14      	ite	ne
 8001618:	2201      	movne	r2, #1
 800161a:	2200      	moveq	r2, #0
 800161c:	b2d2      	uxtb	r2, r2
 800161e:	2a00      	cmp	r2, #0
 8001620:	d115      	bne.n	800164e <AD9910_GetRegSize+0x5e>
 8001622:	4a11      	ldr	r2, [pc, #68]	; (8001668 <AD9910_GetRegSize+0x78>)
 8001624:	401a      	ands	r2, r3
 8001626:	2a00      	cmp	r2, #0
 8001628:	bf14      	ite	ne
 800162a:	2201      	movne	r2, #1
 800162c:	2200      	moveq	r2, #0
 800162e:	b2d2      	uxtb	r2, r2
 8001630:	2a00      	cmp	r2, #0
 8001632:	d10a      	bne.n	800164a <AD9910_GetRegSize+0x5a>
 8001634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001638:	2b00      	cmp	r3, #0
 800163a:	bf14      	ite	ne
 800163c:	2301      	movne	r3, #1
 800163e:	2300      	moveq	r3, #0
 8001640:	b2db      	uxtb	r3, r3
 8001642:	2b00      	cmp	r3, #0
 8001644:	d005      	beq.n	8001652 <AD9910_GetRegSize+0x62>
		{
			case 8:
				return 2;
 8001646:	2302      	movs	r3, #2
 8001648:	e005      	b.n	8001656 <AD9910_GetRegSize+0x66>
			case 7:
			case 9:
			case 0x0A:
			case 0x0D:
			case 0x16:
				return 4;
 800164a:	2304      	movs	r3, #4
 800164c:	e003      	b.n	8001656 <AD9910_GetRegSize+0x66>
			case 0x11:
			case 0x12:
			case 0x13:
			case 0x14:
			case 0x15:
				return 8;
 800164e:	2308      	movs	r3, #8
 8001650:	e001      	b.n	8001656 <AD9910_GetRegSize+0x66>

			default :
	            break;
 8001652:	bf00      	nop
		}

		return 0; // other registers
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	003fd800 	.word	0x003fd800
 8001668:	0040269f 	.word	0x0040269f

0800166c <AD9910_Reset>:

// Fonction de réinitialisation
void AD9910_Reset(void) {
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(AD9910_RESET_PORT, AD9910_RESET_PIN, GPIO_PIN_SET);
 8001670:	2201      	movs	r2, #1
 8001672:	2104      	movs	r1, #4
 8001674:	4806      	ldr	r0, [pc, #24]	; (8001690 <AD9910_Reset+0x24>)
 8001676:	f001 fff3 	bl	8003660 <HAL_GPIO_WritePin>
    HAL_Delay(10); // 10 ms de délai
 800167a:	200a      	movs	r0, #10
 800167c:	f000 fb68 	bl	8001d50 <HAL_Delay>
    HAL_GPIO_WritePin(AD9910_RESET_PORT, AD9910_RESET_PIN, GPIO_PIN_RESET);
 8001680:	2200      	movs	r2, #0
 8001682:	2104      	movs	r1, #4
 8001684:	4802      	ldr	r0, [pc, #8]	; (8001690 <AD9910_Reset+0x24>)
 8001686:	f001 ffeb 	bl	8003660 <HAL_GPIO_WritePin>
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	58020400 	.word	0x58020400

08001694 <AD9910_IOUpdate>:

// Mise à jour des registres
void AD9910_IOUpdate(void) {
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(AD9910_IO_UPDATE_PORT, AD9910_IO_UPDATE_PIN, GPIO_PIN_SET);
 8001698:	2201      	movs	r2, #1
 800169a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800169e:	4807      	ldr	r0, [pc, #28]	; (80016bc <AD9910_IOUpdate+0x28>)
 80016a0:	f001 ffde 	bl	8003660 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80016a4:	200a      	movs	r0, #10
 80016a6:	f000 fb53 	bl	8001d50 <HAL_Delay>
    HAL_GPIO_WritePin(AD9910_IO_UPDATE_PORT, AD9910_IO_UPDATE_PIN, GPIO_PIN_RESET);
 80016aa:	2200      	movs	r2, #0
 80016ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016b0:	4802      	ldr	r0, [pc, #8]	; (80016bc <AD9910_IOUpdate+0x28>)
 80016b2:	f001 ffd5 	bl	8003660 <HAL_GPIO_WritePin>
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	58021400 	.word	0x58021400

080016c0 <AD9910_WriteRegister>:

// Écriture dans un registre de l'AD9910
HAL_StatusTypeDef AD9910_WriteRegister(uint8_t reg_addr, uint64_t data) {
 80016c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016c2:	b08b      	sub	sp, #44	; 0x2c
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4601      	mov	r1, r0
 80016c8:	e9c7 2300 	strd	r2, r3, [r7]
 80016cc:	460b      	mov	r3, r1
 80016ce:	73fb      	strb	r3, [r7, #15]
    uint8_t write_buffer[9] = {0};
 80016d0:	2300      	movs	r3, #0
 80016d2:	617b      	str	r3, [r7, #20]
 80016d4:	f107 0318 	add.w	r3, r7, #24
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	711a      	strb	r2, [r3, #4]
    uint8_t reg_size = AD9910_GetRegSize(reg_addr);
 80016de:	7bfb      	ldrb	r3, [r7, #15]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff ff85 	bl	80015f0 <AD9910_GetRegSize>
 80016e6:	4603      	mov	r3, r0
 80016e8:	77fb      	strb	r3, [r7, #31]

    //write_buffer[0] = reg_addr & 0x7F; // MSB à 0 pour écrire

    write_buffer[0] = 0 | reg_addr;	//Write + Register ID
 80016ea:	7bfb      	ldrb	r3, [r7, #15]
 80016ec:	753b      	strb	r3, [r7, #20]

	int8_t shift = (int8_t)((reg_size-1) * 8);
 80016ee:	7ffb      	ldrb	r3, [r7, #31]
 80016f0:	3b01      	subs	r3, #1
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	00db      	lsls	r3, r3, #3
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for(int i = 1; shift >= 0 ; i++)
 80016fc:	2301      	movs	r3, #1
 80016fe:	623b      	str	r3, [r7, #32]
 8001700:	e028      	b.n	8001754 <AD9910_WriteRegister+0x94>
	{
		if(i < sizeof(write_buffer))
 8001702:	6a3b      	ldr	r3, [r7, #32]
 8001704:	2b08      	cmp	r3, #8
 8001706:	d819      	bhi.n	800173c <AD9910_WriteRegister+0x7c>
		{
			write_buffer[i] = (uint8_t)(data >> shift);
 8001708:	f997 1027 	ldrsb.w	r1, [r7, #39]	; 0x27
 800170c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001710:	f1c1 0620 	rsb	r6, r1, #32
 8001714:	f1a1 0020 	sub.w	r0, r1, #32
 8001718:	fa22 f401 	lsr.w	r4, r2, r1
 800171c:	fa03 f606 	lsl.w	r6, r3, r6
 8001720:	4334      	orrs	r4, r6
 8001722:	fa23 f000 	lsr.w	r0, r3, r0
 8001726:	4304      	orrs	r4, r0
 8001728:	fa23 f501 	lsr.w	r5, r3, r1
 800172c:	b2e1      	uxtb	r1, r4
 800172e:	f107 0214 	add.w	r2, r7, #20
 8001732:	6a3b      	ldr	r3, [r7, #32]
 8001734:	4413      	add	r3, r2
 8001736:	460a      	mov	r2, r1
 8001738:	701a      	strb	r2, [r3, #0]
 800173a:	e002      	b.n	8001742 <AD9910_WriteRegister+0x82>
		}else{
			printf("update_ad9910_reg overflow !");
 800173c:	4815      	ldr	r0, [pc, #84]	; (8001794 <AD9910_WriteRegister+0xd4>)
 800173e:	f008 fac5 	bl	8009ccc <iprintf>
		}
		shift -= 8;
 8001742:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001746:	3b08      	subs	r3, #8
 8001748:	b2db      	uxtb	r3, r3
 800174a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for(int i = 1; shift >= 0 ; i++)
 800174e:	6a3b      	ldr	r3, [r7, #32]
 8001750:	3301      	adds	r3, #1
 8001752:	623b      	str	r3, [r7, #32]
 8001754:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001758:	2b00      	cmp	r3, #0
 800175a:	dad2      	bge.n	8001702 <AD9910_WriteRegister+0x42>
	}

    HAL_GPIO_WritePin(AD9910_CS_PORT, AD9910_CS_PIN, GPIO_PIN_RESET); // Sélection du périphérique
 800175c:	2200      	movs	r2, #0
 800175e:	2102      	movs	r1, #2
 8001760:	480d      	ldr	r0, [pc, #52]	; (8001798 <AD9910_WriteRegister+0xd8>)
 8001762:	f001 ff7d 	bl	8003660 <HAL_GPIO_WritePin>
    HAL_StatusTypeDef status = HAL_SPI_Transmit(&AD9910_SPI_PORT, write_buffer, (reg_size+1), HAL_MAX_DELAY);
 8001766:	7ffb      	ldrb	r3, [r7, #31]
 8001768:	b29b      	uxth	r3, r3
 800176a:	3301      	adds	r3, #1
 800176c:	b29a      	uxth	r2, r3
 800176e:	f107 0114 	add.w	r1, r7, #20
 8001772:	f04f 33ff 	mov.w	r3, #4294967295
 8001776:	4809      	ldr	r0, [pc, #36]	; (800179c <AD9910_WriteRegister+0xdc>)
 8001778:	f004 fe12 	bl	80063a0 <HAL_SPI_Transmit>
 800177c:	4603      	mov	r3, r0
 800177e:	77bb      	strb	r3, [r7, #30]
    HAL_GPIO_WritePin(AD9910_CS_PORT, AD9910_CS_PIN, GPIO_PIN_SET); // Désélection du périphérique
 8001780:	2201      	movs	r2, #1
 8001782:	2102      	movs	r1, #2
 8001784:	4804      	ldr	r0, [pc, #16]	; (8001798 <AD9910_WriteRegister+0xd8>)
 8001786:	f001 ff6b 	bl	8003660 <HAL_GPIO_WritePin>
    return status;
 800178a:	7fbb      	ldrb	r3, [r7, #30]
}
 800178c:	4618      	mov	r0, r3
 800178e:	372c      	adds	r7, #44	; 0x2c
 8001790:	46bd      	mov	sp, r7
 8001792:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001794:	0800ac78 	.word	0x0800ac78
 8001798:	58020400 	.word	0x58020400
 800179c:	24000234 	.word	0x24000234

080017a0 <AD9910_ReadRegister>:

// Lecture dans un registre de l'AD9910
HAL_StatusTypeDef AD9910_ReadRegister(uint8_t reg_addr, uint64_t *data) {
 80017a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017a4:	b0ba      	sub	sp, #232	; 0xe8
 80017a6:	af02      	add	r7, sp, #8
 80017a8:	4603      	mov	r3, r0
 80017aa:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80017ae:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
    uint8_t write_buffer[9] = {0};
 80017b2:	2300      	movs	r3, #0
 80017b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80017b8:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 80017bc:	2300      	movs	r3, #0
 80017be:	6013      	str	r3, [r2, #0]
 80017c0:	7113      	strb	r3, [r2, #4]
    uint8_t read_buffer[9] = {0};
 80017c2:	2300      	movs	r3, #0
 80017c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80017c8:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 80017cc:	2300      	movs	r3, #0
 80017ce:	6013      	str	r3, [r2, #0]
 80017d0:	7113      	strb	r3, [r2, #4]
    uint8_t reg_size = AD9910_GetRegSize(reg_addr);
 80017d2:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff ff0a 	bl	80015f0 <AD9910_GetRegSize>
 80017dc:	4603      	mov	r3, r0
 80017de:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf

    write_buffer[0] = reg_addr | 0x80; // MSB à 1 pour lire
 80017e2:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 80017e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4

    HAL_GPIO_WritePin(AD9910_CS_PORT, AD9910_CS_PIN, GPIO_PIN_RESET); // Sélection du périphérique
 80017f0:	2200      	movs	r2, #0
 80017f2:	2102      	movs	r1, #2
 80017f4:	48b9      	ldr	r0, [pc, #740]	; (8001adc <AD9910_ReadRegister+0x33c>)
 80017f6:	f001 ff33 	bl	8003660 <HAL_GPIO_WritePin>

    HAL_SPI_TransmitReceive(&AD9910_SPI_PORT, write_buffer, read_buffer,(reg_size+1), HAL_MAX_DELAY);
 80017fa:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80017fe:	b29b      	uxth	r3, r3
 8001800:	3301      	adds	r3, #1
 8001802:	b298      	uxth	r0, r3
 8001804:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8001808:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 800180c:	f04f 33ff 	mov.w	r3, #4294967295
 8001810:	9300      	str	r3, [sp, #0]
 8001812:	4603      	mov	r3, r0
 8001814:	48b2      	ldr	r0, [pc, #712]	; (8001ae0 <AD9910_ReadRegister+0x340>)
 8001816:	f004 ffb1 	bl	800677c <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(AD9910_CS_PORT, AD9910_CS_PIN, GPIO_PIN_SET); // Désélection du périphérique
 800181a:	2201      	movs	r2, #1
 800181c:	2102      	movs	r1, #2
 800181e:	48af      	ldr	r0, [pc, #700]	; (8001adc <AD9910_ReadRegister+0x33c>)
 8001820:	f001 ff1e 	bl	8003660 <HAL_GPIO_WritePin>

    *data = 0;  // Initialise la data à 0
 8001824:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8001828:	f04f 0200 	mov.w	r2, #0
 800182c:	f04f 0300 	mov.w	r3, #0
 8001830:	e9c1 2300 	strd	r2, r3, [r1]

       /*for (int i = 0; i < 8; i++) {
           *data |= ((uint64_t)read_buffer[i] << (i * 8));  // Reconstruction en Little Endian
       }*/

    switch (reg_size) {
 8001834:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8001838:	2b08      	cmp	r3, #8
 800183a:	f000 8092 	beq.w	8001962 <AD9910_ReadRegister+0x1c2>
 800183e:	2b08      	cmp	r3, #8
 8001840:	f300 8141 	bgt.w	8001ac6 <AD9910_ReadRegister+0x326>
 8001844:	2b02      	cmp	r3, #2
 8001846:	d002      	beq.n	800184e <AD9910_ReadRegister+0xae>
 8001848:	2b04      	cmp	r3, #4
 800184a:	d027      	beq.n	800189c <AD9910_ReadRegister+0xfc>
 800184c:	e13b      	b.n	8001ac6 <AD9910_ReadRegister+0x326>
                case 2: *data = ((uint64_t)read_buffer[1] << 8) | ((uint64_t)read_buffer[2]); break;
 800184e:	f897 30c9 	ldrb.w	r3, [r7, #201]	; 0xc9
 8001852:	b2db      	uxtb	r3, r3
 8001854:	2200      	movs	r2, #0
 8001856:	461c      	mov	r4, r3
 8001858:	4615      	mov	r5, r2
 800185a:	f04f 0200 	mov.w	r2, #0
 800185e:	f04f 0300 	mov.w	r3, #0
 8001862:	022b      	lsls	r3, r5, #8
 8001864:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8001868:	0222      	lsls	r2, r4, #8
 800186a:	f897 10ca 	ldrb.w	r1, [r7, #202]	; 0xca
 800186e:	b2c9      	uxtb	r1, r1
 8001870:	2000      	movs	r0, #0
 8001872:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8001876:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
 800187a:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 800187e:	4621      	mov	r1, r4
 8001880:	4311      	orrs	r1, r2
 8001882:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8001886:	4629      	mov	r1, r5
 8001888:	4319      	orrs	r1, r3
 800188a:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 800188e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001892:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8001896:	e9c3 1200 	strd	r1, r2, [r3]
 800189a:	e119      	b.n	8001ad0 <AD9910_ReadRegister+0x330>
                case 4: *data = ((uint64_t)read_buffer[1] << 24) | ((uint64_t)read_buffer[2] << 16) | ((uint64_t)read_buffer[3] << 8) | (uint64_t)read_buffer[4]; break;
 800189c:	f897 30c9 	ldrb.w	r3, [r7, #201]	; 0xc9
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	2200      	movs	r2, #0
 80018a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80018a8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80018ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80018b0:	460b      	mov	r3, r1
 80018b2:	0a1b      	lsrs	r3, r3, #8
 80018b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80018b8:	460b      	mov	r3, r1
 80018ba:	061b      	lsls	r3, r3, #24
 80018bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80018c0:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	2200      	movs	r2, #0
 80018c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80018cc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80018d0:	f04f 0200 	mov.w	r2, #0
 80018d4:	f04f 0300 	mov.w	r3, #0
 80018d8:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 80018dc:	4629      	mov	r1, r5
 80018de:	040b      	lsls	r3, r1, #16
 80018e0:	4621      	mov	r1, r4
 80018e2:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 80018e6:	4621      	mov	r1, r4
 80018e8:	040a      	lsls	r2, r1, #16
 80018ea:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 80018ee:	4621      	mov	r1, r4
 80018f0:	ea41 0a02 	orr.w	sl, r1, r2
 80018f4:	4629      	mov	r1, r5
 80018f6:	ea41 0b03 	orr.w	fp, r1, r3
 80018fa:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	2200      	movs	r2, #0
 8001902:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001906:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800190a:	f04f 0200 	mov.w	r2, #0
 800190e:	f04f 0300 	mov.w	r3, #0
 8001912:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001916:	4629      	mov	r1, r5
 8001918:	020b      	lsls	r3, r1, #8
 800191a:	4621      	mov	r1, r4
 800191c:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8001920:	4621      	mov	r1, r4
 8001922:	020a      	lsls	r2, r1, #8
 8001924:	ea4a 0802 	orr.w	r8, sl, r2
 8001928:	ea4b 0903 	orr.w	r9, fp, r3
 800192c:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2200      	movs	r2, #0
 8001934:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001938:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800193c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8001940:	460b      	mov	r3, r1
 8001942:	ea48 0303 	orr.w	r3, r8, r3
 8001946:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800194a:	4613      	mov	r3, r2
 800194c:	ea49 0303 	orr.w	r3, r9, r3
 8001950:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001954:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001958:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800195c:	e9c3 1200 	strd	r1, r2, [r3]
 8001960:	e0b6      	b.n	8001ad0 <AD9910_ReadRegister+0x330>
                case 8: *data = ((uint64_t)read_buffer[1] << 56) | ((uint64_t)read_buffer[2] << 48) | ((uint64_t)read_buffer[3] << 40) | ((uint64_t)read_buffer[4] << 32) | ((uint64_t)read_buffer[5] << 24) | ((uint64_t)read_buffer[6] << 16) | ((uint64_t)read_buffer[7] << 8) | (uint64_t)read_buffer[8]; break;
 8001962:	f897 30c9 	ldrb.w	r3, [r7, #201]	; 0xc9
 8001966:	b2db      	uxtb	r3, r3
 8001968:	2200      	movs	r2, #0
 800196a:	67bb      	str	r3, [r7, #120]	; 0x78
 800196c:	67fa      	str	r2, [r7, #124]	; 0x7c
 800196e:	f04f 0000 	mov.w	r0, #0
 8001972:	f04f 0100 	mov.w	r1, #0
 8001976:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001978:	0619      	lsls	r1, r3, #24
 800197a:	2000      	movs	r0, #0
 800197c:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2200      	movs	r2, #0
 8001984:	673b      	str	r3, [r7, #112]	; 0x70
 8001986:	677a      	str	r2, [r7, #116]	; 0x74
 8001988:	f04f 0200 	mov.w	r2, #0
 800198c:	f04f 0300 	mov.w	r3, #0
 8001990:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8001992:	0423      	lsls	r3, r4, #16
 8001994:	2200      	movs	r2, #0
 8001996:	ea40 0402 	orr.w	r4, r0, r2
 800199a:	66bc      	str	r4, [r7, #104]	; 0x68
 800199c:	430b      	orrs	r3, r1
 800199e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80019a0:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2200      	movs	r2, #0
 80019a8:	663b      	str	r3, [r7, #96]	; 0x60
 80019aa:	667a      	str	r2, [r7, #100]	; 0x64
 80019ac:	f04f 0200 	mov.w	r2, #0
 80019b0:	f04f 0300 	mov.w	r3, #0
 80019b4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80019b6:	020b      	lsls	r3, r1, #8
 80019b8:	2200      	movs	r2, #0
 80019ba:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80019be:	4621      	mov	r1, r4
 80019c0:	4311      	orrs	r1, r2
 80019c2:	65b9      	str	r1, [r7, #88]	; 0x58
 80019c4:	4629      	mov	r1, r5
 80019c6:	4319      	orrs	r1, r3
 80019c8:	65f9      	str	r1, [r7, #92]	; 0x5c
 80019ca:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	2200      	movs	r2, #0
 80019d2:	653b      	str	r3, [r7, #80]	; 0x50
 80019d4:	657a      	str	r2, [r7, #84]	; 0x54
 80019d6:	f04f 0200 	mov.w	r2, #0
 80019da:	f04f 0300 	mov.w	r3, #0
 80019de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80019e0:	000b      	movs	r3, r1
 80019e2:	2200      	movs	r2, #0
 80019e4:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80019e8:	4621      	mov	r1, r4
 80019ea:	4311      	orrs	r1, r2
 80019ec:	64b9      	str	r1, [r7, #72]	; 0x48
 80019ee:	4629      	mov	r1, r5
 80019f0:	4319      	orrs	r1, r3
 80019f2:	64f9      	str	r1, [r7, #76]	; 0x4c
 80019f4:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2200      	movs	r2, #0
 80019fc:	643b      	str	r3, [r7, #64]	; 0x40
 80019fe:	647a      	str	r2, [r7, #68]	; 0x44
 8001a00:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8001a04:	460b      	mov	r3, r1
 8001a06:	0a1b      	lsrs	r3, r3, #8
 8001a08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	061b      	lsls	r3, r3, #24
 8001a0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a10:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001a14:	4623      	mov	r3, r4
 8001a16:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	633b      	str	r3, [r7, #48]	; 0x30
 8001a20:	462b      	mov	r3, r5
 8001a22:	460a      	mov	r2, r1
 8001a24:	4313      	orrs	r3, r2
 8001a26:	637b      	str	r3, [r7, #52]	; 0x34
 8001a28:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2200      	movs	r2, #0
 8001a30:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a34:	f04f 0200 	mov.w	r2, #0
 8001a38:	f04f 0300 	mov.w	r3, #0
 8001a3c:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001a40:	4629      	mov	r1, r5
 8001a42:	040b      	lsls	r3, r1, #16
 8001a44:	4621      	mov	r1, r4
 8001a46:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8001a4a:	4621      	mov	r1, r4
 8001a4c:	040a      	lsls	r2, r1, #16
 8001a4e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a52:	4621      	mov	r1, r4
 8001a54:	4311      	orrs	r1, r2
 8001a56:	6239      	str	r1, [r7, #32]
 8001a58:	4629      	mov	r1, r5
 8001a5a:	4319      	orrs	r1, r3
 8001a5c:	6279      	str	r1, [r7, #36]	; 0x24
 8001a5e:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	2200      	movs	r2, #0
 8001a66:	61bb      	str	r3, [r7, #24]
 8001a68:	61fa      	str	r2, [r7, #28]
 8001a6a:	f04f 0200 	mov.w	r2, #0
 8001a6e:	f04f 0300 	mov.w	r3, #0
 8001a72:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001a76:	4629      	mov	r1, r5
 8001a78:	020b      	lsls	r3, r1, #8
 8001a7a:	4621      	mov	r1, r4
 8001a7c:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8001a80:	4621      	mov	r1, r4
 8001a82:	020a      	lsls	r2, r1, #8
 8001a84:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001a88:	4621      	mov	r1, r4
 8001a8a:	4311      	orrs	r1, r2
 8001a8c:	6139      	str	r1, [r7, #16]
 8001a8e:	4629      	mov	r1, r5
 8001a90:	4319      	orrs	r1, r3
 8001a92:	6179      	str	r1, [r7, #20]
 8001a94:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	60bb      	str	r3, [r7, #8]
 8001a9e:	60fa      	str	r2, [r7, #12]
 8001aa0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001aa4:	4623      	mov	r3, r4
 8001aa6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001aaa:	4602      	mov	r2, r0
 8001aac:	4313      	orrs	r3, r2
 8001aae:	603b      	str	r3, [r7, #0]
 8001ab0:	462b      	mov	r3, r5
 8001ab2:	460a      	mov	r2, r1
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	607b      	str	r3, [r7, #4]
 8001ab8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001abc:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001ac0:	e9c3 1200 	strd	r1, r2, [r3]
 8001ac4:	e004      	b.n	8001ad0 <AD9910_ReadRegister+0x330>
                default:
                    UART_SendString("Erreur de size sur regsize");
 8001ac6:	4807      	ldr	r0, [pc, #28]	; (8001ae4 <AD9910_ReadRegister+0x344>)
 8001ac8:	f7fe ffea 	bl	8000aa0 <UART_SendString>
                    return;
 8001acc:	bf00      	nop
 8001ace:	e000      	b.n	8001ad2 <AD9910_ReadRegister+0x332>
            }


    return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	37e0      	adds	r7, #224	; 0xe0
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001adc:	58020400 	.word	0x58020400
 8001ae0:	24000234 	.word	0x24000234
 8001ae4:	0800ac98 	.word	0x0800ac98

08001ae8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001ae8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b20 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001aec:	f000 f826 	bl	8001b3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001af0:	480c      	ldr	r0, [pc, #48]	; (8001b24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001af2:	490d      	ldr	r1, [pc, #52]	; (8001b28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001af4:	4a0d      	ldr	r2, [pc, #52]	; (8001b2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001af6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001af8:	e002      	b.n	8001b00 <LoopCopyDataInit>

08001afa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001afa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001afc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001afe:	3304      	adds	r3, #4

08001b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b04:	d3f9      	bcc.n	8001afa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b06:	4a0a      	ldr	r2, [pc, #40]	; (8001b30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b08:	4c0a      	ldr	r4, [pc, #40]	; (8001b34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b0c:	e001      	b.n	8001b12 <LoopFillZerobss>

08001b0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b10:	3204      	adds	r2, #4

08001b12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b14:	d3fb      	bcc.n	8001b0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b16:	f008 fa73 	bl	800a000 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b1a:	f7ff f809 	bl	8000b30 <main>
  bx  lr
 8001b1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b20:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001b24:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001b28:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8001b2c:	0800ae30 	.word	0x0800ae30
  ldr r2, =_sbss
 8001b30:	24000130 	.word	0x24000130
  ldr r4, =_ebss
 8001b34:	24000588 	.word	0x24000588

08001b38 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b38:	e7fe      	b.n	8001b38 <ADC3_IRQHandler>
	...

08001b3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b40:	4b32      	ldr	r3, [pc, #200]	; (8001c0c <SystemInit+0xd0>)
 8001b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b46:	4a31      	ldr	r2, [pc, #196]	; (8001c0c <SystemInit+0xd0>)
 8001b48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b50:	4b2f      	ldr	r3, [pc, #188]	; (8001c10 <SystemInit+0xd4>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 030f 	and.w	r3, r3, #15
 8001b58:	2b06      	cmp	r3, #6
 8001b5a:	d807      	bhi.n	8001b6c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b5c:	4b2c      	ldr	r3, [pc, #176]	; (8001c10 <SystemInit+0xd4>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f023 030f 	bic.w	r3, r3, #15
 8001b64:	4a2a      	ldr	r2, [pc, #168]	; (8001c10 <SystemInit+0xd4>)
 8001b66:	f043 0307 	orr.w	r3, r3, #7
 8001b6a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001b6c:	4b29      	ldr	r3, [pc, #164]	; (8001c14 <SystemInit+0xd8>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a28      	ldr	r2, [pc, #160]	; (8001c14 <SystemInit+0xd8>)
 8001b72:	f043 0301 	orr.w	r3, r3, #1
 8001b76:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b78:	4b26      	ldr	r3, [pc, #152]	; (8001c14 <SystemInit+0xd8>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001b7e:	4b25      	ldr	r3, [pc, #148]	; (8001c14 <SystemInit+0xd8>)
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	4924      	ldr	r1, [pc, #144]	; (8001c14 <SystemInit+0xd8>)
 8001b84:	4b24      	ldr	r3, [pc, #144]	; (8001c18 <SystemInit+0xdc>)
 8001b86:	4013      	ands	r3, r2
 8001b88:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b8a:	4b21      	ldr	r3, [pc, #132]	; (8001c10 <SystemInit+0xd4>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0308 	and.w	r3, r3, #8
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d007      	beq.n	8001ba6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b96:	4b1e      	ldr	r3, [pc, #120]	; (8001c10 <SystemInit+0xd4>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f023 030f 	bic.w	r3, r3, #15
 8001b9e:	4a1c      	ldr	r2, [pc, #112]	; (8001c10 <SystemInit+0xd4>)
 8001ba0:	f043 0307 	orr.w	r3, r3, #7
 8001ba4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001ba6:	4b1b      	ldr	r3, [pc, #108]	; (8001c14 <SystemInit+0xd8>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001bac:	4b19      	ldr	r3, [pc, #100]	; (8001c14 <SystemInit+0xd8>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001bb2:	4b18      	ldr	r3, [pc, #96]	; (8001c14 <SystemInit+0xd8>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001bb8:	4b16      	ldr	r3, [pc, #88]	; (8001c14 <SystemInit+0xd8>)
 8001bba:	4a18      	ldr	r2, [pc, #96]	; (8001c1c <SystemInit+0xe0>)
 8001bbc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001bbe:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <SystemInit+0xd8>)
 8001bc0:	4a17      	ldr	r2, [pc, #92]	; (8001c20 <SystemInit+0xe4>)
 8001bc2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001bc4:	4b13      	ldr	r3, [pc, #76]	; (8001c14 <SystemInit+0xd8>)
 8001bc6:	4a17      	ldr	r2, [pc, #92]	; (8001c24 <SystemInit+0xe8>)
 8001bc8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001bca:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <SystemInit+0xd8>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001bd0:	4b10      	ldr	r3, [pc, #64]	; (8001c14 <SystemInit+0xd8>)
 8001bd2:	4a14      	ldr	r2, [pc, #80]	; (8001c24 <SystemInit+0xe8>)
 8001bd4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001bd6:	4b0f      	ldr	r3, [pc, #60]	; (8001c14 <SystemInit+0xd8>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001bdc:	4b0d      	ldr	r3, [pc, #52]	; (8001c14 <SystemInit+0xd8>)
 8001bde:	4a11      	ldr	r2, [pc, #68]	; (8001c24 <SystemInit+0xe8>)
 8001be0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001be2:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <SystemInit+0xd8>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001be8:	4b0a      	ldr	r3, [pc, #40]	; (8001c14 <SystemInit+0xd8>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a09      	ldr	r2, [pc, #36]	; (8001c14 <SystemInit+0xd8>)
 8001bee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bf2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001bf4:	4b07      	ldr	r3, [pc, #28]	; (8001c14 <SystemInit+0xd8>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001bfa:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <SystemInit+0xec>)
 8001bfc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001c00:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001c02:	bf00      	nop
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	e000ed00 	.word	0xe000ed00
 8001c10:	52002000 	.word	0x52002000
 8001c14:	58024400 	.word	0x58024400
 8001c18:	eaf6ed7f 	.word	0xeaf6ed7f
 8001c1c:	02020200 	.word	0x02020200
 8001c20:	01ff0000 	.word	0x01ff0000
 8001c24:	01010280 	.word	0x01010280
 8001c28:	52004000 	.word	0x52004000

08001c2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c32:	2003      	movs	r0, #3
 8001c34:	f000 f994 	bl	8001f60 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c38:	f002 faf6 	bl	8004228 <HAL_RCC_GetSysClockFreq>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	4b15      	ldr	r3, [pc, #84]	; (8001c94 <HAL_Init+0x68>)
 8001c40:	699b      	ldr	r3, [r3, #24]
 8001c42:	0a1b      	lsrs	r3, r3, #8
 8001c44:	f003 030f 	and.w	r3, r3, #15
 8001c48:	4913      	ldr	r1, [pc, #76]	; (8001c98 <HAL_Init+0x6c>)
 8001c4a:	5ccb      	ldrb	r3, [r1, r3]
 8001c4c:	f003 031f 	and.w	r3, r3, #31
 8001c50:	fa22 f303 	lsr.w	r3, r2, r3
 8001c54:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c56:	4b0f      	ldr	r3, [pc, #60]	; (8001c94 <HAL_Init+0x68>)
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	4a0e      	ldr	r2, [pc, #56]	; (8001c98 <HAL_Init+0x6c>)
 8001c60:	5cd3      	ldrb	r3, [r2, r3]
 8001c62:	f003 031f 	and.w	r3, r3, #31
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	fa22 f303 	lsr.w	r3, r2, r3
 8001c6c:	4a0b      	ldr	r2, [pc, #44]	; (8001c9c <HAL_Init+0x70>)
 8001c6e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c70:	4a0b      	ldr	r2, [pc, #44]	; (8001ca0 <HAL_Init+0x74>)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c76:	2000      	movs	r0, #0
 8001c78:	f000 f814 	bl	8001ca4 <HAL_InitTick>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e002      	b.n	8001c8c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c86:	f7ff fa0f 	bl	80010a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	58024400 	.word	0x58024400
 8001c98:	0800acb4 	.word	0x0800acb4
 8001c9c:	24000004 	.word	0x24000004
 8001ca0:	24000000 	.word	0x24000000

08001ca4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001cac:	4b15      	ldr	r3, [pc, #84]	; (8001d04 <HAL_InitTick+0x60>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d101      	bne.n	8001cb8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e021      	b.n	8001cfc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001cb8:	4b13      	ldr	r3, [pc, #76]	; (8001d08 <HAL_InitTick+0x64>)
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <HAL_InitTick+0x60>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f000 f979 	bl	8001fc6 <HAL_SYSTICK_Config>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e00e      	b.n	8001cfc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2b0f      	cmp	r3, #15
 8001ce2:	d80a      	bhi.n	8001cfa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cec:	f000 f943 	bl	8001f76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cf0:	4a06      	ldr	r2, [pc, #24]	; (8001d0c <HAL_InitTick+0x68>)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	e000      	b.n	8001cfc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	2400000c 	.word	0x2400000c
 8001d08:	24000000 	.word	0x24000000
 8001d0c:	24000008 	.word	0x24000008

08001d10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d14:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <HAL_IncTick+0x20>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <HAL_IncTick+0x24>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4413      	add	r3, r2
 8001d20:	4a04      	ldr	r2, [pc, #16]	; (8001d34 <HAL_IncTick+0x24>)
 8001d22:	6013      	str	r3, [r2, #0]
}
 8001d24:	bf00      	nop
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	2400000c 	.word	0x2400000c
 8001d34:	24000438 	.word	0x24000438

08001d38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d3c:	4b03      	ldr	r3, [pc, #12]	; (8001d4c <HAL_GetTick+0x14>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	24000438 	.word	0x24000438

08001d50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d58:	f7ff ffee 	bl	8001d38 <HAL_GetTick>
 8001d5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d68:	d005      	beq.n	8001d76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d6a:	4b0a      	ldr	r3, [pc, #40]	; (8001d94 <HAL_Delay+0x44>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	461a      	mov	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	4413      	add	r3, r2
 8001d74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d76:	bf00      	nop
 8001d78:	f7ff ffde 	bl	8001d38 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d8f7      	bhi.n	8001d78 <HAL_Delay+0x28>
  {
  }
}
 8001d88:	bf00      	nop
 8001d8a:	bf00      	nop
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	2400000c 	.word	0x2400000c

08001d98 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001da0:	4b06      	ldr	r3, [pc, #24]	; (8001dbc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001da8:	4904      	ldr	r1, [pc, #16]	; (8001dbc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	604b      	str	r3, [r1, #4]
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	58000400 	.word	0x58000400

08001dc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dd0:	4b0b      	ldr	r3, [pc, #44]	; (8001e00 <__NVIC_SetPriorityGrouping+0x40>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dd6:	68ba      	ldr	r2, [r7, #8]
 8001dd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ddc:	4013      	ands	r3, r2
 8001dde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001de8:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <__NVIC_SetPriorityGrouping+0x44>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dee:	4a04      	ldr	r2, [pc, #16]	; (8001e00 <__NVIC_SetPriorityGrouping+0x40>)
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	60d3      	str	r3, [r2, #12]
}
 8001df4:	bf00      	nop
 8001df6:	3714      	adds	r7, #20
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	e000ed00 	.word	0xe000ed00
 8001e04:	05fa0000 	.word	0x05fa0000

08001e08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e0c:	4b04      	ldr	r3, [pc, #16]	; (8001e20 <__NVIC_GetPriorityGrouping+0x18>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	0a1b      	lsrs	r3, r3, #8
 8001e12:	f003 0307 	and.w	r3, r3, #7
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	e000ed00 	.word	0xe000ed00

08001e24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	db0b      	blt.n	8001e4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e36:	88fb      	ldrh	r3, [r7, #6]
 8001e38:	f003 021f 	and.w	r2, r3, #31
 8001e3c:	4907      	ldr	r1, [pc, #28]	; (8001e5c <__NVIC_EnableIRQ+0x38>)
 8001e3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e42:	095b      	lsrs	r3, r3, #5
 8001e44:	2001      	movs	r0, #1
 8001e46:	fa00 f202 	lsl.w	r2, r0, r2
 8001e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	e000e100 	.word	0xe000e100

08001e60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	6039      	str	r1, [r7, #0]
 8001e6a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	db0a      	blt.n	8001e8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	490c      	ldr	r1, [pc, #48]	; (8001eac <__NVIC_SetPriority+0x4c>)
 8001e7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e7e:	0112      	lsls	r2, r2, #4
 8001e80:	b2d2      	uxtb	r2, r2
 8001e82:	440b      	add	r3, r1
 8001e84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e88:	e00a      	b.n	8001ea0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	b2da      	uxtb	r2, r3
 8001e8e:	4908      	ldr	r1, [pc, #32]	; (8001eb0 <__NVIC_SetPriority+0x50>)
 8001e90:	88fb      	ldrh	r3, [r7, #6]
 8001e92:	f003 030f 	and.w	r3, r3, #15
 8001e96:	3b04      	subs	r3, #4
 8001e98:	0112      	lsls	r2, r2, #4
 8001e9a:	b2d2      	uxtb	r2, r2
 8001e9c:	440b      	add	r3, r1
 8001e9e:	761a      	strb	r2, [r3, #24]
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	e000e100 	.word	0xe000e100
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b089      	sub	sp, #36	; 0x24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f003 0307 	and.w	r3, r3, #7
 8001ec6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	f1c3 0307 	rsb	r3, r3, #7
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	bf28      	it	cs
 8001ed2:	2304      	movcs	r3, #4
 8001ed4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	3304      	adds	r3, #4
 8001eda:	2b06      	cmp	r3, #6
 8001edc:	d902      	bls.n	8001ee4 <NVIC_EncodePriority+0x30>
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	3b03      	subs	r3, #3
 8001ee2:	e000      	b.n	8001ee6 <NVIC_EncodePriority+0x32>
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	43da      	mvns	r2, r3
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	401a      	ands	r2, r3
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001efc:	f04f 31ff 	mov.w	r1, #4294967295
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	fa01 f303 	lsl.w	r3, r1, r3
 8001f06:	43d9      	mvns	r1, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f0c:	4313      	orrs	r3, r2
         );
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3724      	adds	r7, #36	; 0x24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
	...

08001f1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	3b01      	subs	r3, #1
 8001f28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f2c:	d301      	bcc.n	8001f32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e00f      	b.n	8001f52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f32:	4a0a      	ldr	r2, [pc, #40]	; (8001f5c <SysTick_Config+0x40>)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	3b01      	subs	r3, #1
 8001f38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f3a:	210f      	movs	r1, #15
 8001f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f40:	f7ff ff8e 	bl	8001e60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f44:	4b05      	ldr	r3, [pc, #20]	; (8001f5c <SysTick_Config+0x40>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f4a:	4b04      	ldr	r3, [pc, #16]	; (8001f5c <SysTick_Config+0x40>)
 8001f4c:	2207      	movs	r2, #7
 8001f4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	e000e010 	.word	0xe000e010

08001f60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f7ff ff29 	bl	8001dc0 <__NVIC_SetPriorityGrouping>
}
 8001f6e:	bf00      	nop
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b086      	sub	sp, #24
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	60b9      	str	r1, [r7, #8]
 8001f80:	607a      	str	r2, [r7, #4]
 8001f82:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f84:	f7ff ff40 	bl	8001e08 <__NVIC_GetPriorityGrouping>
 8001f88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	68b9      	ldr	r1, [r7, #8]
 8001f8e:	6978      	ldr	r0, [r7, #20]
 8001f90:	f7ff ff90 	bl	8001eb4 <NVIC_EncodePriority>
 8001f94:	4602      	mov	r2, r0
 8001f96:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f9a:	4611      	mov	r1, r2
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff ff5f 	bl	8001e60 <__NVIC_SetPriority>
}
 8001fa2:	bf00      	nop
 8001fa4:	3718      	adds	r7, #24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b082      	sub	sp, #8
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff ff33 	bl	8001e24 <__NVIC_EnableIRQ>
}
 8001fbe:	bf00      	nop
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b082      	sub	sp, #8
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f7ff ffa4 	bl	8001f1c <SysTick_Config>
 8001fd4:	4603      	mov	r3, r0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
	...

08001fe0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001fe8:	f7ff fea6 	bl	8001d38 <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d101      	bne.n	8001ff8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e2dc      	b.n	80025b2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d008      	beq.n	8002016 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2280      	movs	r2, #128	; 0x80
 8002008:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e2cd      	b.n	80025b2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a76      	ldr	r2, [pc, #472]	; (80021f4 <HAL_DMA_Abort+0x214>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d04a      	beq.n	80020b6 <HAL_DMA_Abort+0xd6>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a74      	ldr	r2, [pc, #464]	; (80021f8 <HAL_DMA_Abort+0x218>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d045      	beq.n	80020b6 <HAL_DMA_Abort+0xd6>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a73      	ldr	r2, [pc, #460]	; (80021fc <HAL_DMA_Abort+0x21c>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d040      	beq.n	80020b6 <HAL_DMA_Abort+0xd6>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a71      	ldr	r2, [pc, #452]	; (8002200 <HAL_DMA_Abort+0x220>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d03b      	beq.n	80020b6 <HAL_DMA_Abort+0xd6>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a70      	ldr	r2, [pc, #448]	; (8002204 <HAL_DMA_Abort+0x224>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d036      	beq.n	80020b6 <HAL_DMA_Abort+0xd6>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a6e      	ldr	r2, [pc, #440]	; (8002208 <HAL_DMA_Abort+0x228>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d031      	beq.n	80020b6 <HAL_DMA_Abort+0xd6>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a6d      	ldr	r2, [pc, #436]	; (800220c <HAL_DMA_Abort+0x22c>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d02c      	beq.n	80020b6 <HAL_DMA_Abort+0xd6>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a6b      	ldr	r2, [pc, #428]	; (8002210 <HAL_DMA_Abort+0x230>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d027      	beq.n	80020b6 <HAL_DMA_Abort+0xd6>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a6a      	ldr	r2, [pc, #424]	; (8002214 <HAL_DMA_Abort+0x234>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d022      	beq.n	80020b6 <HAL_DMA_Abort+0xd6>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a68      	ldr	r2, [pc, #416]	; (8002218 <HAL_DMA_Abort+0x238>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d01d      	beq.n	80020b6 <HAL_DMA_Abort+0xd6>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a67      	ldr	r2, [pc, #412]	; (800221c <HAL_DMA_Abort+0x23c>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d018      	beq.n	80020b6 <HAL_DMA_Abort+0xd6>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a65      	ldr	r2, [pc, #404]	; (8002220 <HAL_DMA_Abort+0x240>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d013      	beq.n	80020b6 <HAL_DMA_Abort+0xd6>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a64      	ldr	r2, [pc, #400]	; (8002224 <HAL_DMA_Abort+0x244>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d00e      	beq.n	80020b6 <HAL_DMA_Abort+0xd6>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a62      	ldr	r2, [pc, #392]	; (8002228 <HAL_DMA_Abort+0x248>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d009      	beq.n	80020b6 <HAL_DMA_Abort+0xd6>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a61      	ldr	r2, [pc, #388]	; (800222c <HAL_DMA_Abort+0x24c>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d004      	beq.n	80020b6 <HAL_DMA_Abort+0xd6>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a5f      	ldr	r2, [pc, #380]	; (8002230 <HAL_DMA_Abort+0x250>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d101      	bne.n	80020ba <HAL_DMA_Abort+0xda>
 80020b6:	2301      	movs	r3, #1
 80020b8:	e000      	b.n	80020bc <HAL_DMA_Abort+0xdc>
 80020ba:	2300      	movs	r3, #0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d013      	beq.n	80020e8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f022 021e 	bic.w	r2, r2, #30
 80020ce:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	695a      	ldr	r2, [r3, #20]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020de:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	617b      	str	r3, [r7, #20]
 80020e6:	e00a      	b.n	80020fe <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f022 020e 	bic.w	r2, r2, #14
 80020f6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a3c      	ldr	r2, [pc, #240]	; (80021f4 <HAL_DMA_Abort+0x214>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d072      	beq.n	80021ee <HAL_DMA_Abort+0x20e>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a3a      	ldr	r2, [pc, #232]	; (80021f8 <HAL_DMA_Abort+0x218>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d06d      	beq.n	80021ee <HAL_DMA_Abort+0x20e>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a39      	ldr	r2, [pc, #228]	; (80021fc <HAL_DMA_Abort+0x21c>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d068      	beq.n	80021ee <HAL_DMA_Abort+0x20e>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a37      	ldr	r2, [pc, #220]	; (8002200 <HAL_DMA_Abort+0x220>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d063      	beq.n	80021ee <HAL_DMA_Abort+0x20e>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a36      	ldr	r2, [pc, #216]	; (8002204 <HAL_DMA_Abort+0x224>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d05e      	beq.n	80021ee <HAL_DMA_Abort+0x20e>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a34      	ldr	r2, [pc, #208]	; (8002208 <HAL_DMA_Abort+0x228>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d059      	beq.n	80021ee <HAL_DMA_Abort+0x20e>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a33      	ldr	r2, [pc, #204]	; (800220c <HAL_DMA_Abort+0x22c>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d054      	beq.n	80021ee <HAL_DMA_Abort+0x20e>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a31      	ldr	r2, [pc, #196]	; (8002210 <HAL_DMA_Abort+0x230>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d04f      	beq.n	80021ee <HAL_DMA_Abort+0x20e>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a30      	ldr	r2, [pc, #192]	; (8002214 <HAL_DMA_Abort+0x234>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d04a      	beq.n	80021ee <HAL_DMA_Abort+0x20e>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a2e      	ldr	r2, [pc, #184]	; (8002218 <HAL_DMA_Abort+0x238>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d045      	beq.n	80021ee <HAL_DMA_Abort+0x20e>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a2d      	ldr	r2, [pc, #180]	; (800221c <HAL_DMA_Abort+0x23c>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d040      	beq.n	80021ee <HAL_DMA_Abort+0x20e>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a2b      	ldr	r2, [pc, #172]	; (8002220 <HAL_DMA_Abort+0x240>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d03b      	beq.n	80021ee <HAL_DMA_Abort+0x20e>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a2a      	ldr	r2, [pc, #168]	; (8002224 <HAL_DMA_Abort+0x244>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d036      	beq.n	80021ee <HAL_DMA_Abort+0x20e>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a28      	ldr	r2, [pc, #160]	; (8002228 <HAL_DMA_Abort+0x248>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d031      	beq.n	80021ee <HAL_DMA_Abort+0x20e>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a27      	ldr	r2, [pc, #156]	; (800222c <HAL_DMA_Abort+0x24c>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d02c      	beq.n	80021ee <HAL_DMA_Abort+0x20e>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a25      	ldr	r2, [pc, #148]	; (8002230 <HAL_DMA_Abort+0x250>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d027      	beq.n	80021ee <HAL_DMA_Abort+0x20e>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a24      	ldr	r2, [pc, #144]	; (8002234 <HAL_DMA_Abort+0x254>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d022      	beq.n	80021ee <HAL_DMA_Abort+0x20e>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a22      	ldr	r2, [pc, #136]	; (8002238 <HAL_DMA_Abort+0x258>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d01d      	beq.n	80021ee <HAL_DMA_Abort+0x20e>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a21      	ldr	r2, [pc, #132]	; (800223c <HAL_DMA_Abort+0x25c>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d018      	beq.n	80021ee <HAL_DMA_Abort+0x20e>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a1f      	ldr	r2, [pc, #124]	; (8002240 <HAL_DMA_Abort+0x260>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d013      	beq.n	80021ee <HAL_DMA_Abort+0x20e>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a1e      	ldr	r2, [pc, #120]	; (8002244 <HAL_DMA_Abort+0x264>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d00e      	beq.n	80021ee <HAL_DMA_Abort+0x20e>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a1c      	ldr	r2, [pc, #112]	; (8002248 <HAL_DMA_Abort+0x268>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d009      	beq.n	80021ee <HAL_DMA_Abort+0x20e>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a1b      	ldr	r2, [pc, #108]	; (800224c <HAL_DMA_Abort+0x26c>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d004      	beq.n	80021ee <HAL_DMA_Abort+0x20e>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a19      	ldr	r2, [pc, #100]	; (8002250 <HAL_DMA_Abort+0x270>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d132      	bne.n	8002254 <HAL_DMA_Abort+0x274>
 80021ee:	2301      	movs	r3, #1
 80021f0:	e031      	b.n	8002256 <HAL_DMA_Abort+0x276>
 80021f2:	bf00      	nop
 80021f4:	40020010 	.word	0x40020010
 80021f8:	40020028 	.word	0x40020028
 80021fc:	40020040 	.word	0x40020040
 8002200:	40020058 	.word	0x40020058
 8002204:	40020070 	.word	0x40020070
 8002208:	40020088 	.word	0x40020088
 800220c:	400200a0 	.word	0x400200a0
 8002210:	400200b8 	.word	0x400200b8
 8002214:	40020410 	.word	0x40020410
 8002218:	40020428 	.word	0x40020428
 800221c:	40020440 	.word	0x40020440
 8002220:	40020458 	.word	0x40020458
 8002224:	40020470 	.word	0x40020470
 8002228:	40020488 	.word	0x40020488
 800222c:	400204a0 	.word	0x400204a0
 8002230:	400204b8 	.word	0x400204b8
 8002234:	58025408 	.word	0x58025408
 8002238:	5802541c 	.word	0x5802541c
 800223c:	58025430 	.word	0x58025430
 8002240:	58025444 	.word	0x58025444
 8002244:	58025458 	.word	0x58025458
 8002248:	5802546c 	.word	0x5802546c
 800224c:	58025480 	.word	0x58025480
 8002250:	58025494 	.word	0x58025494
 8002254:	2300      	movs	r3, #0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d007      	beq.n	800226a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002264:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002268:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a6d      	ldr	r2, [pc, #436]	; (8002424 <HAL_DMA_Abort+0x444>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d04a      	beq.n	800230a <HAL_DMA_Abort+0x32a>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a6b      	ldr	r2, [pc, #428]	; (8002428 <HAL_DMA_Abort+0x448>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d045      	beq.n	800230a <HAL_DMA_Abort+0x32a>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a6a      	ldr	r2, [pc, #424]	; (800242c <HAL_DMA_Abort+0x44c>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d040      	beq.n	800230a <HAL_DMA_Abort+0x32a>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a68      	ldr	r2, [pc, #416]	; (8002430 <HAL_DMA_Abort+0x450>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d03b      	beq.n	800230a <HAL_DMA_Abort+0x32a>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a67      	ldr	r2, [pc, #412]	; (8002434 <HAL_DMA_Abort+0x454>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d036      	beq.n	800230a <HAL_DMA_Abort+0x32a>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a65      	ldr	r2, [pc, #404]	; (8002438 <HAL_DMA_Abort+0x458>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d031      	beq.n	800230a <HAL_DMA_Abort+0x32a>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a64      	ldr	r2, [pc, #400]	; (800243c <HAL_DMA_Abort+0x45c>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d02c      	beq.n	800230a <HAL_DMA_Abort+0x32a>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a62      	ldr	r2, [pc, #392]	; (8002440 <HAL_DMA_Abort+0x460>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d027      	beq.n	800230a <HAL_DMA_Abort+0x32a>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a61      	ldr	r2, [pc, #388]	; (8002444 <HAL_DMA_Abort+0x464>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d022      	beq.n	800230a <HAL_DMA_Abort+0x32a>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a5f      	ldr	r2, [pc, #380]	; (8002448 <HAL_DMA_Abort+0x468>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d01d      	beq.n	800230a <HAL_DMA_Abort+0x32a>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a5e      	ldr	r2, [pc, #376]	; (800244c <HAL_DMA_Abort+0x46c>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d018      	beq.n	800230a <HAL_DMA_Abort+0x32a>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a5c      	ldr	r2, [pc, #368]	; (8002450 <HAL_DMA_Abort+0x470>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d013      	beq.n	800230a <HAL_DMA_Abort+0x32a>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a5b      	ldr	r2, [pc, #364]	; (8002454 <HAL_DMA_Abort+0x474>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d00e      	beq.n	800230a <HAL_DMA_Abort+0x32a>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a59      	ldr	r2, [pc, #356]	; (8002458 <HAL_DMA_Abort+0x478>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d009      	beq.n	800230a <HAL_DMA_Abort+0x32a>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a58      	ldr	r2, [pc, #352]	; (800245c <HAL_DMA_Abort+0x47c>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d004      	beq.n	800230a <HAL_DMA_Abort+0x32a>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a56      	ldr	r2, [pc, #344]	; (8002460 <HAL_DMA_Abort+0x480>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d108      	bne.n	800231c <HAL_DMA_Abort+0x33c>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f022 0201 	bic.w	r2, r2, #1
 8002318:	601a      	str	r2, [r3, #0]
 800231a:	e007      	b.n	800232c <HAL_DMA_Abort+0x34c>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 0201 	bic.w	r2, r2, #1
 800232a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800232c:	e013      	b.n	8002356 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800232e:	f7ff fd03 	bl	8001d38 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b05      	cmp	r3, #5
 800233a:	d90c      	bls.n	8002356 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2220      	movs	r2, #32
 8002340:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2203      	movs	r2, #3
 8002346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e12d      	b.n	80025b2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1e5      	bne.n	800232e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a2f      	ldr	r2, [pc, #188]	; (8002424 <HAL_DMA_Abort+0x444>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d04a      	beq.n	8002402 <HAL_DMA_Abort+0x422>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a2d      	ldr	r2, [pc, #180]	; (8002428 <HAL_DMA_Abort+0x448>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d045      	beq.n	8002402 <HAL_DMA_Abort+0x422>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a2c      	ldr	r2, [pc, #176]	; (800242c <HAL_DMA_Abort+0x44c>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d040      	beq.n	8002402 <HAL_DMA_Abort+0x422>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a2a      	ldr	r2, [pc, #168]	; (8002430 <HAL_DMA_Abort+0x450>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d03b      	beq.n	8002402 <HAL_DMA_Abort+0x422>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a29      	ldr	r2, [pc, #164]	; (8002434 <HAL_DMA_Abort+0x454>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d036      	beq.n	8002402 <HAL_DMA_Abort+0x422>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a27      	ldr	r2, [pc, #156]	; (8002438 <HAL_DMA_Abort+0x458>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d031      	beq.n	8002402 <HAL_DMA_Abort+0x422>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a26      	ldr	r2, [pc, #152]	; (800243c <HAL_DMA_Abort+0x45c>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d02c      	beq.n	8002402 <HAL_DMA_Abort+0x422>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a24      	ldr	r2, [pc, #144]	; (8002440 <HAL_DMA_Abort+0x460>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d027      	beq.n	8002402 <HAL_DMA_Abort+0x422>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a23      	ldr	r2, [pc, #140]	; (8002444 <HAL_DMA_Abort+0x464>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d022      	beq.n	8002402 <HAL_DMA_Abort+0x422>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a21      	ldr	r2, [pc, #132]	; (8002448 <HAL_DMA_Abort+0x468>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d01d      	beq.n	8002402 <HAL_DMA_Abort+0x422>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a20      	ldr	r2, [pc, #128]	; (800244c <HAL_DMA_Abort+0x46c>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d018      	beq.n	8002402 <HAL_DMA_Abort+0x422>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a1e      	ldr	r2, [pc, #120]	; (8002450 <HAL_DMA_Abort+0x470>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d013      	beq.n	8002402 <HAL_DMA_Abort+0x422>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a1d      	ldr	r2, [pc, #116]	; (8002454 <HAL_DMA_Abort+0x474>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d00e      	beq.n	8002402 <HAL_DMA_Abort+0x422>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a1b      	ldr	r2, [pc, #108]	; (8002458 <HAL_DMA_Abort+0x478>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d009      	beq.n	8002402 <HAL_DMA_Abort+0x422>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a1a      	ldr	r2, [pc, #104]	; (800245c <HAL_DMA_Abort+0x47c>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d004      	beq.n	8002402 <HAL_DMA_Abort+0x422>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a18      	ldr	r2, [pc, #96]	; (8002460 <HAL_DMA_Abort+0x480>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d101      	bne.n	8002406 <HAL_DMA_Abort+0x426>
 8002402:	2301      	movs	r3, #1
 8002404:	e000      	b.n	8002408 <HAL_DMA_Abort+0x428>
 8002406:	2300      	movs	r3, #0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d02b      	beq.n	8002464 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002410:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002416:	f003 031f 	and.w	r3, r3, #31
 800241a:	223f      	movs	r2, #63	; 0x3f
 800241c:	409a      	lsls	r2, r3
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	609a      	str	r2, [r3, #8]
 8002422:	e02a      	b.n	800247a <HAL_DMA_Abort+0x49a>
 8002424:	40020010 	.word	0x40020010
 8002428:	40020028 	.word	0x40020028
 800242c:	40020040 	.word	0x40020040
 8002430:	40020058 	.word	0x40020058
 8002434:	40020070 	.word	0x40020070
 8002438:	40020088 	.word	0x40020088
 800243c:	400200a0 	.word	0x400200a0
 8002440:	400200b8 	.word	0x400200b8
 8002444:	40020410 	.word	0x40020410
 8002448:	40020428 	.word	0x40020428
 800244c:	40020440 	.word	0x40020440
 8002450:	40020458 	.word	0x40020458
 8002454:	40020470 	.word	0x40020470
 8002458:	40020488 	.word	0x40020488
 800245c:	400204a0 	.word	0x400204a0
 8002460:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002468:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800246e:	f003 031f 	and.w	r3, r3, #31
 8002472:	2201      	movs	r2, #1
 8002474:	409a      	lsls	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a4f      	ldr	r2, [pc, #316]	; (80025bc <HAL_DMA_Abort+0x5dc>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d072      	beq.n	800256a <HAL_DMA_Abort+0x58a>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a4d      	ldr	r2, [pc, #308]	; (80025c0 <HAL_DMA_Abort+0x5e0>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d06d      	beq.n	800256a <HAL_DMA_Abort+0x58a>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a4c      	ldr	r2, [pc, #304]	; (80025c4 <HAL_DMA_Abort+0x5e4>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d068      	beq.n	800256a <HAL_DMA_Abort+0x58a>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a4a      	ldr	r2, [pc, #296]	; (80025c8 <HAL_DMA_Abort+0x5e8>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d063      	beq.n	800256a <HAL_DMA_Abort+0x58a>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a49      	ldr	r2, [pc, #292]	; (80025cc <HAL_DMA_Abort+0x5ec>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d05e      	beq.n	800256a <HAL_DMA_Abort+0x58a>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a47      	ldr	r2, [pc, #284]	; (80025d0 <HAL_DMA_Abort+0x5f0>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d059      	beq.n	800256a <HAL_DMA_Abort+0x58a>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a46      	ldr	r2, [pc, #280]	; (80025d4 <HAL_DMA_Abort+0x5f4>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d054      	beq.n	800256a <HAL_DMA_Abort+0x58a>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a44      	ldr	r2, [pc, #272]	; (80025d8 <HAL_DMA_Abort+0x5f8>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d04f      	beq.n	800256a <HAL_DMA_Abort+0x58a>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a43      	ldr	r2, [pc, #268]	; (80025dc <HAL_DMA_Abort+0x5fc>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d04a      	beq.n	800256a <HAL_DMA_Abort+0x58a>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a41      	ldr	r2, [pc, #260]	; (80025e0 <HAL_DMA_Abort+0x600>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d045      	beq.n	800256a <HAL_DMA_Abort+0x58a>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a40      	ldr	r2, [pc, #256]	; (80025e4 <HAL_DMA_Abort+0x604>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d040      	beq.n	800256a <HAL_DMA_Abort+0x58a>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a3e      	ldr	r2, [pc, #248]	; (80025e8 <HAL_DMA_Abort+0x608>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d03b      	beq.n	800256a <HAL_DMA_Abort+0x58a>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a3d      	ldr	r2, [pc, #244]	; (80025ec <HAL_DMA_Abort+0x60c>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d036      	beq.n	800256a <HAL_DMA_Abort+0x58a>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a3b      	ldr	r2, [pc, #236]	; (80025f0 <HAL_DMA_Abort+0x610>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d031      	beq.n	800256a <HAL_DMA_Abort+0x58a>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a3a      	ldr	r2, [pc, #232]	; (80025f4 <HAL_DMA_Abort+0x614>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d02c      	beq.n	800256a <HAL_DMA_Abort+0x58a>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a38      	ldr	r2, [pc, #224]	; (80025f8 <HAL_DMA_Abort+0x618>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d027      	beq.n	800256a <HAL_DMA_Abort+0x58a>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a37      	ldr	r2, [pc, #220]	; (80025fc <HAL_DMA_Abort+0x61c>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d022      	beq.n	800256a <HAL_DMA_Abort+0x58a>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a35      	ldr	r2, [pc, #212]	; (8002600 <HAL_DMA_Abort+0x620>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d01d      	beq.n	800256a <HAL_DMA_Abort+0x58a>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a34      	ldr	r2, [pc, #208]	; (8002604 <HAL_DMA_Abort+0x624>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d018      	beq.n	800256a <HAL_DMA_Abort+0x58a>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a32      	ldr	r2, [pc, #200]	; (8002608 <HAL_DMA_Abort+0x628>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d013      	beq.n	800256a <HAL_DMA_Abort+0x58a>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a31      	ldr	r2, [pc, #196]	; (800260c <HAL_DMA_Abort+0x62c>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d00e      	beq.n	800256a <HAL_DMA_Abort+0x58a>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a2f      	ldr	r2, [pc, #188]	; (8002610 <HAL_DMA_Abort+0x630>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d009      	beq.n	800256a <HAL_DMA_Abort+0x58a>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a2e      	ldr	r2, [pc, #184]	; (8002614 <HAL_DMA_Abort+0x634>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d004      	beq.n	800256a <HAL_DMA_Abort+0x58a>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a2c      	ldr	r2, [pc, #176]	; (8002618 <HAL_DMA_Abort+0x638>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d101      	bne.n	800256e <HAL_DMA_Abort+0x58e>
 800256a:	2301      	movs	r3, #1
 800256c:	e000      	b.n	8002570 <HAL_DMA_Abort+0x590>
 800256e:	2300      	movs	r3, #0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d015      	beq.n	80025a0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800257c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00c      	beq.n	80025a0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002590:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002594:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800259e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3718      	adds	r7, #24
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	40020010 	.word	0x40020010
 80025c0:	40020028 	.word	0x40020028
 80025c4:	40020040 	.word	0x40020040
 80025c8:	40020058 	.word	0x40020058
 80025cc:	40020070 	.word	0x40020070
 80025d0:	40020088 	.word	0x40020088
 80025d4:	400200a0 	.word	0x400200a0
 80025d8:	400200b8 	.word	0x400200b8
 80025dc:	40020410 	.word	0x40020410
 80025e0:	40020428 	.word	0x40020428
 80025e4:	40020440 	.word	0x40020440
 80025e8:	40020458 	.word	0x40020458
 80025ec:	40020470 	.word	0x40020470
 80025f0:	40020488 	.word	0x40020488
 80025f4:	400204a0 	.word	0x400204a0
 80025f8:	400204b8 	.word	0x400204b8
 80025fc:	58025408 	.word	0x58025408
 8002600:	5802541c 	.word	0x5802541c
 8002604:	58025430 	.word	0x58025430
 8002608:	58025444 	.word	0x58025444
 800260c:	58025458 	.word	0x58025458
 8002610:	5802546c 	.word	0x5802546c
 8002614:	58025480 	.word	0x58025480
 8002618:	58025494 	.word	0x58025494

0800261c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e237      	b.n	8002a9e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d004      	beq.n	8002644 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2280      	movs	r2, #128	; 0x80
 800263e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e22c      	b.n	8002a9e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a5c      	ldr	r2, [pc, #368]	; (80027bc <HAL_DMA_Abort_IT+0x1a0>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d04a      	beq.n	80026e4 <HAL_DMA_Abort_IT+0xc8>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a5b      	ldr	r2, [pc, #364]	; (80027c0 <HAL_DMA_Abort_IT+0x1a4>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d045      	beq.n	80026e4 <HAL_DMA_Abort_IT+0xc8>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a59      	ldr	r2, [pc, #356]	; (80027c4 <HAL_DMA_Abort_IT+0x1a8>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d040      	beq.n	80026e4 <HAL_DMA_Abort_IT+0xc8>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a58      	ldr	r2, [pc, #352]	; (80027c8 <HAL_DMA_Abort_IT+0x1ac>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d03b      	beq.n	80026e4 <HAL_DMA_Abort_IT+0xc8>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a56      	ldr	r2, [pc, #344]	; (80027cc <HAL_DMA_Abort_IT+0x1b0>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d036      	beq.n	80026e4 <HAL_DMA_Abort_IT+0xc8>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a55      	ldr	r2, [pc, #340]	; (80027d0 <HAL_DMA_Abort_IT+0x1b4>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d031      	beq.n	80026e4 <HAL_DMA_Abort_IT+0xc8>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a53      	ldr	r2, [pc, #332]	; (80027d4 <HAL_DMA_Abort_IT+0x1b8>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d02c      	beq.n	80026e4 <HAL_DMA_Abort_IT+0xc8>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a52      	ldr	r2, [pc, #328]	; (80027d8 <HAL_DMA_Abort_IT+0x1bc>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d027      	beq.n	80026e4 <HAL_DMA_Abort_IT+0xc8>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a50      	ldr	r2, [pc, #320]	; (80027dc <HAL_DMA_Abort_IT+0x1c0>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d022      	beq.n	80026e4 <HAL_DMA_Abort_IT+0xc8>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a4f      	ldr	r2, [pc, #316]	; (80027e0 <HAL_DMA_Abort_IT+0x1c4>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d01d      	beq.n	80026e4 <HAL_DMA_Abort_IT+0xc8>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a4d      	ldr	r2, [pc, #308]	; (80027e4 <HAL_DMA_Abort_IT+0x1c8>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d018      	beq.n	80026e4 <HAL_DMA_Abort_IT+0xc8>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a4c      	ldr	r2, [pc, #304]	; (80027e8 <HAL_DMA_Abort_IT+0x1cc>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d013      	beq.n	80026e4 <HAL_DMA_Abort_IT+0xc8>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a4a      	ldr	r2, [pc, #296]	; (80027ec <HAL_DMA_Abort_IT+0x1d0>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d00e      	beq.n	80026e4 <HAL_DMA_Abort_IT+0xc8>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a49      	ldr	r2, [pc, #292]	; (80027f0 <HAL_DMA_Abort_IT+0x1d4>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d009      	beq.n	80026e4 <HAL_DMA_Abort_IT+0xc8>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a47      	ldr	r2, [pc, #284]	; (80027f4 <HAL_DMA_Abort_IT+0x1d8>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d004      	beq.n	80026e4 <HAL_DMA_Abort_IT+0xc8>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a46      	ldr	r2, [pc, #280]	; (80027f8 <HAL_DMA_Abort_IT+0x1dc>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d101      	bne.n	80026e8 <HAL_DMA_Abort_IT+0xcc>
 80026e4:	2301      	movs	r3, #1
 80026e6:	e000      	b.n	80026ea <HAL_DMA_Abort_IT+0xce>
 80026e8:	2300      	movs	r3, #0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f000 8086 	beq.w	80027fc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2204      	movs	r2, #4
 80026f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a2f      	ldr	r2, [pc, #188]	; (80027bc <HAL_DMA_Abort_IT+0x1a0>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d04a      	beq.n	8002798 <HAL_DMA_Abort_IT+0x17c>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a2e      	ldr	r2, [pc, #184]	; (80027c0 <HAL_DMA_Abort_IT+0x1a4>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d045      	beq.n	8002798 <HAL_DMA_Abort_IT+0x17c>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a2c      	ldr	r2, [pc, #176]	; (80027c4 <HAL_DMA_Abort_IT+0x1a8>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d040      	beq.n	8002798 <HAL_DMA_Abort_IT+0x17c>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a2b      	ldr	r2, [pc, #172]	; (80027c8 <HAL_DMA_Abort_IT+0x1ac>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d03b      	beq.n	8002798 <HAL_DMA_Abort_IT+0x17c>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a29      	ldr	r2, [pc, #164]	; (80027cc <HAL_DMA_Abort_IT+0x1b0>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d036      	beq.n	8002798 <HAL_DMA_Abort_IT+0x17c>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a28      	ldr	r2, [pc, #160]	; (80027d0 <HAL_DMA_Abort_IT+0x1b4>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d031      	beq.n	8002798 <HAL_DMA_Abort_IT+0x17c>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a26      	ldr	r2, [pc, #152]	; (80027d4 <HAL_DMA_Abort_IT+0x1b8>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d02c      	beq.n	8002798 <HAL_DMA_Abort_IT+0x17c>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a25      	ldr	r2, [pc, #148]	; (80027d8 <HAL_DMA_Abort_IT+0x1bc>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d027      	beq.n	8002798 <HAL_DMA_Abort_IT+0x17c>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a23      	ldr	r2, [pc, #140]	; (80027dc <HAL_DMA_Abort_IT+0x1c0>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d022      	beq.n	8002798 <HAL_DMA_Abort_IT+0x17c>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a22      	ldr	r2, [pc, #136]	; (80027e0 <HAL_DMA_Abort_IT+0x1c4>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d01d      	beq.n	8002798 <HAL_DMA_Abort_IT+0x17c>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a20      	ldr	r2, [pc, #128]	; (80027e4 <HAL_DMA_Abort_IT+0x1c8>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d018      	beq.n	8002798 <HAL_DMA_Abort_IT+0x17c>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a1f      	ldr	r2, [pc, #124]	; (80027e8 <HAL_DMA_Abort_IT+0x1cc>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d013      	beq.n	8002798 <HAL_DMA_Abort_IT+0x17c>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a1d      	ldr	r2, [pc, #116]	; (80027ec <HAL_DMA_Abort_IT+0x1d0>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d00e      	beq.n	8002798 <HAL_DMA_Abort_IT+0x17c>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a1c      	ldr	r2, [pc, #112]	; (80027f0 <HAL_DMA_Abort_IT+0x1d4>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d009      	beq.n	8002798 <HAL_DMA_Abort_IT+0x17c>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a1a      	ldr	r2, [pc, #104]	; (80027f4 <HAL_DMA_Abort_IT+0x1d8>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d004      	beq.n	8002798 <HAL_DMA_Abort_IT+0x17c>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a19      	ldr	r2, [pc, #100]	; (80027f8 <HAL_DMA_Abort_IT+0x1dc>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d108      	bne.n	80027aa <HAL_DMA_Abort_IT+0x18e>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 0201 	bic.w	r2, r2, #1
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	e178      	b.n	8002a9c <HAL_DMA_Abort_IT+0x480>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f022 0201 	bic.w	r2, r2, #1
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	e16f      	b.n	8002a9c <HAL_DMA_Abort_IT+0x480>
 80027bc:	40020010 	.word	0x40020010
 80027c0:	40020028 	.word	0x40020028
 80027c4:	40020040 	.word	0x40020040
 80027c8:	40020058 	.word	0x40020058
 80027cc:	40020070 	.word	0x40020070
 80027d0:	40020088 	.word	0x40020088
 80027d4:	400200a0 	.word	0x400200a0
 80027d8:	400200b8 	.word	0x400200b8
 80027dc:	40020410 	.word	0x40020410
 80027e0:	40020428 	.word	0x40020428
 80027e4:	40020440 	.word	0x40020440
 80027e8:	40020458 	.word	0x40020458
 80027ec:	40020470 	.word	0x40020470
 80027f0:	40020488 	.word	0x40020488
 80027f4:	400204a0 	.word	0x400204a0
 80027f8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f022 020e 	bic.w	r2, r2, #14
 800280a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a6c      	ldr	r2, [pc, #432]	; (80029c4 <HAL_DMA_Abort_IT+0x3a8>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d04a      	beq.n	80028ac <HAL_DMA_Abort_IT+0x290>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a6b      	ldr	r2, [pc, #428]	; (80029c8 <HAL_DMA_Abort_IT+0x3ac>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d045      	beq.n	80028ac <HAL_DMA_Abort_IT+0x290>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a69      	ldr	r2, [pc, #420]	; (80029cc <HAL_DMA_Abort_IT+0x3b0>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d040      	beq.n	80028ac <HAL_DMA_Abort_IT+0x290>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a68      	ldr	r2, [pc, #416]	; (80029d0 <HAL_DMA_Abort_IT+0x3b4>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d03b      	beq.n	80028ac <HAL_DMA_Abort_IT+0x290>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a66      	ldr	r2, [pc, #408]	; (80029d4 <HAL_DMA_Abort_IT+0x3b8>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d036      	beq.n	80028ac <HAL_DMA_Abort_IT+0x290>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a65      	ldr	r2, [pc, #404]	; (80029d8 <HAL_DMA_Abort_IT+0x3bc>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d031      	beq.n	80028ac <HAL_DMA_Abort_IT+0x290>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a63      	ldr	r2, [pc, #396]	; (80029dc <HAL_DMA_Abort_IT+0x3c0>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d02c      	beq.n	80028ac <HAL_DMA_Abort_IT+0x290>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a62      	ldr	r2, [pc, #392]	; (80029e0 <HAL_DMA_Abort_IT+0x3c4>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d027      	beq.n	80028ac <HAL_DMA_Abort_IT+0x290>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a60      	ldr	r2, [pc, #384]	; (80029e4 <HAL_DMA_Abort_IT+0x3c8>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d022      	beq.n	80028ac <HAL_DMA_Abort_IT+0x290>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a5f      	ldr	r2, [pc, #380]	; (80029e8 <HAL_DMA_Abort_IT+0x3cc>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d01d      	beq.n	80028ac <HAL_DMA_Abort_IT+0x290>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a5d      	ldr	r2, [pc, #372]	; (80029ec <HAL_DMA_Abort_IT+0x3d0>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d018      	beq.n	80028ac <HAL_DMA_Abort_IT+0x290>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a5c      	ldr	r2, [pc, #368]	; (80029f0 <HAL_DMA_Abort_IT+0x3d4>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d013      	beq.n	80028ac <HAL_DMA_Abort_IT+0x290>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a5a      	ldr	r2, [pc, #360]	; (80029f4 <HAL_DMA_Abort_IT+0x3d8>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d00e      	beq.n	80028ac <HAL_DMA_Abort_IT+0x290>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a59      	ldr	r2, [pc, #356]	; (80029f8 <HAL_DMA_Abort_IT+0x3dc>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d009      	beq.n	80028ac <HAL_DMA_Abort_IT+0x290>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a57      	ldr	r2, [pc, #348]	; (80029fc <HAL_DMA_Abort_IT+0x3e0>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d004      	beq.n	80028ac <HAL_DMA_Abort_IT+0x290>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a56      	ldr	r2, [pc, #344]	; (8002a00 <HAL_DMA_Abort_IT+0x3e4>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d108      	bne.n	80028be <HAL_DMA_Abort_IT+0x2a2>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f022 0201 	bic.w	r2, r2, #1
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	e007      	b.n	80028ce <HAL_DMA_Abort_IT+0x2b2>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f022 0201 	bic.w	r2, r2, #1
 80028cc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a3c      	ldr	r2, [pc, #240]	; (80029c4 <HAL_DMA_Abort_IT+0x3a8>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d072      	beq.n	80029be <HAL_DMA_Abort_IT+0x3a2>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a3a      	ldr	r2, [pc, #232]	; (80029c8 <HAL_DMA_Abort_IT+0x3ac>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d06d      	beq.n	80029be <HAL_DMA_Abort_IT+0x3a2>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a39      	ldr	r2, [pc, #228]	; (80029cc <HAL_DMA_Abort_IT+0x3b0>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d068      	beq.n	80029be <HAL_DMA_Abort_IT+0x3a2>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a37      	ldr	r2, [pc, #220]	; (80029d0 <HAL_DMA_Abort_IT+0x3b4>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d063      	beq.n	80029be <HAL_DMA_Abort_IT+0x3a2>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a36      	ldr	r2, [pc, #216]	; (80029d4 <HAL_DMA_Abort_IT+0x3b8>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d05e      	beq.n	80029be <HAL_DMA_Abort_IT+0x3a2>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a34      	ldr	r2, [pc, #208]	; (80029d8 <HAL_DMA_Abort_IT+0x3bc>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d059      	beq.n	80029be <HAL_DMA_Abort_IT+0x3a2>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a33      	ldr	r2, [pc, #204]	; (80029dc <HAL_DMA_Abort_IT+0x3c0>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d054      	beq.n	80029be <HAL_DMA_Abort_IT+0x3a2>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a31      	ldr	r2, [pc, #196]	; (80029e0 <HAL_DMA_Abort_IT+0x3c4>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d04f      	beq.n	80029be <HAL_DMA_Abort_IT+0x3a2>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a30      	ldr	r2, [pc, #192]	; (80029e4 <HAL_DMA_Abort_IT+0x3c8>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d04a      	beq.n	80029be <HAL_DMA_Abort_IT+0x3a2>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a2e      	ldr	r2, [pc, #184]	; (80029e8 <HAL_DMA_Abort_IT+0x3cc>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d045      	beq.n	80029be <HAL_DMA_Abort_IT+0x3a2>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a2d      	ldr	r2, [pc, #180]	; (80029ec <HAL_DMA_Abort_IT+0x3d0>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d040      	beq.n	80029be <HAL_DMA_Abort_IT+0x3a2>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a2b      	ldr	r2, [pc, #172]	; (80029f0 <HAL_DMA_Abort_IT+0x3d4>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d03b      	beq.n	80029be <HAL_DMA_Abort_IT+0x3a2>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a2a      	ldr	r2, [pc, #168]	; (80029f4 <HAL_DMA_Abort_IT+0x3d8>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d036      	beq.n	80029be <HAL_DMA_Abort_IT+0x3a2>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a28      	ldr	r2, [pc, #160]	; (80029f8 <HAL_DMA_Abort_IT+0x3dc>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d031      	beq.n	80029be <HAL_DMA_Abort_IT+0x3a2>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a27      	ldr	r2, [pc, #156]	; (80029fc <HAL_DMA_Abort_IT+0x3e0>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d02c      	beq.n	80029be <HAL_DMA_Abort_IT+0x3a2>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a25      	ldr	r2, [pc, #148]	; (8002a00 <HAL_DMA_Abort_IT+0x3e4>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d027      	beq.n	80029be <HAL_DMA_Abort_IT+0x3a2>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a24      	ldr	r2, [pc, #144]	; (8002a04 <HAL_DMA_Abort_IT+0x3e8>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d022      	beq.n	80029be <HAL_DMA_Abort_IT+0x3a2>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a22      	ldr	r2, [pc, #136]	; (8002a08 <HAL_DMA_Abort_IT+0x3ec>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d01d      	beq.n	80029be <HAL_DMA_Abort_IT+0x3a2>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a21      	ldr	r2, [pc, #132]	; (8002a0c <HAL_DMA_Abort_IT+0x3f0>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d018      	beq.n	80029be <HAL_DMA_Abort_IT+0x3a2>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a1f      	ldr	r2, [pc, #124]	; (8002a10 <HAL_DMA_Abort_IT+0x3f4>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d013      	beq.n	80029be <HAL_DMA_Abort_IT+0x3a2>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a1e      	ldr	r2, [pc, #120]	; (8002a14 <HAL_DMA_Abort_IT+0x3f8>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d00e      	beq.n	80029be <HAL_DMA_Abort_IT+0x3a2>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a1c      	ldr	r2, [pc, #112]	; (8002a18 <HAL_DMA_Abort_IT+0x3fc>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d009      	beq.n	80029be <HAL_DMA_Abort_IT+0x3a2>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a1b      	ldr	r2, [pc, #108]	; (8002a1c <HAL_DMA_Abort_IT+0x400>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d004      	beq.n	80029be <HAL_DMA_Abort_IT+0x3a2>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a19      	ldr	r2, [pc, #100]	; (8002a20 <HAL_DMA_Abort_IT+0x404>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d132      	bne.n	8002a24 <HAL_DMA_Abort_IT+0x408>
 80029be:	2301      	movs	r3, #1
 80029c0:	e031      	b.n	8002a26 <HAL_DMA_Abort_IT+0x40a>
 80029c2:	bf00      	nop
 80029c4:	40020010 	.word	0x40020010
 80029c8:	40020028 	.word	0x40020028
 80029cc:	40020040 	.word	0x40020040
 80029d0:	40020058 	.word	0x40020058
 80029d4:	40020070 	.word	0x40020070
 80029d8:	40020088 	.word	0x40020088
 80029dc:	400200a0 	.word	0x400200a0
 80029e0:	400200b8 	.word	0x400200b8
 80029e4:	40020410 	.word	0x40020410
 80029e8:	40020428 	.word	0x40020428
 80029ec:	40020440 	.word	0x40020440
 80029f0:	40020458 	.word	0x40020458
 80029f4:	40020470 	.word	0x40020470
 80029f8:	40020488 	.word	0x40020488
 80029fc:	400204a0 	.word	0x400204a0
 8002a00:	400204b8 	.word	0x400204b8
 8002a04:	58025408 	.word	0x58025408
 8002a08:	5802541c 	.word	0x5802541c
 8002a0c:	58025430 	.word	0x58025430
 8002a10:	58025444 	.word	0x58025444
 8002a14:	58025458 	.word	0x58025458
 8002a18:	5802546c 	.word	0x5802546c
 8002a1c:	58025480 	.word	0x58025480
 8002a20:	58025494 	.word	0x58025494
 8002a24:	2300      	movs	r3, #0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d028      	beq.n	8002a7c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a38:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a3e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a44:	f003 031f 	and.w	r3, r3, #31
 8002a48:	2201      	movs	r2, #1
 8002a4a:	409a      	lsls	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002a58:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00c      	beq.n	8002a7c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a70:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002a7a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d003      	beq.n	8002a9c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop

08002aa8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e0e3      	b.n	8002c82 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d106      	bne.n	8002ad2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2223      	movs	r2, #35	; 0x23
 8002ac8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f7fe fb05 	bl	80010dc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ad2:	4b6e      	ldr	r3, [pc, #440]	; (8002c8c <HAL_ETH_Init+0x1e4>)
 8002ad4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002ad8:	4a6c      	ldr	r2, [pc, #432]	; (8002c8c <HAL_ETH_Init+0x1e4>)
 8002ada:	f043 0302 	orr.w	r3, r3, #2
 8002ade:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002ae2:	4b6a      	ldr	r3, [pc, #424]	; (8002c8c <HAL_ETH_Init+0x1e4>)
 8002ae4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	60bb      	str	r3, [r7, #8]
 8002aee:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	7a1b      	ldrb	r3, [r3, #8]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d103      	bne.n	8002b00 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002af8:	2000      	movs	r0, #0
 8002afa:	f7ff f94d 	bl	8001d98 <HAL_SYSCFG_ETHInterfaceSelect>
 8002afe:	e003      	b.n	8002b08 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002b00:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002b04:	f7ff f948 	bl	8001d98 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8002b08:	4b61      	ldr	r3, [pc, #388]	; (8002c90 <HAL_ETH_Init+0x1e8>)
 8002b0a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	6812      	ldr	r2, [r2, #0]
 8002b1a:	f043 0301 	orr.w	r3, r3, #1
 8002b1e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002b22:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b24:	f7ff f908 	bl	8001d38 <HAL_GetTick>
 8002b28:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002b2a:	e011      	b.n	8002b50 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002b2c:	f7ff f904 	bl	8001d38 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002b3a:	d909      	bls.n	8002b50 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2204      	movs	r2, #4
 8002b40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	22e0      	movs	r2, #224	; 0xe0
 8002b48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e098      	b.n	8002c82 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1e4      	bne.n	8002b2c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f89e 	bl	8002ca4 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002b68:	f001 fcd8 	bl	800451c <HAL_RCC_GetHCLKFreq>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	4a49      	ldr	r2, [pc, #292]	; (8002c94 <HAL_ETH_Init+0x1ec>)
 8002b70:	fba2 2303 	umull	r2, r3, r2, r3
 8002b74:	0c9a      	lsrs	r2, r3, #18
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	3a01      	subs	r2, #1
 8002b7c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 fa81 	bl	8003088 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b8e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002b92:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	6812      	ldr	r2, [r2, #0]
 8002b9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002b9e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002ba2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	f003 0303 	and.w	r3, r3, #3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d009      	beq.n	8002bc6 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	22e0      	movs	r2, #224	; 0xe0
 8002bbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e05d      	b.n	8002c82 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bce:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002bd2:	4b31      	ldr	r3, [pc, #196]	; (8002c98 <HAL_ETH_Init+0x1f0>)
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	6952      	ldr	r2, [r2, #20]
 8002bda:	0051      	lsls	r1, r2, #1
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	6812      	ldr	r2, [r2, #0]
 8002be0:	430b      	orrs	r3, r1
 8002be2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002be6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 fae9 	bl	80031c2 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f000 fb2f 	bl	8003254 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	3305      	adds	r3, #5
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	021a      	lsls	r2, r3, #8
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	3304      	adds	r3, #4
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	4619      	mov	r1, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	3303      	adds	r3, #3
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	061a      	lsls	r2, r3, #24
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	3302      	adds	r3, #2
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	041b      	lsls	r3, r3, #16
 8002c28:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002c34:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002c42:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002c44:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	4b11      	ldr	r3, [pc, #68]	; (8002c9c <HAL_ETH_Init+0x1f4>)
 8002c56:	430b      	orrs	r3, r1
 8002c58:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f8d3 1710 	ldr.w	r1, [r3, #1808]	; 0x710
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	4b0d      	ldr	r3, [pc, #52]	; (8002ca0 <HAL_ETH_Init+0x1f8>)
 8002c6a:	430b      	orrs	r3, r1
 8002c6c:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2210      	movs	r2, #16
 8002c7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	58024400 	.word	0x58024400
 8002c90:	58000400 	.word	0x58000400
 8002c94:	431bde83 	.word	0x431bde83
 8002c98:	ffff8001 	.word	0xffff8001
 8002c9c:	0c020060 	.word	0x0c020060
 8002ca0:	0c20c000 	.word	0x0c20c000

08002ca4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002cb4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002cbc:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002cbe:	f001 fc2d 	bl	800451c <HAL_RCC_GetHCLKFreq>
 8002cc2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	4a1a      	ldr	r2, [pc, #104]	; (8002d30 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d804      	bhi.n	8002cd6 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cd2:	60fb      	str	r3, [r7, #12]
 8002cd4:	e022      	b.n	8002d1c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	4a16      	ldr	r2, [pc, #88]	; (8002d34 <HAL_ETH_SetMDIOClockRange+0x90>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d204      	bcs.n	8002ce8 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	e019      	b.n	8002d1c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	4a13      	ldr	r2, [pc, #76]	; (8002d38 <HAL_ETH_SetMDIOClockRange+0x94>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d915      	bls.n	8002d1c <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	4a12      	ldr	r2, [pc, #72]	; (8002d3c <HAL_ETH_SetMDIOClockRange+0x98>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d804      	bhi.n	8002d02 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cfe:	60fb      	str	r3, [r7, #12]
 8002d00:	e00c      	b.n	8002d1c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	4a0e      	ldr	r2, [pc, #56]	; (8002d40 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d804      	bhi.n	8002d14 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d10:	60fb      	str	r3, [r7, #12]
 8002d12:	e003      	b.n	8002d1c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8002d1a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002d26:	bf00      	nop
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	02160ebf 	.word	0x02160ebf
 8002d34:	03938700 	.word	0x03938700
 8002d38:	05f5e0ff 	.word	0x05f5e0ff
 8002d3c:	08f0d17f 	.word	0x08f0d17f
 8002d40:	0ee6b27f 	.word	0x0ee6b27f

08002d44 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002d56:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	791b      	ldrb	r3, [r3, #4]
 8002d5c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002d5e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	7b1b      	ldrb	r3, [r3, #12]
 8002d64:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002d66:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	7b5b      	ldrb	r3, [r3, #13]
 8002d6c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002d6e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	7b9b      	ldrb	r3, [r3, #14]
 8002d74:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002d76:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	7bdb      	ldrb	r3, [r3, #15]
 8002d7c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002d7e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	7c12      	ldrb	r2, [r2, #16]
 8002d84:	2a00      	cmp	r2, #0
 8002d86:	d102      	bne.n	8002d8e <ETH_SetMACConfig+0x4a>
 8002d88:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002d8c:	e000      	b.n	8002d90 <ETH_SetMACConfig+0x4c>
 8002d8e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002d90:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002d92:	683a      	ldr	r2, [r7, #0]
 8002d94:	7c52      	ldrb	r2, [r2, #17]
 8002d96:	2a00      	cmp	r2, #0
 8002d98:	d102      	bne.n	8002da0 <ETH_SetMACConfig+0x5c>
 8002d9a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d9e:	e000      	b.n	8002da2 <ETH_SetMACConfig+0x5e>
 8002da0:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002da2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	7c9b      	ldrb	r3, [r3, #18]
 8002da8:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002daa:	431a      	orrs	r2, r3
               macconf->Speed |
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002db0:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002db6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	7f1b      	ldrb	r3, [r3, #28]
 8002dbc:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002dbe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	7f5b      	ldrb	r3, [r3, #29]
 8002dc4:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002dc6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	7f92      	ldrb	r2, [r2, #30]
 8002dcc:	2a00      	cmp	r2, #0
 8002dce:	d102      	bne.n	8002dd6 <ETH_SetMACConfig+0x92>
 8002dd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dd4:	e000      	b.n	8002dd8 <ETH_SetMACConfig+0x94>
 8002dd6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002dd8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	7fdb      	ldrb	r3, [r3, #31]
 8002dde:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002de0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002de2:	683a      	ldr	r2, [r7, #0]
 8002de4:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002de8:	2a00      	cmp	r2, #0
 8002dea:	d102      	bne.n	8002df2 <ETH_SetMACConfig+0xae>
 8002dec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002df0:	e000      	b.n	8002df4 <ETH_SetMACConfig+0xb0>
 8002df2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002df4:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002dfa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002e02:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002e04:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	4b56      	ldr	r3, [pc, #344]	; (8002f70 <ETH_SetMACConfig+0x22c>)
 8002e16:	4013      	ands	r3, r2
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	6812      	ldr	r2, [r2, #0]
 8002e1c:	68f9      	ldr	r1, [r7, #12]
 8002e1e:	430b      	orrs	r3, r1
 8002e20:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e26:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e2e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002e30:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e38:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002e3a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002e42:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002e44:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002e46:	683a      	ldr	r2, [r7, #0]
 8002e48:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002e4c:	2a00      	cmp	r2, #0
 8002e4e:	d102      	bne.n	8002e56 <ETH_SetMACConfig+0x112>
 8002e50:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e54:	e000      	b.n	8002e58 <ETH_SetMACConfig+0x114>
 8002e56:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002e58:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	685a      	ldr	r2, [r3, #4]
 8002e68:	4b42      	ldr	r3, [pc, #264]	; (8002f74 <ETH_SetMACConfig+0x230>)
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	6812      	ldr	r2, [r2, #0]
 8002e70:	68f9      	ldr	r1, [r7, #12]
 8002e72:	430b      	orrs	r3, r1
 8002e74:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e7c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002e82:	4313      	orrs	r3, r2
 8002e84:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68da      	ldr	r2, [r3, #12]
 8002e8c:	4b3a      	ldr	r3, [pc, #232]	; (8002f78 <ETH_SetMACConfig+0x234>)
 8002e8e:	4013      	ands	r3, r2
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	6812      	ldr	r2, [r2, #0]
 8002e94:	68f9      	ldr	r1, [r7, #12]
 8002e96:	430b      	orrs	r3, r1
 8002e98:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002ea0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002ea6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002ea8:	683a      	ldr	r2, [r7, #0]
 8002eaa:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002eae:	2a00      	cmp	r2, #0
 8002eb0:	d101      	bne.n	8002eb6 <ETH_SetMACConfig+0x172>
 8002eb2:	2280      	movs	r2, #128	; 0x80
 8002eb4:	e000      	b.n	8002eb8 <ETH_SetMACConfig+0x174>
 8002eb6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002eb8:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ebe:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002eca:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002ece:	4013      	ands	r3, r2
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	6812      	ldr	r2, [r2, #0]
 8002ed4:	68f9      	ldr	r1, [r7, #12]
 8002ed6:	430b      	orrs	r3, r1
 8002ed8:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002ee0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002ee8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002eea:	4313      	orrs	r3, r2
 8002eec:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef6:	f023 0103 	bic.w	r1, r3, #3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	430a      	orrs	r2, r1
 8002f02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002f0e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002f2a:	2a00      	cmp	r2, #0
 8002f2c:	d101      	bne.n	8002f32 <ETH_SetMACConfig+0x1ee>
 8002f2e:	2240      	movs	r2, #64	; 0x40
 8002f30:	e000      	b.n	8002f34 <ETH_SetMACConfig+0x1f0>
 8002f32:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002f34:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002f3c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002f3e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002f46:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002f54:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002f64:	bf00      	nop
 8002f66:	3714      	adds	r7, #20
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr
 8002f70:	00048083 	.word	0x00048083
 8002f74:	c0f88000 	.word	0xc0f88000
 8002f78:	fffffef0 	.word	0xfffffef0

08002f7c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	4b38      	ldr	r3, [pc, #224]	; (8003074 <ETH_SetDMAConfig+0xf8>)
 8002f92:	4013      	ands	r3, r2
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	6811      	ldr	r1, [r2, #0]
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	6812      	ldr	r2, [r2, #0]
 8002f9c:	430b      	orrs	r3, r1
 8002f9e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002fa2:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	791b      	ldrb	r3, [r3, #4]
 8002fa8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002fae:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	7b1b      	ldrb	r3, [r3, #12]
 8002fb4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	4b2c      	ldr	r3, [pc, #176]	; (8003078 <ETH_SetDMAConfig+0xfc>)
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	6812      	ldr	r2, [r2, #0]
 8002fcc:	68f9      	ldr	r1, [r7, #12]
 8002fce:	430b      	orrs	r3, r1
 8002fd0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002fd4:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	7b5b      	ldrb	r3, [r3, #13]
 8002fda:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fec:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8002ff0:	4b22      	ldr	r3, [pc, #136]	; (800307c <ETH_SetDMAConfig+0x100>)
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6812      	ldr	r2, [r2, #0]
 8002ff8:	68f9      	ldr	r1, [r7, #12]
 8002ffa:	430b      	orrs	r3, r1
 8002ffc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003000:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	7d1b      	ldrb	r3, [r3, #20]
 800300c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800300e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	7f5b      	ldrb	r3, [r3, #29]
 8003014:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8003016:	4313      	orrs	r3, r2
 8003018:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003022:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8003026:	4b16      	ldr	r3, [pc, #88]	; (8003080 <ETH_SetDMAConfig+0x104>)
 8003028:	4013      	ands	r3, r2
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	6812      	ldr	r2, [r2, #0]
 800302e:	68f9      	ldr	r1, [r7, #12]
 8003030:	430b      	orrs	r3, r1
 8003032:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003036:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	7f1b      	ldrb	r3, [r3, #28]
 800303e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003044:	4313      	orrs	r3, r2
 8003046:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003050:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003054:	4b0b      	ldr	r3, [pc, #44]	; (8003084 <ETH_SetDMAConfig+0x108>)
 8003056:	4013      	ands	r3, r2
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	6812      	ldr	r2, [r2, #0]
 800305c:	68f9      	ldr	r1, [r7, #12]
 800305e:	430b      	orrs	r3, r1
 8003060:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003064:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8003068:	bf00      	nop
 800306a:	3714      	adds	r7, #20
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr
 8003074:	ffff87fd 	.word	0xffff87fd
 8003078:	ffff2ffe 	.word	0xffff2ffe
 800307c:	fffec000 	.word	0xfffec000
 8003080:	ffc0efef 	.word	0xffc0efef
 8003084:	7fc0ffff 	.word	0x7fc0ffff

08003088 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b0a4      	sub	sp, #144	; 0x90
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003090:	2301      	movs	r3, #1
 8003092:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003096:	2300      	movs	r3, #0
 8003098:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800309a:	2300      	movs	r3, #0
 800309c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80030a0:	2300      	movs	r3, #0
 80030a2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80030a6:	2301      	movs	r3, #1
 80030a8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80030ac:	2301      	movs	r3, #1
 80030ae:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80030b2:	2301      	movs	r3, #1
 80030b4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80030b8:	2300      	movs	r3, #0
 80030ba:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80030be:	2301      	movs	r3, #1
 80030c0:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80030c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030c8:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80030ca:	2300      	movs	r3, #0
 80030cc:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 80030d0:	2300      	movs	r3, #0
 80030d2:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80030d4:	2300      	movs	r3, #0
 80030d6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80030da:	2300      	movs	r3, #0
 80030dc:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 80030e0:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80030e4:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80030e6:	2300      	movs	r3, #0
 80030e8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80030ec:	2300      	movs	r3, #0
 80030ee:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80030f0:	2301      	movs	r3, #1
 80030f2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80030f6:	2300      	movs	r3, #0
 80030f8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80030fc:	2300      	movs	r3, #0
 80030fe:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8003102:	2300      	movs	r3, #0
 8003104:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8003106:	2300      	movs	r3, #0
 8003108:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800310a:	2300      	movs	r3, #0
 800310c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800310e:	2300      	movs	r3, #0
 8003110:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003114:	2300      	movs	r3, #0
 8003116:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800311a:	2301      	movs	r3, #1
 800311c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003120:	2320      	movs	r3, #32
 8003122:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8003126:	2301      	movs	r3, #1
 8003128:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800312c:	2300      	movs	r3, #0
 800312e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8003132:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8003136:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003138:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800313c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800313e:	2300      	movs	r3, #0
 8003140:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003144:	2302      	movs	r3, #2
 8003146:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800314a:	2300      	movs	r3, #0
 800314c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003150:	2300      	movs	r3, #0
 8003152:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8003156:	2300      	movs	r3, #0
 8003158:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800315c:	2301      	movs	r3, #1
 800315e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8003162:	2300      	movs	r3, #0
 8003164:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8003166:	2301      	movs	r3, #1
 8003168:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800316c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003170:	4619      	mov	r1, r3
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f7ff fde6 	bl	8002d44 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003178:	2301      	movs	r3, #1
 800317a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800317c:	2301      	movs	r3, #1
 800317e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003180:	2300      	movs	r3, #0
 8003182:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003184:	2300      	movs	r3, #0
 8003186:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800318a:	2300      	movs	r3, #0
 800318c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800318e:	2300      	movs	r3, #0
 8003190:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003192:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003196:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003198:	2300      	movs	r3, #0
 800319a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800319c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80031a0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80031a2:	2300      	movs	r3, #0
 80031a4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80031a8:	f44f 7306 	mov.w	r3, #536	; 0x218
 80031ac:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80031ae:	f107 0308 	add.w	r3, r7, #8
 80031b2:	4619      	mov	r1, r3
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f7ff fee1 	bl	8002f7c <ETH_SetDMAConfig>
}
 80031ba:	bf00      	nop
 80031bc:	3790      	adds	r7, #144	; 0x90
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b085      	sub	sp, #20
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80031ca:	2300      	movs	r3, #0
 80031cc:	60fb      	str	r3, [r7, #12]
 80031ce:	e01d      	b.n	800320c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68d9      	ldr	r1, [r3, #12]
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	4613      	mov	r3, r2
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	4413      	add	r3, r2
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	440b      	add	r3, r1
 80031e0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	2200      	movs	r2, #0
 80031e6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	2200      	movs	r2, #0
 80031ec:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	2200      	movs	r2, #0
 80031f2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	2200      	movs	r2, #0
 80031f8:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80031fa:	68b9      	ldr	r1, [r7, #8]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	3206      	adds	r2, #6
 8003202:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	3301      	adds	r3, #1
 800320a:	60fb      	str	r3, [r7, #12]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2b03      	cmp	r3, #3
 8003210:	d9de      	bls.n	80031d0 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003220:	461a      	mov	r2, r3
 8003222:	2303      	movs	r3, #3
 8003224:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	68da      	ldr	r2, [r3, #12]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003234:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	68da      	ldr	r2, [r3, #12]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003244:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8003248:	bf00      	nop
 800324a:	3714      	adds	r7, #20
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800325c:	2300      	movs	r3, #0
 800325e:	60fb      	str	r3, [r7, #12]
 8003260:	e023      	b.n	80032aa <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6919      	ldr	r1, [r3, #16]
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	4613      	mov	r3, r2
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	4413      	add	r3, r2
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	440b      	add	r3, r1
 8003272:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	2200      	movs	r2, #0
 8003278:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	2200      	movs	r2, #0
 800327e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	2200      	movs	r2, #0
 8003284:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	2200      	movs	r2, #0
 800328a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	2200      	movs	r2, #0
 8003290:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	2200      	movs	r2, #0
 8003296:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003298:	68b9      	ldr	r1, [r7, #8]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	3212      	adds	r2, #18
 80032a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	3301      	adds	r3, #1
 80032a8:	60fb      	str	r3, [r7, #12]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2b03      	cmp	r3, #3
 80032ae:	d9d8      	bls.n	8003262 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032d6:	461a      	mov	r2, r3
 80032d8:	2303      	movs	r3, #3
 80032da:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	691a      	ldr	r2, [r3, #16]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032ea:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032fe:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8003302:	bf00      	nop
 8003304:	3714      	adds	r7, #20
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
	...

08003310 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003310:	b480      	push	{r7}
 8003312:	b089      	sub	sp, #36	; 0x24
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800331a:	2300      	movs	r3, #0
 800331c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800331e:	4b86      	ldr	r3, [pc, #536]	; (8003538 <HAL_GPIO_Init+0x228>)
 8003320:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003322:	e18c      	b.n	800363e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	2101      	movs	r1, #1
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	fa01 f303 	lsl.w	r3, r1, r3
 8003330:	4013      	ands	r3, r2
 8003332:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	2b00      	cmp	r3, #0
 8003338:	f000 817e 	beq.w	8003638 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f003 0303 	and.w	r3, r3, #3
 8003344:	2b01      	cmp	r3, #1
 8003346:	d005      	beq.n	8003354 <HAL_GPIO_Init+0x44>
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f003 0303 	and.w	r3, r3, #3
 8003350:	2b02      	cmp	r3, #2
 8003352:	d130      	bne.n	80033b6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	2203      	movs	r2, #3
 8003360:	fa02 f303 	lsl.w	r3, r2, r3
 8003364:	43db      	mvns	r3, r3
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	4013      	ands	r3, r2
 800336a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	68da      	ldr	r2, [r3, #12]
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	4313      	orrs	r3, r2
 800337c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800338a:	2201      	movs	r2, #1
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	fa02 f303 	lsl.w	r3, r2, r3
 8003392:	43db      	mvns	r3, r3
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	4013      	ands	r3, r2
 8003398:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	091b      	lsrs	r3, r3, #4
 80033a0:	f003 0201 	and.w	r2, r3, #1
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	fa02 f303 	lsl.w	r3, r2, r3
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f003 0303 	and.w	r3, r3, #3
 80033be:	2b03      	cmp	r3, #3
 80033c0:	d017      	beq.n	80033f2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	2203      	movs	r2, #3
 80033ce:	fa02 f303 	lsl.w	r3, r2, r3
 80033d2:	43db      	mvns	r3, r3
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	4013      	ands	r3, r2
 80033d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	689a      	ldr	r2, [r3, #8]
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	fa02 f303 	lsl.w	r3, r2, r3
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f003 0303 	and.w	r3, r3, #3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d123      	bne.n	8003446 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	08da      	lsrs	r2, r3, #3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	3208      	adds	r2, #8
 8003406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800340a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	f003 0307 	and.w	r3, r3, #7
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	220f      	movs	r2, #15
 8003416:	fa02 f303 	lsl.w	r3, r2, r3
 800341a:	43db      	mvns	r3, r3
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	4013      	ands	r3, r2
 8003420:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	691a      	ldr	r2, [r3, #16]
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	f003 0307 	and.w	r3, r3, #7
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	fa02 f303 	lsl.w	r3, r2, r3
 8003432:	69ba      	ldr	r2, [r7, #24]
 8003434:	4313      	orrs	r3, r2
 8003436:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	08da      	lsrs	r2, r3, #3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	3208      	adds	r2, #8
 8003440:	69b9      	ldr	r1, [r7, #24]
 8003442:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	2203      	movs	r2, #3
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	43db      	mvns	r3, r3
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	4013      	ands	r3, r2
 800345c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f003 0203 	and.w	r2, r3, #3
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	fa02 f303 	lsl.w	r3, r2, r3
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	4313      	orrs	r3, r2
 8003472:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003482:	2b00      	cmp	r3, #0
 8003484:	f000 80d8 	beq.w	8003638 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003488:	4b2c      	ldr	r3, [pc, #176]	; (800353c <HAL_GPIO_Init+0x22c>)
 800348a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800348e:	4a2b      	ldr	r2, [pc, #172]	; (800353c <HAL_GPIO_Init+0x22c>)
 8003490:	f043 0302 	orr.w	r3, r3, #2
 8003494:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003498:	4b28      	ldr	r3, [pc, #160]	; (800353c <HAL_GPIO_Init+0x22c>)
 800349a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	60fb      	str	r3, [r7, #12]
 80034a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034a6:	4a26      	ldr	r2, [pc, #152]	; (8003540 <HAL_GPIO_Init+0x230>)
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	089b      	lsrs	r3, r3, #2
 80034ac:	3302      	adds	r3, #2
 80034ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	f003 0303 	and.w	r3, r3, #3
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	220f      	movs	r2, #15
 80034be:	fa02 f303 	lsl.w	r3, r2, r3
 80034c2:	43db      	mvns	r3, r3
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	4013      	ands	r3, r2
 80034c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a1d      	ldr	r2, [pc, #116]	; (8003544 <HAL_GPIO_Init+0x234>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d04a      	beq.n	8003568 <HAL_GPIO_Init+0x258>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a1c      	ldr	r2, [pc, #112]	; (8003548 <HAL_GPIO_Init+0x238>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d02b      	beq.n	8003532 <HAL_GPIO_Init+0x222>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a1b      	ldr	r2, [pc, #108]	; (800354c <HAL_GPIO_Init+0x23c>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d025      	beq.n	800352e <HAL_GPIO_Init+0x21e>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a1a      	ldr	r2, [pc, #104]	; (8003550 <HAL_GPIO_Init+0x240>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d01f      	beq.n	800352a <HAL_GPIO_Init+0x21a>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a19      	ldr	r2, [pc, #100]	; (8003554 <HAL_GPIO_Init+0x244>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d019      	beq.n	8003526 <HAL_GPIO_Init+0x216>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a18      	ldr	r2, [pc, #96]	; (8003558 <HAL_GPIO_Init+0x248>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d013      	beq.n	8003522 <HAL_GPIO_Init+0x212>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a17      	ldr	r2, [pc, #92]	; (800355c <HAL_GPIO_Init+0x24c>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d00d      	beq.n	800351e <HAL_GPIO_Init+0x20e>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a16      	ldr	r2, [pc, #88]	; (8003560 <HAL_GPIO_Init+0x250>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d007      	beq.n	800351a <HAL_GPIO_Init+0x20a>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a15      	ldr	r2, [pc, #84]	; (8003564 <HAL_GPIO_Init+0x254>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d101      	bne.n	8003516 <HAL_GPIO_Init+0x206>
 8003512:	2309      	movs	r3, #9
 8003514:	e029      	b.n	800356a <HAL_GPIO_Init+0x25a>
 8003516:	230a      	movs	r3, #10
 8003518:	e027      	b.n	800356a <HAL_GPIO_Init+0x25a>
 800351a:	2307      	movs	r3, #7
 800351c:	e025      	b.n	800356a <HAL_GPIO_Init+0x25a>
 800351e:	2306      	movs	r3, #6
 8003520:	e023      	b.n	800356a <HAL_GPIO_Init+0x25a>
 8003522:	2305      	movs	r3, #5
 8003524:	e021      	b.n	800356a <HAL_GPIO_Init+0x25a>
 8003526:	2304      	movs	r3, #4
 8003528:	e01f      	b.n	800356a <HAL_GPIO_Init+0x25a>
 800352a:	2303      	movs	r3, #3
 800352c:	e01d      	b.n	800356a <HAL_GPIO_Init+0x25a>
 800352e:	2302      	movs	r3, #2
 8003530:	e01b      	b.n	800356a <HAL_GPIO_Init+0x25a>
 8003532:	2301      	movs	r3, #1
 8003534:	e019      	b.n	800356a <HAL_GPIO_Init+0x25a>
 8003536:	bf00      	nop
 8003538:	58000080 	.word	0x58000080
 800353c:	58024400 	.word	0x58024400
 8003540:	58000400 	.word	0x58000400
 8003544:	58020000 	.word	0x58020000
 8003548:	58020400 	.word	0x58020400
 800354c:	58020800 	.word	0x58020800
 8003550:	58020c00 	.word	0x58020c00
 8003554:	58021000 	.word	0x58021000
 8003558:	58021400 	.word	0x58021400
 800355c:	58021800 	.word	0x58021800
 8003560:	58021c00 	.word	0x58021c00
 8003564:	58022400 	.word	0x58022400
 8003568:	2300      	movs	r3, #0
 800356a:	69fa      	ldr	r2, [r7, #28]
 800356c:	f002 0203 	and.w	r2, r2, #3
 8003570:	0092      	lsls	r2, r2, #2
 8003572:	4093      	lsls	r3, r2
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	4313      	orrs	r3, r2
 8003578:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800357a:	4938      	ldr	r1, [pc, #224]	; (800365c <HAL_GPIO_Init+0x34c>)
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	089b      	lsrs	r3, r3, #2
 8003580:	3302      	adds	r3, #2
 8003582:	69ba      	ldr	r2, [r7, #24]
 8003584:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003588:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	43db      	mvns	r3, r3
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	4013      	ands	r3, r2
 8003598:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d003      	beq.n	80035ae <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80035ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80035b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	43db      	mvns	r3, r3
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	4013      	ands	r3, r2
 80035c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d003      	beq.n	80035dc <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	4313      	orrs	r3, r2
 80035da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80035dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	43db      	mvns	r3, r3
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	4013      	ands	r3, r2
 80035f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d003      	beq.n	8003608 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	4313      	orrs	r3, r2
 8003606:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	43db      	mvns	r3, r3
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	4013      	ands	r3, r2
 800361c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d003      	beq.n	8003632 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	4313      	orrs	r3, r2
 8003630:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	3301      	adds	r3, #1
 800363c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	fa22 f303 	lsr.w	r3, r2, r3
 8003648:	2b00      	cmp	r3, #0
 800364a:	f47f ae6b 	bne.w	8003324 <HAL_GPIO_Init+0x14>
  }
}
 800364e:	bf00      	nop
 8003650:	bf00      	nop
 8003652:	3724      	adds	r7, #36	; 0x24
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr
 800365c:	58000400 	.word	0x58000400

08003660 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	460b      	mov	r3, r1
 800366a:	807b      	strh	r3, [r7, #2]
 800366c:	4613      	mov	r3, r2
 800366e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003670:	787b      	ldrb	r3, [r7, #1]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003676:	887a      	ldrh	r2, [r7, #2]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800367c:	e003      	b.n	8003686 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800367e:	887b      	ldrh	r3, [r7, #2]
 8003680:	041a      	lsls	r2, r3, #16
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	619a      	str	r2, [r3, #24]
}
 8003686:	bf00      	nop
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
	...

08003694 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800369c:	4b19      	ldr	r3, [pc, #100]	; (8003704 <HAL_PWREx_ConfigSupply+0x70>)
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	f003 0304 	and.w	r3, r3, #4
 80036a4:	2b04      	cmp	r3, #4
 80036a6:	d00a      	beq.n	80036be <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80036a8:	4b16      	ldr	r3, [pc, #88]	; (8003704 <HAL_PWREx_ConfigSupply+0x70>)
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d001      	beq.n	80036ba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e01f      	b.n	80036fa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80036ba:	2300      	movs	r3, #0
 80036bc:	e01d      	b.n	80036fa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80036be:	4b11      	ldr	r3, [pc, #68]	; (8003704 <HAL_PWREx_ConfigSupply+0x70>)
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	f023 0207 	bic.w	r2, r3, #7
 80036c6:	490f      	ldr	r1, [pc, #60]	; (8003704 <HAL_PWREx_ConfigSupply+0x70>)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80036ce:	f7fe fb33 	bl	8001d38 <HAL_GetTick>
 80036d2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80036d4:	e009      	b.n	80036ea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80036d6:	f7fe fb2f 	bl	8001d38 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036e4:	d901      	bls.n	80036ea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e007      	b.n	80036fa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80036ea:	4b06      	ldr	r3, [pc, #24]	; (8003704 <HAL_PWREx_ConfigSupply+0x70>)
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036f6:	d1ee      	bne.n	80036d6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	58024800 	.word	0x58024800

08003708 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b08c      	sub	sp, #48	; 0x30
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e3c8      	b.n	8003eac <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b00      	cmp	r3, #0
 8003724:	f000 8087 	beq.w	8003836 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003728:	4b88      	ldr	r3, [pc, #544]	; (800394c <HAL_RCC_OscConfig+0x244>)
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003730:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003732:	4b86      	ldr	r3, [pc, #536]	; (800394c <HAL_RCC_OscConfig+0x244>)
 8003734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003736:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800373a:	2b10      	cmp	r3, #16
 800373c:	d007      	beq.n	800374e <HAL_RCC_OscConfig+0x46>
 800373e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003740:	2b18      	cmp	r3, #24
 8003742:	d110      	bne.n	8003766 <HAL_RCC_OscConfig+0x5e>
 8003744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003746:	f003 0303 	and.w	r3, r3, #3
 800374a:	2b02      	cmp	r3, #2
 800374c:	d10b      	bne.n	8003766 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800374e:	4b7f      	ldr	r3, [pc, #508]	; (800394c <HAL_RCC_OscConfig+0x244>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d06c      	beq.n	8003834 <HAL_RCC_OscConfig+0x12c>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d168      	bne.n	8003834 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e3a2      	b.n	8003eac <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800376e:	d106      	bne.n	800377e <HAL_RCC_OscConfig+0x76>
 8003770:	4b76      	ldr	r3, [pc, #472]	; (800394c <HAL_RCC_OscConfig+0x244>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a75      	ldr	r2, [pc, #468]	; (800394c <HAL_RCC_OscConfig+0x244>)
 8003776:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800377a:	6013      	str	r3, [r2, #0]
 800377c:	e02e      	b.n	80037dc <HAL_RCC_OscConfig+0xd4>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10c      	bne.n	80037a0 <HAL_RCC_OscConfig+0x98>
 8003786:	4b71      	ldr	r3, [pc, #452]	; (800394c <HAL_RCC_OscConfig+0x244>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a70      	ldr	r2, [pc, #448]	; (800394c <HAL_RCC_OscConfig+0x244>)
 800378c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003790:	6013      	str	r3, [r2, #0]
 8003792:	4b6e      	ldr	r3, [pc, #440]	; (800394c <HAL_RCC_OscConfig+0x244>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a6d      	ldr	r2, [pc, #436]	; (800394c <HAL_RCC_OscConfig+0x244>)
 8003798:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800379c:	6013      	str	r3, [r2, #0]
 800379e:	e01d      	b.n	80037dc <HAL_RCC_OscConfig+0xd4>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037a8:	d10c      	bne.n	80037c4 <HAL_RCC_OscConfig+0xbc>
 80037aa:	4b68      	ldr	r3, [pc, #416]	; (800394c <HAL_RCC_OscConfig+0x244>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a67      	ldr	r2, [pc, #412]	; (800394c <HAL_RCC_OscConfig+0x244>)
 80037b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037b4:	6013      	str	r3, [r2, #0]
 80037b6:	4b65      	ldr	r3, [pc, #404]	; (800394c <HAL_RCC_OscConfig+0x244>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a64      	ldr	r2, [pc, #400]	; (800394c <HAL_RCC_OscConfig+0x244>)
 80037bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037c0:	6013      	str	r3, [r2, #0]
 80037c2:	e00b      	b.n	80037dc <HAL_RCC_OscConfig+0xd4>
 80037c4:	4b61      	ldr	r3, [pc, #388]	; (800394c <HAL_RCC_OscConfig+0x244>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a60      	ldr	r2, [pc, #384]	; (800394c <HAL_RCC_OscConfig+0x244>)
 80037ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ce:	6013      	str	r3, [r2, #0]
 80037d0:	4b5e      	ldr	r3, [pc, #376]	; (800394c <HAL_RCC_OscConfig+0x244>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a5d      	ldr	r2, [pc, #372]	; (800394c <HAL_RCC_OscConfig+0x244>)
 80037d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d013      	beq.n	800380c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e4:	f7fe faa8 	bl	8001d38 <HAL_GetTick>
 80037e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037ec:	f7fe faa4 	bl	8001d38 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b64      	cmp	r3, #100	; 0x64
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e356      	b.n	8003eac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80037fe:	4b53      	ldr	r3, [pc, #332]	; (800394c <HAL_RCC_OscConfig+0x244>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d0f0      	beq.n	80037ec <HAL_RCC_OscConfig+0xe4>
 800380a:	e014      	b.n	8003836 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800380c:	f7fe fa94 	bl	8001d38 <HAL_GetTick>
 8003810:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003814:	f7fe fa90 	bl	8001d38 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b64      	cmp	r3, #100	; 0x64
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e342      	b.n	8003eac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003826:	4b49      	ldr	r3, [pc, #292]	; (800394c <HAL_RCC_OscConfig+0x244>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1f0      	bne.n	8003814 <HAL_RCC_OscConfig+0x10c>
 8003832:	e000      	b.n	8003836 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003834:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	f000 808c 	beq.w	800395c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003844:	4b41      	ldr	r3, [pc, #260]	; (800394c <HAL_RCC_OscConfig+0x244>)
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800384c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800384e:	4b3f      	ldr	r3, [pc, #252]	; (800394c <HAL_RCC_OscConfig+0x244>)
 8003850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003852:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003854:	6a3b      	ldr	r3, [r7, #32]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d007      	beq.n	800386a <HAL_RCC_OscConfig+0x162>
 800385a:	6a3b      	ldr	r3, [r7, #32]
 800385c:	2b18      	cmp	r3, #24
 800385e:	d137      	bne.n	80038d0 <HAL_RCC_OscConfig+0x1c8>
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	f003 0303 	and.w	r3, r3, #3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d132      	bne.n	80038d0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800386a:	4b38      	ldr	r3, [pc, #224]	; (800394c <HAL_RCC_OscConfig+0x244>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0304 	and.w	r3, r3, #4
 8003872:	2b00      	cmp	r3, #0
 8003874:	d005      	beq.n	8003882 <HAL_RCC_OscConfig+0x17a>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d101      	bne.n	8003882 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e314      	b.n	8003eac <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003882:	4b32      	ldr	r3, [pc, #200]	; (800394c <HAL_RCC_OscConfig+0x244>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f023 0219 	bic.w	r2, r3, #25
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	492f      	ldr	r1, [pc, #188]	; (800394c <HAL_RCC_OscConfig+0x244>)
 8003890:	4313      	orrs	r3, r2
 8003892:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003894:	f7fe fa50 	bl	8001d38 <HAL_GetTick>
 8003898:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800389a:	e008      	b.n	80038ae <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800389c:	f7fe fa4c 	bl	8001d38 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e2fe      	b.n	8003eac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038ae:	4b27      	ldr	r3, [pc, #156]	; (800394c <HAL_RCC_OscConfig+0x244>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0304 	and.w	r3, r3, #4
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d0f0      	beq.n	800389c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ba:	4b24      	ldr	r3, [pc, #144]	; (800394c <HAL_RCC_OscConfig+0x244>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	061b      	lsls	r3, r3, #24
 80038c8:	4920      	ldr	r1, [pc, #128]	; (800394c <HAL_RCC_OscConfig+0x244>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038ce:	e045      	b.n	800395c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d026      	beq.n	8003926 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80038d8:	4b1c      	ldr	r3, [pc, #112]	; (800394c <HAL_RCC_OscConfig+0x244>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f023 0219 	bic.w	r2, r3, #25
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	4919      	ldr	r1, [pc, #100]	; (800394c <HAL_RCC_OscConfig+0x244>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ea:	f7fe fa25 	bl	8001d38 <HAL_GetTick>
 80038ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038f0:	e008      	b.n	8003904 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038f2:	f7fe fa21 	bl	8001d38 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d901      	bls.n	8003904 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e2d3      	b.n	8003eac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003904:	4b11      	ldr	r3, [pc, #68]	; (800394c <HAL_RCC_OscConfig+0x244>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	2b00      	cmp	r3, #0
 800390e:	d0f0      	beq.n	80038f2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003910:	4b0e      	ldr	r3, [pc, #56]	; (800394c <HAL_RCC_OscConfig+0x244>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	061b      	lsls	r3, r3, #24
 800391e:	490b      	ldr	r1, [pc, #44]	; (800394c <HAL_RCC_OscConfig+0x244>)
 8003920:	4313      	orrs	r3, r2
 8003922:	604b      	str	r3, [r1, #4]
 8003924:	e01a      	b.n	800395c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003926:	4b09      	ldr	r3, [pc, #36]	; (800394c <HAL_RCC_OscConfig+0x244>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a08      	ldr	r2, [pc, #32]	; (800394c <HAL_RCC_OscConfig+0x244>)
 800392c:	f023 0301 	bic.w	r3, r3, #1
 8003930:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003932:	f7fe fa01 	bl	8001d38 <HAL_GetTick>
 8003936:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003938:	e00a      	b.n	8003950 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800393a:	f7fe f9fd 	bl	8001d38 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d903      	bls.n	8003950 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e2af      	b.n	8003eac <HAL_RCC_OscConfig+0x7a4>
 800394c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003950:	4b96      	ldr	r3, [pc, #600]	; (8003bac <HAL_RCC_OscConfig+0x4a4>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0304 	and.w	r3, r3, #4
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1ee      	bne.n	800393a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0310 	and.w	r3, r3, #16
 8003964:	2b00      	cmp	r3, #0
 8003966:	d06a      	beq.n	8003a3e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003968:	4b90      	ldr	r3, [pc, #576]	; (8003bac <HAL_RCC_OscConfig+0x4a4>)
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003970:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003972:	4b8e      	ldr	r3, [pc, #568]	; (8003bac <HAL_RCC_OscConfig+0x4a4>)
 8003974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003976:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	2b08      	cmp	r3, #8
 800397c:	d007      	beq.n	800398e <HAL_RCC_OscConfig+0x286>
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	2b18      	cmp	r3, #24
 8003982:	d11b      	bne.n	80039bc <HAL_RCC_OscConfig+0x2b4>
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	f003 0303 	and.w	r3, r3, #3
 800398a:	2b01      	cmp	r3, #1
 800398c:	d116      	bne.n	80039bc <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800398e:	4b87      	ldr	r3, [pc, #540]	; (8003bac <HAL_RCC_OscConfig+0x4a4>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003996:	2b00      	cmp	r3, #0
 8003998:	d005      	beq.n	80039a6 <HAL_RCC_OscConfig+0x29e>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	69db      	ldr	r3, [r3, #28]
 800399e:	2b80      	cmp	r3, #128	; 0x80
 80039a0:	d001      	beq.n	80039a6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e282      	b.n	8003eac <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039a6:	4b81      	ldr	r3, [pc, #516]	; (8003bac <HAL_RCC_OscConfig+0x4a4>)
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	061b      	lsls	r3, r3, #24
 80039b4:	497d      	ldr	r1, [pc, #500]	; (8003bac <HAL_RCC_OscConfig+0x4a4>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80039ba:	e040      	b.n	8003a3e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	69db      	ldr	r3, [r3, #28]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d023      	beq.n	8003a0c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80039c4:	4b79      	ldr	r3, [pc, #484]	; (8003bac <HAL_RCC_OscConfig+0x4a4>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a78      	ldr	r2, [pc, #480]	; (8003bac <HAL_RCC_OscConfig+0x4a4>)
 80039ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d0:	f7fe f9b2 	bl	8001d38 <HAL_GetTick>
 80039d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80039d6:	e008      	b.n	80039ea <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80039d8:	f7fe f9ae 	bl	8001d38 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e260      	b.n	8003eac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80039ea:	4b70      	ldr	r3, [pc, #448]	; (8003bac <HAL_RCC_OscConfig+0x4a4>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d0f0      	beq.n	80039d8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039f6:	4b6d      	ldr	r3, [pc, #436]	; (8003bac <HAL_RCC_OscConfig+0x4a4>)
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	061b      	lsls	r3, r3, #24
 8003a04:	4969      	ldr	r1, [pc, #420]	; (8003bac <HAL_RCC_OscConfig+0x4a4>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	60cb      	str	r3, [r1, #12]
 8003a0a:	e018      	b.n	8003a3e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003a0c:	4b67      	ldr	r3, [pc, #412]	; (8003bac <HAL_RCC_OscConfig+0x4a4>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a66      	ldr	r2, [pc, #408]	; (8003bac <HAL_RCC_OscConfig+0x4a4>)
 8003a12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a18:	f7fe f98e 	bl	8001d38 <HAL_GetTick>
 8003a1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003a1e:	e008      	b.n	8003a32 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003a20:	f7fe f98a 	bl	8001d38 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e23c      	b.n	8003eac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003a32:	4b5e      	ldr	r3, [pc, #376]	; (8003bac <HAL_RCC_OscConfig+0x4a4>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1f0      	bne.n	8003a20 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0308 	and.w	r3, r3, #8
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d036      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d019      	beq.n	8003a86 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a52:	4b56      	ldr	r3, [pc, #344]	; (8003bac <HAL_RCC_OscConfig+0x4a4>)
 8003a54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a56:	4a55      	ldr	r2, [pc, #340]	; (8003bac <HAL_RCC_OscConfig+0x4a4>)
 8003a58:	f043 0301 	orr.w	r3, r3, #1
 8003a5c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a5e:	f7fe f96b 	bl	8001d38 <HAL_GetTick>
 8003a62:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003a64:	e008      	b.n	8003a78 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a66:	f7fe f967 	bl	8001d38 <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d901      	bls.n	8003a78 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e219      	b.n	8003eac <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003a78:	4b4c      	ldr	r3, [pc, #304]	; (8003bac <HAL_RCC_OscConfig+0x4a4>)
 8003a7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d0f0      	beq.n	8003a66 <HAL_RCC_OscConfig+0x35e>
 8003a84:	e018      	b.n	8003ab8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a86:	4b49      	ldr	r3, [pc, #292]	; (8003bac <HAL_RCC_OscConfig+0x4a4>)
 8003a88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a8a:	4a48      	ldr	r2, [pc, #288]	; (8003bac <HAL_RCC_OscConfig+0x4a4>)
 8003a8c:	f023 0301 	bic.w	r3, r3, #1
 8003a90:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a92:	f7fe f951 	bl	8001d38 <HAL_GetTick>
 8003a96:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003a98:	e008      	b.n	8003aac <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a9a:	f7fe f94d 	bl	8001d38 <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d901      	bls.n	8003aac <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e1ff      	b.n	8003eac <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003aac:	4b3f      	ldr	r3, [pc, #252]	; (8003bac <HAL_RCC_OscConfig+0x4a4>)
 8003aae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d1f0      	bne.n	8003a9a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0320 	and.w	r3, r3, #32
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d036      	beq.n	8003b32 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	699b      	ldr	r3, [r3, #24]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d019      	beq.n	8003b00 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003acc:	4b37      	ldr	r3, [pc, #220]	; (8003bac <HAL_RCC_OscConfig+0x4a4>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a36      	ldr	r2, [pc, #216]	; (8003bac <HAL_RCC_OscConfig+0x4a4>)
 8003ad2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ad6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003ad8:	f7fe f92e 	bl	8001d38 <HAL_GetTick>
 8003adc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003ade:	e008      	b.n	8003af2 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ae0:	f7fe f92a 	bl	8001d38 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e1dc      	b.n	8003eac <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003af2:	4b2e      	ldr	r3, [pc, #184]	; (8003bac <HAL_RCC_OscConfig+0x4a4>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d0f0      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x3d8>
 8003afe:	e018      	b.n	8003b32 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b00:	4b2a      	ldr	r3, [pc, #168]	; (8003bac <HAL_RCC_OscConfig+0x4a4>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a29      	ldr	r2, [pc, #164]	; (8003bac <HAL_RCC_OscConfig+0x4a4>)
 8003b06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b0a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003b0c:	f7fe f914 	bl	8001d38 <HAL_GetTick>
 8003b10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b14:	f7fe f910 	bl	8001d38 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e1c2      	b.n	8003eac <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b26:	4b21      	ldr	r3, [pc, #132]	; (8003bac <HAL_RCC_OscConfig+0x4a4>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1f0      	bne.n	8003b14 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0304 	and.w	r3, r3, #4
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f000 8086 	beq.w	8003c4c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003b40:	4b1b      	ldr	r3, [pc, #108]	; (8003bb0 <HAL_RCC_OscConfig+0x4a8>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a1a      	ldr	r2, [pc, #104]	; (8003bb0 <HAL_RCC_OscConfig+0x4a8>)
 8003b46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b4a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b4c:	f7fe f8f4 	bl	8001d38 <HAL_GetTick>
 8003b50:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b54:	f7fe f8f0 	bl	8001d38 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b64      	cmp	r3, #100	; 0x64
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e1a2      	b.n	8003eac <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b66:	4b12      	ldr	r3, [pc, #72]	; (8003bb0 <HAL_RCC_OscConfig+0x4a8>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d0f0      	beq.n	8003b54 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d106      	bne.n	8003b88 <HAL_RCC_OscConfig+0x480>
 8003b7a:	4b0c      	ldr	r3, [pc, #48]	; (8003bac <HAL_RCC_OscConfig+0x4a4>)
 8003b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b7e:	4a0b      	ldr	r2, [pc, #44]	; (8003bac <HAL_RCC_OscConfig+0x4a4>)
 8003b80:	f043 0301 	orr.w	r3, r3, #1
 8003b84:	6713      	str	r3, [r2, #112]	; 0x70
 8003b86:	e032      	b.n	8003bee <HAL_RCC_OscConfig+0x4e6>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d111      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x4ac>
 8003b90:	4b06      	ldr	r3, [pc, #24]	; (8003bac <HAL_RCC_OscConfig+0x4a4>)
 8003b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b94:	4a05      	ldr	r2, [pc, #20]	; (8003bac <HAL_RCC_OscConfig+0x4a4>)
 8003b96:	f023 0301 	bic.w	r3, r3, #1
 8003b9a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b9c:	4b03      	ldr	r3, [pc, #12]	; (8003bac <HAL_RCC_OscConfig+0x4a4>)
 8003b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba0:	4a02      	ldr	r2, [pc, #8]	; (8003bac <HAL_RCC_OscConfig+0x4a4>)
 8003ba2:	f023 0304 	bic.w	r3, r3, #4
 8003ba6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ba8:	e021      	b.n	8003bee <HAL_RCC_OscConfig+0x4e6>
 8003baa:	bf00      	nop
 8003bac:	58024400 	.word	0x58024400
 8003bb0:	58024800 	.word	0x58024800
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	2b05      	cmp	r3, #5
 8003bba:	d10c      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x4ce>
 8003bbc:	4b83      	ldr	r3, [pc, #524]	; (8003dcc <HAL_RCC_OscConfig+0x6c4>)
 8003bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc0:	4a82      	ldr	r2, [pc, #520]	; (8003dcc <HAL_RCC_OscConfig+0x6c4>)
 8003bc2:	f043 0304 	orr.w	r3, r3, #4
 8003bc6:	6713      	str	r3, [r2, #112]	; 0x70
 8003bc8:	4b80      	ldr	r3, [pc, #512]	; (8003dcc <HAL_RCC_OscConfig+0x6c4>)
 8003bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bcc:	4a7f      	ldr	r2, [pc, #508]	; (8003dcc <HAL_RCC_OscConfig+0x6c4>)
 8003bce:	f043 0301 	orr.w	r3, r3, #1
 8003bd2:	6713      	str	r3, [r2, #112]	; 0x70
 8003bd4:	e00b      	b.n	8003bee <HAL_RCC_OscConfig+0x4e6>
 8003bd6:	4b7d      	ldr	r3, [pc, #500]	; (8003dcc <HAL_RCC_OscConfig+0x6c4>)
 8003bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bda:	4a7c      	ldr	r2, [pc, #496]	; (8003dcc <HAL_RCC_OscConfig+0x6c4>)
 8003bdc:	f023 0301 	bic.w	r3, r3, #1
 8003be0:	6713      	str	r3, [r2, #112]	; 0x70
 8003be2:	4b7a      	ldr	r3, [pc, #488]	; (8003dcc <HAL_RCC_OscConfig+0x6c4>)
 8003be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be6:	4a79      	ldr	r2, [pc, #484]	; (8003dcc <HAL_RCC_OscConfig+0x6c4>)
 8003be8:	f023 0304 	bic.w	r3, r3, #4
 8003bec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d015      	beq.n	8003c22 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf6:	f7fe f89f 	bl	8001d38 <HAL_GetTick>
 8003bfa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bfc:	e00a      	b.n	8003c14 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bfe:	f7fe f89b 	bl	8001d38 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d901      	bls.n	8003c14 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e14b      	b.n	8003eac <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c14:	4b6d      	ldr	r3, [pc, #436]	; (8003dcc <HAL_RCC_OscConfig+0x6c4>)
 8003c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c18:	f003 0302 	and.w	r3, r3, #2
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d0ee      	beq.n	8003bfe <HAL_RCC_OscConfig+0x4f6>
 8003c20:	e014      	b.n	8003c4c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c22:	f7fe f889 	bl	8001d38 <HAL_GetTick>
 8003c26:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c28:	e00a      	b.n	8003c40 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c2a:	f7fe f885 	bl	8001d38 <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d901      	bls.n	8003c40 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e135      	b.n	8003eac <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c40:	4b62      	ldr	r3, [pc, #392]	; (8003dcc <HAL_RCC_OscConfig+0x6c4>)
 8003c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c44:	f003 0302 	and.w	r3, r3, #2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1ee      	bne.n	8003c2a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f000 812a 	beq.w	8003eaa <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003c56:	4b5d      	ldr	r3, [pc, #372]	; (8003dcc <HAL_RCC_OscConfig+0x6c4>)
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c5e:	2b18      	cmp	r3, #24
 8003c60:	f000 80ba 	beq.w	8003dd8 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	f040 8095 	bne.w	8003d98 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c6e:	4b57      	ldr	r3, [pc, #348]	; (8003dcc <HAL_RCC_OscConfig+0x6c4>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a56      	ldr	r2, [pc, #344]	; (8003dcc <HAL_RCC_OscConfig+0x6c4>)
 8003c74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c7a:	f7fe f85d 	bl	8001d38 <HAL_GetTick>
 8003c7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c80:	e008      	b.n	8003c94 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c82:	f7fe f859 	bl	8001d38 <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d901      	bls.n	8003c94 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e10b      	b.n	8003eac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c94:	4b4d      	ldr	r3, [pc, #308]	; (8003dcc <HAL_RCC_OscConfig+0x6c4>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1f0      	bne.n	8003c82 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ca0:	4b4a      	ldr	r3, [pc, #296]	; (8003dcc <HAL_RCC_OscConfig+0x6c4>)
 8003ca2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ca4:	4b4a      	ldr	r3, [pc, #296]	; (8003dd0 <HAL_RCC_OscConfig+0x6c8>)
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003cb0:	0112      	lsls	r2, r2, #4
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	4945      	ldr	r1, [pc, #276]	; (8003dcc <HAL_RCC_OscConfig+0x6c4>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	628b      	str	r3, [r1, #40]	; 0x28
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	025b      	lsls	r3, r3, #9
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	041b      	lsls	r3, r3, #16
 8003cd8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003cdc:	431a      	orrs	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	061b      	lsls	r3, r3, #24
 8003ce6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003cea:	4938      	ldr	r1, [pc, #224]	; (8003dcc <HAL_RCC_OscConfig+0x6c4>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003cf0:	4b36      	ldr	r3, [pc, #216]	; (8003dcc <HAL_RCC_OscConfig+0x6c4>)
 8003cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf4:	4a35      	ldr	r2, [pc, #212]	; (8003dcc <HAL_RCC_OscConfig+0x6c4>)
 8003cf6:	f023 0301 	bic.w	r3, r3, #1
 8003cfa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003cfc:	4b33      	ldr	r3, [pc, #204]	; (8003dcc <HAL_RCC_OscConfig+0x6c4>)
 8003cfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d00:	4b34      	ldr	r3, [pc, #208]	; (8003dd4 <HAL_RCC_OscConfig+0x6cc>)
 8003d02:	4013      	ands	r3, r2
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003d08:	00d2      	lsls	r2, r2, #3
 8003d0a:	4930      	ldr	r1, [pc, #192]	; (8003dcc <HAL_RCC_OscConfig+0x6c4>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003d10:	4b2e      	ldr	r3, [pc, #184]	; (8003dcc <HAL_RCC_OscConfig+0x6c4>)
 8003d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d14:	f023 020c 	bic.w	r2, r3, #12
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1c:	492b      	ldr	r1, [pc, #172]	; (8003dcc <HAL_RCC_OscConfig+0x6c4>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003d22:	4b2a      	ldr	r3, [pc, #168]	; (8003dcc <HAL_RCC_OscConfig+0x6c4>)
 8003d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d26:	f023 0202 	bic.w	r2, r3, #2
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2e:	4927      	ldr	r1, [pc, #156]	; (8003dcc <HAL_RCC_OscConfig+0x6c4>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003d34:	4b25      	ldr	r3, [pc, #148]	; (8003dcc <HAL_RCC_OscConfig+0x6c4>)
 8003d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d38:	4a24      	ldr	r2, [pc, #144]	; (8003dcc <HAL_RCC_OscConfig+0x6c4>)
 8003d3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d40:	4b22      	ldr	r3, [pc, #136]	; (8003dcc <HAL_RCC_OscConfig+0x6c4>)
 8003d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d44:	4a21      	ldr	r2, [pc, #132]	; (8003dcc <HAL_RCC_OscConfig+0x6c4>)
 8003d46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003d4c:	4b1f      	ldr	r3, [pc, #124]	; (8003dcc <HAL_RCC_OscConfig+0x6c4>)
 8003d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d50:	4a1e      	ldr	r2, [pc, #120]	; (8003dcc <HAL_RCC_OscConfig+0x6c4>)
 8003d52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003d58:	4b1c      	ldr	r3, [pc, #112]	; (8003dcc <HAL_RCC_OscConfig+0x6c4>)
 8003d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5c:	4a1b      	ldr	r2, [pc, #108]	; (8003dcc <HAL_RCC_OscConfig+0x6c4>)
 8003d5e:	f043 0301 	orr.w	r3, r3, #1
 8003d62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d64:	4b19      	ldr	r3, [pc, #100]	; (8003dcc <HAL_RCC_OscConfig+0x6c4>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a18      	ldr	r2, [pc, #96]	; (8003dcc <HAL_RCC_OscConfig+0x6c4>)
 8003d6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d70:	f7fd ffe2 	bl	8001d38 <HAL_GetTick>
 8003d74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d78:	f7fd ffde 	bl	8001d38 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e090      	b.n	8003eac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d8a:	4b10      	ldr	r3, [pc, #64]	; (8003dcc <HAL_RCC_OscConfig+0x6c4>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d0f0      	beq.n	8003d78 <HAL_RCC_OscConfig+0x670>
 8003d96:	e088      	b.n	8003eaa <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d98:	4b0c      	ldr	r3, [pc, #48]	; (8003dcc <HAL_RCC_OscConfig+0x6c4>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a0b      	ldr	r2, [pc, #44]	; (8003dcc <HAL_RCC_OscConfig+0x6c4>)
 8003d9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003da2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da4:	f7fd ffc8 	bl	8001d38 <HAL_GetTick>
 8003da8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003daa:	e008      	b.n	8003dbe <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dac:	f7fd ffc4 	bl	8001d38 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e076      	b.n	8003eac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003dbe:	4b03      	ldr	r3, [pc, #12]	; (8003dcc <HAL_RCC_OscConfig+0x6c4>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1f0      	bne.n	8003dac <HAL_RCC_OscConfig+0x6a4>
 8003dca:	e06e      	b.n	8003eaa <HAL_RCC_OscConfig+0x7a2>
 8003dcc:	58024400 	.word	0x58024400
 8003dd0:	fffffc0c 	.word	0xfffffc0c
 8003dd4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003dd8:	4b36      	ldr	r3, [pc, #216]	; (8003eb4 <HAL_RCC_OscConfig+0x7ac>)
 8003dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ddc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003dde:	4b35      	ldr	r3, [pc, #212]	; (8003eb4 <HAL_RCC_OscConfig+0x7ac>)
 8003de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d031      	beq.n	8003e50 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	f003 0203 	and.w	r2, r3, #3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d12a      	bne.n	8003e50 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	091b      	lsrs	r3, r3, #4
 8003dfe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d122      	bne.n	8003e50 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e14:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d11a      	bne.n	8003e50 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	0a5b      	lsrs	r3, r3, #9
 8003e1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e26:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d111      	bne.n	8003e50 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	0c1b      	lsrs	r3, r3, #16
 8003e30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e38:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d108      	bne.n	8003e50 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	0e1b      	lsrs	r3, r3, #24
 8003e42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e4a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d001      	beq.n	8003e54 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e02b      	b.n	8003eac <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003e54:	4b17      	ldr	r3, [pc, #92]	; (8003eb4 <HAL_RCC_OscConfig+0x7ac>)
 8003e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e58:	08db      	lsrs	r3, r3, #3
 8003e5a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e5e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d01f      	beq.n	8003eaa <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003e6a:	4b12      	ldr	r3, [pc, #72]	; (8003eb4 <HAL_RCC_OscConfig+0x7ac>)
 8003e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6e:	4a11      	ldr	r2, [pc, #68]	; (8003eb4 <HAL_RCC_OscConfig+0x7ac>)
 8003e70:	f023 0301 	bic.w	r3, r3, #1
 8003e74:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e76:	f7fd ff5f 	bl	8001d38 <HAL_GetTick>
 8003e7a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003e7c:	bf00      	nop
 8003e7e:	f7fd ff5b 	bl	8001d38 <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d0f9      	beq.n	8003e7e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003e8a:	4b0a      	ldr	r3, [pc, #40]	; (8003eb4 <HAL_RCC_OscConfig+0x7ac>)
 8003e8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e8e:	4b0a      	ldr	r3, [pc, #40]	; (8003eb8 <HAL_RCC_OscConfig+0x7b0>)
 8003e90:	4013      	ands	r3, r2
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003e96:	00d2      	lsls	r2, r2, #3
 8003e98:	4906      	ldr	r1, [pc, #24]	; (8003eb4 <HAL_RCC_OscConfig+0x7ac>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003e9e:	4b05      	ldr	r3, [pc, #20]	; (8003eb4 <HAL_RCC_OscConfig+0x7ac>)
 8003ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea2:	4a04      	ldr	r2, [pc, #16]	; (8003eb4 <HAL_RCC_OscConfig+0x7ac>)
 8003ea4:	f043 0301 	orr.w	r3, r3, #1
 8003ea8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3730      	adds	r7, #48	; 0x30
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	58024400 	.word	0x58024400
 8003eb8:	ffff0007 	.word	0xffff0007

08003ebc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b086      	sub	sp, #24
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d101      	bne.n	8003ed0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e19c      	b.n	800420a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ed0:	4b8a      	ldr	r3, [pc, #552]	; (80040fc <HAL_RCC_ClockConfig+0x240>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 030f 	and.w	r3, r3, #15
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d910      	bls.n	8003f00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ede:	4b87      	ldr	r3, [pc, #540]	; (80040fc <HAL_RCC_ClockConfig+0x240>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f023 020f 	bic.w	r2, r3, #15
 8003ee6:	4985      	ldr	r1, [pc, #532]	; (80040fc <HAL_RCC_ClockConfig+0x240>)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eee:	4b83      	ldr	r3, [pc, #524]	; (80040fc <HAL_RCC_ClockConfig+0x240>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 030f 	and.w	r3, r3, #15
 8003ef6:	683a      	ldr	r2, [r7, #0]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d001      	beq.n	8003f00 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e184      	b.n	800420a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0304 	and.w	r3, r3, #4
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d010      	beq.n	8003f2e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	691a      	ldr	r2, [r3, #16]
 8003f10:	4b7b      	ldr	r3, [pc, #492]	; (8004100 <HAL_RCC_ClockConfig+0x244>)
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d908      	bls.n	8003f2e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003f1c:	4b78      	ldr	r3, [pc, #480]	; (8004100 <HAL_RCC_ClockConfig+0x244>)
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	4975      	ldr	r1, [pc, #468]	; (8004100 <HAL_RCC_ClockConfig+0x244>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0308 	and.w	r3, r3, #8
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d010      	beq.n	8003f5c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	695a      	ldr	r2, [r3, #20]
 8003f3e:	4b70      	ldr	r3, [pc, #448]	; (8004100 <HAL_RCC_ClockConfig+0x244>)
 8003f40:	69db      	ldr	r3, [r3, #28]
 8003f42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d908      	bls.n	8003f5c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003f4a:	4b6d      	ldr	r3, [pc, #436]	; (8004100 <HAL_RCC_ClockConfig+0x244>)
 8003f4c:	69db      	ldr	r3, [r3, #28]
 8003f4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	496a      	ldr	r1, [pc, #424]	; (8004100 <HAL_RCC_ClockConfig+0x244>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0310 	and.w	r3, r3, #16
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d010      	beq.n	8003f8a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	699a      	ldr	r2, [r3, #24]
 8003f6c:	4b64      	ldr	r3, [pc, #400]	; (8004100 <HAL_RCC_ClockConfig+0x244>)
 8003f6e:	69db      	ldr	r3, [r3, #28]
 8003f70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d908      	bls.n	8003f8a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003f78:	4b61      	ldr	r3, [pc, #388]	; (8004100 <HAL_RCC_ClockConfig+0x244>)
 8003f7a:	69db      	ldr	r3, [r3, #28]
 8003f7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	495e      	ldr	r1, [pc, #376]	; (8004100 <HAL_RCC_ClockConfig+0x244>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0320 	and.w	r3, r3, #32
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d010      	beq.n	8003fb8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	69da      	ldr	r2, [r3, #28]
 8003f9a:	4b59      	ldr	r3, [pc, #356]	; (8004100 <HAL_RCC_ClockConfig+0x244>)
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d908      	bls.n	8003fb8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003fa6:	4b56      	ldr	r3, [pc, #344]	; (8004100 <HAL_RCC_ClockConfig+0x244>)
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	69db      	ldr	r3, [r3, #28]
 8003fb2:	4953      	ldr	r1, [pc, #332]	; (8004100 <HAL_RCC_ClockConfig+0x244>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0302 	and.w	r3, r3, #2
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d010      	beq.n	8003fe6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68da      	ldr	r2, [r3, #12]
 8003fc8:	4b4d      	ldr	r3, [pc, #308]	; (8004100 <HAL_RCC_ClockConfig+0x244>)
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	f003 030f 	and.w	r3, r3, #15
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d908      	bls.n	8003fe6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fd4:	4b4a      	ldr	r3, [pc, #296]	; (8004100 <HAL_RCC_ClockConfig+0x244>)
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	f023 020f 	bic.w	r2, r3, #15
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	4947      	ldr	r1, [pc, #284]	; (8004100 <HAL_RCC_ClockConfig+0x244>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d055      	beq.n	800409e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003ff2:	4b43      	ldr	r3, [pc, #268]	; (8004100 <HAL_RCC_ClockConfig+0x244>)
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	4940      	ldr	r1, [pc, #256]	; (8004100 <HAL_RCC_ClockConfig+0x244>)
 8004000:	4313      	orrs	r3, r2
 8004002:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	2b02      	cmp	r3, #2
 800400a:	d107      	bne.n	800401c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800400c:	4b3c      	ldr	r3, [pc, #240]	; (8004100 <HAL_RCC_ClockConfig+0x244>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d121      	bne.n	800405c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e0f6      	b.n	800420a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	2b03      	cmp	r3, #3
 8004022:	d107      	bne.n	8004034 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004024:	4b36      	ldr	r3, [pc, #216]	; (8004100 <HAL_RCC_ClockConfig+0x244>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d115      	bne.n	800405c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e0ea      	b.n	800420a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d107      	bne.n	800404c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800403c:	4b30      	ldr	r3, [pc, #192]	; (8004100 <HAL_RCC_ClockConfig+0x244>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004044:	2b00      	cmp	r3, #0
 8004046:	d109      	bne.n	800405c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e0de      	b.n	800420a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800404c:	4b2c      	ldr	r3, [pc, #176]	; (8004100 <HAL_RCC_ClockConfig+0x244>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0304 	and.w	r3, r3, #4
 8004054:	2b00      	cmp	r3, #0
 8004056:	d101      	bne.n	800405c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e0d6      	b.n	800420a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800405c:	4b28      	ldr	r3, [pc, #160]	; (8004100 <HAL_RCC_ClockConfig+0x244>)
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	f023 0207 	bic.w	r2, r3, #7
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	4925      	ldr	r1, [pc, #148]	; (8004100 <HAL_RCC_ClockConfig+0x244>)
 800406a:	4313      	orrs	r3, r2
 800406c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800406e:	f7fd fe63 	bl	8001d38 <HAL_GetTick>
 8004072:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004074:	e00a      	b.n	800408c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004076:	f7fd fe5f 	bl	8001d38 <HAL_GetTick>
 800407a:	4602      	mov	r2, r0
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	f241 3288 	movw	r2, #5000	; 0x1388
 8004084:	4293      	cmp	r3, r2
 8004086:	d901      	bls.n	800408c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e0be      	b.n	800420a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800408c:	4b1c      	ldr	r3, [pc, #112]	; (8004100 <HAL_RCC_ClockConfig+0x244>)
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	00db      	lsls	r3, r3, #3
 800409a:	429a      	cmp	r2, r3
 800409c:	d1eb      	bne.n	8004076 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d010      	beq.n	80040cc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	68da      	ldr	r2, [r3, #12]
 80040ae:	4b14      	ldr	r3, [pc, #80]	; (8004100 <HAL_RCC_ClockConfig+0x244>)
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	f003 030f 	and.w	r3, r3, #15
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d208      	bcs.n	80040cc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040ba:	4b11      	ldr	r3, [pc, #68]	; (8004100 <HAL_RCC_ClockConfig+0x244>)
 80040bc:	699b      	ldr	r3, [r3, #24]
 80040be:	f023 020f 	bic.w	r2, r3, #15
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	490e      	ldr	r1, [pc, #56]	; (8004100 <HAL_RCC_ClockConfig+0x244>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040cc:	4b0b      	ldr	r3, [pc, #44]	; (80040fc <HAL_RCC_ClockConfig+0x240>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 030f 	and.w	r3, r3, #15
 80040d4:	683a      	ldr	r2, [r7, #0]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d214      	bcs.n	8004104 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040da:	4b08      	ldr	r3, [pc, #32]	; (80040fc <HAL_RCC_ClockConfig+0x240>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f023 020f 	bic.w	r2, r3, #15
 80040e2:	4906      	ldr	r1, [pc, #24]	; (80040fc <HAL_RCC_ClockConfig+0x240>)
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ea:	4b04      	ldr	r3, [pc, #16]	; (80040fc <HAL_RCC_ClockConfig+0x240>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 030f 	and.w	r3, r3, #15
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d005      	beq.n	8004104 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e086      	b.n	800420a <HAL_RCC_ClockConfig+0x34e>
 80040fc:	52002000 	.word	0x52002000
 8004100:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0304 	and.w	r3, r3, #4
 800410c:	2b00      	cmp	r3, #0
 800410e:	d010      	beq.n	8004132 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	691a      	ldr	r2, [r3, #16]
 8004114:	4b3f      	ldr	r3, [pc, #252]	; (8004214 <HAL_RCC_ClockConfig+0x358>)
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800411c:	429a      	cmp	r2, r3
 800411e:	d208      	bcs.n	8004132 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004120:	4b3c      	ldr	r3, [pc, #240]	; (8004214 <HAL_RCC_ClockConfig+0x358>)
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	4939      	ldr	r1, [pc, #228]	; (8004214 <HAL_RCC_ClockConfig+0x358>)
 800412e:	4313      	orrs	r3, r2
 8004130:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0308 	and.w	r3, r3, #8
 800413a:	2b00      	cmp	r3, #0
 800413c:	d010      	beq.n	8004160 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	695a      	ldr	r2, [r3, #20]
 8004142:	4b34      	ldr	r3, [pc, #208]	; (8004214 <HAL_RCC_ClockConfig+0x358>)
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800414a:	429a      	cmp	r2, r3
 800414c:	d208      	bcs.n	8004160 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800414e:	4b31      	ldr	r3, [pc, #196]	; (8004214 <HAL_RCC_ClockConfig+0x358>)
 8004150:	69db      	ldr	r3, [r3, #28]
 8004152:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	492e      	ldr	r1, [pc, #184]	; (8004214 <HAL_RCC_ClockConfig+0x358>)
 800415c:	4313      	orrs	r3, r2
 800415e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0310 	and.w	r3, r3, #16
 8004168:	2b00      	cmp	r3, #0
 800416a:	d010      	beq.n	800418e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	699a      	ldr	r2, [r3, #24]
 8004170:	4b28      	ldr	r3, [pc, #160]	; (8004214 <HAL_RCC_ClockConfig+0x358>)
 8004172:	69db      	ldr	r3, [r3, #28]
 8004174:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004178:	429a      	cmp	r2, r3
 800417a:	d208      	bcs.n	800418e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800417c:	4b25      	ldr	r3, [pc, #148]	; (8004214 <HAL_RCC_ClockConfig+0x358>)
 800417e:	69db      	ldr	r3, [r3, #28]
 8004180:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	4922      	ldr	r1, [pc, #136]	; (8004214 <HAL_RCC_ClockConfig+0x358>)
 800418a:	4313      	orrs	r3, r2
 800418c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0320 	and.w	r3, r3, #32
 8004196:	2b00      	cmp	r3, #0
 8004198:	d010      	beq.n	80041bc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	69da      	ldr	r2, [r3, #28]
 800419e:	4b1d      	ldr	r3, [pc, #116]	; (8004214 <HAL_RCC_ClockConfig+0x358>)
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d208      	bcs.n	80041bc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80041aa:	4b1a      	ldr	r3, [pc, #104]	; (8004214 <HAL_RCC_ClockConfig+0x358>)
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	4917      	ldr	r1, [pc, #92]	; (8004214 <HAL_RCC_ClockConfig+0x358>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80041bc:	f000 f834 	bl	8004228 <HAL_RCC_GetSysClockFreq>
 80041c0:	4602      	mov	r2, r0
 80041c2:	4b14      	ldr	r3, [pc, #80]	; (8004214 <HAL_RCC_ClockConfig+0x358>)
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	0a1b      	lsrs	r3, r3, #8
 80041c8:	f003 030f 	and.w	r3, r3, #15
 80041cc:	4912      	ldr	r1, [pc, #72]	; (8004218 <HAL_RCC_ClockConfig+0x35c>)
 80041ce:	5ccb      	ldrb	r3, [r1, r3]
 80041d0:	f003 031f 	and.w	r3, r3, #31
 80041d4:	fa22 f303 	lsr.w	r3, r2, r3
 80041d8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80041da:	4b0e      	ldr	r3, [pc, #56]	; (8004214 <HAL_RCC_ClockConfig+0x358>)
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	f003 030f 	and.w	r3, r3, #15
 80041e2:	4a0d      	ldr	r2, [pc, #52]	; (8004218 <HAL_RCC_ClockConfig+0x35c>)
 80041e4:	5cd3      	ldrb	r3, [r2, r3]
 80041e6:	f003 031f 	and.w	r3, r3, #31
 80041ea:	693a      	ldr	r2, [r7, #16]
 80041ec:	fa22 f303 	lsr.w	r3, r2, r3
 80041f0:	4a0a      	ldr	r2, [pc, #40]	; (800421c <HAL_RCC_ClockConfig+0x360>)
 80041f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80041f4:	4a0a      	ldr	r2, [pc, #40]	; (8004220 <HAL_RCC_ClockConfig+0x364>)
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80041fa:	4b0a      	ldr	r3, [pc, #40]	; (8004224 <HAL_RCC_ClockConfig+0x368>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4618      	mov	r0, r3
 8004200:	f7fd fd50 	bl	8001ca4 <HAL_InitTick>
 8004204:	4603      	mov	r3, r0
 8004206:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004208:	7bfb      	ldrb	r3, [r7, #15]
}
 800420a:	4618      	mov	r0, r3
 800420c:	3718      	adds	r7, #24
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	58024400 	.word	0x58024400
 8004218:	0800acb4 	.word	0x0800acb4
 800421c:	24000004 	.word	0x24000004
 8004220:	24000000 	.word	0x24000000
 8004224:	24000008 	.word	0x24000008

08004228 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004228:	b480      	push	{r7}
 800422a:	b089      	sub	sp, #36	; 0x24
 800422c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800422e:	4bb3      	ldr	r3, [pc, #716]	; (80044fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004236:	2b18      	cmp	r3, #24
 8004238:	f200 8155 	bhi.w	80044e6 <HAL_RCC_GetSysClockFreq+0x2be>
 800423c:	a201      	add	r2, pc, #4	; (adr r2, 8004244 <HAL_RCC_GetSysClockFreq+0x1c>)
 800423e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004242:	bf00      	nop
 8004244:	080042a9 	.word	0x080042a9
 8004248:	080044e7 	.word	0x080044e7
 800424c:	080044e7 	.word	0x080044e7
 8004250:	080044e7 	.word	0x080044e7
 8004254:	080044e7 	.word	0x080044e7
 8004258:	080044e7 	.word	0x080044e7
 800425c:	080044e7 	.word	0x080044e7
 8004260:	080044e7 	.word	0x080044e7
 8004264:	080042cf 	.word	0x080042cf
 8004268:	080044e7 	.word	0x080044e7
 800426c:	080044e7 	.word	0x080044e7
 8004270:	080044e7 	.word	0x080044e7
 8004274:	080044e7 	.word	0x080044e7
 8004278:	080044e7 	.word	0x080044e7
 800427c:	080044e7 	.word	0x080044e7
 8004280:	080044e7 	.word	0x080044e7
 8004284:	080042d5 	.word	0x080042d5
 8004288:	080044e7 	.word	0x080044e7
 800428c:	080044e7 	.word	0x080044e7
 8004290:	080044e7 	.word	0x080044e7
 8004294:	080044e7 	.word	0x080044e7
 8004298:	080044e7 	.word	0x080044e7
 800429c:	080044e7 	.word	0x080044e7
 80042a0:	080044e7 	.word	0x080044e7
 80042a4:	080042db 	.word	0x080042db
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042a8:	4b94      	ldr	r3, [pc, #592]	; (80044fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0320 	and.w	r3, r3, #32
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d009      	beq.n	80042c8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80042b4:	4b91      	ldr	r3, [pc, #580]	; (80044fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	08db      	lsrs	r3, r3, #3
 80042ba:	f003 0303 	and.w	r3, r3, #3
 80042be:	4a90      	ldr	r2, [pc, #576]	; (8004500 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80042c0:	fa22 f303 	lsr.w	r3, r2, r3
 80042c4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80042c6:	e111      	b.n	80044ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80042c8:	4b8d      	ldr	r3, [pc, #564]	; (8004500 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80042ca:	61bb      	str	r3, [r7, #24]
      break;
 80042cc:	e10e      	b.n	80044ec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80042ce:	4b8d      	ldr	r3, [pc, #564]	; (8004504 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80042d0:	61bb      	str	r3, [r7, #24]
      break;
 80042d2:	e10b      	b.n	80044ec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80042d4:	4b8c      	ldr	r3, [pc, #560]	; (8004508 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80042d6:	61bb      	str	r3, [r7, #24]
      break;
 80042d8:	e108      	b.n	80044ec <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80042da:	4b88      	ldr	r3, [pc, #544]	; (80044fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042de:	f003 0303 	and.w	r3, r3, #3
 80042e2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80042e4:	4b85      	ldr	r3, [pc, #532]	; (80044fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e8:	091b      	lsrs	r3, r3, #4
 80042ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042ee:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80042f0:	4b82      	ldr	r3, [pc, #520]	; (80044fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f4:	f003 0301 	and.w	r3, r3, #1
 80042f8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80042fa:	4b80      	ldr	r3, [pc, #512]	; (80044fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042fe:	08db      	lsrs	r3, r3, #3
 8004300:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	fb02 f303 	mul.w	r3, r2, r3
 800430a:	ee07 3a90 	vmov	s15, r3
 800430e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004312:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	2b00      	cmp	r3, #0
 800431a:	f000 80e1 	beq.w	80044e0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	2b02      	cmp	r3, #2
 8004322:	f000 8083 	beq.w	800442c <HAL_RCC_GetSysClockFreq+0x204>
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	2b02      	cmp	r3, #2
 800432a:	f200 80a1 	bhi.w	8004470 <HAL_RCC_GetSysClockFreq+0x248>
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d003      	beq.n	800433c <HAL_RCC_GetSysClockFreq+0x114>
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d056      	beq.n	80043e8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800433a:	e099      	b.n	8004470 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800433c:	4b6f      	ldr	r3, [pc, #444]	; (80044fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0320 	and.w	r3, r3, #32
 8004344:	2b00      	cmp	r3, #0
 8004346:	d02d      	beq.n	80043a4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004348:	4b6c      	ldr	r3, [pc, #432]	; (80044fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	08db      	lsrs	r3, r3, #3
 800434e:	f003 0303 	and.w	r3, r3, #3
 8004352:	4a6b      	ldr	r2, [pc, #428]	; (8004500 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004354:	fa22 f303 	lsr.w	r3, r2, r3
 8004358:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	ee07 3a90 	vmov	s15, r3
 8004360:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	ee07 3a90 	vmov	s15, r3
 800436a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800436e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004372:	4b62      	ldr	r3, [pc, #392]	; (80044fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800437a:	ee07 3a90 	vmov	s15, r3
 800437e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004382:	ed97 6a02 	vldr	s12, [r7, #8]
 8004386:	eddf 5a61 	vldr	s11, [pc, #388]	; 800450c <HAL_RCC_GetSysClockFreq+0x2e4>
 800438a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800438e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004392:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800439a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800439e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80043a2:	e087      	b.n	80044b4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	ee07 3a90 	vmov	s15, r3
 80043aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ae:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004510 <HAL_RCC_GetSysClockFreq+0x2e8>
 80043b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043b6:	4b51      	ldr	r3, [pc, #324]	; (80044fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043be:	ee07 3a90 	vmov	s15, r3
 80043c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80043ca:	eddf 5a50 	vldr	s11, [pc, #320]	; 800450c <HAL_RCC_GetSysClockFreq+0x2e4>
 80043ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80043e6:	e065      	b.n	80044b4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	ee07 3a90 	vmov	s15, r3
 80043ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043f2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004514 <HAL_RCC_GetSysClockFreq+0x2ec>
 80043f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043fa:	4b40      	ldr	r3, [pc, #256]	; (80044fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004402:	ee07 3a90 	vmov	s15, r3
 8004406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800440a:	ed97 6a02 	vldr	s12, [r7, #8]
 800440e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800450c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800441a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800441e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004426:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800442a:	e043      	b.n	80044b4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	ee07 3a90 	vmov	s15, r3
 8004432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004436:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004518 <HAL_RCC_GetSysClockFreq+0x2f0>
 800443a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800443e:	4b2f      	ldr	r3, [pc, #188]	; (80044fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004446:	ee07 3a90 	vmov	s15, r3
 800444a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800444e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004452:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800450c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004456:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800445a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800445e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800446a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800446e:	e021      	b.n	80044b4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	ee07 3a90 	vmov	s15, r3
 8004476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800447a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004514 <HAL_RCC_GetSysClockFreq+0x2ec>
 800447e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004482:	4b1e      	ldr	r3, [pc, #120]	; (80044fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800448a:	ee07 3a90 	vmov	s15, r3
 800448e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004492:	ed97 6a02 	vldr	s12, [r7, #8]
 8004496:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800450c <HAL_RCC_GetSysClockFreq+0x2e4>
 800449a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800449e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80044b2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80044b4:	4b11      	ldr	r3, [pc, #68]	; (80044fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b8:	0a5b      	lsrs	r3, r3, #9
 80044ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044be:	3301      	adds	r3, #1
 80044c0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	ee07 3a90 	vmov	s15, r3
 80044c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80044cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80044d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044d8:	ee17 3a90 	vmov	r3, s15
 80044dc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80044de:	e005      	b.n	80044ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80044e0:	2300      	movs	r3, #0
 80044e2:	61bb      	str	r3, [r7, #24]
      break;
 80044e4:	e002      	b.n	80044ec <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80044e6:	4b07      	ldr	r3, [pc, #28]	; (8004504 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80044e8:	61bb      	str	r3, [r7, #24]
      break;
 80044ea:	bf00      	nop
  }

  return sysclockfreq;
 80044ec:	69bb      	ldr	r3, [r7, #24]
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3724      	adds	r7, #36	; 0x24
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	58024400 	.word	0x58024400
 8004500:	03d09000 	.word	0x03d09000
 8004504:	003d0900 	.word	0x003d0900
 8004508:	007a1200 	.word	0x007a1200
 800450c:	46000000 	.word	0x46000000
 8004510:	4c742400 	.word	0x4c742400
 8004514:	4a742400 	.word	0x4a742400
 8004518:	4af42400 	.word	0x4af42400

0800451c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004522:	f7ff fe81 	bl	8004228 <HAL_RCC_GetSysClockFreq>
 8004526:	4602      	mov	r2, r0
 8004528:	4b10      	ldr	r3, [pc, #64]	; (800456c <HAL_RCC_GetHCLKFreq+0x50>)
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	0a1b      	lsrs	r3, r3, #8
 800452e:	f003 030f 	and.w	r3, r3, #15
 8004532:	490f      	ldr	r1, [pc, #60]	; (8004570 <HAL_RCC_GetHCLKFreq+0x54>)
 8004534:	5ccb      	ldrb	r3, [r1, r3]
 8004536:	f003 031f 	and.w	r3, r3, #31
 800453a:	fa22 f303 	lsr.w	r3, r2, r3
 800453e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004540:	4b0a      	ldr	r3, [pc, #40]	; (800456c <HAL_RCC_GetHCLKFreq+0x50>)
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	f003 030f 	and.w	r3, r3, #15
 8004548:	4a09      	ldr	r2, [pc, #36]	; (8004570 <HAL_RCC_GetHCLKFreq+0x54>)
 800454a:	5cd3      	ldrb	r3, [r2, r3]
 800454c:	f003 031f 	and.w	r3, r3, #31
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	fa22 f303 	lsr.w	r3, r2, r3
 8004556:	4a07      	ldr	r2, [pc, #28]	; (8004574 <HAL_RCC_GetHCLKFreq+0x58>)
 8004558:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800455a:	4a07      	ldr	r2, [pc, #28]	; (8004578 <HAL_RCC_GetHCLKFreq+0x5c>)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004560:	4b04      	ldr	r3, [pc, #16]	; (8004574 <HAL_RCC_GetHCLKFreq+0x58>)
 8004562:	681b      	ldr	r3, [r3, #0]
}
 8004564:	4618      	mov	r0, r3
 8004566:	3708      	adds	r7, #8
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}
 800456c:	58024400 	.word	0x58024400
 8004570:	0800acb4 	.word	0x0800acb4
 8004574:	24000004 	.word	0x24000004
 8004578:	24000000 	.word	0x24000000

0800457c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004580:	f7ff ffcc 	bl	800451c <HAL_RCC_GetHCLKFreq>
 8004584:	4602      	mov	r2, r0
 8004586:	4b06      	ldr	r3, [pc, #24]	; (80045a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004588:	69db      	ldr	r3, [r3, #28]
 800458a:	091b      	lsrs	r3, r3, #4
 800458c:	f003 0307 	and.w	r3, r3, #7
 8004590:	4904      	ldr	r1, [pc, #16]	; (80045a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004592:	5ccb      	ldrb	r3, [r1, r3]
 8004594:	f003 031f 	and.w	r3, r3, #31
 8004598:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800459c:	4618      	mov	r0, r3
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	58024400 	.word	0x58024400
 80045a4:	0800acb4 	.word	0x0800acb4

080045a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80045ac:	f7ff ffb6 	bl	800451c <HAL_RCC_GetHCLKFreq>
 80045b0:	4602      	mov	r2, r0
 80045b2:	4b06      	ldr	r3, [pc, #24]	; (80045cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80045b4:	69db      	ldr	r3, [r3, #28]
 80045b6:	0a1b      	lsrs	r3, r3, #8
 80045b8:	f003 0307 	and.w	r3, r3, #7
 80045bc:	4904      	ldr	r1, [pc, #16]	; (80045d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80045be:	5ccb      	ldrb	r3, [r1, r3]
 80045c0:	f003 031f 	and.w	r3, r3, #31
 80045c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	58024400 	.word	0x58024400
 80045d0:	0800acb4 	.word	0x0800acb4

080045d4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045d8:	b0c6      	sub	sp, #280	; 0x118
 80045da:	af00      	add	r7, sp, #0
 80045dc:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80045e0:	2300      	movs	r3, #0
 80045e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80045e6:	2300      	movs	r3, #0
 80045e8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80045ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80045f8:	2500      	movs	r5, #0
 80045fa:	ea54 0305 	orrs.w	r3, r4, r5
 80045fe:	d049      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004600:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004604:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004606:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800460a:	d02f      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800460c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004610:	d828      	bhi.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004612:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004616:	d01a      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004618:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800461c:	d822      	bhi.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004622:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004626:	d007      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004628:	e01c      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800462a:	4bab      	ldr	r3, [pc, #684]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800462c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462e:	4aaa      	ldr	r2, [pc, #680]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004634:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004636:	e01a      	b.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004638:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800463c:	3308      	adds	r3, #8
 800463e:	2102      	movs	r1, #2
 8004640:	4618      	mov	r0, r3
 8004642:	f001 fc25 	bl	8005e90 <RCCEx_PLL2_Config>
 8004646:	4603      	mov	r3, r0
 8004648:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800464c:	e00f      	b.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800464e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004652:	3328      	adds	r3, #40	; 0x28
 8004654:	2102      	movs	r1, #2
 8004656:	4618      	mov	r0, r3
 8004658:	f001 fccc 	bl	8005ff4 <RCCEx_PLL3_Config>
 800465c:	4603      	mov	r3, r0
 800465e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004662:	e004      	b.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800466a:	e000      	b.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800466c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800466e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004672:	2b00      	cmp	r3, #0
 8004674:	d10a      	bne.n	800468c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004676:	4b98      	ldr	r3, [pc, #608]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800467a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800467e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004682:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004684:	4a94      	ldr	r2, [pc, #592]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004686:	430b      	orrs	r3, r1
 8004688:	6513      	str	r3, [r2, #80]	; 0x50
 800468a:	e003      	b.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800468c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004690:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004694:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800469c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80046a0:	f04f 0900 	mov.w	r9, #0
 80046a4:	ea58 0309 	orrs.w	r3, r8, r9
 80046a8:	d047      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80046aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b0:	2b04      	cmp	r3, #4
 80046b2:	d82a      	bhi.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80046b4:	a201      	add	r2, pc, #4	; (adr r2, 80046bc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80046b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ba:	bf00      	nop
 80046bc:	080046d1 	.word	0x080046d1
 80046c0:	080046df 	.word	0x080046df
 80046c4:	080046f5 	.word	0x080046f5
 80046c8:	08004713 	.word	0x08004713
 80046cc:	08004713 	.word	0x08004713
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046d0:	4b81      	ldr	r3, [pc, #516]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80046d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d4:	4a80      	ldr	r2, [pc, #512]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80046d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80046dc:	e01a      	b.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046e2:	3308      	adds	r3, #8
 80046e4:	2100      	movs	r1, #0
 80046e6:	4618      	mov	r0, r3
 80046e8:	f001 fbd2 	bl	8005e90 <RCCEx_PLL2_Config>
 80046ec:	4603      	mov	r3, r0
 80046ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80046f2:	e00f      	b.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80046f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046f8:	3328      	adds	r3, #40	; 0x28
 80046fa:	2100      	movs	r1, #0
 80046fc:	4618      	mov	r0, r3
 80046fe:	f001 fc79 	bl	8005ff4 <RCCEx_PLL3_Config>
 8004702:	4603      	mov	r3, r0
 8004704:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004708:	e004      	b.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004710:	e000      	b.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004712:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004714:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004718:	2b00      	cmp	r3, #0
 800471a:	d10a      	bne.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800471c:	4b6e      	ldr	r3, [pc, #440]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800471e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004720:	f023 0107 	bic.w	r1, r3, #7
 8004724:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800472a:	4a6b      	ldr	r2, [pc, #428]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800472c:	430b      	orrs	r3, r1
 800472e:	6513      	str	r3, [r2, #80]	; 0x50
 8004730:	e003      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004732:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004736:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800473a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800473e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004742:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8004746:	f04f 0b00 	mov.w	fp, #0
 800474a:	ea5a 030b 	orrs.w	r3, sl, fp
 800474e:	d05b      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004750:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004754:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004758:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800475c:	d03b      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800475e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004762:	d834      	bhi.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004764:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004768:	d037      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x206>
 800476a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800476e:	d82e      	bhi.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004770:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004774:	d033      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004776:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800477a:	d828      	bhi.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800477c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004780:	d01a      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8004782:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004786:	d822      	bhi.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004788:	2b00      	cmp	r3, #0
 800478a:	d003      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800478c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004790:	d007      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004792:	e01c      	b.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004794:	4b50      	ldr	r3, [pc, #320]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004798:	4a4f      	ldr	r2, [pc, #316]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800479a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800479e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80047a0:	e01e      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047a6:	3308      	adds	r3, #8
 80047a8:	2100      	movs	r1, #0
 80047aa:	4618      	mov	r0, r3
 80047ac:	f001 fb70 	bl	8005e90 <RCCEx_PLL2_Config>
 80047b0:	4603      	mov	r3, r0
 80047b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80047b6:	e013      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80047b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047bc:	3328      	adds	r3, #40	; 0x28
 80047be:	2100      	movs	r1, #0
 80047c0:	4618      	mov	r0, r3
 80047c2:	f001 fc17 	bl	8005ff4 <RCCEx_PLL3_Config>
 80047c6:	4603      	mov	r3, r0
 80047c8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80047cc:	e008      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80047d4:	e004      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80047d6:	bf00      	nop
 80047d8:	e002      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80047da:	bf00      	nop
 80047dc:	e000      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80047de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d10b      	bne.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80047e8:	4b3b      	ldr	r3, [pc, #236]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80047ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ec:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80047f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80047f8:	4a37      	ldr	r2, [pc, #220]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80047fa:	430b      	orrs	r3, r1
 80047fc:	6593      	str	r3, [r2, #88]	; 0x58
 80047fe:	e003      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004800:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004804:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004808:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800480c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004810:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004814:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004818:	2300      	movs	r3, #0
 800481a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800481e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8004822:	460b      	mov	r3, r1
 8004824:	4313      	orrs	r3, r2
 8004826:	d05d      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004828:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800482c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004830:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004834:	d03b      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004836:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800483a:	d834      	bhi.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800483c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004840:	d037      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8004842:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004846:	d82e      	bhi.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004848:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800484c:	d033      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800484e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004852:	d828      	bhi.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004854:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004858:	d01a      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800485a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800485e:	d822      	bhi.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004860:	2b00      	cmp	r3, #0
 8004862:	d003      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004864:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004868:	d007      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800486a:	e01c      	b.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800486c:	4b1a      	ldr	r3, [pc, #104]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800486e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004870:	4a19      	ldr	r2, [pc, #100]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004872:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004876:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004878:	e01e      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800487a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800487e:	3308      	adds	r3, #8
 8004880:	2100      	movs	r1, #0
 8004882:	4618      	mov	r0, r3
 8004884:	f001 fb04 	bl	8005e90 <RCCEx_PLL2_Config>
 8004888:	4603      	mov	r3, r0
 800488a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800488e:	e013      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004890:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004894:	3328      	adds	r3, #40	; 0x28
 8004896:	2100      	movs	r1, #0
 8004898:	4618      	mov	r0, r3
 800489a:	f001 fbab 	bl	8005ff4 <RCCEx_PLL3_Config>
 800489e:	4603      	mov	r3, r0
 80048a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80048a4:	e008      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80048ac:	e004      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80048ae:	bf00      	nop
 80048b0:	e002      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80048b2:	bf00      	nop
 80048b4:	e000      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80048b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048b8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10d      	bne.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80048c0:	4b05      	ldr	r3, [pc, #20]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80048c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048c4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80048c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048cc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80048d0:	4a01      	ldr	r2, [pc, #4]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80048d2:	430b      	orrs	r3, r1
 80048d4:	6593      	str	r3, [r2, #88]	; 0x58
 80048d6:	e005      	b.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80048d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80048e0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80048e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ec:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80048f0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80048f4:	2300      	movs	r3, #0
 80048f6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80048fa:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80048fe:	460b      	mov	r3, r1
 8004900:	4313      	orrs	r3, r2
 8004902:	d03a      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004904:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800490a:	2b30      	cmp	r3, #48	; 0x30
 800490c:	d01f      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800490e:	2b30      	cmp	r3, #48	; 0x30
 8004910:	d819      	bhi.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004912:	2b20      	cmp	r3, #32
 8004914:	d00c      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004916:	2b20      	cmp	r3, #32
 8004918:	d815      	bhi.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800491a:	2b00      	cmp	r3, #0
 800491c:	d019      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800491e:	2b10      	cmp	r3, #16
 8004920:	d111      	bne.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004922:	4baa      	ldr	r3, [pc, #680]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004926:	4aa9      	ldr	r2, [pc, #676]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800492c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800492e:	e011      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004930:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004934:	3308      	adds	r3, #8
 8004936:	2102      	movs	r1, #2
 8004938:	4618      	mov	r0, r3
 800493a:	f001 faa9 	bl	8005e90 <RCCEx_PLL2_Config>
 800493e:	4603      	mov	r3, r0
 8004940:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004944:	e006      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800494c:	e002      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800494e:	bf00      	nop
 8004950:	e000      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004952:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004954:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004958:	2b00      	cmp	r3, #0
 800495a:	d10a      	bne.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800495c:	4b9b      	ldr	r3, [pc, #620]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800495e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004960:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004964:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800496a:	4a98      	ldr	r2, [pc, #608]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800496c:	430b      	orrs	r3, r1
 800496e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004970:	e003      	b.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004972:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004976:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800497a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800497e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004982:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004986:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800498a:	2300      	movs	r3, #0
 800498c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004990:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004994:	460b      	mov	r3, r1
 8004996:	4313      	orrs	r3, r2
 8004998:	d051      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800499a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800499e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049a4:	d035      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80049a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049aa:	d82e      	bhi.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x436>
 80049ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80049b0:	d031      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x442>
 80049b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80049b6:	d828      	bhi.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x436>
 80049b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049bc:	d01a      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80049be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049c2:	d822      	bhi.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x436>
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d003      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80049c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049cc:	d007      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80049ce:	e01c      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049d0:	4b7e      	ldr	r3, [pc, #504]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80049d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d4:	4a7d      	ldr	r2, [pc, #500]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80049d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80049dc:	e01c      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049e2:	3308      	adds	r3, #8
 80049e4:	2100      	movs	r1, #0
 80049e6:	4618      	mov	r0, r3
 80049e8:	f001 fa52 	bl	8005e90 <RCCEx_PLL2_Config>
 80049ec:	4603      	mov	r3, r0
 80049ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80049f2:	e011      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80049f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049f8:	3328      	adds	r3, #40	; 0x28
 80049fa:	2100      	movs	r1, #0
 80049fc:	4618      	mov	r0, r3
 80049fe:	f001 faf9 	bl	8005ff4 <RCCEx_PLL3_Config>
 8004a02:	4603      	mov	r3, r0
 8004a04:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004a08:	e006      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004a10:	e002      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004a12:	bf00      	nop
 8004a14:	e000      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004a16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a18:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d10a      	bne.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004a20:	4b6a      	ldr	r3, [pc, #424]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004a22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a24:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a2e:	4a67      	ldr	r2, [pc, #412]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004a30:	430b      	orrs	r3, r1
 8004a32:	6513      	str	r3, [r2, #80]	; 0x50
 8004a34:	e003      	b.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a36:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004a3a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004a3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a46:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004a4a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004a4e:	2300      	movs	r3, #0
 8004a50:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004a54:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004a58:	460b      	mov	r3, r1
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	d053      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004a5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a68:	d033      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8004a6a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a6e:	d82c      	bhi.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004a70:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a74:	d02f      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8004a76:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a7a:	d826      	bhi.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004a7c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a80:	d02b      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004a82:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a86:	d820      	bhi.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004a88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a8c:	d012      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8004a8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a92:	d81a      	bhi.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d022      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8004a98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a9c:	d115      	bne.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004aa2:	3308      	adds	r3, #8
 8004aa4:	2101      	movs	r1, #1
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f001 f9f2 	bl	8005e90 <RCCEx_PLL2_Config>
 8004aac:	4603      	mov	r3, r0
 8004aae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004ab2:	e015      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ab8:	3328      	adds	r3, #40	; 0x28
 8004aba:	2101      	movs	r1, #1
 8004abc:	4618      	mov	r0, r3
 8004abe:	f001 fa99 	bl	8005ff4 <RCCEx_PLL3_Config>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004ac8:	e00a      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004ad0:	e006      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004ad2:	bf00      	nop
 8004ad4:	e004      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004ad6:	bf00      	nop
 8004ad8:	e002      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004ada:	bf00      	nop
 8004adc:	e000      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004ade:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ae0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d10a      	bne.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004ae8:	4b38      	ldr	r3, [pc, #224]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004aea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aec:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004af0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004af4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004af6:	4a35      	ldr	r2, [pc, #212]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004af8:	430b      	orrs	r3, r1
 8004afa:	6513      	str	r3, [r2, #80]	; 0x50
 8004afc:	e003      	b.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004afe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004b02:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004b06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b0e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004b12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004b16:	2300      	movs	r3, #0
 8004b18:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004b1c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004b20:	460b      	mov	r3, r1
 8004b22:	4313      	orrs	r3, r2
 8004b24:	d058      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004b26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b2a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004b2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b32:	d033      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004b34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b38:	d82c      	bhi.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b3e:	d02f      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b44:	d826      	bhi.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004b46:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004b4a:	d02b      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004b4c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004b50:	d820      	bhi.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004b52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b56:	d012      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8004b58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b5c:	d81a      	bhi.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d022      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004b62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b66:	d115      	bne.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b6c:	3308      	adds	r3, #8
 8004b6e:	2101      	movs	r1, #1
 8004b70:	4618      	mov	r0, r3
 8004b72:	f001 f98d 	bl	8005e90 <RCCEx_PLL2_Config>
 8004b76:	4603      	mov	r3, r0
 8004b78:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004b7c:	e015      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b82:	3328      	adds	r3, #40	; 0x28
 8004b84:	2101      	movs	r1, #1
 8004b86:	4618      	mov	r0, r3
 8004b88:	f001 fa34 	bl	8005ff4 <RCCEx_PLL3_Config>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004b92:	e00a      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004b9a:	e006      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004b9c:	bf00      	nop
 8004b9e:	e004      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004ba0:	bf00      	nop
 8004ba2:	e002      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004ba4:	bf00      	nop
 8004ba6:	e000      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004ba8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004baa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10e      	bne.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004bb2:	4b06      	ldr	r3, [pc, #24]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bb6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004bba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bbe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004bc2:	4a02      	ldr	r2, [pc, #8]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004bc4:	430b      	orrs	r3, r1
 8004bc6:	6593      	str	r3, [r2, #88]	; 0x58
 8004bc8:	e006      	b.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004bca:	bf00      	nop
 8004bcc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bd0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004bd4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004be4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004be8:	2300      	movs	r3, #0
 8004bea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004bee:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	d037      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004bf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c02:	d00e      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004c04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c08:	d816      	bhi.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d018      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004c0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c12:	d111      	bne.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c14:	4bc4      	ldr	r3, [pc, #784]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c18:	4ac3      	ldr	r2, [pc, #780]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004c1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004c20:	e00f      	b.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c26:	3308      	adds	r3, #8
 8004c28:	2101      	movs	r1, #1
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f001 f930 	bl	8005e90 <RCCEx_PLL2_Config>
 8004c30:	4603      	mov	r3, r0
 8004c32:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004c36:	e004      	b.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004c3e:	e000      	b.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004c40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c42:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d10a      	bne.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004c4a:	4bb7      	ldr	r3, [pc, #732]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c4e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c58:	4ab3      	ldr	r2, [pc, #716]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004c5a:	430b      	orrs	r3, r1
 8004c5c:	6513      	str	r3, [r2, #80]	; 0x50
 8004c5e:	e003      	b.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004c64:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c70:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004c74:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c78:	2300      	movs	r3, #0
 8004c7a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004c7e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004c82:	460b      	mov	r3, r1
 8004c84:	4313      	orrs	r3, r2
 8004c86:	d039      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c8e:	2b03      	cmp	r3, #3
 8004c90:	d81c      	bhi.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004c92:	a201      	add	r2, pc, #4	; (adr r2, 8004c98 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c98:	08004cd5 	.word	0x08004cd5
 8004c9c:	08004ca9 	.word	0x08004ca9
 8004ca0:	08004cb7 	.word	0x08004cb7
 8004ca4:	08004cd5 	.word	0x08004cd5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ca8:	4b9f      	ldr	r3, [pc, #636]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cac:	4a9e      	ldr	r2, [pc, #632]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004cae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cb2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004cb4:	e00f      	b.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004cb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cba:	3308      	adds	r3, #8
 8004cbc:	2102      	movs	r1, #2
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f001 f8e6 	bl	8005e90 <RCCEx_PLL2_Config>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004cca:	e004      	b.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004cd2:	e000      	b.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004cd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cd6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d10a      	bne.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004cde:	4b92      	ldr	r3, [pc, #584]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ce2:	f023 0103 	bic.w	r1, r3, #3
 8004ce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cec:	4a8e      	ldr	r2, [pc, #568]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004cee:	430b      	orrs	r3, r1
 8004cf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004cf2:	e003      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cf4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004cf8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004cfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d04:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004d08:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004d12:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004d16:	460b      	mov	r3, r1
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	f000 8099 	beq.w	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d1e:	4b83      	ldr	r3, [pc, #524]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a82      	ldr	r2, [pc, #520]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004d24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d28:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d2a:	f7fd f805 	bl	8001d38 <HAL_GetTick>
 8004d2e:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d32:	e00b      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d34:	f7fd f800 	bl	8001d38 <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	2b64      	cmp	r3, #100	; 0x64
 8004d42:	d903      	bls.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004d4a:	e005      	b.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d4c:	4b77      	ldr	r3, [pc, #476]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d0ed      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004d58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d173      	bne.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004d60:	4b71      	ldr	r3, [pc, #452]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d6c:	4053      	eors	r3, r2
 8004d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d015      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d76:	4b6c      	ldr	r3, [pc, #432]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d7e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d82:	4b69      	ldr	r3, [pc, #420]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d86:	4a68      	ldr	r2, [pc, #416]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d8c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d8e:	4b66      	ldr	r3, [pc, #408]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d92:	4a65      	ldr	r2, [pc, #404]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d98:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004d9a:	4a63      	ldr	r2, [pc, #396]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004da0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004da2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004da6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004daa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dae:	d118      	bne.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db0:	f7fc ffc2 	bl	8001d38 <HAL_GetTick>
 8004db4:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004db8:	e00d      	b.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dba:	f7fc ffbd 	bl	8001d38 <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004dc4:	1ad2      	subs	r2, r2, r3
 8004dc6:	f241 3388 	movw	r3, #5000	; 0x1388
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d903      	bls.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8004dd4:	e005      	b.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004dd6:	4b54      	ldr	r3, [pc, #336]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dda:	f003 0302 	and.w	r3, r3, #2
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d0eb      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8004de2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d129      	bne.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004df2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004df6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dfa:	d10e      	bne.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004dfc:	4b4a      	ldr	r3, [pc, #296]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e08:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e0c:	091a      	lsrs	r2, r3, #4
 8004e0e:	4b48      	ldr	r3, [pc, #288]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004e10:	4013      	ands	r3, r2
 8004e12:	4a45      	ldr	r2, [pc, #276]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e14:	430b      	orrs	r3, r1
 8004e16:	6113      	str	r3, [r2, #16]
 8004e18:	e005      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8004e1a:	4b43      	ldr	r3, [pc, #268]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	4a42      	ldr	r2, [pc, #264]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e20:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004e24:	6113      	str	r3, [r2, #16]
 8004e26:	4b40      	ldr	r3, [pc, #256]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e28:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004e2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e36:	4a3c      	ldr	r2, [pc, #240]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e38:	430b      	orrs	r3, r1
 8004e3a:	6713      	str	r3, [r2, #112]	; 0x70
 8004e3c:	e008      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e3e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004e42:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8004e46:	e003      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e48:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004e4c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004e50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e58:	f002 0301 	and.w	r3, r2, #1
 8004e5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e60:	2300      	movs	r3, #0
 8004e62:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004e66:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	f000 808f 	beq.w	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e78:	2b28      	cmp	r3, #40	; 0x28
 8004e7a:	d871      	bhi.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8004e7c:	a201      	add	r2, pc, #4	; (adr r2, 8004e84 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e82:	bf00      	nop
 8004e84:	08004f69 	.word	0x08004f69
 8004e88:	08004f61 	.word	0x08004f61
 8004e8c:	08004f61 	.word	0x08004f61
 8004e90:	08004f61 	.word	0x08004f61
 8004e94:	08004f61 	.word	0x08004f61
 8004e98:	08004f61 	.word	0x08004f61
 8004e9c:	08004f61 	.word	0x08004f61
 8004ea0:	08004f61 	.word	0x08004f61
 8004ea4:	08004f35 	.word	0x08004f35
 8004ea8:	08004f61 	.word	0x08004f61
 8004eac:	08004f61 	.word	0x08004f61
 8004eb0:	08004f61 	.word	0x08004f61
 8004eb4:	08004f61 	.word	0x08004f61
 8004eb8:	08004f61 	.word	0x08004f61
 8004ebc:	08004f61 	.word	0x08004f61
 8004ec0:	08004f61 	.word	0x08004f61
 8004ec4:	08004f4b 	.word	0x08004f4b
 8004ec8:	08004f61 	.word	0x08004f61
 8004ecc:	08004f61 	.word	0x08004f61
 8004ed0:	08004f61 	.word	0x08004f61
 8004ed4:	08004f61 	.word	0x08004f61
 8004ed8:	08004f61 	.word	0x08004f61
 8004edc:	08004f61 	.word	0x08004f61
 8004ee0:	08004f61 	.word	0x08004f61
 8004ee4:	08004f69 	.word	0x08004f69
 8004ee8:	08004f61 	.word	0x08004f61
 8004eec:	08004f61 	.word	0x08004f61
 8004ef0:	08004f61 	.word	0x08004f61
 8004ef4:	08004f61 	.word	0x08004f61
 8004ef8:	08004f61 	.word	0x08004f61
 8004efc:	08004f61 	.word	0x08004f61
 8004f00:	08004f61 	.word	0x08004f61
 8004f04:	08004f69 	.word	0x08004f69
 8004f08:	08004f61 	.word	0x08004f61
 8004f0c:	08004f61 	.word	0x08004f61
 8004f10:	08004f61 	.word	0x08004f61
 8004f14:	08004f61 	.word	0x08004f61
 8004f18:	08004f61 	.word	0x08004f61
 8004f1c:	08004f61 	.word	0x08004f61
 8004f20:	08004f61 	.word	0x08004f61
 8004f24:	08004f69 	.word	0x08004f69
 8004f28:	58024400 	.word	0x58024400
 8004f2c:	58024800 	.word	0x58024800
 8004f30:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f38:	3308      	adds	r3, #8
 8004f3a:	2101      	movs	r1, #1
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f000 ffa7 	bl	8005e90 <RCCEx_PLL2_Config>
 8004f42:	4603      	mov	r3, r0
 8004f44:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004f48:	e00f      	b.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f4e:	3328      	adds	r3, #40	; 0x28
 8004f50:	2101      	movs	r1, #1
 8004f52:	4618      	mov	r0, r3
 8004f54:	f001 f84e 	bl	8005ff4 <RCCEx_PLL3_Config>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004f5e:	e004      	b.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004f66:	e000      	b.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004f68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f6a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d10a      	bne.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004f72:	4bbf      	ldr	r3, [pc, #764]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f76:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004f7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f80:	4abb      	ldr	r2, [pc, #748]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004f82:	430b      	orrs	r3, r1
 8004f84:	6553      	str	r3, [r2, #84]	; 0x54
 8004f86:	e003      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f88:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004f8c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f98:	f002 0302 	and.w	r3, r2, #2
 8004f9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004fa6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004faa:	460b      	mov	r3, r1
 8004fac:	4313      	orrs	r3, r2
 8004fae:	d041      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fb6:	2b05      	cmp	r3, #5
 8004fb8:	d824      	bhi.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8004fba:	a201      	add	r2, pc, #4	; (adr r2, 8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8004fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc0:	0800500d 	.word	0x0800500d
 8004fc4:	08004fd9 	.word	0x08004fd9
 8004fc8:	08004fef 	.word	0x08004fef
 8004fcc:	0800500d 	.word	0x0800500d
 8004fd0:	0800500d 	.word	0x0800500d
 8004fd4:	0800500d 	.word	0x0800500d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fdc:	3308      	adds	r3, #8
 8004fde:	2101      	movs	r1, #1
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f000 ff55 	bl	8005e90 <RCCEx_PLL2_Config>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004fec:	e00f      	b.n	800500e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ff2:	3328      	adds	r3, #40	; 0x28
 8004ff4:	2101      	movs	r1, #1
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f000 fffc 	bl	8005ff4 <RCCEx_PLL3_Config>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005002:	e004      	b.n	800500e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800500a:	e000      	b.n	800500e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800500c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800500e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005012:	2b00      	cmp	r3, #0
 8005014:	d10a      	bne.n	800502c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005016:	4b96      	ldr	r3, [pc, #600]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800501a:	f023 0107 	bic.w	r1, r3, #7
 800501e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005022:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005024:	4a92      	ldr	r2, [pc, #584]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005026:	430b      	orrs	r3, r1
 8005028:	6553      	str	r3, [r2, #84]	; 0x54
 800502a:	e003      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800502c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005030:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005034:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503c:	f002 0304 	and.w	r3, r2, #4
 8005040:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005044:	2300      	movs	r3, #0
 8005046:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800504a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800504e:	460b      	mov	r3, r1
 8005050:	4313      	orrs	r3, r2
 8005052:	d044      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005054:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800505c:	2b05      	cmp	r3, #5
 800505e:	d825      	bhi.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8005060:	a201      	add	r2, pc, #4	; (adr r2, 8005068 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8005062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005066:	bf00      	nop
 8005068:	080050b5 	.word	0x080050b5
 800506c:	08005081 	.word	0x08005081
 8005070:	08005097 	.word	0x08005097
 8005074:	080050b5 	.word	0x080050b5
 8005078:	080050b5 	.word	0x080050b5
 800507c:	080050b5 	.word	0x080050b5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005080:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005084:	3308      	adds	r3, #8
 8005086:	2101      	movs	r1, #1
 8005088:	4618      	mov	r0, r3
 800508a:	f000 ff01 	bl	8005e90 <RCCEx_PLL2_Config>
 800508e:	4603      	mov	r3, r0
 8005090:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005094:	e00f      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005096:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800509a:	3328      	adds	r3, #40	; 0x28
 800509c:	2101      	movs	r1, #1
 800509e:	4618      	mov	r0, r3
 80050a0:	f000 ffa8 	bl	8005ff4 <RCCEx_PLL3_Config>
 80050a4:	4603      	mov	r3, r0
 80050a6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80050aa:	e004      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80050b2:	e000      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80050b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050b6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10b      	bne.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80050be:	4b6c      	ldr	r3, [pc, #432]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80050c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c2:	f023 0107 	bic.w	r1, r3, #7
 80050c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ce:	4a68      	ldr	r2, [pc, #416]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80050d0:	430b      	orrs	r3, r1
 80050d2:	6593      	str	r3, [r2, #88]	; 0x58
 80050d4:	e003      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050d6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80050da:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80050de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e6:	f002 0320 	and.w	r3, r2, #32
 80050ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80050ee:	2300      	movs	r3, #0
 80050f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80050f4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80050f8:	460b      	mov	r3, r1
 80050fa:	4313      	orrs	r3, r2
 80050fc:	d055      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80050fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005102:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005106:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800510a:	d033      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800510c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005110:	d82c      	bhi.n	800516c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005112:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005116:	d02f      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8005118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800511c:	d826      	bhi.n	800516c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800511e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005122:	d02b      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8005124:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005128:	d820      	bhi.n	800516c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800512a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800512e:	d012      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8005130:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005134:	d81a      	bhi.n	800516c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005136:	2b00      	cmp	r3, #0
 8005138:	d022      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800513a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800513e:	d115      	bne.n	800516c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005140:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005144:	3308      	adds	r3, #8
 8005146:	2100      	movs	r1, #0
 8005148:	4618      	mov	r0, r3
 800514a:	f000 fea1 	bl	8005e90 <RCCEx_PLL2_Config>
 800514e:	4603      	mov	r3, r0
 8005150:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005154:	e015      	b.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005156:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800515a:	3328      	adds	r3, #40	; 0x28
 800515c:	2102      	movs	r1, #2
 800515e:	4618      	mov	r0, r3
 8005160:	f000 ff48 	bl	8005ff4 <RCCEx_PLL3_Config>
 8005164:	4603      	mov	r3, r0
 8005166:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800516a:	e00a      	b.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005172:	e006      	b.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005174:	bf00      	nop
 8005176:	e004      	b.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005178:	bf00      	nop
 800517a:	e002      	b.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800517c:	bf00      	nop
 800517e:	e000      	b.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005180:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005182:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005186:	2b00      	cmp	r3, #0
 8005188:	d10b      	bne.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800518a:	4b39      	ldr	r3, [pc, #228]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800518c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800518e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005192:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005196:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800519a:	4a35      	ldr	r2, [pc, #212]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800519c:	430b      	orrs	r3, r1
 800519e:	6553      	str	r3, [r2, #84]	; 0x54
 80051a0:	e003      	b.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051a2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80051a6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80051aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80051b6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80051ba:	2300      	movs	r3, #0
 80051bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80051c0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80051c4:	460b      	mov	r3, r1
 80051c6:	4313      	orrs	r3, r2
 80051c8:	d058      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80051ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051d2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80051d6:	d033      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80051d8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80051dc:	d82c      	bhi.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80051de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051e2:	d02f      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80051e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051e8:	d826      	bhi.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80051ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051ee:	d02b      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80051f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051f4:	d820      	bhi.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80051f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051fa:	d012      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80051fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005200:	d81a      	bhi.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005202:	2b00      	cmp	r3, #0
 8005204:	d022      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8005206:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800520a:	d115      	bne.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800520c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005210:	3308      	adds	r3, #8
 8005212:	2100      	movs	r1, #0
 8005214:	4618      	mov	r0, r3
 8005216:	f000 fe3b 	bl	8005e90 <RCCEx_PLL2_Config>
 800521a:	4603      	mov	r3, r0
 800521c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005220:	e015      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005222:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005226:	3328      	adds	r3, #40	; 0x28
 8005228:	2102      	movs	r1, #2
 800522a:	4618      	mov	r0, r3
 800522c:	f000 fee2 	bl	8005ff4 <RCCEx_PLL3_Config>
 8005230:	4603      	mov	r3, r0
 8005232:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005236:	e00a      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800523e:	e006      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005240:	bf00      	nop
 8005242:	e004      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005244:	bf00      	nop
 8005246:	e002      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005248:	bf00      	nop
 800524a:	e000      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800524c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800524e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005252:	2b00      	cmp	r3, #0
 8005254:	d10e      	bne.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005256:	4b06      	ldr	r3, [pc, #24]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800525a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800525e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005262:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005266:	4a02      	ldr	r2, [pc, #8]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005268:	430b      	orrs	r3, r1
 800526a:	6593      	str	r3, [r2, #88]	; 0x58
 800526c:	e006      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800526e:	bf00      	nop
 8005270:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005274:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005278:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800527c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005284:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005288:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800528c:	2300      	movs	r3, #0
 800528e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005292:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005296:	460b      	mov	r3, r1
 8005298:	4313      	orrs	r3, r2
 800529a:	d055      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800529c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052a4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80052a8:	d033      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80052aa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80052ae:	d82c      	bhi.n	800530a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80052b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052b4:	d02f      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80052b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052ba:	d826      	bhi.n	800530a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80052bc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80052c0:	d02b      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80052c2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80052c6:	d820      	bhi.n	800530a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80052c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052cc:	d012      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80052ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052d2:	d81a      	bhi.n	800530a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d022      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80052d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052dc:	d115      	bne.n	800530a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052e2:	3308      	adds	r3, #8
 80052e4:	2100      	movs	r1, #0
 80052e6:	4618      	mov	r0, r3
 80052e8:	f000 fdd2 	bl	8005e90 <RCCEx_PLL2_Config>
 80052ec:	4603      	mov	r3, r0
 80052ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80052f2:	e015      	b.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80052f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052f8:	3328      	adds	r3, #40	; 0x28
 80052fa:	2102      	movs	r1, #2
 80052fc:	4618      	mov	r0, r3
 80052fe:	f000 fe79 	bl	8005ff4 <RCCEx_PLL3_Config>
 8005302:	4603      	mov	r3, r0
 8005304:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005308:	e00a      	b.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005310:	e006      	b.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005312:	bf00      	nop
 8005314:	e004      	b.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005316:	bf00      	nop
 8005318:	e002      	b.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800531a:	bf00      	nop
 800531c:	e000      	b.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800531e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005320:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005324:	2b00      	cmp	r3, #0
 8005326:	d10b      	bne.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005328:	4ba0      	ldr	r3, [pc, #640]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800532a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800532c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8005330:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005334:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005338:	4a9c      	ldr	r2, [pc, #624]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800533a:	430b      	orrs	r3, r1
 800533c:	6593      	str	r3, [r2, #88]	; 0x58
 800533e:	e003      	b.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005340:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005344:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8005348:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800534c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005350:	f002 0308 	and.w	r3, r2, #8
 8005354:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005358:	2300      	movs	r3, #0
 800535a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800535e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005362:	460b      	mov	r3, r1
 8005364:	4313      	orrs	r3, r2
 8005366:	d01e      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8005368:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800536c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005370:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005374:	d10c      	bne.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005376:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800537a:	3328      	adds	r3, #40	; 0x28
 800537c:	2102      	movs	r1, #2
 800537e:	4618      	mov	r0, r3
 8005380:	f000 fe38 	bl	8005ff4 <RCCEx_PLL3_Config>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d002      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8005390:	4b86      	ldr	r3, [pc, #536]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005394:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005398:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800539c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053a0:	4a82      	ldr	r2, [pc, #520]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80053a2:	430b      	orrs	r3, r1
 80053a4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80053a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ae:	f002 0310 	and.w	r3, r2, #16
 80053b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80053b6:	2300      	movs	r3, #0
 80053b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80053bc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80053c0:	460b      	mov	r3, r1
 80053c2:	4313      	orrs	r3, r2
 80053c4:	d01e      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80053c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053d2:	d10c      	bne.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80053d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053d8:	3328      	adds	r3, #40	; 0x28
 80053da:	2102      	movs	r1, #2
 80053dc:	4618      	mov	r0, r3
 80053de:	f000 fe09 	bl	8005ff4 <RCCEx_PLL3_Config>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d002      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80053ee:	4b6f      	ldr	r3, [pc, #444]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80053f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80053f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053fe:	4a6b      	ldr	r2, [pc, #428]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005400:	430b      	orrs	r3, r1
 8005402:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005404:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800540c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005410:	67bb      	str	r3, [r7, #120]	; 0x78
 8005412:	2300      	movs	r3, #0
 8005414:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005416:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800541a:	460b      	mov	r3, r1
 800541c:	4313      	orrs	r3, r2
 800541e:	d03e      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005420:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005424:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005428:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800542c:	d022      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800542e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005432:	d81b      	bhi.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8005434:	2b00      	cmp	r3, #0
 8005436:	d003      	beq.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8005438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800543c:	d00b      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800543e:	e015      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005440:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005444:	3308      	adds	r3, #8
 8005446:	2100      	movs	r1, #0
 8005448:	4618      	mov	r0, r3
 800544a:	f000 fd21 	bl	8005e90 <RCCEx_PLL2_Config>
 800544e:	4603      	mov	r3, r0
 8005450:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005454:	e00f      	b.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005456:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800545a:	3328      	adds	r3, #40	; 0x28
 800545c:	2102      	movs	r1, #2
 800545e:	4618      	mov	r0, r3
 8005460:	f000 fdc8 	bl	8005ff4 <RCCEx_PLL3_Config>
 8005464:	4603      	mov	r3, r0
 8005466:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800546a:	e004      	b.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005472:	e000      	b.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8005474:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005476:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800547a:	2b00      	cmp	r3, #0
 800547c:	d10b      	bne.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800547e:	4b4b      	ldr	r3, [pc, #300]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005482:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005486:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800548a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800548e:	4a47      	ldr	r2, [pc, #284]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005490:	430b      	orrs	r3, r1
 8005492:	6593      	str	r3, [r2, #88]	; 0x58
 8005494:	e003      	b.n	800549e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005496:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800549a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800549e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80054aa:	673b      	str	r3, [r7, #112]	; 0x70
 80054ac:	2300      	movs	r3, #0
 80054ae:	677b      	str	r3, [r7, #116]	; 0x74
 80054b0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80054b4:	460b      	mov	r3, r1
 80054b6:	4313      	orrs	r3, r2
 80054b8:	d03b      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80054ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80054c6:	d01f      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80054c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80054cc:	d818      	bhi.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80054ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054d2:	d003      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80054d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054d8:	d007      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80054da:	e011      	b.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054dc:	4b33      	ldr	r3, [pc, #204]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80054de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e0:	4a32      	ldr	r2, [pc, #200]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80054e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80054e8:	e00f      	b.n	800550a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80054ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054ee:	3328      	adds	r3, #40	; 0x28
 80054f0:	2101      	movs	r1, #1
 80054f2:	4618      	mov	r0, r3
 80054f4:	f000 fd7e 	bl	8005ff4 <RCCEx_PLL3_Config>
 80054f8:	4603      	mov	r3, r0
 80054fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80054fe:	e004      	b.n	800550a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005506:	e000      	b.n	800550a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8005508:	bf00      	nop
    }

    if (ret == HAL_OK)
 800550a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800550e:	2b00      	cmp	r3, #0
 8005510:	d10b      	bne.n	800552a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005512:	4b26      	ldr	r3, [pc, #152]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005516:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800551a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800551e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005522:	4a22      	ldr	r2, [pc, #136]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005524:	430b      	orrs	r3, r1
 8005526:	6553      	str	r3, [r2, #84]	; 0x54
 8005528:	e003      	b.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800552a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800552e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005532:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800553a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800553e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005540:	2300      	movs	r3, #0
 8005542:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005544:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005548:	460b      	mov	r3, r1
 800554a:	4313      	orrs	r3, r2
 800554c:	d034      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800554e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005554:	2b00      	cmp	r3, #0
 8005556:	d003      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8005558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800555c:	d007      	beq.n	800556e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800555e:	e011      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005560:	4b12      	ldr	r3, [pc, #72]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005564:	4a11      	ldr	r2, [pc, #68]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800556a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800556c:	e00e      	b.n	800558c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800556e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005572:	3308      	adds	r3, #8
 8005574:	2102      	movs	r1, #2
 8005576:	4618      	mov	r0, r3
 8005578:	f000 fc8a 	bl	8005e90 <RCCEx_PLL2_Config>
 800557c:	4603      	mov	r3, r0
 800557e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005582:	e003      	b.n	800558c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800558a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800558c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005590:	2b00      	cmp	r3, #0
 8005592:	d10d      	bne.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005594:	4b05      	ldr	r3, [pc, #20]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005598:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800559c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055a2:	4a02      	ldr	r2, [pc, #8]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80055a4:	430b      	orrs	r3, r1
 80055a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80055a8:	e006      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80055aa:	bf00      	nop
 80055ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80055b4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80055b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80055c4:	663b      	str	r3, [r7, #96]	; 0x60
 80055c6:	2300      	movs	r3, #0
 80055c8:	667b      	str	r3, [r7, #100]	; 0x64
 80055ca:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80055ce:	460b      	mov	r3, r1
 80055d0:	4313      	orrs	r3, r2
 80055d2:	d00c      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80055d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055d8:	3328      	adds	r3, #40	; 0x28
 80055da:	2102      	movs	r1, #2
 80055dc:	4618      	mov	r0, r3
 80055de:	f000 fd09 	bl	8005ff4 <RCCEx_PLL3_Config>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d002      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80055ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80055fa:	65bb      	str	r3, [r7, #88]	; 0x58
 80055fc:	2300      	movs	r3, #0
 80055fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005600:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005604:	460b      	mov	r3, r1
 8005606:	4313      	orrs	r3, r2
 8005608:	d036      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800560a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800560e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005610:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005614:	d018      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8005616:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800561a:	d811      	bhi.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800561c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005620:	d014      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8005622:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005626:	d80b      	bhi.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005628:	2b00      	cmp	r3, #0
 800562a:	d011      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800562c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005630:	d106      	bne.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005632:	4bb7      	ldr	r3, [pc, #732]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005636:	4ab6      	ldr	r2, [pc, #728]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800563c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800563e:	e008      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005646:	e004      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005648:	bf00      	nop
 800564a:	e002      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800564c:	bf00      	nop
 800564e:	e000      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005650:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005652:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10a      	bne.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800565a:	4bad      	ldr	r3, [pc, #692]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800565c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800565e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005662:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005666:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005668:	4aa9      	ldr	r2, [pc, #676]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800566a:	430b      	orrs	r3, r1
 800566c:	6553      	str	r3, [r2, #84]	; 0x54
 800566e:	e003      	b.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005670:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005674:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005678:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800567c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005680:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005684:	653b      	str	r3, [r7, #80]	; 0x50
 8005686:	2300      	movs	r3, #0
 8005688:	657b      	str	r3, [r7, #84]	; 0x54
 800568a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800568e:	460b      	mov	r3, r1
 8005690:	4313      	orrs	r3, r2
 8005692:	d009      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005694:	4b9e      	ldr	r3, [pc, #632]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005696:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005698:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800569c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056a2:	4a9b      	ldr	r2, [pc, #620]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80056a4:	430b      	orrs	r3, r1
 80056a6:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80056a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b0:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80056b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80056b6:	2300      	movs	r3, #0
 80056b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056ba:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80056be:	460b      	mov	r3, r1
 80056c0:	4313      	orrs	r3, r2
 80056c2:	d009      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80056c4:	4b92      	ldr	r3, [pc, #584]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80056c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056c8:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80056cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056d2:	4a8f      	ldr	r2, [pc, #572]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80056d4:	430b      	orrs	r3, r1
 80056d6:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80056d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e0:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80056e4:	643b      	str	r3, [r7, #64]	; 0x40
 80056e6:	2300      	movs	r3, #0
 80056e8:	647b      	str	r3, [r7, #68]	; 0x44
 80056ea:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80056ee:	460b      	mov	r3, r1
 80056f0:	4313      	orrs	r3, r2
 80056f2:	d00e      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80056f4:	4b86      	ldr	r3, [pc, #536]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	4a85      	ldr	r2, [pc, #532]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80056fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80056fe:	6113      	str	r3, [r2, #16]
 8005700:	4b83      	ldr	r3, [pc, #524]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005702:	6919      	ldr	r1, [r3, #16]
 8005704:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005708:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800570c:	4a80      	ldr	r2, [pc, #512]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800570e:	430b      	orrs	r3, r1
 8005710:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005712:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800571e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005720:	2300      	movs	r3, #0
 8005722:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005724:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005728:	460b      	mov	r3, r1
 800572a:	4313      	orrs	r3, r2
 800572c:	d009      	beq.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800572e:	4b78      	ldr	r3, [pc, #480]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005732:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005736:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800573a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800573c:	4a74      	ldr	r2, [pc, #464]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800573e:	430b      	orrs	r3, r1
 8005740:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005742:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800574a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800574e:	633b      	str	r3, [r7, #48]	; 0x30
 8005750:	2300      	movs	r3, #0
 8005752:	637b      	str	r3, [r7, #52]	; 0x34
 8005754:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005758:	460b      	mov	r3, r1
 800575a:	4313      	orrs	r3, r2
 800575c:	d00a      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800575e:	4b6c      	ldr	r3, [pc, #432]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005762:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8005766:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800576a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800576e:	4a68      	ldr	r2, [pc, #416]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005770:	430b      	orrs	r3, r1
 8005772:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005774:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800577c:	2100      	movs	r1, #0
 800577e:	62b9      	str	r1, [r7, #40]	; 0x28
 8005780:	f003 0301 	and.w	r3, r3, #1
 8005784:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005786:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800578a:	460b      	mov	r3, r1
 800578c:	4313      	orrs	r3, r2
 800578e:	d011      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005790:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005794:	3308      	adds	r3, #8
 8005796:	2100      	movs	r1, #0
 8005798:	4618      	mov	r0, r3
 800579a:	f000 fb79 	bl	8005e90 <RCCEx_PLL2_Config>
 800579e:	4603      	mov	r3, r0
 80057a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80057a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d003      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80057b0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80057b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057bc:	2100      	movs	r1, #0
 80057be:	6239      	str	r1, [r7, #32]
 80057c0:	f003 0302 	and.w	r3, r3, #2
 80057c4:	627b      	str	r3, [r7, #36]	; 0x24
 80057c6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80057ca:	460b      	mov	r3, r1
 80057cc:	4313      	orrs	r3, r2
 80057ce:	d011      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80057d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057d4:	3308      	adds	r3, #8
 80057d6:	2101      	movs	r1, #1
 80057d8:	4618      	mov	r0, r3
 80057da:	f000 fb59 	bl	8005e90 <RCCEx_PLL2_Config>
 80057de:	4603      	mov	r3, r0
 80057e0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80057e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d003      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80057f0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80057f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057fc:	2100      	movs	r1, #0
 80057fe:	61b9      	str	r1, [r7, #24]
 8005800:	f003 0304 	and.w	r3, r3, #4
 8005804:	61fb      	str	r3, [r7, #28]
 8005806:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800580a:	460b      	mov	r3, r1
 800580c:	4313      	orrs	r3, r2
 800580e:	d011      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005810:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005814:	3308      	adds	r3, #8
 8005816:	2102      	movs	r1, #2
 8005818:	4618      	mov	r0, r3
 800581a:	f000 fb39 	bl	8005e90 <RCCEx_PLL2_Config>
 800581e:	4603      	mov	r3, r0
 8005820:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8005824:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005828:	2b00      	cmp	r3, #0
 800582a:	d003      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800582c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005830:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005834:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800583c:	2100      	movs	r1, #0
 800583e:	6139      	str	r1, [r7, #16]
 8005840:	f003 0308 	and.w	r3, r3, #8
 8005844:	617b      	str	r3, [r7, #20]
 8005846:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800584a:	460b      	mov	r3, r1
 800584c:	4313      	orrs	r3, r2
 800584e:	d011      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005850:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005854:	3328      	adds	r3, #40	; 0x28
 8005856:	2100      	movs	r1, #0
 8005858:	4618      	mov	r0, r3
 800585a:	f000 fbcb 	bl	8005ff4 <RCCEx_PLL3_Config>
 800585e:	4603      	mov	r3, r0
 8005860:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8005864:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005868:	2b00      	cmp	r3, #0
 800586a:	d003      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800586c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005870:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005874:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800587c:	2100      	movs	r1, #0
 800587e:	60b9      	str	r1, [r7, #8]
 8005880:	f003 0310 	and.w	r3, r3, #16
 8005884:	60fb      	str	r3, [r7, #12]
 8005886:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800588a:	460b      	mov	r3, r1
 800588c:	4313      	orrs	r3, r2
 800588e:	d011      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005890:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005894:	3328      	adds	r3, #40	; 0x28
 8005896:	2101      	movs	r1, #1
 8005898:	4618      	mov	r0, r3
 800589a:	f000 fbab 	bl	8005ff4 <RCCEx_PLL3_Config>
 800589e:	4603      	mov	r3, r0
 80058a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80058a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d003      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80058b0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80058b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058bc:	2100      	movs	r1, #0
 80058be:	6039      	str	r1, [r7, #0]
 80058c0:	f003 0320 	and.w	r3, r3, #32
 80058c4:	607b      	str	r3, [r7, #4]
 80058c6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80058ca:	460b      	mov	r3, r1
 80058cc:	4313      	orrs	r3, r2
 80058ce:	d011      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80058d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058d4:	3328      	adds	r3, #40	; 0x28
 80058d6:	2102      	movs	r1, #2
 80058d8:	4618      	mov	r0, r3
 80058da:	f000 fb8b 	bl	8005ff4 <RCCEx_PLL3_Config>
 80058de:	4603      	mov	r3, r0
 80058e0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80058e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d003      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80058f0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 80058f4:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d101      	bne.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80058fc:	2300      	movs	r3, #0
 80058fe:	e000      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
}
 8005902:	4618      	mov	r0, r3
 8005904:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8005908:	46bd      	mov	sp, r7
 800590a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800590e:	bf00      	nop
 8005910:	58024400 	.word	0x58024400

08005914 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005918:	f7fe fe00 	bl	800451c <HAL_RCC_GetHCLKFreq>
 800591c:	4602      	mov	r2, r0
 800591e:	4b06      	ldr	r3, [pc, #24]	; (8005938 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005920:	6a1b      	ldr	r3, [r3, #32]
 8005922:	091b      	lsrs	r3, r3, #4
 8005924:	f003 0307 	and.w	r3, r3, #7
 8005928:	4904      	ldr	r1, [pc, #16]	; (800593c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800592a:	5ccb      	ldrb	r3, [r1, r3]
 800592c:	f003 031f 	and.w	r3, r3, #31
 8005930:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005934:	4618      	mov	r0, r3
 8005936:	bd80      	pop	{r7, pc}
 8005938:	58024400 	.word	0x58024400
 800593c:	0800acb4 	.word	0x0800acb4

08005940 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005940:	b480      	push	{r7}
 8005942:	b089      	sub	sp, #36	; 0x24
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005948:	4ba1      	ldr	r3, [pc, #644]	; (8005bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800594a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800594c:	f003 0303 	and.w	r3, r3, #3
 8005950:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005952:	4b9f      	ldr	r3, [pc, #636]	; (8005bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005956:	0b1b      	lsrs	r3, r3, #12
 8005958:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800595c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800595e:	4b9c      	ldr	r3, [pc, #624]	; (8005bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005962:	091b      	lsrs	r3, r3, #4
 8005964:	f003 0301 	and.w	r3, r3, #1
 8005968:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800596a:	4b99      	ldr	r3, [pc, #612]	; (8005bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800596c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800596e:	08db      	lsrs	r3, r3, #3
 8005970:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005974:	693a      	ldr	r2, [r7, #16]
 8005976:	fb02 f303 	mul.w	r3, r2, r3
 800597a:	ee07 3a90 	vmov	s15, r3
 800597e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005982:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	2b00      	cmp	r3, #0
 800598a:	f000 8111 	beq.w	8005bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	2b02      	cmp	r3, #2
 8005992:	f000 8083 	beq.w	8005a9c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	2b02      	cmp	r3, #2
 800599a:	f200 80a1 	bhi.w	8005ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d003      	beq.n	80059ac <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d056      	beq.n	8005a58 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80059aa:	e099      	b.n	8005ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059ac:	4b88      	ldr	r3, [pc, #544]	; (8005bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0320 	and.w	r3, r3, #32
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d02d      	beq.n	8005a14 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80059b8:	4b85      	ldr	r3, [pc, #532]	; (8005bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	08db      	lsrs	r3, r3, #3
 80059be:	f003 0303 	and.w	r3, r3, #3
 80059c2:	4a84      	ldr	r2, [pc, #528]	; (8005bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80059c4:	fa22 f303 	lsr.w	r3, r2, r3
 80059c8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	ee07 3a90 	vmov	s15, r3
 80059d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	ee07 3a90 	vmov	s15, r3
 80059da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059e2:	4b7b      	ldr	r3, [pc, #492]	; (8005bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ea:	ee07 3a90 	vmov	s15, r3
 80059ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80059f6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80059fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a0e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005a12:	e087      	b.n	8005b24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	ee07 3a90 	vmov	s15, r3
 8005a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a1e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005bdc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005a22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a26:	4b6a      	ldr	r3, [pc, #424]	; (8005bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a2e:	ee07 3a90 	vmov	s15, r3
 8005a32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a36:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a3a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a56:	e065      	b.n	8005b24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	ee07 3a90 	vmov	s15, r3
 8005a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a62:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005be0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005a66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a6a:	4b59      	ldr	r3, [pc, #356]	; (8005bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a72:	ee07 3a90 	vmov	s15, r3
 8005a76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a7e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a9a:	e043      	b.n	8005b24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	ee07 3a90 	vmov	s15, r3
 8005aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aa6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005be4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005aaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005aae:	4b48      	ldr	r3, [pc, #288]	; (8005bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ab6:	ee07 3a90 	vmov	s15, r3
 8005aba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005abe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ac2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005ac6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ace:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ad2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ada:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ade:	e021      	b.n	8005b24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	ee07 3a90 	vmov	s15, r3
 8005ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005be0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005aee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005af2:	4b37      	ldr	r3, [pc, #220]	; (8005bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005afa:	ee07 3a90 	vmov	s15, r3
 8005afe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b02:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b06:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b22:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005b24:	4b2a      	ldr	r3, [pc, #168]	; (8005bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b28:	0a5b      	lsrs	r3, r3, #9
 8005b2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b2e:	ee07 3a90 	vmov	s15, r3
 8005b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b4a:	ee17 2a90 	vmov	r2, s15
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005b52:	4b1f      	ldr	r3, [pc, #124]	; (8005bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b56:	0c1b      	lsrs	r3, r3, #16
 8005b58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b5c:	ee07 3a90 	vmov	s15, r3
 8005b60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b68:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b78:	ee17 2a90 	vmov	r2, s15
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005b80:	4b13      	ldr	r3, [pc, #76]	; (8005bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b84:	0e1b      	lsrs	r3, r3, #24
 8005b86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b8a:	ee07 3a90 	vmov	s15, r3
 8005b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ba2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ba6:	ee17 2a90 	vmov	r2, s15
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005bae:	e008      	b.n	8005bc2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	609a      	str	r2, [r3, #8]
}
 8005bc2:	bf00      	nop
 8005bc4:	3724      	adds	r7, #36	; 0x24
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop
 8005bd0:	58024400 	.word	0x58024400
 8005bd4:	03d09000 	.word	0x03d09000
 8005bd8:	46000000 	.word	0x46000000
 8005bdc:	4c742400 	.word	0x4c742400
 8005be0:	4a742400 	.word	0x4a742400
 8005be4:	4af42400 	.word	0x4af42400

08005be8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b089      	sub	sp, #36	; 0x24
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005bf0:	4ba1      	ldr	r3, [pc, #644]	; (8005e78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf4:	f003 0303 	and.w	r3, r3, #3
 8005bf8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005bfa:	4b9f      	ldr	r3, [pc, #636]	; (8005e78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bfe:	0d1b      	lsrs	r3, r3, #20
 8005c00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c04:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005c06:	4b9c      	ldr	r3, [pc, #624]	; (8005e78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0a:	0a1b      	lsrs	r3, r3, #8
 8005c0c:	f003 0301 	and.w	r3, r3, #1
 8005c10:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005c12:	4b99      	ldr	r3, [pc, #612]	; (8005e78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c16:	08db      	lsrs	r3, r3, #3
 8005c18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c1c:	693a      	ldr	r2, [r7, #16]
 8005c1e:	fb02 f303 	mul.w	r3, r2, r3
 8005c22:	ee07 3a90 	vmov	s15, r3
 8005c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c2a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f000 8111 	beq.w	8005e58 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	f000 8083 	beq.w	8005d44 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	2b02      	cmp	r3, #2
 8005c42:	f200 80a1 	bhi.w	8005d88 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d003      	beq.n	8005c54 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d056      	beq.n	8005d00 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005c52:	e099      	b.n	8005d88 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c54:	4b88      	ldr	r3, [pc, #544]	; (8005e78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 0320 	and.w	r3, r3, #32
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d02d      	beq.n	8005cbc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c60:	4b85      	ldr	r3, [pc, #532]	; (8005e78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	08db      	lsrs	r3, r3, #3
 8005c66:	f003 0303 	and.w	r3, r3, #3
 8005c6a:	4a84      	ldr	r2, [pc, #528]	; (8005e7c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c70:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	ee07 3a90 	vmov	s15, r3
 8005c78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	ee07 3a90 	vmov	s15, r3
 8005c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c8a:	4b7b      	ldr	r3, [pc, #492]	; (8005e78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c92:	ee07 3a90 	vmov	s15, r3
 8005c96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c9e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005e80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ca2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ca6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005caa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cb6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005cba:	e087      	b.n	8005dcc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	ee07 3a90 	vmov	s15, r3
 8005cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cc6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005e84 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005cca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cce:	4b6a      	ldr	r3, [pc, #424]	; (8005e78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cd6:	ee07 3a90 	vmov	s15, r3
 8005cda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cde:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ce2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005e80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ce6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005cfe:	e065      	b.n	8005dcc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	ee07 3a90 	vmov	s15, r3
 8005d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d0a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005e88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005d0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d12:	4b59      	ldr	r3, [pc, #356]	; (8005e78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d1a:	ee07 3a90 	vmov	s15, r3
 8005d1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d22:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d26:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005e80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d42:	e043      	b.n	8005dcc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	ee07 3a90 	vmov	s15, r3
 8005d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d4e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005e8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005d52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d56:	4b48      	ldr	r3, [pc, #288]	; (8005e78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d5e:	ee07 3a90 	vmov	s15, r3
 8005d62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d66:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d6a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005e80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d86:	e021      	b.n	8005dcc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	ee07 3a90 	vmov	s15, r3
 8005d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d92:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005e88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005d96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d9a:	4b37      	ldr	r3, [pc, #220]	; (8005e78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005da2:	ee07 3a90 	vmov	s15, r3
 8005da6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005daa:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dae:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005e80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005db2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005db6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005dca:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005dcc:	4b2a      	ldr	r3, [pc, #168]	; (8005e78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd0:	0a5b      	lsrs	r3, r3, #9
 8005dd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dd6:	ee07 3a90 	vmov	s15, r3
 8005dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005de2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005de6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005df2:	ee17 2a90 	vmov	r2, s15
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005dfa:	4b1f      	ldr	r3, [pc, #124]	; (8005e78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfe:	0c1b      	lsrs	r3, r3, #16
 8005e00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e04:	ee07 3a90 	vmov	s15, r3
 8005e08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e10:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e14:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e20:	ee17 2a90 	vmov	r2, s15
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005e28:	4b13      	ldr	r3, [pc, #76]	; (8005e78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2c:	0e1b      	lsrs	r3, r3, #24
 8005e2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e32:	ee07 3a90 	vmov	s15, r3
 8005e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e42:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e4e:	ee17 2a90 	vmov	r2, s15
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005e56:	e008      	b.n	8005e6a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	609a      	str	r2, [r3, #8]
}
 8005e6a:	bf00      	nop
 8005e6c:	3724      	adds	r7, #36	; 0x24
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr
 8005e76:	bf00      	nop
 8005e78:	58024400 	.word	0x58024400
 8005e7c:	03d09000 	.word	0x03d09000
 8005e80:	46000000 	.word	0x46000000
 8005e84:	4c742400 	.word	0x4c742400
 8005e88:	4a742400 	.word	0x4a742400
 8005e8c:	4af42400 	.word	0x4af42400

08005e90 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005e9e:	4b53      	ldr	r3, [pc, #332]	; (8005fec <RCCEx_PLL2_Config+0x15c>)
 8005ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea2:	f003 0303 	and.w	r3, r3, #3
 8005ea6:	2b03      	cmp	r3, #3
 8005ea8:	d101      	bne.n	8005eae <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e099      	b.n	8005fe2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005eae:	4b4f      	ldr	r3, [pc, #316]	; (8005fec <RCCEx_PLL2_Config+0x15c>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a4e      	ldr	r2, [pc, #312]	; (8005fec <RCCEx_PLL2_Config+0x15c>)
 8005eb4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005eb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005eba:	f7fb ff3d 	bl	8001d38 <HAL_GetTick>
 8005ebe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005ec0:	e008      	b.n	8005ed4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005ec2:	f7fb ff39 	bl	8001d38 <HAL_GetTick>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d901      	bls.n	8005ed4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	e086      	b.n	8005fe2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005ed4:	4b45      	ldr	r3, [pc, #276]	; (8005fec <RCCEx_PLL2_Config+0x15c>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d1f0      	bne.n	8005ec2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005ee0:	4b42      	ldr	r3, [pc, #264]	; (8005fec <RCCEx_PLL2_Config+0x15c>)
 8005ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	031b      	lsls	r3, r3, #12
 8005eee:	493f      	ldr	r1, [pc, #252]	; (8005fec <RCCEx_PLL2_Config+0x15c>)
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	628b      	str	r3, [r1, #40]	; 0x28
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	3b01      	subs	r3, #1
 8005efa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	3b01      	subs	r3, #1
 8005f04:	025b      	lsls	r3, r3, #9
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	431a      	orrs	r2, r3
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	3b01      	subs	r3, #1
 8005f10:	041b      	lsls	r3, r3, #16
 8005f12:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005f16:	431a      	orrs	r2, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	3b01      	subs	r3, #1
 8005f1e:	061b      	lsls	r3, r3, #24
 8005f20:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005f24:	4931      	ldr	r1, [pc, #196]	; (8005fec <RCCEx_PLL2_Config+0x15c>)
 8005f26:	4313      	orrs	r3, r2
 8005f28:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005f2a:	4b30      	ldr	r3, [pc, #192]	; (8005fec <RCCEx_PLL2_Config+0x15c>)
 8005f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f2e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	695b      	ldr	r3, [r3, #20]
 8005f36:	492d      	ldr	r1, [pc, #180]	; (8005fec <RCCEx_PLL2_Config+0x15c>)
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005f3c:	4b2b      	ldr	r3, [pc, #172]	; (8005fec <RCCEx_PLL2_Config+0x15c>)
 8005f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f40:	f023 0220 	bic.w	r2, r3, #32
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	699b      	ldr	r3, [r3, #24]
 8005f48:	4928      	ldr	r1, [pc, #160]	; (8005fec <RCCEx_PLL2_Config+0x15c>)
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005f4e:	4b27      	ldr	r3, [pc, #156]	; (8005fec <RCCEx_PLL2_Config+0x15c>)
 8005f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f52:	4a26      	ldr	r2, [pc, #152]	; (8005fec <RCCEx_PLL2_Config+0x15c>)
 8005f54:	f023 0310 	bic.w	r3, r3, #16
 8005f58:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005f5a:	4b24      	ldr	r3, [pc, #144]	; (8005fec <RCCEx_PLL2_Config+0x15c>)
 8005f5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f5e:	4b24      	ldr	r3, [pc, #144]	; (8005ff0 <RCCEx_PLL2_Config+0x160>)
 8005f60:	4013      	ands	r3, r2
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	69d2      	ldr	r2, [r2, #28]
 8005f66:	00d2      	lsls	r2, r2, #3
 8005f68:	4920      	ldr	r1, [pc, #128]	; (8005fec <RCCEx_PLL2_Config+0x15c>)
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005f6e:	4b1f      	ldr	r3, [pc, #124]	; (8005fec <RCCEx_PLL2_Config+0x15c>)
 8005f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f72:	4a1e      	ldr	r2, [pc, #120]	; (8005fec <RCCEx_PLL2_Config+0x15c>)
 8005f74:	f043 0310 	orr.w	r3, r3, #16
 8005f78:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d106      	bne.n	8005f8e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005f80:	4b1a      	ldr	r3, [pc, #104]	; (8005fec <RCCEx_PLL2_Config+0x15c>)
 8005f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f84:	4a19      	ldr	r2, [pc, #100]	; (8005fec <RCCEx_PLL2_Config+0x15c>)
 8005f86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005f8c:	e00f      	b.n	8005fae <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d106      	bne.n	8005fa2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005f94:	4b15      	ldr	r3, [pc, #84]	; (8005fec <RCCEx_PLL2_Config+0x15c>)
 8005f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f98:	4a14      	ldr	r2, [pc, #80]	; (8005fec <RCCEx_PLL2_Config+0x15c>)
 8005f9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005fa0:	e005      	b.n	8005fae <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005fa2:	4b12      	ldr	r3, [pc, #72]	; (8005fec <RCCEx_PLL2_Config+0x15c>)
 8005fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa6:	4a11      	ldr	r2, [pc, #68]	; (8005fec <RCCEx_PLL2_Config+0x15c>)
 8005fa8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005fac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005fae:	4b0f      	ldr	r3, [pc, #60]	; (8005fec <RCCEx_PLL2_Config+0x15c>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a0e      	ldr	r2, [pc, #56]	; (8005fec <RCCEx_PLL2_Config+0x15c>)
 8005fb4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005fb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fba:	f7fb febd 	bl	8001d38 <HAL_GetTick>
 8005fbe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005fc0:	e008      	b.n	8005fd4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005fc2:	f7fb feb9 	bl	8001d38 <HAL_GetTick>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	1ad3      	subs	r3, r2, r3
 8005fcc:	2b02      	cmp	r3, #2
 8005fce:	d901      	bls.n	8005fd4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005fd0:	2303      	movs	r3, #3
 8005fd2:	e006      	b.n	8005fe2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005fd4:	4b05      	ldr	r3, [pc, #20]	; (8005fec <RCCEx_PLL2_Config+0x15c>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d0f0      	beq.n	8005fc2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3710      	adds	r7, #16
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	bf00      	nop
 8005fec:	58024400 	.word	0x58024400
 8005ff0:	ffff0007 	.word	0xffff0007

08005ff4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ffe:	2300      	movs	r3, #0
 8006000:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006002:	4b53      	ldr	r3, [pc, #332]	; (8006150 <RCCEx_PLL3_Config+0x15c>)
 8006004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006006:	f003 0303 	and.w	r3, r3, #3
 800600a:	2b03      	cmp	r3, #3
 800600c:	d101      	bne.n	8006012 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	e099      	b.n	8006146 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006012:	4b4f      	ldr	r3, [pc, #316]	; (8006150 <RCCEx_PLL3_Config+0x15c>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a4e      	ldr	r2, [pc, #312]	; (8006150 <RCCEx_PLL3_Config+0x15c>)
 8006018:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800601c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800601e:	f7fb fe8b 	bl	8001d38 <HAL_GetTick>
 8006022:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006024:	e008      	b.n	8006038 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006026:	f7fb fe87 	bl	8001d38 <HAL_GetTick>
 800602a:	4602      	mov	r2, r0
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	1ad3      	subs	r3, r2, r3
 8006030:	2b02      	cmp	r3, #2
 8006032:	d901      	bls.n	8006038 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006034:	2303      	movs	r3, #3
 8006036:	e086      	b.n	8006146 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006038:	4b45      	ldr	r3, [pc, #276]	; (8006150 <RCCEx_PLL3_Config+0x15c>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006040:	2b00      	cmp	r3, #0
 8006042:	d1f0      	bne.n	8006026 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006044:	4b42      	ldr	r3, [pc, #264]	; (8006150 <RCCEx_PLL3_Config+0x15c>)
 8006046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006048:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	051b      	lsls	r3, r3, #20
 8006052:	493f      	ldr	r1, [pc, #252]	; (8006150 <RCCEx_PLL3_Config+0x15c>)
 8006054:	4313      	orrs	r3, r2
 8006056:	628b      	str	r3, [r1, #40]	; 0x28
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	3b01      	subs	r3, #1
 800605e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	3b01      	subs	r3, #1
 8006068:	025b      	lsls	r3, r3, #9
 800606a:	b29b      	uxth	r3, r3
 800606c:	431a      	orrs	r2, r3
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	3b01      	subs	r3, #1
 8006074:	041b      	lsls	r3, r3, #16
 8006076:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800607a:	431a      	orrs	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	3b01      	subs	r3, #1
 8006082:	061b      	lsls	r3, r3, #24
 8006084:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006088:	4931      	ldr	r1, [pc, #196]	; (8006150 <RCCEx_PLL3_Config+0x15c>)
 800608a:	4313      	orrs	r3, r2
 800608c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800608e:	4b30      	ldr	r3, [pc, #192]	; (8006150 <RCCEx_PLL3_Config+0x15c>)
 8006090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006092:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	695b      	ldr	r3, [r3, #20]
 800609a:	492d      	ldr	r1, [pc, #180]	; (8006150 <RCCEx_PLL3_Config+0x15c>)
 800609c:	4313      	orrs	r3, r2
 800609e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80060a0:	4b2b      	ldr	r3, [pc, #172]	; (8006150 <RCCEx_PLL3_Config+0x15c>)
 80060a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	699b      	ldr	r3, [r3, #24]
 80060ac:	4928      	ldr	r1, [pc, #160]	; (8006150 <RCCEx_PLL3_Config+0x15c>)
 80060ae:	4313      	orrs	r3, r2
 80060b0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80060b2:	4b27      	ldr	r3, [pc, #156]	; (8006150 <RCCEx_PLL3_Config+0x15c>)
 80060b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b6:	4a26      	ldr	r2, [pc, #152]	; (8006150 <RCCEx_PLL3_Config+0x15c>)
 80060b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80060be:	4b24      	ldr	r3, [pc, #144]	; (8006150 <RCCEx_PLL3_Config+0x15c>)
 80060c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060c2:	4b24      	ldr	r3, [pc, #144]	; (8006154 <RCCEx_PLL3_Config+0x160>)
 80060c4:	4013      	ands	r3, r2
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	69d2      	ldr	r2, [r2, #28]
 80060ca:	00d2      	lsls	r2, r2, #3
 80060cc:	4920      	ldr	r1, [pc, #128]	; (8006150 <RCCEx_PLL3_Config+0x15c>)
 80060ce:	4313      	orrs	r3, r2
 80060d0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80060d2:	4b1f      	ldr	r3, [pc, #124]	; (8006150 <RCCEx_PLL3_Config+0x15c>)
 80060d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d6:	4a1e      	ldr	r2, [pc, #120]	; (8006150 <RCCEx_PLL3_Config+0x15c>)
 80060d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d106      	bne.n	80060f2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80060e4:	4b1a      	ldr	r3, [pc, #104]	; (8006150 <RCCEx_PLL3_Config+0x15c>)
 80060e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e8:	4a19      	ldr	r2, [pc, #100]	; (8006150 <RCCEx_PLL3_Config+0x15c>)
 80060ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80060ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80060f0:	e00f      	b.n	8006112 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d106      	bne.n	8006106 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80060f8:	4b15      	ldr	r3, [pc, #84]	; (8006150 <RCCEx_PLL3_Config+0x15c>)
 80060fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060fc:	4a14      	ldr	r2, [pc, #80]	; (8006150 <RCCEx_PLL3_Config+0x15c>)
 80060fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006102:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006104:	e005      	b.n	8006112 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006106:	4b12      	ldr	r3, [pc, #72]	; (8006150 <RCCEx_PLL3_Config+0x15c>)
 8006108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800610a:	4a11      	ldr	r2, [pc, #68]	; (8006150 <RCCEx_PLL3_Config+0x15c>)
 800610c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006110:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006112:	4b0f      	ldr	r3, [pc, #60]	; (8006150 <RCCEx_PLL3_Config+0x15c>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a0e      	ldr	r2, [pc, #56]	; (8006150 <RCCEx_PLL3_Config+0x15c>)
 8006118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800611c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800611e:	f7fb fe0b 	bl	8001d38 <HAL_GetTick>
 8006122:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006124:	e008      	b.n	8006138 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006126:	f7fb fe07 	bl	8001d38 <HAL_GetTick>
 800612a:	4602      	mov	r2, r0
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	1ad3      	subs	r3, r2, r3
 8006130:	2b02      	cmp	r3, #2
 8006132:	d901      	bls.n	8006138 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006134:	2303      	movs	r3, #3
 8006136:	e006      	b.n	8006146 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006138:	4b05      	ldr	r3, [pc, #20]	; (8006150 <RCCEx_PLL3_Config+0x15c>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006140:	2b00      	cmp	r3, #0
 8006142:	d0f0      	beq.n	8006126 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006144:	7bfb      	ldrb	r3, [r7, #15]
}
 8006146:	4618      	mov	r0, r3
 8006148:	3710      	adds	r7, #16
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	58024400 	.word	0x58024400
 8006154:	ffff0007 	.word	0xffff0007

08006158 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d101      	bne.n	800616a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e10f      	b.n	800638a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a87      	ldr	r2, [pc, #540]	; (8006394 <HAL_SPI_Init+0x23c>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d00f      	beq.n	800619a <HAL_SPI_Init+0x42>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a86      	ldr	r2, [pc, #536]	; (8006398 <HAL_SPI_Init+0x240>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d00a      	beq.n	800619a <HAL_SPI_Init+0x42>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a84      	ldr	r2, [pc, #528]	; (800639c <HAL_SPI_Init+0x244>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d005      	beq.n	800619a <HAL_SPI_Init+0x42>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	2b0f      	cmp	r3, #15
 8006194:	d901      	bls.n	800619a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e0f7      	b.n	800638a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 fef6 	bl	8006f8c <SPI_GetPacketSize>
 80061a0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a7b      	ldr	r2, [pc, #492]	; (8006394 <HAL_SPI_Init+0x23c>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d00c      	beq.n	80061c6 <HAL_SPI_Init+0x6e>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a79      	ldr	r2, [pc, #484]	; (8006398 <HAL_SPI_Init+0x240>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d007      	beq.n	80061c6 <HAL_SPI_Init+0x6e>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a78      	ldr	r2, [pc, #480]	; (800639c <HAL_SPI_Init+0x244>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d002      	beq.n	80061c6 <HAL_SPI_Init+0x6e>
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2b08      	cmp	r3, #8
 80061c4:	d811      	bhi.n	80061ea <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80061ca:	4a72      	ldr	r2, [pc, #456]	; (8006394 <HAL_SPI_Init+0x23c>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d009      	beq.n	80061e4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a70      	ldr	r2, [pc, #448]	; (8006398 <HAL_SPI_Init+0x240>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d004      	beq.n	80061e4 <HAL_SPI_Init+0x8c>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a6f      	ldr	r2, [pc, #444]	; (800639c <HAL_SPI_Init+0x244>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d104      	bne.n	80061ee <HAL_SPI_Init+0x96>
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2b10      	cmp	r3, #16
 80061e8:	d901      	bls.n	80061ee <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e0cd      	b.n	800638a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d106      	bne.n	8006208 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f7fb f838 	bl	8001278 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2202      	movs	r2, #2
 800620c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f022 0201 	bic.w	r2, r2, #1
 800621e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800622a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	699b      	ldr	r3, [r3, #24]
 8006230:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006234:	d119      	bne.n	800626a <HAL_SPI_Init+0x112>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800623e:	d103      	bne.n	8006248 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006244:	2b00      	cmp	r3, #0
 8006246:	d008      	beq.n	800625a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800624c:	2b00      	cmp	r3, #0
 800624e:	d10c      	bne.n	800626a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006254:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006258:	d107      	bne.n	800626a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006268:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006272:	2b00      	cmp	r3, #0
 8006274:	d00f      	beq.n	8006296 <HAL_SPI_Init+0x13e>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	2b06      	cmp	r3, #6
 800627c:	d90b      	bls.n	8006296 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	430a      	orrs	r2, r1
 8006292:	601a      	str	r2, [r3, #0]
 8006294:	e007      	b.n	80062a6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062a4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	69da      	ldr	r2, [r3, #28]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ae:	431a      	orrs	r2, r3
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	431a      	orrs	r2, r3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062b8:	ea42 0103 	orr.w	r1, r2, r3
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	68da      	ldr	r2, [r3, #12]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	430a      	orrs	r2, r1
 80062c6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d0:	431a      	orrs	r2, r3
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d6:	431a      	orrs	r2, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	699b      	ldr	r3, [r3, #24]
 80062dc:	431a      	orrs	r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	431a      	orrs	r2, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	695b      	ldr	r3, [r3, #20]
 80062e8:	431a      	orrs	r2, r3
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6a1b      	ldr	r3, [r3, #32]
 80062ee:	431a      	orrs	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	431a      	orrs	r2, r3
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062fa:	431a      	orrs	r2, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	431a      	orrs	r2, r3
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006306:	ea42 0103 	orr.w	r1, r2, r3
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	430a      	orrs	r2, r1
 8006314:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d113      	bne.n	8006346 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006330:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006344:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f022 0201 	bic.w	r2, r2, #1
 8006354:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800635e:	2b00      	cmp	r3, #0
 8006360:	d00a      	beq.n	8006378 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	430a      	orrs	r2, r1
 8006376:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	3710      	adds	r7, #16
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop
 8006394:	40013000 	.word	0x40013000
 8006398:	40003800 	.word	0x40003800
 800639c:	40003c00 	.word	0x40003c00

080063a0 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b088      	sub	sp, #32
 80063a4:	af02      	add	r7, sp, #8
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	603b      	str	r3, [r7, #0]
 80063ac:	4613      	mov	r3, r2
 80063ae:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	3320      	adds	r3, #32
 80063b6:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063b8:	f7fb fcbe 	bl	8001d38 <HAL_GetTick>
 80063bc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d001      	beq.n	80063ce <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80063ca:	2302      	movs	r3, #2
 80063cc:	e1d1      	b.n	8006772 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d002      	beq.n	80063da <HAL_SPI_Transmit+0x3a>
 80063d4:	88fb      	ldrh	r3, [r7, #6]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d101      	bne.n	80063de <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e1c9      	b.n	8006772 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d101      	bne.n	80063ec <HAL_SPI_Transmit+0x4c>
 80063e8:	2302      	movs	r3, #2
 80063ea:	e1c2      	b.n	8006772 <HAL_SPI_Transmit+0x3d2>
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2203      	movs	r2, #3
 80063f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2200      	movs	r2, #0
 8006400:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	68ba      	ldr	r2, [r7, #8]
 8006408:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	88fa      	ldrh	r2, [r7, #6]
 800640e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	88fa      	ldrh	r2, [r7, #6]
 8006416:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2200      	movs	r2, #0
 800641e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2200      	movs	r2, #0
 8006424:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2200      	movs	r2, #0
 800642c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2200      	movs	r2, #0
 8006434:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8006444:	d108      	bne.n	8006458 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006454:	601a      	str	r2, [r3, #0]
 8006456:	e009      	b.n	800646c <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800646a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	685a      	ldr	r2, [r3, #4]
 8006472:	4b96      	ldr	r3, [pc, #600]	; (80066cc <HAL_SPI_Transmit+0x32c>)
 8006474:	4013      	ands	r3, r2
 8006476:	88f9      	ldrh	r1, [r7, #6]
 8006478:	68fa      	ldr	r2, [r7, #12]
 800647a:	6812      	ldr	r2, [r2, #0]
 800647c:	430b      	orrs	r3, r1
 800647e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f042 0201 	orr.w	r2, r2, #1
 800648e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006498:	d107      	bne.n	80064aa <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	2b0f      	cmp	r3, #15
 80064b0:	d947      	bls.n	8006542 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80064b2:	e03f      	b.n	8006534 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	695b      	ldr	r3, [r3, #20]
 80064ba:	f003 0302 	and.w	r3, r3, #2
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d114      	bne.n	80064ec <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	6812      	ldr	r2, [r2, #0]
 80064cc:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064d2:	1d1a      	adds	r2, r3, #4
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80064de:	b29b      	uxth	r3, r3
 80064e0:	3b01      	subs	r3, #1
 80064e2:	b29a      	uxth	r2, r3
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80064ea:	e023      	b.n	8006534 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064ec:	f7fb fc24 	bl	8001d38 <HAL_GetTick>
 80064f0:	4602      	mov	r2, r0
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	1ad3      	subs	r3, r2, r3
 80064f6:	683a      	ldr	r2, [r7, #0]
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d803      	bhi.n	8006504 <HAL_SPI_Transmit+0x164>
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006502:	d102      	bne.n	800650a <HAL_SPI_Transmit+0x16a>
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d114      	bne.n	8006534 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800650a:	68f8      	ldr	r0, [r7, #12]
 800650c:	f000 fc70 	bl	8006df0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006516:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2200      	movs	r2, #0
 800652c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006530:	2303      	movs	r3, #3
 8006532:	e11e      	b.n	8006772 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800653a:	b29b      	uxth	r3, r3
 800653c:	2b00      	cmp	r3, #0
 800653e:	d1b9      	bne.n	80064b4 <HAL_SPI_Transmit+0x114>
 8006540:	e0f1      	b.n	8006726 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	2b07      	cmp	r3, #7
 8006548:	f240 80e6 	bls.w	8006718 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800654c:	e05d      	b.n	800660a <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	695b      	ldr	r3, [r3, #20]
 8006554:	f003 0302 	and.w	r3, r3, #2
 8006558:	2b02      	cmp	r3, #2
 800655a:	d132      	bne.n	80065c2 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006562:	b29b      	uxth	r3, r3
 8006564:	2b01      	cmp	r3, #1
 8006566:	d918      	bls.n	800659a <HAL_SPI_Transmit+0x1fa>
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800656c:	2b00      	cmp	r3, #0
 800656e:	d014      	beq.n	800659a <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	6812      	ldr	r2, [r2, #0]
 800657a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006580:	1d1a      	adds	r2, r3, #4
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800658c:	b29b      	uxth	r3, r3
 800658e:	3b02      	subs	r3, #2
 8006590:	b29a      	uxth	r2, r3
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006598:	e037      	b.n	800660a <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800659e:	881a      	ldrh	r2, [r3, #0]
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065a8:	1c9a      	adds	r2, r3, #2
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	3b01      	subs	r3, #1
 80065b8:	b29a      	uxth	r2, r3
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80065c0:	e023      	b.n	800660a <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065c2:	f7fb fbb9 	bl	8001d38 <HAL_GetTick>
 80065c6:	4602      	mov	r2, r0
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	1ad3      	subs	r3, r2, r3
 80065cc:	683a      	ldr	r2, [r7, #0]
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d803      	bhi.n	80065da <HAL_SPI_Transmit+0x23a>
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065d8:	d102      	bne.n	80065e0 <HAL_SPI_Transmit+0x240>
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d114      	bne.n	800660a <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80065e0:	68f8      	ldr	r0, [r7, #12]
 80065e2:	f000 fc05 	bl	8006df0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2201      	movs	r2, #1
 80065fa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	e0b3      	b.n	8006772 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006610:	b29b      	uxth	r3, r3
 8006612:	2b00      	cmp	r3, #0
 8006614:	d19b      	bne.n	800654e <HAL_SPI_Transmit+0x1ae>
 8006616:	e086      	b.n	8006726 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	695b      	ldr	r3, [r3, #20]
 800661e:	f003 0302 	and.w	r3, r3, #2
 8006622:	2b02      	cmp	r3, #2
 8006624:	d154      	bne.n	80066d0 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800662c:	b29b      	uxth	r3, r3
 800662e:	2b03      	cmp	r3, #3
 8006630:	d918      	bls.n	8006664 <HAL_SPI_Transmit+0x2c4>
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006636:	2b40      	cmp	r3, #64	; 0x40
 8006638:	d914      	bls.n	8006664 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	6812      	ldr	r2, [r2, #0]
 8006644:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800664a:	1d1a      	adds	r2, r3, #4
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006656:	b29b      	uxth	r3, r3
 8006658:	3b04      	subs	r3, #4
 800665a:	b29a      	uxth	r2, r3
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006662:	e059      	b.n	8006718 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800666a:	b29b      	uxth	r3, r3
 800666c:	2b01      	cmp	r3, #1
 800666e:	d917      	bls.n	80066a0 <HAL_SPI_Transmit+0x300>
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006674:	2b00      	cmp	r3, #0
 8006676:	d013      	beq.n	80066a0 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800667c:	881a      	ldrh	r2, [r3, #0]
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006686:	1c9a      	adds	r2, r3, #2
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006692:	b29b      	uxth	r3, r3
 8006694:	3b02      	subs	r3, #2
 8006696:	b29a      	uxth	r2, r3
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800669e:	e03b      	b.n	8006718 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	3320      	adds	r3, #32
 80066aa:	7812      	ldrb	r2, [r2, #0]
 80066ac:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066b2:	1c5a      	adds	r2, r3, #1
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80066be:	b29b      	uxth	r3, r3
 80066c0:	3b01      	subs	r3, #1
 80066c2:	b29a      	uxth	r2, r3
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80066ca:	e025      	b.n	8006718 <HAL_SPI_Transmit+0x378>
 80066cc:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066d0:	f7fb fb32 	bl	8001d38 <HAL_GetTick>
 80066d4:	4602      	mov	r2, r0
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	1ad3      	subs	r3, r2, r3
 80066da:	683a      	ldr	r2, [r7, #0]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d803      	bhi.n	80066e8 <HAL_SPI_Transmit+0x348>
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066e6:	d102      	bne.n	80066ee <HAL_SPI_Transmit+0x34e>
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d114      	bne.n	8006718 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80066ee:	68f8      	ldr	r0, [r7, #12]
 80066f0:	f000 fb7e 	bl	8006df0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2201      	movs	r2, #1
 8006708:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2200      	movs	r2, #0
 8006710:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006714:	2303      	movs	r3, #3
 8006716:	e02c      	b.n	8006772 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800671e:	b29b      	uxth	r3, r3
 8006720:	2b00      	cmp	r3, #0
 8006722:	f47f af79 	bne.w	8006618 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	9300      	str	r3, [sp, #0]
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	2200      	movs	r2, #0
 800672e:	2108      	movs	r1, #8
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	f000 fbfd 	bl	8006f30 <SPI_WaitOnFlagUntilTimeout>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d007      	beq.n	800674c <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006742:	f043 0220 	orr.w	r2, r3, #32
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800674c:	68f8      	ldr	r0, [r7, #12]
 800674e:	f000 fb4f 	bl	8006df0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2201      	movs	r2, #1
 8006756:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006768:	2b00      	cmp	r3, #0
 800676a:	d001      	beq.n	8006770 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	e000      	b.n	8006772 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8006770:	2300      	movs	r3, #0
  }
}
 8006772:	4618      	mov	r0, r3
 8006774:	3718      	adds	r7, #24
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop

0800677c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b08e      	sub	sp, #56	; 0x38
 8006780:	af02      	add	r7, sp, #8
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	607a      	str	r2, [r7, #4]
 8006788:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	3320      	adds	r3, #32
 8006790:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	3330      	adds	r3, #48	; 0x30
 8006798:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800679e:	095b      	lsrs	r3, r3, #5
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	3301      	adds	r3, #1
 80067a4:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80067a6:	f7fb fac7 	bl	8001d38 <HAL_GetTick>
 80067aa:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 80067ac:	887b      	ldrh	r3, [r7, #2]
 80067ae:	857b      	strh	r3, [r7, #42]	; 0x2a
  initial_RxXferCount = Size;
 80067b0:	887b      	ldrh	r3, [r7, #2]
 80067b2:	853b      	strh	r3, [r7, #40]	; 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d001      	beq.n	80067c4 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 80067c0:	2302      	movs	r3, #2
 80067c2:	e310      	b.n	8006de6 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d005      	beq.n	80067d6 <HAL_SPI_TransmitReceive+0x5a>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d002      	beq.n	80067d6 <HAL_SPI_TransmitReceive+0x5a>
 80067d0:	887b      	ldrh	r3, [r7, #2]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d101      	bne.n	80067da <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e305      	b.n	8006de6 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d101      	bne.n	80067e8 <HAL_SPI_TransmitReceive+0x6c>
 80067e4:	2302      	movs	r3, #2
 80067e6:	e2fe      	b.n	8006de6 <HAL_SPI_TransmitReceive+0x66a>
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2205      	movs	r2, #5
 80067f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	887a      	ldrh	r2, [r7, #2]
 800680a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	887a      	ldrh	r2, [r7, #2]
 8006812:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	68ba      	ldr	r2, [r7, #8]
 800681a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	887a      	ldrh	r2, [r7, #2]
 8006820:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	887a      	ldrh	r2, [r7, #2]
 8006828:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2200      	movs	r2, #0
 8006830:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2200      	movs	r2, #0
 8006836:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68da      	ldr	r2, [r3, #12]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 8006846:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a70      	ldr	r2, [pc, #448]	; (8006a10 <HAL_SPI_TransmitReceive+0x294>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d009      	beq.n	8006866 <HAL_SPI_TransmitReceive+0xea>
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a6f      	ldr	r2, [pc, #444]	; (8006a14 <HAL_SPI_TransmitReceive+0x298>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d004      	beq.n	8006866 <HAL_SPI_TransmitReceive+0xea>
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a6d      	ldr	r2, [pc, #436]	; (8006a18 <HAL_SPI_TransmitReceive+0x29c>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d102      	bne.n	800686c <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8006866:	2310      	movs	r3, #16
 8006868:	62fb      	str	r3, [r7, #44]	; 0x2c
 800686a:	e001      	b.n	8006870 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800686c:	2308      	movs	r3, #8
 800686e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	685a      	ldr	r2, [r3, #4]
 8006876:	4b69      	ldr	r3, [pc, #420]	; (8006a1c <HAL_SPI_TransmitReceive+0x2a0>)
 8006878:	4013      	ands	r3, r2
 800687a:	8879      	ldrh	r1, [r7, #2]
 800687c:	68fa      	ldr	r2, [r7, #12]
 800687e:	6812      	ldr	r2, [r2, #0]
 8006880:	430b      	orrs	r3, r1
 8006882:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f042 0201 	orr.w	r2, r2, #1
 8006892:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800689c:	d107      	bne.n	80068ae <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	2b0f      	cmp	r3, #15
 80068b4:	f240 80a2 	bls.w	80069fc <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 80068b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ba:	089b      	lsrs	r3, r3, #2
 80068bc:	62fb      	str	r3, [r7, #44]	; 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80068be:	e094      	b.n	80069ea <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	695b      	ldr	r3, [r3, #20]
 80068c6:	f003 0302 	and.w	r3, r3, #2
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	d120      	bne.n	8006910 <HAL_SPI_TransmitReceive+0x194>
 80068ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d01d      	beq.n	8006910 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80068d4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80068d6:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 80068d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068da:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80068dc:	429a      	cmp	r2, r3
 80068de:	d217      	bcs.n	8006910 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	6812      	ldr	r2, [r2, #0]
 80068ea:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068f0:	1d1a      	adds	r2, r3, #4
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	3b01      	subs	r3, #1
 8006900:	b29a      	uxth	r2, r3
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800690e:	857b      	strh	r3, [r7, #42]	; 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	695b      	ldr	r3, [r3, #20]
 8006916:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8006918:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800691a:	2b00      	cmp	r3, #0
 800691c:	d065      	beq.n	80069ea <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	695b      	ldr	r3, [r3, #20]
 8006924:	f003 0301 	and.w	r3, r3, #1
 8006928:	2b01      	cmp	r3, #1
 800692a:	d118      	bne.n	800695e <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006934:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006936:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800693c:	1d1a      	adds	r2, r3, #4
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006948:	b29b      	uxth	r3, r3
 800694a:	3b01      	subs	r3, #1
 800694c:	b29a      	uxth	r2, r3
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800695a:	853b      	strh	r3, [r7, #40]	; 0x28
 800695c:	e045      	b.n	80069ea <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800695e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006960:	8bfb      	ldrh	r3, [r7, #30]
 8006962:	429a      	cmp	r2, r3
 8006964:	d21d      	bcs.n	80069a2 <HAL_SPI_TransmitReceive+0x226>
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800696c:	2b00      	cmp	r3, #0
 800696e:	d018      	beq.n	80069a2 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006978:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800697a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006980:	1d1a      	adds	r2, r3, #4
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800698c:	b29b      	uxth	r3, r3
 800698e:	3b01      	subs	r3, #1
 8006990:	b29a      	uxth	r2, r3
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800699e:	853b      	strh	r3, [r7, #40]	; 0x28
 80069a0:	e023      	b.n	80069ea <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069a2:	f7fb f9c9 	bl	8001d38 <HAL_GetTick>
 80069a6:	4602      	mov	r2, r0
 80069a8:	69bb      	ldr	r3, [r7, #24]
 80069aa:	1ad3      	subs	r3, r2, r3
 80069ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d803      	bhi.n	80069ba <HAL_SPI_TransmitReceive+0x23e>
 80069b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069b8:	d102      	bne.n	80069c0 <HAL_SPI_TransmitReceive+0x244>
 80069ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d114      	bne.n	80069ea <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80069c0:	68f8      	ldr	r0, [r7, #12]
 80069c2:	f000 fa15 	bl	8006df0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2201      	movs	r2, #1
 80069da:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2200      	movs	r2, #0
 80069e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

            return HAL_TIMEOUT;
 80069e6:	2303      	movs	r3, #3
 80069e8:	e1fd      	b.n	8006de6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80069ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	f47f af67 	bne.w	80068c0 <HAL_SPI_TransmitReceive+0x144>
 80069f2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	f47f af63 	bne.w	80068c0 <HAL_SPI_TransmitReceive+0x144>
 80069fa:	e1ce      	b.n	8006d9a <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	2b07      	cmp	r3, #7
 8006a02:	f240 81c2 	bls.w	8006d8a <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8006a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a08:	085b      	lsrs	r3, r3, #1
 8006a0a:	62fb      	str	r3, [r7, #44]	; 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006a0c:	e0c9      	b.n	8006ba2 <HAL_SPI_TransmitReceive+0x426>
 8006a0e:	bf00      	nop
 8006a10:	40013000 	.word	0x40013000
 8006a14:	40003800 	.word	0x40003800
 8006a18:	40003c00 	.word	0x40003c00
 8006a1c:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	695b      	ldr	r3, [r3, #20]
 8006a26:	f003 0302 	and.w	r3, r3, #2
 8006a2a:	2b02      	cmp	r3, #2
 8006a2c:	d11f      	bne.n	8006a6e <HAL_SPI_TransmitReceive+0x2f2>
 8006a2e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d01c      	beq.n	8006a6e <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8006a34:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006a36:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8006a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a3a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d216      	bcs.n	8006a6e <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a44:	881a      	ldrh	r2, [r3, #0]
 8006a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a48:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a4e:	1c9a      	adds	r2, r3, #2
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	b29a      	uxth	r2, r3
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006a6c:	857b      	strh	r3, [r7, #42]	; 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	695b      	ldr	r3, [r3, #20]
 8006a74:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8006a76:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	f000 8092 	beq.w	8006ba2 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	695b      	ldr	r3, [r3, #20]
 8006a84:	f003 0301 	and.w	r3, r3, #1
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d118      	bne.n	8006abe <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a90:	6a3a      	ldr	r2, [r7, #32]
 8006a92:	8812      	ldrh	r2, [r2, #0]
 8006a94:	b292      	uxth	r2, r2
 8006a96:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a9c:	1c9a      	adds	r2, r3, #2
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	3b01      	subs	r3, #1
 8006aac:	b29a      	uxth	r2, r3
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006aba:	853b      	strh	r3, [r7, #40]	; 0x28
 8006abc:	e071      	b.n	8006ba2 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006abe:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006ac0:	8bfb      	ldrh	r3, [r7, #30]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d228      	bcs.n	8006b18 <HAL_SPI_TransmitReceive+0x39c>
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d023      	beq.n	8006b18 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ad4:	6a3a      	ldr	r2, [r7, #32]
 8006ad6:	8812      	ldrh	r2, [r2, #0]
 8006ad8:	b292      	uxth	r2, r2
 8006ada:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ae0:	1c9a      	adds	r2, r3, #2
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006aea:	6a3a      	ldr	r2, [r7, #32]
 8006aec:	8812      	ldrh	r2, [r2, #0]
 8006aee:	b292      	uxth	r2, r2
 8006af0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006af6:	1c9a      	adds	r2, r3, #2
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	3b02      	subs	r3, #2
 8006b06:	b29a      	uxth	r2, r3
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006b14:	853b      	strh	r3, [r7, #40]	; 0x28
 8006b16:	e044      	b.n	8006ba2 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8006b18:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d11d      	bne.n	8006b5a <HAL_SPI_TransmitReceive+0x3de>
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d018      	beq.n	8006b5a <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b2c:	6a3a      	ldr	r2, [r7, #32]
 8006b2e:	8812      	ldrh	r2, [r2, #0]
 8006b30:	b292      	uxth	r2, r2
 8006b32:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b38:	1c9a      	adds	r2, r3, #2
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	3b01      	subs	r3, #1
 8006b48:	b29a      	uxth	r2, r3
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006b56:	853b      	strh	r3, [r7, #40]	; 0x28
 8006b58:	e023      	b.n	8006ba2 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b5a:	f7fb f8ed 	bl	8001d38 <HAL_GetTick>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	69bb      	ldr	r3, [r7, #24]
 8006b62:	1ad3      	subs	r3, r2, r3
 8006b64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d803      	bhi.n	8006b72 <HAL_SPI_TransmitReceive+0x3f6>
 8006b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b70:	d102      	bne.n	8006b78 <HAL_SPI_TransmitReceive+0x3fc>
 8006b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d114      	bne.n	8006ba2 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8006b78:	68f8      	ldr	r0, [r7, #12]
 8006b7a:	f000 f939 	bl	8006df0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b84:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2201      	movs	r2, #1
 8006b92:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

            return HAL_TIMEOUT;
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	e121      	b.n	8006de6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006ba2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	f47f af3b 	bne.w	8006a20 <HAL_SPI_TransmitReceive+0x2a4>
 8006baa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	f47f af37 	bne.w	8006a20 <HAL_SPI_TransmitReceive+0x2a4>
 8006bb2:	e0f2      	b.n	8006d9a <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	695b      	ldr	r3, [r3, #20]
 8006bba:	f003 0302 	and.w	r3, r3, #2
 8006bbe:	2b02      	cmp	r3, #2
 8006bc0:	d121      	bne.n	8006c06 <HAL_SPI_TransmitReceive+0x48a>
 8006bc2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d01e      	beq.n	8006c06 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8006bc8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006bca:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8006bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bce:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d218      	bcs.n	8006c06 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	3320      	adds	r3, #32
 8006bde:	7812      	ldrb	r2, [r2, #0]
 8006be0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006be6:	1c5a      	adds	r2, r3, #1
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	3b01      	subs	r3, #1
 8006bf6:	b29a      	uxth	r2, r3
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006c04:	857b      	strh	r3, [r7, #42]	; 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	695b      	ldr	r3, [r3, #20]
 8006c0c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8006c0e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	f000 80ba 	beq.w	8006d8a <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	695b      	ldr	r3, [r3, #20]
 8006c1c:	f003 0301 	and.w	r3, r3, #1
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d11b      	bne.n	8006c5c <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c30:	7812      	ldrb	r2, [r2, #0]
 8006c32:	b2d2      	uxtb	r2, r2
 8006c34:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c3a:	1c5a      	adds	r2, r3, #1
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	3b01      	subs	r3, #1
 8006c4a:	b29a      	uxth	r2, r3
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006c58:	853b      	strh	r3, [r7, #40]	; 0x28
 8006c5a:	e096      	b.n	8006d8a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006c5c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006c5e:	8bfb      	ldrh	r3, [r7, #30]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d24a      	bcs.n	8006cfa <HAL_SPI_TransmitReceive+0x57e>
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d045      	beq.n	8006cfa <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c7a:	7812      	ldrb	r2, [r2, #0]
 8006c7c:	b2d2      	uxtb	r2, r2
 8006c7e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c84:	1c5a      	adds	r2, r3, #1
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	665a      	str	r2, [r3, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c96:	7812      	ldrb	r2, [r2, #0]
 8006c98:	b2d2      	uxtb	r2, r2
 8006c9a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ca0:	1c5a      	adds	r2, r3, #1
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	665a      	str	r2, [r3, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cb2:	7812      	ldrb	r2, [r2, #0]
 8006cb4:	b2d2      	uxtb	r2, r2
 8006cb6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cbc:	1c5a      	adds	r2, r3, #1
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	665a      	str	r2, [r3, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cce:	7812      	ldrb	r2, [r2, #0]
 8006cd0:	b2d2      	uxtb	r2, r2
 8006cd2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cd8:	1c5a      	adds	r2, r3, #1
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	3b04      	subs	r3, #4
 8006ce8:	b29a      	uxth	r2, r3
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006cf6:	853b      	strh	r3, [r7, #40]	; 0x28
 8006cf8:	e047      	b.n	8006d8a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8006cfa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006cfc:	2b03      	cmp	r3, #3
 8006cfe:	d820      	bhi.n	8006d42 <HAL_SPI_TransmitReceive+0x5c6>
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d01b      	beq.n	8006d42 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d16:	7812      	ldrb	r2, [r2, #0]
 8006d18:	b2d2      	uxtb	r2, r2
 8006d1a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d20:	1c5a      	adds	r2, r3, #1
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	3b01      	subs	r3, #1
 8006d30:	b29a      	uxth	r2, r3
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006d3e:	853b      	strh	r3, [r7, #40]	; 0x28
 8006d40:	e023      	b.n	8006d8a <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d42:	f7fa fff9 	bl	8001d38 <HAL_GetTick>
 8006d46:	4602      	mov	r2, r0
 8006d48:	69bb      	ldr	r3, [r7, #24]
 8006d4a:	1ad3      	subs	r3, r2, r3
 8006d4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d803      	bhi.n	8006d5a <HAL_SPI_TransmitReceive+0x5de>
 8006d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d58:	d102      	bne.n	8006d60 <HAL_SPI_TransmitReceive+0x5e4>
 8006d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d114      	bne.n	8006d8a <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8006d60:	68f8      	ldr	r0, [r7, #12]
 8006d62:	f000 f845 	bl	8006df0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d6c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

            return HAL_TIMEOUT;
 8006d86:	2303      	movs	r3, #3
 8006d88:	e02d      	b.n	8006de6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006d8a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	f47f af11 	bne.w	8006bb4 <HAL_SPI_TransmitReceive+0x438>
 8006d92:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	f47f af0d 	bne.w	8006bb4 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8006d9a:	69bb      	ldr	r3, [r7, #24]
 8006d9c:	9300      	str	r3, [sp, #0]
 8006d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da0:	2200      	movs	r2, #0
 8006da2:	2108      	movs	r1, #8
 8006da4:	68f8      	ldr	r0, [r7, #12]
 8006da6:	f000 f8c3 	bl	8006f30 <SPI_WaitOnFlagUntilTimeout>
 8006daa:	4603      	mov	r3, r0
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d007      	beq.n	8006dc0 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006db6:	f043 0220 	orr.w	r2, r3, #32
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006dc0:	68f8      	ldr	r0, [r7, #12]
 8006dc2:	f000 f815 	bl	8006df0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2201      	movs	r2, #1
 8006dca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d001      	beq.n	8006de4 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	e000      	b.n	8006de6 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8006de4:	2300      	movs	r3, #0
  }
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3730      	adds	r7, #48	; 0x30
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
 8006dee:	bf00      	nop

08006df0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b085      	sub	sp, #20
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	695b      	ldr	r3, [r3, #20]
 8006dfe:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	699a      	ldr	r2, [r3, #24]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f042 0208 	orr.w	r2, r2, #8
 8006e0e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	699a      	ldr	r2, [r3, #24]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f042 0210 	orr.w	r2, r2, #16
 8006e1e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f022 0201 	bic.w	r2, r2, #1
 8006e2e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	6919      	ldr	r1, [r3, #16]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	4b3c      	ldr	r3, [pc, #240]	; (8006f2c <SPI_CloseTransfer+0x13c>)
 8006e3c:	400b      	ands	r3, r1
 8006e3e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	689a      	ldr	r2, [r3, #8]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006e4e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	2b04      	cmp	r3, #4
 8006e5a:	d014      	beq.n	8006e86 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f003 0320 	and.w	r3, r3, #32
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00f      	beq.n	8006e86 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e6c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	699a      	ldr	r2, [r3, #24]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f042 0220 	orr.w	r2, r2, #32
 8006e84:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	2b03      	cmp	r3, #3
 8006e90:	d014      	beq.n	8006ebc <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d00f      	beq.n	8006ebc <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ea2:	f043 0204 	orr.w	r2, r3, #4
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	699a      	ldr	r2, [r3, #24]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006eba:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d00f      	beq.n	8006ee6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ecc:	f043 0201 	orr.w	r2, r3, #1
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	699a      	ldr	r2, [r3, #24]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ee4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d00f      	beq.n	8006f10 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ef6:	f043 0208 	orr.w	r2, r3, #8
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	699a      	ldr	r2, [r3, #24]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f0e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8006f20:	bf00      	nop
 8006f22:	3714      	adds	r7, #20
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr
 8006f2c:	fffffc90 	.word	0xfffffc90

08006f30 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	603b      	str	r3, [r7, #0]
 8006f3c:	4613      	mov	r3, r2
 8006f3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006f40:	e010      	b.n	8006f64 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f42:	f7fa fef9 	bl	8001d38 <HAL_GetTick>
 8006f46:	4602      	mov	r2, r0
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	1ad3      	subs	r3, r2, r3
 8006f4c:	683a      	ldr	r2, [r7, #0]
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d803      	bhi.n	8006f5a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f58:	d102      	bne.n	8006f60 <SPI_WaitOnFlagUntilTimeout+0x30>
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d101      	bne.n	8006f64 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006f60:	2303      	movs	r3, #3
 8006f62:	e00f      	b.n	8006f84 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	695a      	ldr	r2, [r3, #20]
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	4013      	ands	r3, r2
 8006f6e:	68ba      	ldr	r2, [r7, #8]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	bf0c      	ite	eq
 8006f74:	2301      	moveq	r3, #1
 8006f76:	2300      	movne	r3, #0
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	79fb      	ldrb	r3, [r7, #7]
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d0df      	beq.n	8006f42 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006f82:	2300      	movs	r3, #0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3710      	adds	r7, #16
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b085      	sub	sp, #20
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f98:	095b      	lsrs	r3, r3, #5
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	3307      	adds	r3, #7
 8006faa:	08db      	lsrs	r3, r3, #3
 8006fac:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	68fa      	ldr	r2, [r7, #12]
 8006fb2:	fb02 f303 	mul.w	r3, r2, r3
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3714      	adds	r7, #20
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr

08006fc2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b082      	sub	sp, #8
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d101      	bne.n	8006fd4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	e042      	b.n	800705a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d106      	bne.n	8006fec <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f7fa f9d4 	bl	8001394 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2224      	movs	r2, #36	; 0x24
 8006ff0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f022 0201 	bic.w	r2, r2, #1
 8007002:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007008:	2b00      	cmp	r3, #0
 800700a:	d002      	beq.n	8007012 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f001 fb49 	bl	80086a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 fcda 	bl	80079cc <UART_SetConfig>
 8007018:	4603      	mov	r3, r0
 800701a:	2b01      	cmp	r3, #1
 800701c:	d101      	bne.n	8007022 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	e01b      	b.n	800705a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	685a      	ldr	r2, [r3, #4]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007030:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	689a      	ldr	r2, [r3, #8]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007040:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f042 0201 	orr.w	r2, r2, #1
 8007050:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f001 fbc8 	bl	80087e8 <UART_CheckIdleState>
 8007058:	4603      	mov	r3, r0
}
 800705a:	4618      	mov	r0, r3
 800705c:	3708      	adds	r7, #8
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}

08007062 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007062:	b580      	push	{r7, lr}
 8007064:	b08a      	sub	sp, #40	; 0x28
 8007066:	af02      	add	r7, sp, #8
 8007068:	60f8      	str	r0, [r7, #12]
 800706a:	60b9      	str	r1, [r7, #8]
 800706c:	603b      	str	r3, [r7, #0]
 800706e:	4613      	mov	r3, r2
 8007070:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007078:	2b20      	cmp	r3, #32
 800707a:	d17b      	bne.n	8007174 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d002      	beq.n	8007088 <HAL_UART_Transmit+0x26>
 8007082:	88fb      	ldrh	r3, [r7, #6]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d101      	bne.n	800708c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	e074      	b.n	8007176 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2200      	movs	r2, #0
 8007090:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2221      	movs	r2, #33	; 0x21
 8007098:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800709c:	f7fa fe4c 	bl	8001d38 <HAL_GetTick>
 80070a0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	88fa      	ldrh	r2, [r7, #6]
 80070a6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	88fa      	ldrh	r2, [r7, #6]
 80070ae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070ba:	d108      	bne.n	80070ce <HAL_UART_Transmit+0x6c>
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	691b      	ldr	r3, [r3, #16]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d104      	bne.n	80070ce <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80070c4:	2300      	movs	r3, #0
 80070c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	61bb      	str	r3, [r7, #24]
 80070cc:	e003      	b.n	80070d6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80070d2:	2300      	movs	r3, #0
 80070d4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80070d6:	e030      	b.n	800713a <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	9300      	str	r3, [sp, #0]
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	2200      	movs	r2, #0
 80070e0:	2180      	movs	r1, #128	; 0x80
 80070e2:	68f8      	ldr	r0, [r7, #12]
 80070e4:	f001 fc2a 	bl	800893c <UART_WaitOnFlagUntilTimeout>
 80070e8:	4603      	mov	r3, r0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d005      	beq.n	80070fa <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2220      	movs	r2, #32
 80070f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80070f6:	2303      	movs	r3, #3
 80070f8:	e03d      	b.n	8007176 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80070fa:	69fb      	ldr	r3, [r7, #28]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d10b      	bne.n	8007118 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	881b      	ldrh	r3, [r3, #0]
 8007104:	461a      	mov	r2, r3
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800710e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007110:	69bb      	ldr	r3, [r7, #24]
 8007112:	3302      	adds	r3, #2
 8007114:	61bb      	str	r3, [r7, #24]
 8007116:	e007      	b.n	8007128 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007118:	69fb      	ldr	r3, [r7, #28]
 800711a:	781a      	ldrb	r2, [r3, #0]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007122:	69fb      	ldr	r3, [r7, #28]
 8007124:	3301      	adds	r3, #1
 8007126:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800712e:	b29b      	uxth	r3, r3
 8007130:	3b01      	subs	r3, #1
 8007132:	b29a      	uxth	r2, r3
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007140:	b29b      	uxth	r3, r3
 8007142:	2b00      	cmp	r3, #0
 8007144:	d1c8      	bne.n	80070d8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	9300      	str	r3, [sp, #0]
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	2200      	movs	r2, #0
 800714e:	2140      	movs	r1, #64	; 0x40
 8007150:	68f8      	ldr	r0, [r7, #12]
 8007152:	f001 fbf3 	bl	800893c <UART_WaitOnFlagUntilTimeout>
 8007156:	4603      	mov	r3, r0
 8007158:	2b00      	cmp	r3, #0
 800715a:	d005      	beq.n	8007168 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2220      	movs	r2, #32
 8007160:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8007164:	2303      	movs	r3, #3
 8007166:	e006      	b.n	8007176 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2220      	movs	r2, #32
 800716c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007170:	2300      	movs	r3, #0
 8007172:	e000      	b.n	8007176 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007174:	2302      	movs	r3, #2
  }
}
 8007176:	4618      	mov	r0, r3
 8007178:	3720      	adds	r7, #32
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
	...

08007180 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b08a      	sub	sp, #40	; 0x28
 8007184:	af00      	add	r7, sp, #0
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	60b9      	str	r1, [r7, #8]
 800718a:	4613      	mov	r3, r2
 800718c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007194:	2b20      	cmp	r3, #32
 8007196:	d137      	bne.n	8007208 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d002      	beq.n	80071a4 <HAL_UART_Receive_IT+0x24>
 800719e:	88fb      	ldrh	r3, [r7, #6]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d101      	bne.n	80071a8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80071a4:	2301      	movs	r3, #1
 80071a6:	e030      	b.n	800720a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2200      	movs	r2, #0
 80071ac:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a18      	ldr	r2, [pc, #96]	; (8007214 <HAL_UART_Receive_IT+0x94>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d01f      	beq.n	80071f8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d018      	beq.n	80071f8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	e853 3f00 	ldrex	r3, [r3]
 80071d2:	613b      	str	r3, [r7, #16]
   return(result);
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80071da:	627b      	str	r3, [r7, #36]	; 0x24
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	461a      	mov	r2, r3
 80071e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e4:	623b      	str	r3, [r7, #32]
 80071e6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e8:	69f9      	ldr	r1, [r7, #28]
 80071ea:	6a3a      	ldr	r2, [r7, #32]
 80071ec:	e841 2300 	strex	r3, r2, [r1]
 80071f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d1e6      	bne.n	80071c6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80071f8:	88fb      	ldrh	r3, [r7, #6]
 80071fa:	461a      	mov	r2, r3
 80071fc:	68b9      	ldr	r1, [r7, #8]
 80071fe:	68f8      	ldr	r0, [r7, #12]
 8007200:	f001 fc0a 	bl	8008a18 <UART_Start_Receive_IT>
 8007204:	4603      	mov	r3, r0
 8007206:	e000      	b.n	800720a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007208:	2302      	movs	r3, #2
  }
}
 800720a:	4618      	mov	r0, r3
 800720c:	3728      	adds	r7, #40	; 0x28
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop
 8007214:	58000c00 	.word	0x58000c00

08007218 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b0ba      	sub	sp, #232	; 0xe8
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	69db      	ldr	r3, [r3, #28]
 8007226:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800723e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007242:	f640 030f 	movw	r3, #2063	; 0x80f
 8007246:	4013      	ands	r3, r2
 8007248:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800724c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007250:	2b00      	cmp	r3, #0
 8007252:	d11b      	bne.n	800728c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007258:	f003 0320 	and.w	r3, r3, #32
 800725c:	2b00      	cmp	r3, #0
 800725e:	d015      	beq.n	800728c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007264:	f003 0320 	and.w	r3, r3, #32
 8007268:	2b00      	cmp	r3, #0
 800726a:	d105      	bne.n	8007278 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800726c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007274:	2b00      	cmp	r3, #0
 8007276:	d009      	beq.n	800728c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800727c:	2b00      	cmp	r3, #0
 800727e:	f000 8377 	beq.w	8007970 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	4798      	blx	r3
      }
      return;
 800728a:	e371      	b.n	8007970 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800728c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007290:	2b00      	cmp	r3, #0
 8007292:	f000 8123 	beq.w	80074dc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007296:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800729a:	4b8d      	ldr	r3, [pc, #564]	; (80074d0 <HAL_UART_IRQHandler+0x2b8>)
 800729c:	4013      	ands	r3, r2
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d106      	bne.n	80072b0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80072a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80072a6:	4b8b      	ldr	r3, [pc, #556]	; (80074d4 <HAL_UART_IRQHandler+0x2bc>)
 80072a8:	4013      	ands	r3, r2
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	f000 8116 	beq.w	80074dc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80072b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072b4:	f003 0301 	and.w	r3, r3, #1
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d011      	beq.n	80072e0 <HAL_UART_IRQHandler+0xc8>
 80072bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d00b      	beq.n	80072e0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	2201      	movs	r2, #1
 80072ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072d6:	f043 0201 	orr.w	r2, r3, #1
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80072e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072e4:	f003 0302 	and.w	r3, r3, #2
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d011      	beq.n	8007310 <HAL_UART_IRQHandler+0xf8>
 80072ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072f0:	f003 0301 	and.w	r3, r3, #1
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d00b      	beq.n	8007310 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	2202      	movs	r2, #2
 80072fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007306:	f043 0204 	orr.w	r2, r3, #4
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007314:	f003 0304 	and.w	r3, r3, #4
 8007318:	2b00      	cmp	r3, #0
 800731a:	d011      	beq.n	8007340 <HAL_UART_IRQHandler+0x128>
 800731c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007320:	f003 0301 	and.w	r3, r3, #1
 8007324:	2b00      	cmp	r3, #0
 8007326:	d00b      	beq.n	8007340 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	2204      	movs	r2, #4
 800732e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007336:	f043 0202 	orr.w	r2, r3, #2
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007340:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007344:	f003 0308 	and.w	r3, r3, #8
 8007348:	2b00      	cmp	r3, #0
 800734a:	d017      	beq.n	800737c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800734c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007350:	f003 0320 	and.w	r3, r3, #32
 8007354:	2b00      	cmp	r3, #0
 8007356:	d105      	bne.n	8007364 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007358:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800735c:	4b5c      	ldr	r3, [pc, #368]	; (80074d0 <HAL_UART_IRQHandler+0x2b8>)
 800735e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007360:	2b00      	cmp	r3, #0
 8007362:	d00b      	beq.n	800737c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2208      	movs	r2, #8
 800736a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007372:	f043 0208 	orr.w	r2, r3, #8
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800737c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007380:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007384:	2b00      	cmp	r3, #0
 8007386:	d012      	beq.n	80073ae <HAL_UART_IRQHandler+0x196>
 8007388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800738c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007390:	2b00      	cmp	r3, #0
 8007392:	d00c      	beq.n	80073ae <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800739c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073a4:	f043 0220 	orr.w	r2, r3, #32
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	f000 82dd 	beq.w	8007974 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80073ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073be:	f003 0320 	and.w	r3, r3, #32
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d013      	beq.n	80073ee <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80073c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073ca:	f003 0320 	and.w	r3, r3, #32
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d105      	bne.n	80073de <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80073d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d007      	beq.n	80073ee <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d003      	beq.n	80073ee <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007402:	2b40      	cmp	r3, #64	; 0x40
 8007404:	d005      	beq.n	8007412 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007406:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800740a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800740e:	2b00      	cmp	r3, #0
 8007410:	d054      	beq.n	80074bc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f001 fc22 	bl	8008c5c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007422:	2b40      	cmp	r3, #64	; 0x40
 8007424:	d146      	bne.n	80074b4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	3308      	adds	r3, #8
 800742c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007430:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007434:	e853 3f00 	ldrex	r3, [r3]
 8007438:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800743c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007440:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007444:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	3308      	adds	r3, #8
 800744e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007452:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007456:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800745a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800745e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007462:	e841 2300 	strex	r3, r2, [r1]
 8007466:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800746a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800746e:	2b00      	cmp	r3, #0
 8007470:	d1d9      	bne.n	8007426 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007478:	2b00      	cmp	r3, #0
 800747a:	d017      	beq.n	80074ac <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007482:	4a15      	ldr	r2, [pc, #84]	; (80074d8 <HAL_UART_IRQHandler+0x2c0>)
 8007484:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800748c:	4618      	mov	r0, r3
 800748e:	f7fb f8c5 	bl	800261c <HAL_DMA_Abort_IT>
 8007492:	4603      	mov	r3, r0
 8007494:	2b00      	cmp	r3, #0
 8007496:	d019      	beq.n	80074cc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800749e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80074a6:	4610      	mov	r0, r2
 80074a8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074aa:	e00f      	b.n	80074cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 fa77 	bl	80079a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074b2:	e00b      	b.n	80074cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 fa73 	bl	80079a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074ba:	e007      	b.n	80074cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 fa6f 	bl	80079a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80074ca:	e253      	b.n	8007974 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074cc:	bf00      	nop
    return;
 80074ce:	e251      	b.n	8007974 <HAL_UART_IRQHandler+0x75c>
 80074d0:	10000001 	.word	0x10000001
 80074d4:	04000120 	.word	0x04000120
 80074d8:	08008d29 	.word	0x08008d29

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	f040 81e7 	bne.w	80078b4 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80074e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074ea:	f003 0310 	and.w	r3, r3, #16
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	f000 81e0 	beq.w	80078b4 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80074f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074f8:	f003 0310 	and.w	r3, r3, #16
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	f000 81d9 	beq.w	80078b4 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	2210      	movs	r2, #16
 8007508:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007514:	2b40      	cmp	r3, #64	; 0x40
 8007516:	f040 8151 	bne.w	80077bc <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a96      	ldr	r2, [pc, #600]	; (800777c <HAL_UART_IRQHandler+0x564>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d068      	beq.n	80075fa <HAL_UART_IRQHandler+0x3e2>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a93      	ldr	r2, [pc, #588]	; (8007780 <HAL_UART_IRQHandler+0x568>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d061      	beq.n	80075fa <HAL_UART_IRQHandler+0x3e2>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a91      	ldr	r2, [pc, #580]	; (8007784 <HAL_UART_IRQHandler+0x56c>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d05a      	beq.n	80075fa <HAL_UART_IRQHandler+0x3e2>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a8e      	ldr	r2, [pc, #568]	; (8007788 <HAL_UART_IRQHandler+0x570>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d053      	beq.n	80075fa <HAL_UART_IRQHandler+0x3e2>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a8c      	ldr	r2, [pc, #560]	; (800778c <HAL_UART_IRQHandler+0x574>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d04c      	beq.n	80075fa <HAL_UART_IRQHandler+0x3e2>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a89      	ldr	r2, [pc, #548]	; (8007790 <HAL_UART_IRQHandler+0x578>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d045      	beq.n	80075fa <HAL_UART_IRQHandler+0x3e2>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a87      	ldr	r2, [pc, #540]	; (8007794 <HAL_UART_IRQHandler+0x57c>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d03e      	beq.n	80075fa <HAL_UART_IRQHandler+0x3e2>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a84      	ldr	r2, [pc, #528]	; (8007798 <HAL_UART_IRQHandler+0x580>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d037      	beq.n	80075fa <HAL_UART_IRQHandler+0x3e2>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a82      	ldr	r2, [pc, #520]	; (800779c <HAL_UART_IRQHandler+0x584>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d030      	beq.n	80075fa <HAL_UART_IRQHandler+0x3e2>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a7f      	ldr	r2, [pc, #508]	; (80077a0 <HAL_UART_IRQHandler+0x588>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d029      	beq.n	80075fa <HAL_UART_IRQHandler+0x3e2>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a7d      	ldr	r2, [pc, #500]	; (80077a4 <HAL_UART_IRQHandler+0x58c>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d022      	beq.n	80075fa <HAL_UART_IRQHandler+0x3e2>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a7a      	ldr	r2, [pc, #488]	; (80077a8 <HAL_UART_IRQHandler+0x590>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d01b      	beq.n	80075fa <HAL_UART_IRQHandler+0x3e2>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a78      	ldr	r2, [pc, #480]	; (80077ac <HAL_UART_IRQHandler+0x594>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d014      	beq.n	80075fa <HAL_UART_IRQHandler+0x3e2>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a75      	ldr	r2, [pc, #468]	; (80077b0 <HAL_UART_IRQHandler+0x598>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d00d      	beq.n	80075fa <HAL_UART_IRQHandler+0x3e2>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a73      	ldr	r2, [pc, #460]	; (80077b4 <HAL_UART_IRQHandler+0x59c>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d006      	beq.n	80075fa <HAL_UART_IRQHandler+0x3e2>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a70      	ldr	r2, [pc, #448]	; (80077b8 <HAL_UART_IRQHandler+0x5a0>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d106      	bne.n	8007608 <HAL_UART_IRQHandler+0x3f0>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	b29b      	uxth	r3, r3
 8007606:	e005      	b.n	8007614 <HAL_UART_IRQHandler+0x3fc>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	b29b      	uxth	r3, r3
 8007614:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007618:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800761c:	2b00      	cmp	r3, #0
 800761e:	f000 81ab 	beq.w	8007978 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007628:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800762c:	429a      	cmp	r2, r3
 800762e:	f080 81a3 	bcs.w	8007978 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007638:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007642:	69db      	ldr	r3, [r3, #28]
 8007644:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007648:	f000 8087 	beq.w	800775a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007654:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007658:	e853 3f00 	ldrex	r3, [r3]
 800765c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007660:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007664:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007668:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	461a      	mov	r2, r3
 8007672:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007676:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800767a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800767e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007682:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007686:	e841 2300 	strex	r3, r2, [r1]
 800768a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800768e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007692:	2b00      	cmp	r3, #0
 8007694:	d1da      	bne.n	800764c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	3308      	adds	r3, #8
 800769c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076a0:	e853 3f00 	ldrex	r3, [r3]
 80076a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80076a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80076a8:	f023 0301 	bic.w	r3, r3, #1
 80076ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	3308      	adds	r3, #8
 80076b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80076ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80076be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80076c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80076c6:	e841 2300 	strex	r3, r2, [r1]
 80076ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80076cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d1e1      	bne.n	8007696 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	3308      	adds	r3, #8
 80076d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076dc:	e853 3f00 	ldrex	r3, [r3]
 80076e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80076e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	3308      	adds	r3, #8
 80076f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80076f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80076f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80076fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80076fe:	e841 2300 	strex	r3, r2, [r1]
 8007702:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007704:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007706:	2b00      	cmp	r3, #0
 8007708:	d1e3      	bne.n	80076d2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2220      	movs	r2, #32
 800770e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800771e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007720:	e853 3f00 	ldrex	r3, [r3]
 8007724:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007726:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007728:	f023 0310 	bic.w	r3, r3, #16
 800772c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	461a      	mov	r2, r3
 8007736:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800773a:	65bb      	str	r3, [r7, #88]	; 0x58
 800773c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800773e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007740:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007742:	e841 2300 	strex	r3, r2, [r1]
 8007746:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007748:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800774a:	2b00      	cmp	r3, #0
 800774c:	d1e4      	bne.n	8007718 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007754:	4618      	mov	r0, r3
 8007756:	f7fa fc43 	bl	8001fe0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2202      	movs	r2, #2
 800775e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800776c:	b29b      	uxth	r3, r3
 800776e:	1ad3      	subs	r3, r2, r3
 8007770:	b29b      	uxth	r3, r3
 8007772:	4619      	mov	r1, r3
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 f91d 	bl	80079b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800777a:	e0fd      	b.n	8007978 <HAL_UART_IRQHandler+0x760>
 800777c:	40020010 	.word	0x40020010
 8007780:	40020028 	.word	0x40020028
 8007784:	40020040 	.word	0x40020040
 8007788:	40020058 	.word	0x40020058
 800778c:	40020070 	.word	0x40020070
 8007790:	40020088 	.word	0x40020088
 8007794:	400200a0 	.word	0x400200a0
 8007798:	400200b8 	.word	0x400200b8
 800779c:	40020410 	.word	0x40020410
 80077a0:	40020428 	.word	0x40020428
 80077a4:	40020440 	.word	0x40020440
 80077a8:	40020458 	.word	0x40020458
 80077ac:	40020470 	.word	0x40020470
 80077b0:	40020488 	.word	0x40020488
 80077b4:	400204a0 	.word	0x400204a0
 80077b8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	1ad3      	subs	r3, r2, r3
 80077cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	2b00      	cmp	r3, #0
 80077da:	f000 80cf 	beq.w	800797c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80077de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	f000 80ca 	beq.w	800797c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f0:	e853 3f00 	ldrex	r3, [r3]
 80077f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80077f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	461a      	mov	r2, r3
 8007806:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800780a:	647b      	str	r3, [r7, #68]	; 0x44
 800780c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800780e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007810:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007812:	e841 2300 	strex	r3, r2, [r1]
 8007816:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800781a:	2b00      	cmp	r3, #0
 800781c:	d1e4      	bne.n	80077e8 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	3308      	adds	r3, #8
 8007824:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007828:	e853 3f00 	ldrex	r3, [r3]
 800782c:	623b      	str	r3, [r7, #32]
   return(result);
 800782e:	6a3a      	ldr	r2, [r7, #32]
 8007830:	4b55      	ldr	r3, [pc, #340]	; (8007988 <HAL_UART_IRQHandler+0x770>)
 8007832:	4013      	ands	r3, r2
 8007834:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	3308      	adds	r3, #8
 800783e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007842:	633a      	str	r2, [r7, #48]	; 0x30
 8007844:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007846:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007848:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800784a:	e841 2300 	strex	r3, r2, [r1]
 800784e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007852:	2b00      	cmp	r3, #0
 8007854:	d1e3      	bne.n	800781e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2220      	movs	r2, #32
 800785a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	e853 3f00 	ldrex	r3, [r3]
 8007876:	60fb      	str	r3, [r7, #12]
   return(result);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f023 0310 	bic.w	r3, r3, #16
 800787e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	461a      	mov	r2, r3
 8007888:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800788c:	61fb      	str	r3, [r7, #28]
 800788e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007890:	69b9      	ldr	r1, [r7, #24]
 8007892:	69fa      	ldr	r2, [r7, #28]
 8007894:	e841 2300 	strex	r3, r2, [r1]
 8007898:	617b      	str	r3, [r7, #20]
   return(result);
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d1e4      	bne.n	800786a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2202      	movs	r2, #2
 80078a4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80078a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80078aa:	4619      	mov	r1, r3
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 f881 	bl	80079b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80078b2:	e063      	b.n	800797c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80078b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d00e      	beq.n	80078de <HAL_UART_IRQHandler+0x6c6>
 80078c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d008      	beq.n	80078de <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80078d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f001 ff84 	bl	80097e4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80078dc:	e051      	b.n	8007982 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80078de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d014      	beq.n	8007914 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80078ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d105      	bne.n	8007902 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80078f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d008      	beq.n	8007914 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007906:	2b00      	cmp	r3, #0
 8007908:	d03a      	beq.n	8007980 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	4798      	blx	r3
    }
    return;
 8007912:	e035      	b.n	8007980 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800791c:	2b00      	cmp	r3, #0
 800791e:	d009      	beq.n	8007934 <HAL_UART_IRQHandler+0x71c>
 8007920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007928:	2b00      	cmp	r3, #0
 800792a:	d003      	beq.n	8007934 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f001 fa11 	bl	8008d54 <UART_EndTransmit_IT>
    return;
 8007932:	e026      	b.n	8007982 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007938:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800793c:	2b00      	cmp	r3, #0
 800793e:	d009      	beq.n	8007954 <HAL_UART_IRQHandler+0x73c>
 8007940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007944:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007948:	2b00      	cmp	r3, #0
 800794a:	d003      	beq.n	8007954 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f001 ff5d 	bl	800980c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007952:	e016      	b.n	8007982 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007958:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800795c:	2b00      	cmp	r3, #0
 800795e:	d010      	beq.n	8007982 <HAL_UART_IRQHandler+0x76a>
 8007960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007964:	2b00      	cmp	r3, #0
 8007966:	da0c      	bge.n	8007982 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f001 ff45 	bl	80097f8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800796e:	e008      	b.n	8007982 <HAL_UART_IRQHandler+0x76a>
      return;
 8007970:	bf00      	nop
 8007972:	e006      	b.n	8007982 <HAL_UART_IRQHandler+0x76a>
    return;
 8007974:	bf00      	nop
 8007976:	e004      	b.n	8007982 <HAL_UART_IRQHandler+0x76a>
      return;
 8007978:	bf00      	nop
 800797a:	e002      	b.n	8007982 <HAL_UART_IRQHandler+0x76a>
      return;
 800797c:	bf00      	nop
 800797e:	e000      	b.n	8007982 <HAL_UART_IRQHandler+0x76a>
    return;
 8007980:	bf00      	nop
  }
}
 8007982:	37e8      	adds	r7, #232	; 0xe8
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}
 8007988:	effffffe 	.word	0xeffffffe

0800798c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007994:	bf00      	nop
 8007996:	370c      	adds	r7, #12
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr

080079a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b083      	sub	sp, #12
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80079a8:	bf00      	nop
 80079aa:	370c      	adds	r7, #12
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr

080079b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b083      	sub	sp, #12
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	460b      	mov	r3, r1
 80079be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80079c0:	bf00      	nop
 80079c2:	370c      	adds	r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr

080079cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80079cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80079d0:	b092      	sub	sp, #72	; 0x48
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80079d6:	2300      	movs	r3, #0
 80079d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	689a      	ldr	r2, [r3, #8]
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	691b      	ldr	r3, [r3, #16]
 80079e4:	431a      	orrs	r2, r3
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	695b      	ldr	r3, [r3, #20]
 80079ea:	431a      	orrs	r2, r3
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	69db      	ldr	r3, [r3, #28]
 80079f0:	4313      	orrs	r3, r2
 80079f2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	4bbe      	ldr	r3, [pc, #760]	; (8007cf4 <UART_SetConfig+0x328>)
 80079fc:	4013      	ands	r3, r2
 80079fe:	697a      	ldr	r2, [r7, #20]
 8007a00:	6812      	ldr	r2, [r2, #0]
 8007a02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007a04:	430b      	orrs	r3, r1
 8007a06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	68da      	ldr	r2, [r3, #12]
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	430a      	orrs	r2, r1
 8007a1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	699b      	ldr	r3, [r3, #24]
 8007a22:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4ab3      	ldr	r2, [pc, #716]	; (8007cf8 <UART_SetConfig+0x32c>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d004      	beq.n	8007a38 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	6a1b      	ldr	r3, [r3, #32]
 8007a32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a34:	4313      	orrs	r3, r2
 8007a36:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	689a      	ldr	r2, [r3, #8]
 8007a3e:	4baf      	ldr	r3, [pc, #700]	; (8007cfc <UART_SetConfig+0x330>)
 8007a40:	4013      	ands	r3, r2
 8007a42:	697a      	ldr	r2, [r7, #20]
 8007a44:	6812      	ldr	r2, [r2, #0]
 8007a46:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007a48:	430b      	orrs	r3, r1
 8007a4a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a52:	f023 010f 	bic.w	r1, r3, #15
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	430a      	orrs	r2, r1
 8007a60:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4aa6      	ldr	r2, [pc, #664]	; (8007d00 <UART_SetConfig+0x334>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d177      	bne.n	8007b5c <UART_SetConfig+0x190>
 8007a6c:	4ba5      	ldr	r3, [pc, #660]	; (8007d04 <UART_SetConfig+0x338>)
 8007a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a74:	2b28      	cmp	r3, #40	; 0x28
 8007a76:	d86d      	bhi.n	8007b54 <UART_SetConfig+0x188>
 8007a78:	a201      	add	r2, pc, #4	; (adr r2, 8007a80 <UART_SetConfig+0xb4>)
 8007a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a7e:	bf00      	nop
 8007a80:	08007b25 	.word	0x08007b25
 8007a84:	08007b55 	.word	0x08007b55
 8007a88:	08007b55 	.word	0x08007b55
 8007a8c:	08007b55 	.word	0x08007b55
 8007a90:	08007b55 	.word	0x08007b55
 8007a94:	08007b55 	.word	0x08007b55
 8007a98:	08007b55 	.word	0x08007b55
 8007a9c:	08007b55 	.word	0x08007b55
 8007aa0:	08007b2d 	.word	0x08007b2d
 8007aa4:	08007b55 	.word	0x08007b55
 8007aa8:	08007b55 	.word	0x08007b55
 8007aac:	08007b55 	.word	0x08007b55
 8007ab0:	08007b55 	.word	0x08007b55
 8007ab4:	08007b55 	.word	0x08007b55
 8007ab8:	08007b55 	.word	0x08007b55
 8007abc:	08007b55 	.word	0x08007b55
 8007ac0:	08007b35 	.word	0x08007b35
 8007ac4:	08007b55 	.word	0x08007b55
 8007ac8:	08007b55 	.word	0x08007b55
 8007acc:	08007b55 	.word	0x08007b55
 8007ad0:	08007b55 	.word	0x08007b55
 8007ad4:	08007b55 	.word	0x08007b55
 8007ad8:	08007b55 	.word	0x08007b55
 8007adc:	08007b55 	.word	0x08007b55
 8007ae0:	08007b3d 	.word	0x08007b3d
 8007ae4:	08007b55 	.word	0x08007b55
 8007ae8:	08007b55 	.word	0x08007b55
 8007aec:	08007b55 	.word	0x08007b55
 8007af0:	08007b55 	.word	0x08007b55
 8007af4:	08007b55 	.word	0x08007b55
 8007af8:	08007b55 	.word	0x08007b55
 8007afc:	08007b55 	.word	0x08007b55
 8007b00:	08007b45 	.word	0x08007b45
 8007b04:	08007b55 	.word	0x08007b55
 8007b08:	08007b55 	.word	0x08007b55
 8007b0c:	08007b55 	.word	0x08007b55
 8007b10:	08007b55 	.word	0x08007b55
 8007b14:	08007b55 	.word	0x08007b55
 8007b18:	08007b55 	.word	0x08007b55
 8007b1c:	08007b55 	.word	0x08007b55
 8007b20:	08007b4d 	.word	0x08007b4d
 8007b24:	2301      	movs	r3, #1
 8007b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b2a:	e326      	b.n	800817a <UART_SetConfig+0x7ae>
 8007b2c:	2304      	movs	r3, #4
 8007b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b32:	e322      	b.n	800817a <UART_SetConfig+0x7ae>
 8007b34:	2308      	movs	r3, #8
 8007b36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b3a:	e31e      	b.n	800817a <UART_SetConfig+0x7ae>
 8007b3c:	2310      	movs	r3, #16
 8007b3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b42:	e31a      	b.n	800817a <UART_SetConfig+0x7ae>
 8007b44:	2320      	movs	r3, #32
 8007b46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b4a:	e316      	b.n	800817a <UART_SetConfig+0x7ae>
 8007b4c:	2340      	movs	r3, #64	; 0x40
 8007b4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b52:	e312      	b.n	800817a <UART_SetConfig+0x7ae>
 8007b54:	2380      	movs	r3, #128	; 0x80
 8007b56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b5a:	e30e      	b.n	800817a <UART_SetConfig+0x7ae>
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a69      	ldr	r2, [pc, #420]	; (8007d08 <UART_SetConfig+0x33c>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d130      	bne.n	8007bc8 <UART_SetConfig+0x1fc>
 8007b66:	4b67      	ldr	r3, [pc, #412]	; (8007d04 <UART_SetConfig+0x338>)
 8007b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b6a:	f003 0307 	and.w	r3, r3, #7
 8007b6e:	2b05      	cmp	r3, #5
 8007b70:	d826      	bhi.n	8007bc0 <UART_SetConfig+0x1f4>
 8007b72:	a201      	add	r2, pc, #4	; (adr r2, 8007b78 <UART_SetConfig+0x1ac>)
 8007b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b78:	08007b91 	.word	0x08007b91
 8007b7c:	08007b99 	.word	0x08007b99
 8007b80:	08007ba1 	.word	0x08007ba1
 8007b84:	08007ba9 	.word	0x08007ba9
 8007b88:	08007bb1 	.word	0x08007bb1
 8007b8c:	08007bb9 	.word	0x08007bb9
 8007b90:	2300      	movs	r3, #0
 8007b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b96:	e2f0      	b.n	800817a <UART_SetConfig+0x7ae>
 8007b98:	2304      	movs	r3, #4
 8007b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b9e:	e2ec      	b.n	800817a <UART_SetConfig+0x7ae>
 8007ba0:	2308      	movs	r3, #8
 8007ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ba6:	e2e8      	b.n	800817a <UART_SetConfig+0x7ae>
 8007ba8:	2310      	movs	r3, #16
 8007baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bae:	e2e4      	b.n	800817a <UART_SetConfig+0x7ae>
 8007bb0:	2320      	movs	r3, #32
 8007bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bb6:	e2e0      	b.n	800817a <UART_SetConfig+0x7ae>
 8007bb8:	2340      	movs	r3, #64	; 0x40
 8007bba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bbe:	e2dc      	b.n	800817a <UART_SetConfig+0x7ae>
 8007bc0:	2380      	movs	r3, #128	; 0x80
 8007bc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bc6:	e2d8      	b.n	800817a <UART_SetConfig+0x7ae>
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a4f      	ldr	r2, [pc, #316]	; (8007d0c <UART_SetConfig+0x340>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d130      	bne.n	8007c34 <UART_SetConfig+0x268>
 8007bd2:	4b4c      	ldr	r3, [pc, #304]	; (8007d04 <UART_SetConfig+0x338>)
 8007bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bd6:	f003 0307 	and.w	r3, r3, #7
 8007bda:	2b05      	cmp	r3, #5
 8007bdc:	d826      	bhi.n	8007c2c <UART_SetConfig+0x260>
 8007bde:	a201      	add	r2, pc, #4	; (adr r2, 8007be4 <UART_SetConfig+0x218>)
 8007be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be4:	08007bfd 	.word	0x08007bfd
 8007be8:	08007c05 	.word	0x08007c05
 8007bec:	08007c0d 	.word	0x08007c0d
 8007bf0:	08007c15 	.word	0x08007c15
 8007bf4:	08007c1d 	.word	0x08007c1d
 8007bf8:	08007c25 	.word	0x08007c25
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c02:	e2ba      	b.n	800817a <UART_SetConfig+0x7ae>
 8007c04:	2304      	movs	r3, #4
 8007c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c0a:	e2b6      	b.n	800817a <UART_SetConfig+0x7ae>
 8007c0c:	2308      	movs	r3, #8
 8007c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c12:	e2b2      	b.n	800817a <UART_SetConfig+0x7ae>
 8007c14:	2310      	movs	r3, #16
 8007c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c1a:	e2ae      	b.n	800817a <UART_SetConfig+0x7ae>
 8007c1c:	2320      	movs	r3, #32
 8007c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c22:	e2aa      	b.n	800817a <UART_SetConfig+0x7ae>
 8007c24:	2340      	movs	r3, #64	; 0x40
 8007c26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c2a:	e2a6      	b.n	800817a <UART_SetConfig+0x7ae>
 8007c2c:	2380      	movs	r3, #128	; 0x80
 8007c2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c32:	e2a2      	b.n	800817a <UART_SetConfig+0x7ae>
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a35      	ldr	r2, [pc, #212]	; (8007d10 <UART_SetConfig+0x344>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d130      	bne.n	8007ca0 <UART_SetConfig+0x2d4>
 8007c3e:	4b31      	ldr	r3, [pc, #196]	; (8007d04 <UART_SetConfig+0x338>)
 8007c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c42:	f003 0307 	and.w	r3, r3, #7
 8007c46:	2b05      	cmp	r3, #5
 8007c48:	d826      	bhi.n	8007c98 <UART_SetConfig+0x2cc>
 8007c4a:	a201      	add	r2, pc, #4	; (adr r2, 8007c50 <UART_SetConfig+0x284>)
 8007c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c50:	08007c69 	.word	0x08007c69
 8007c54:	08007c71 	.word	0x08007c71
 8007c58:	08007c79 	.word	0x08007c79
 8007c5c:	08007c81 	.word	0x08007c81
 8007c60:	08007c89 	.word	0x08007c89
 8007c64:	08007c91 	.word	0x08007c91
 8007c68:	2300      	movs	r3, #0
 8007c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c6e:	e284      	b.n	800817a <UART_SetConfig+0x7ae>
 8007c70:	2304      	movs	r3, #4
 8007c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c76:	e280      	b.n	800817a <UART_SetConfig+0x7ae>
 8007c78:	2308      	movs	r3, #8
 8007c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c7e:	e27c      	b.n	800817a <UART_SetConfig+0x7ae>
 8007c80:	2310      	movs	r3, #16
 8007c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c86:	e278      	b.n	800817a <UART_SetConfig+0x7ae>
 8007c88:	2320      	movs	r3, #32
 8007c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c8e:	e274      	b.n	800817a <UART_SetConfig+0x7ae>
 8007c90:	2340      	movs	r3, #64	; 0x40
 8007c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c96:	e270      	b.n	800817a <UART_SetConfig+0x7ae>
 8007c98:	2380      	movs	r3, #128	; 0x80
 8007c9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c9e:	e26c      	b.n	800817a <UART_SetConfig+0x7ae>
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a1b      	ldr	r2, [pc, #108]	; (8007d14 <UART_SetConfig+0x348>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d142      	bne.n	8007d30 <UART_SetConfig+0x364>
 8007caa:	4b16      	ldr	r3, [pc, #88]	; (8007d04 <UART_SetConfig+0x338>)
 8007cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cae:	f003 0307 	and.w	r3, r3, #7
 8007cb2:	2b05      	cmp	r3, #5
 8007cb4:	d838      	bhi.n	8007d28 <UART_SetConfig+0x35c>
 8007cb6:	a201      	add	r2, pc, #4	; (adr r2, 8007cbc <UART_SetConfig+0x2f0>)
 8007cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cbc:	08007cd5 	.word	0x08007cd5
 8007cc0:	08007cdd 	.word	0x08007cdd
 8007cc4:	08007ce5 	.word	0x08007ce5
 8007cc8:	08007ced 	.word	0x08007ced
 8007ccc:	08007d19 	.word	0x08007d19
 8007cd0:	08007d21 	.word	0x08007d21
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cda:	e24e      	b.n	800817a <UART_SetConfig+0x7ae>
 8007cdc:	2304      	movs	r3, #4
 8007cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ce2:	e24a      	b.n	800817a <UART_SetConfig+0x7ae>
 8007ce4:	2308      	movs	r3, #8
 8007ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cea:	e246      	b.n	800817a <UART_SetConfig+0x7ae>
 8007cec:	2310      	movs	r3, #16
 8007cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cf2:	e242      	b.n	800817a <UART_SetConfig+0x7ae>
 8007cf4:	cfff69f3 	.word	0xcfff69f3
 8007cf8:	58000c00 	.word	0x58000c00
 8007cfc:	11fff4ff 	.word	0x11fff4ff
 8007d00:	40011000 	.word	0x40011000
 8007d04:	58024400 	.word	0x58024400
 8007d08:	40004400 	.word	0x40004400
 8007d0c:	40004800 	.word	0x40004800
 8007d10:	40004c00 	.word	0x40004c00
 8007d14:	40005000 	.word	0x40005000
 8007d18:	2320      	movs	r3, #32
 8007d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d1e:	e22c      	b.n	800817a <UART_SetConfig+0x7ae>
 8007d20:	2340      	movs	r3, #64	; 0x40
 8007d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d26:	e228      	b.n	800817a <UART_SetConfig+0x7ae>
 8007d28:	2380      	movs	r3, #128	; 0x80
 8007d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d2e:	e224      	b.n	800817a <UART_SetConfig+0x7ae>
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4ab1      	ldr	r2, [pc, #708]	; (8007ffc <UART_SetConfig+0x630>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d176      	bne.n	8007e28 <UART_SetConfig+0x45c>
 8007d3a:	4bb1      	ldr	r3, [pc, #708]	; (8008000 <UART_SetConfig+0x634>)
 8007d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d42:	2b28      	cmp	r3, #40	; 0x28
 8007d44:	d86c      	bhi.n	8007e20 <UART_SetConfig+0x454>
 8007d46:	a201      	add	r2, pc, #4	; (adr r2, 8007d4c <UART_SetConfig+0x380>)
 8007d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d4c:	08007df1 	.word	0x08007df1
 8007d50:	08007e21 	.word	0x08007e21
 8007d54:	08007e21 	.word	0x08007e21
 8007d58:	08007e21 	.word	0x08007e21
 8007d5c:	08007e21 	.word	0x08007e21
 8007d60:	08007e21 	.word	0x08007e21
 8007d64:	08007e21 	.word	0x08007e21
 8007d68:	08007e21 	.word	0x08007e21
 8007d6c:	08007df9 	.word	0x08007df9
 8007d70:	08007e21 	.word	0x08007e21
 8007d74:	08007e21 	.word	0x08007e21
 8007d78:	08007e21 	.word	0x08007e21
 8007d7c:	08007e21 	.word	0x08007e21
 8007d80:	08007e21 	.word	0x08007e21
 8007d84:	08007e21 	.word	0x08007e21
 8007d88:	08007e21 	.word	0x08007e21
 8007d8c:	08007e01 	.word	0x08007e01
 8007d90:	08007e21 	.word	0x08007e21
 8007d94:	08007e21 	.word	0x08007e21
 8007d98:	08007e21 	.word	0x08007e21
 8007d9c:	08007e21 	.word	0x08007e21
 8007da0:	08007e21 	.word	0x08007e21
 8007da4:	08007e21 	.word	0x08007e21
 8007da8:	08007e21 	.word	0x08007e21
 8007dac:	08007e09 	.word	0x08007e09
 8007db0:	08007e21 	.word	0x08007e21
 8007db4:	08007e21 	.word	0x08007e21
 8007db8:	08007e21 	.word	0x08007e21
 8007dbc:	08007e21 	.word	0x08007e21
 8007dc0:	08007e21 	.word	0x08007e21
 8007dc4:	08007e21 	.word	0x08007e21
 8007dc8:	08007e21 	.word	0x08007e21
 8007dcc:	08007e11 	.word	0x08007e11
 8007dd0:	08007e21 	.word	0x08007e21
 8007dd4:	08007e21 	.word	0x08007e21
 8007dd8:	08007e21 	.word	0x08007e21
 8007ddc:	08007e21 	.word	0x08007e21
 8007de0:	08007e21 	.word	0x08007e21
 8007de4:	08007e21 	.word	0x08007e21
 8007de8:	08007e21 	.word	0x08007e21
 8007dec:	08007e19 	.word	0x08007e19
 8007df0:	2301      	movs	r3, #1
 8007df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007df6:	e1c0      	b.n	800817a <UART_SetConfig+0x7ae>
 8007df8:	2304      	movs	r3, #4
 8007dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dfe:	e1bc      	b.n	800817a <UART_SetConfig+0x7ae>
 8007e00:	2308      	movs	r3, #8
 8007e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e06:	e1b8      	b.n	800817a <UART_SetConfig+0x7ae>
 8007e08:	2310      	movs	r3, #16
 8007e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e0e:	e1b4      	b.n	800817a <UART_SetConfig+0x7ae>
 8007e10:	2320      	movs	r3, #32
 8007e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e16:	e1b0      	b.n	800817a <UART_SetConfig+0x7ae>
 8007e18:	2340      	movs	r3, #64	; 0x40
 8007e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e1e:	e1ac      	b.n	800817a <UART_SetConfig+0x7ae>
 8007e20:	2380      	movs	r3, #128	; 0x80
 8007e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e26:	e1a8      	b.n	800817a <UART_SetConfig+0x7ae>
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a75      	ldr	r2, [pc, #468]	; (8008004 <UART_SetConfig+0x638>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d130      	bne.n	8007e94 <UART_SetConfig+0x4c8>
 8007e32:	4b73      	ldr	r3, [pc, #460]	; (8008000 <UART_SetConfig+0x634>)
 8007e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e36:	f003 0307 	and.w	r3, r3, #7
 8007e3a:	2b05      	cmp	r3, #5
 8007e3c:	d826      	bhi.n	8007e8c <UART_SetConfig+0x4c0>
 8007e3e:	a201      	add	r2, pc, #4	; (adr r2, 8007e44 <UART_SetConfig+0x478>)
 8007e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e44:	08007e5d 	.word	0x08007e5d
 8007e48:	08007e65 	.word	0x08007e65
 8007e4c:	08007e6d 	.word	0x08007e6d
 8007e50:	08007e75 	.word	0x08007e75
 8007e54:	08007e7d 	.word	0x08007e7d
 8007e58:	08007e85 	.word	0x08007e85
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e62:	e18a      	b.n	800817a <UART_SetConfig+0x7ae>
 8007e64:	2304      	movs	r3, #4
 8007e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e6a:	e186      	b.n	800817a <UART_SetConfig+0x7ae>
 8007e6c:	2308      	movs	r3, #8
 8007e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e72:	e182      	b.n	800817a <UART_SetConfig+0x7ae>
 8007e74:	2310      	movs	r3, #16
 8007e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e7a:	e17e      	b.n	800817a <UART_SetConfig+0x7ae>
 8007e7c:	2320      	movs	r3, #32
 8007e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e82:	e17a      	b.n	800817a <UART_SetConfig+0x7ae>
 8007e84:	2340      	movs	r3, #64	; 0x40
 8007e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e8a:	e176      	b.n	800817a <UART_SetConfig+0x7ae>
 8007e8c:	2380      	movs	r3, #128	; 0x80
 8007e8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e92:	e172      	b.n	800817a <UART_SetConfig+0x7ae>
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a5b      	ldr	r2, [pc, #364]	; (8008008 <UART_SetConfig+0x63c>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d130      	bne.n	8007f00 <UART_SetConfig+0x534>
 8007e9e:	4b58      	ldr	r3, [pc, #352]	; (8008000 <UART_SetConfig+0x634>)
 8007ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ea2:	f003 0307 	and.w	r3, r3, #7
 8007ea6:	2b05      	cmp	r3, #5
 8007ea8:	d826      	bhi.n	8007ef8 <UART_SetConfig+0x52c>
 8007eaa:	a201      	add	r2, pc, #4	; (adr r2, 8007eb0 <UART_SetConfig+0x4e4>)
 8007eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eb0:	08007ec9 	.word	0x08007ec9
 8007eb4:	08007ed1 	.word	0x08007ed1
 8007eb8:	08007ed9 	.word	0x08007ed9
 8007ebc:	08007ee1 	.word	0x08007ee1
 8007ec0:	08007ee9 	.word	0x08007ee9
 8007ec4:	08007ef1 	.word	0x08007ef1
 8007ec8:	2300      	movs	r3, #0
 8007eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ece:	e154      	b.n	800817a <UART_SetConfig+0x7ae>
 8007ed0:	2304      	movs	r3, #4
 8007ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ed6:	e150      	b.n	800817a <UART_SetConfig+0x7ae>
 8007ed8:	2308      	movs	r3, #8
 8007eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ede:	e14c      	b.n	800817a <UART_SetConfig+0x7ae>
 8007ee0:	2310      	movs	r3, #16
 8007ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ee6:	e148      	b.n	800817a <UART_SetConfig+0x7ae>
 8007ee8:	2320      	movs	r3, #32
 8007eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007eee:	e144      	b.n	800817a <UART_SetConfig+0x7ae>
 8007ef0:	2340      	movs	r3, #64	; 0x40
 8007ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ef6:	e140      	b.n	800817a <UART_SetConfig+0x7ae>
 8007ef8:	2380      	movs	r3, #128	; 0x80
 8007efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007efe:	e13c      	b.n	800817a <UART_SetConfig+0x7ae>
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a41      	ldr	r2, [pc, #260]	; (800800c <UART_SetConfig+0x640>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	f040 8082 	bne.w	8008010 <UART_SetConfig+0x644>
 8007f0c:	4b3c      	ldr	r3, [pc, #240]	; (8008000 <UART_SetConfig+0x634>)
 8007f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f14:	2b28      	cmp	r3, #40	; 0x28
 8007f16:	d86d      	bhi.n	8007ff4 <UART_SetConfig+0x628>
 8007f18:	a201      	add	r2, pc, #4	; (adr r2, 8007f20 <UART_SetConfig+0x554>)
 8007f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f1e:	bf00      	nop
 8007f20:	08007fc5 	.word	0x08007fc5
 8007f24:	08007ff5 	.word	0x08007ff5
 8007f28:	08007ff5 	.word	0x08007ff5
 8007f2c:	08007ff5 	.word	0x08007ff5
 8007f30:	08007ff5 	.word	0x08007ff5
 8007f34:	08007ff5 	.word	0x08007ff5
 8007f38:	08007ff5 	.word	0x08007ff5
 8007f3c:	08007ff5 	.word	0x08007ff5
 8007f40:	08007fcd 	.word	0x08007fcd
 8007f44:	08007ff5 	.word	0x08007ff5
 8007f48:	08007ff5 	.word	0x08007ff5
 8007f4c:	08007ff5 	.word	0x08007ff5
 8007f50:	08007ff5 	.word	0x08007ff5
 8007f54:	08007ff5 	.word	0x08007ff5
 8007f58:	08007ff5 	.word	0x08007ff5
 8007f5c:	08007ff5 	.word	0x08007ff5
 8007f60:	08007fd5 	.word	0x08007fd5
 8007f64:	08007ff5 	.word	0x08007ff5
 8007f68:	08007ff5 	.word	0x08007ff5
 8007f6c:	08007ff5 	.word	0x08007ff5
 8007f70:	08007ff5 	.word	0x08007ff5
 8007f74:	08007ff5 	.word	0x08007ff5
 8007f78:	08007ff5 	.word	0x08007ff5
 8007f7c:	08007ff5 	.word	0x08007ff5
 8007f80:	08007fdd 	.word	0x08007fdd
 8007f84:	08007ff5 	.word	0x08007ff5
 8007f88:	08007ff5 	.word	0x08007ff5
 8007f8c:	08007ff5 	.word	0x08007ff5
 8007f90:	08007ff5 	.word	0x08007ff5
 8007f94:	08007ff5 	.word	0x08007ff5
 8007f98:	08007ff5 	.word	0x08007ff5
 8007f9c:	08007ff5 	.word	0x08007ff5
 8007fa0:	08007fe5 	.word	0x08007fe5
 8007fa4:	08007ff5 	.word	0x08007ff5
 8007fa8:	08007ff5 	.word	0x08007ff5
 8007fac:	08007ff5 	.word	0x08007ff5
 8007fb0:	08007ff5 	.word	0x08007ff5
 8007fb4:	08007ff5 	.word	0x08007ff5
 8007fb8:	08007ff5 	.word	0x08007ff5
 8007fbc:	08007ff5 	.word	0x08007ff5
 8007fc0:	08007fed 	.word	0x08007fed
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fca:	e0d6      	b.n	800817a <UART_SetConfig+0x7ae>
 8007fcc:	2304      	movs	r3, #4
 8007fce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fd2:	e0d2      	b.n	800817a <UART_SetConfig+0x7ae>
 8007fd4:	2308      	movs	r3, #8
 8007fd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fda:	e0ce      	b.n	800817a <UART_SetConfig+0x7ae>
 8007fdc:	2310      	movs	r3, #16
 8007fde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fe2:	e0ca      	b.n	800817a <UART_SetConfig+0x7ae>
 8007fe4:	2320      	movs	r3, #32
 8007fe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fea:	e0c6      	b.n	800817a <UART_SetConfig+0x7ae>
 8007fec:	2340      	movs	r3, #64	; 0x40
 8007fee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ff2:	e0c2      	b.n	800817a <UART_SetConfig+0x7ae>
 8007ff4:	2380      	movs	r3, #128	; 0x80
 8007ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ffa:	e0be      	b.n	800817a <UART_SetConfig+0x7ae>
 8007ffc:	40011400 	.word	0x40011400
 8008000:	58024400 	.word	0x58024400
 8008004:	40007800 	.word	0x40007800
 8008008:	40007c00 	.word	0x40007c00
 800800c:	40011800 	.word	0x40011800
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4aad      	ldr	r2, [pc, #692]	; (80082cc <UART_SetConfig+0x900>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d176      	bne.n	8008108 <UART_SetConfig+0x73c>
 800801a:	4bad      	ldr	r3, [pc, #692]	; (80082d0 <UART_SetConfig+0x904>)
 800801c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800801e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008022:	2b28      	cmp	r3, #40	; 0x28
 8008024:	d86c      	bhi.n	8008100 <UART_SetConfig+0x734>
 8008026:	a201      	add	r2, pc, #4	; (adr r2, 800802c <UART_SetConfig+0x660>)
 8008028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800802c:	080080d1 	.word	0x080080d1
 8008030:	08008101 	.word	0x08008101
 8008034:	08008101 	.word	0x08008101
 8008038:	08008101 	.word	0x08008101
 800803c:	08008101 	.word	0x08008101
 8008040:	08008101 	.word	0x08008101
 8008044:	08008101 	.word	0x08008101
 8008048:	08008101 	.word	0x08008101
 800804c:	080080d9 	.word	0x080080d9
 8008050:	08008101 	.word	0x08008101
 8008054:	08008101 	.word	0x08008101
 8008058:	08008101 	.word	0x08008101
 800805c:	08008101 	.word	0x08008101
 8008060:	08008101 	.word	0x08008101
 8008064:	08008101 	.word	0x08008101
 8008068:	08008101 	.word	0x08008101
 800806c:	080080e1 	.word	0x080080e1
 8008070:	08008101 	.word	0x08008101
 8008074:	08008101 	.word	0x08008101
 8008078:	08008101 	.word	0x08008101
 800807c:	08008101 	.word	0x08008101
 8008080:	08008101 	.word	0x08008101
 8008084:	08008101 	.word	0x08008101
 8008088:	08008101 	.word	0x08008101
 800808c:	080080e9 	.word	0x080080e9
 8008090:	08008101 	.word	0x08008101
 8008094:	08008101 	.word	0x08008101
 8008098:	08008101 	.word	0x08008101
 800809c:	08008101 	.word	0x08008101
 80080a0:	08008101 	.word	0x08008101
 80080a4:	08008101 	.word	0x08008101
 80080a8:	08008101 	.word	0x08008101
 80080ac:	080080f1 	.word	0x080080f1
 80080b0:	08008101 	.word	0x08008101
 80080b4:	08008101 	.word	0x08008101
 80080b8:	08008101 	.word	0x08008101
 80080bc:	08008101 	.word	0x08008101
 80080c0:	08008101 	.word	0x08008101
 80080c4:	08008101 	.word	0x08008101
 80080c8:	08008101 	.word	0x08008101
 80080cc:	080080f9 	.word	0x080080f9
 80080d0:	2301      	movs	r3, #1
 80080d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080d6:	e050      	b.n	800817a <UART_SetConfig+0x7ae>
 80080d8:	2304      	movs	r3, #4
 80080da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080de:	e04c      	b.n	800817a <UART_SetConfig+0x7ae>
 80080e0:	2308      	movs	r3, #8
 80080e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080e6:	e048      	b.n	800817a <UART_SetConfig+0x7ae>
 80080e8:	2310      	movs	r3, #16
 80080ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080ee:	e044      	b.n	800817a <UART_SetConfig+0x7ae>
 80080f0:	2320      	movs	r3, #32
 80080f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080f6:	e040      	b.n	800817a <UART_SetConfig+0x7ae>
 80080f8:	2340      	movs	r3, #64	; 0x40
 80080fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080fe:	e03c      	b.n	800817a <UART_SetConfig+0x7ae>
 8008100:	2380      	movs	r3, #128	; 0x80
 8008102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008106:	e038      	b.n	800817a <UART_SetConfig+0x7ae>
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a71      	ldr	r2, [pc, #452]	; (80082d4 <UART_SetConfig+0x908>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d130      	bne.n	8008174 <UART_SetConfig+0x7a8>
 8008112:	4b6f      	ldr	r3, [pc, #444]	; (80082d0 <UART_SetConfig+0x904>)
 8008114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008116:	f003 0307 	and.w	r3, r3, #7
 800811a:	2b05      	cmp	r3, #5
 800811c:	d826      	bhi.n	800816c <UART_SetConfig+0x7a0>
 800811e:	a201      	add	r2, pc, #4	; (adr r2, 8008124 <UART_SetConfig+0x758>)
 8008120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008124:	0800813d 	.word	0x0800813d
 8008128:	08008145 	.word	0x08008145
 800812c:	0800814d 	.word	0x0800814d
 8008130:	08008155 	.word	0x08008155
 8008134:	0800815d 	.word	0x0800815d
 8008138:	08008165 	.word	0x08008165
 800813c:	2302      	movs	r3, #2
 800813e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008142:	e01a      	b.n	800817a <UART_SetConfig+0x7ae>
 8008144:	2304      	movs	r3, #4
 8008146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800814a:	e016      	b.n	800817a <UART_SetConfig+0x7ae>
 800814c:	2308      	movs	r3, #8
 800814e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008152:	e012      	b.n	800817a <UART_SetConfig+0x7ae>
 8008154:	2310      	movs	r3, #16
 8008156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800815a:	e00e      	b.n	800817a <UART_SetConfig+0x7ae>
 800815c:	2320      	movs	r3, #32
 800815e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008162:	e00a      	b.n	800817a <UART_SetConfig+0x7ae>
 8008164:	2340      	movs	r3, #64	; 0x40
 8008166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800816a:	e006      	b.n	800817a <UART_SetConfig+0x7ae>
 800816c:	2380      	movs	r3, #128	; 0x80
 800816e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008172:	e002      	b.n	800817a <UART_SetConfig+0x7ae>
 8008174:	2380      	movs	r3, #128	; 0x80
 8008176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a55      	ldr	r2, [pc, #340]	; (80082d4 <UART_SetConfig+0x908>)
 8008180:	4293      	cmp	r3, r2
 8008182:	f040 80f8 	bne.w	8008376 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008186:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800818a:	2b20      	cmp	r3, #32
 800818c:	dc46      	bgt.n	800821c <UART_SetConfig+0x850>
 800818e:	2b02      	cmp	r3, #2
 8008190:	db75      	blt.n	800827e <UART_SetConfig+0x8b2>
 8008192:	3b02      	subs	r3, #2
 8008194:	2b1e      	cmp	r3, #30
 8008196:	d872      	bhi.n	800827e <UART_SetConfig+0x8b2>
 8008198:	a201      	add	r2, pc, #4	; (adr r2, 80081a0 <UART_SetConfig+0x7d4>)
 800819a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800819e:	bf00      	nop
 80081a0:	08008223 	.word	0x08008223
 80081a4:	0800827f 	.word	0x0800827f
 80081a8:	0800822b 	.word	0x0800822b
 80081ac:	0800827f 	.word	0x0800827f
 80081b0:	0800827f 	.word	0x0800827f
 80081b4:	0800827f 	.word	0x0800827f
 80081b8:	0800823b 	.word	0x0800823b
 80081bc:	0800827f 	.word	0x0800827f
 80081c0:	0800827f 	.word	0x0800827f
 80081c4:	0800827f 	.word	0x0800827f
 80081c8:	0800827f 	.word	0x0800827f
 80081cc:	0800827f 	.word	0x0800827f
 80081d0:	0800827f 	.word	0x0800827f
 80081d4:	0800827f 	.word	0x0800827f
 80081d8:	0800824b 	.word	0x0800824b
 80081dc:	0800827f 	.word	0x0800827f
 80081e0:	0800827f 	.word	0x0800827f
 80081e4:	0800827f 	.word	0x0800827f
 80081e8:	0800827f 	.word	0x0800827f
 80081ec:	0800827f 	.word	0x0800827f
 80081f0:	0800827f 	.word	0x0800827f
 80081f4:	0800827f 	.word	0x0800827f
 80081f8:	0800827f 	.word	0x0800827f
 80081fc:	0800827f 	.word	0x0800827f
 8008200:	0800827f 	.word	0x0800827f
 8008204:	0800827f 	.word	0x0800827f
 8008208:	0800827f 	.word	0x0800827f
 800820c:	0800827f 	.word	0x0800827f
 8008210:	0800827f 	.word	0x0800827f
 8008214:	0800827f 	.word	0x0800827f
 8008218:	08008271 	.word	0x08008271
 800821c:	2b40      	cmp	r3, #64	; 0x40
 800821e:	d02a      	beq.n	8008276 <UART_SetConfig+0x8aa>
 8008220:	e02d      	b.n	800827e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008222:	f7fd fb77 	bl	8005914 <HAL_RCCEx_GetD3PCLK1Freq>
 8008226:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008228:	e02f      	b.n	800828a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800822a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800822e:	4618      	mov	r0, r3
 8008230:	f7fd fb86 	bl	8005940 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008236:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008238:	e027      	b.n	800828a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800823a:	f107 0318 	add.w	r3, r7, #24
 800823e:	4618      	mov	r0, r3
 8008240:	f7fd fcd2 	bl	8005be8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008244:	69fb      	ldr	r3, [r7, #28]
 8008246:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008248:	e01f      	b.n	800828a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800824a:	4b21      	ldr	r3, [pc, #132]	; (80082d0 <UART_SetConfig+0x904>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f003 0320 	and.w	r3, r3, #32
 8008252:	2b00      	cmp	r3, #0
 8008254:	d009      	beq.n	800826a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008256:	4b1e      	ldr	r3, [pc, #120]	; (80082d0 <UART_SetConfig+0x904>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	08db      	lsrs	r3, r3, #3
 800825c:	f003 0303 	and.w	r3, r3, #3
 8008260:	4a1d      	ldr	r2, [pc, #116]	; (80082d8 <UART_SetConfig+0x90c>)
 8008262:	fa22 f303 	lsr.w	r3, r2, r3
 8008266:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008268:	e00f      	b.n	800828a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800826a:	4b1b      	ldr	r3, [pc, #108]	; (80082d8 <UART_SetConfig+0x90c>)
 800826c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800826e:	e00c      	b.n	800828a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008270:	4b1a      	ldr	r3, [pc, #104]	; (80082dc <UART_SetConfig+0x910>)
 8008272:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008274:	e009      	b.n	800828a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008276:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800827a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800827c:	e005      	b.n	800828a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800827e:	2300      	movs	r3, #0
 8008280:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008282:	2301      	movs	r3, #1
 8008284:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008288:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800828a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800828c:	2b00      	cmp	r3, #0
 800828e:	f000 81ee 	beq.w	800866e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008296:	4a12      	ldr	r2, [pc, #72]	; (80082e0 <UART_SetConfig+0x914>)
 8008298:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800829c:	461a      	mov	r2, r3
 800829e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80082a4:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	685a      	ldr	r2, [r3, #4]
 80082aa:	4613      	mov	r3, r2
 80082ac:	005b      	lsls	r3, r3, #1
 80082ae:	4413      	add	r3, r2
 80082b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d305      	bcc.n	80082c2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	685b      	ldr	r3, [r3, #4]
 80082ba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80082bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082be:	429a      	cmp	r2, r3
 80082c0:	d910      	bls.n	80082e4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80082c2:	2301      	movs	r3, #1
 80082c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80082c8:	e1d1      	b.n	800866e <UART_SetConfig+0xca2>
 80082ca:	bf00      	nop
 80082cc:	40011c00 	.word	0x40011c00
 80082d0:	58024400 	.word	0x58024400
 80082d4:	58000c00 	.word	0x58000c00
 80082d8:	03d09000 	.word	0x03d09000
 80082dc:	003d0900 	.word	0x003d0900
 80082e0:	0800acc4 	.word	0x0800acc4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082e6:	2200      	movs	r2, #0
 80082e8:	60bb      	str	r3, [r7, #8]
 80082ea:	60fa      	str	r2, [r7, #12]
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f0:	4ac0      	ldr	r2, [pc, #768]	; (80085f4 <UART_SetConfig+0xc28>)
 80082f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	2200      	movs	r2, #0
 80082fa:	603b      	str	r3, [r7, #0]
 80082fc:	607a      	str	r2, [r7, #4]
 80082fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008302:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008306:	f7f8 f85b 	bl	80003c0 <__aeabi_uldivmod>
 800830a:	4602      	mov	r2, r0
 800830c:	460b      	mov	r3, r1
 800830e:	4610      	mov	r0, r2
 8008310:	4619      	mov	r1, r3
 8008312:	f04f 0200 	mov.w	r2, #0
 8008316:	f04f 0300 	mov.w	r3, #0
 800831a:	020b      	lsls	r3, r1, #8
 800831c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008320:	0202      	lsls	r2, r0, #8
 8008322:	6979      	ldr	r1, [r7, #20]
 8008324:	6849      	ldr	r1, [r1, #4]
 8008326:	0849      	lsrs	r1, r1, #1
 8008328:	2000      	movs	r0, #0
 800832a:	460c      	mov	r4, r1
 800832c:	4605      	mov	r5, r0
 800832e:	eb12 0804 	adds.w	r8, r2, r4
 8008332:	eb43 0905 	adc.w	r9, r3, r5
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	2200      	movs	r2, #0
 800833c:	469a      	mov	sl, r3
 800833e:	4693      	mov	fp, r2
 8008340:	4652      	mov	r2, sl
 8008342:	465b      	mov	r3, fp
 8008344:	4640      	mov	r0, r8
 8008346:	4649      	mov	r1, r9
 8008348:	f7f8 f83a 	bl	80003c0 <__aeabi_uldivmod>
 800834c:	4602      	mov	r2, r0
 800834e:	460b      	mov	r3, r1
 8008350:	4613      	mov	r3, r2
 8008352:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008356:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800835a:	d308      	bcc.n	800836e <UART_SetConfig+0x9a2>
 800835c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800835e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008362:	d204      	bcs.n	800836e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800836a:	60da      	str	r2, [r3, #12]
 800836c:	e17f      	b.n	800866e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800836e:	2301      	movs	r3, #1
 8008370:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008374:	e17b      	b.n	800866e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	69db      	ldr	r3, [r3, #28]
 800837a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800837e:	f040 80bd 	bne.w	80084fc <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8008382:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008386:	2b20      	cmp	r3, #32
 8008388:	dc48      	bgt.n	800841c <UART_SetConfig+0xa50>
 800838a:	2b00      	cmp	r3, #0
 800838c:	db7b      	blt.n	8008486 <UART_SetConfig+0xaba>
 800838e:	2b20      	cmp	r3, #32
 8008390:	d879      	bhi.n	8008486 <UART_SetConfig+0xaba>
 8008392:	a201      	add	r2, pc, #4	; (adr r2, 8008398 <UART_SetConfig+0x9cc>)
 8008394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008398:	08008423 	.word	0x08008423
 800839c:	0800842b 	.word	0x0800842b
 80083a0:	08008487 	.word	0x08008487
 80083a4:	08008487 	.word	0x08008487
 80083a8:	08008433 	.word	0x08008433
 80083ac:	08008487 	.word	0x08008487
 80083b0:	08008487 	.word	0x08008487
 80083b4:	08008487 	.word	0x08008487
 80083b8:	08008443 	.word	0x08008443
 80083bc:	08008487 	.word	0x08008487
 80083c0:	08008487 	.word	0x08008487
 80083c4:	08008487 	.word	0x08008487
 80083c8:	08008487 	.word	0x08008487
 80083cc:	08008487 	.word	0x08008487
 80083d0:	08008487 	.word	0x08008487
 80083d4:	08008487 	.word	0x08008487
 80083d8:	08008453 	.word	0x08008453
 80083dc:	08008487 	.word	0x08008487
 80083e0:	08008487 	.word	0x08008487
 80083e4:	08008487 	.word	0x08008487
 80083e8:	08008487 	.word	0x08008487
 80083ec:	08008487 	.word	0x08008487
 80083f0:	08008487 	.word	0x08008487
 80083f4:	08008487 	.word	0x08008487
 80083f8:	08008487 	.word	0x08008487
 80083fc:	08008487 	.word	0x08008487
 8008400:	08008487 	.word	0x08008487
 8008404:	08008487 	.word	0x08008487
 8008408:	08008487 	.word	0x08008487
 800840c:	08008487 	.word	0x08008487
 8008410:	08008487 	.word	0x08008487
 8008414:	08008487 	.word	0x08008487
 8008418:	08008479 	.word	0x08008479
 800841c:	2b40      	cmp	r3, #64	; 0x40
 800841e:	d02e      	beq.n	800847e <UART_SetConfig+0xab2>
 8008420:	e031      	b.n	8008486 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008422:	f7fc f8ab 	bl	800457c <HAL_RCC_GetPCLK1Freq>
 8008426:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008428:	e033      	b.n	8008492 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800842a:	f7fc f8bd 	bl	80045a8 <HAL_RCC_GetPCLK2Freq>
 800842e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008430:	e02f      	b.n	8008492 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008432:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008436:	4618      	mov	r0, r3
 8008438:	f7fd fa82 	bl	8005940 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800843c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800843e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008440:	e027      	b.n	8008492 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008442:	f107 0318 	add.w	r3, r7, #24
 8008446:	4618      	mov	r0, r3
 8008448:	f7fd fbce 	bl	8005be8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800844c:	69fb      	ldr	r3, [r7, #28]
 800844e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008450:	e01f      	b.n	8008492 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008452:	4b69      	ldr	r3, [pc, #420]	; (80085f8 <UART_SetConfig+0xc2c>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f003 0320 	and.w	r3, r3, #32
 800845a:	2b00      	cmp	r3, #0
 800845c:	d009      	beq.n	8008472 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800845e:	4b66      	ldr	r3, [pc, #408]	; (80085f8 <UART_SetConfig+0xc2c>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	08db      	lsrs	r3, r3, #3
 8008464:	f003 0303 	and.w	r3, r3, #3
 8008468:	4a64      	ldr	r2, [pc, #400]	; (80085fc <UART_SetConfig+0xc30>)
 800846a:	fa22 f303 	lsr.w	r3, r2, r3
 800846e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008470:	e00f      	b.n	8008492 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8008472:	4b62      	ldr	r3, [pc, #392]	; (80085fc <UART_SetConfig+0xc30>)
 8008474:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008476:	e00c      	b.n	8008492 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008478:	4b61      	ldr	r3, [pc, #388]	; (8008600 <UART_SetConfig+0xc34>)
 800847a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800847c:	e009      	b.n	8008492 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800847e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008482:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008484:	e005      	b.n	8008492 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8008486:	2300      	movs	r3, #0
 8008488:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800848a:	2301      	movs	r3, #1
 800848c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008490:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008494:	2b00      	cmp	r3, #0
 8008496:	f000 80ea 	beq.w	800866e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800849e:	4a55      	ldr	r2, [pc, #340]	; (80085f4 <UART_SetConfig+0xc28>)
 80084a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084a4:	461a      	mov	r2, r3
 80084a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80084ac:	005a      	lsls	r2, r3, #1
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	085b      	lsrs	r3, r3, #1
 80084b4:	441a      	add	r2, r3
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80084be:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80084c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c2:	2b0f      	cmp	r3, #15
 80084c4:	d916      	bls.n	80084f4 <UART_SetConfig+0xb28>
 80084c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084cc:	d212      	bcs.n	80084f4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80084ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d0:	b29b      	uxth	r3, r3
 80084d2:	f023 030f 	bic.w	r3, r3, #15
 80084d6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80084d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084da:	085b      	lsrs	r3, r3, #1
 80084dc:	b29b      	uxth	r3, r3
 80084de:	f003 0307 	and.w	r3, r3, #7
 80084e2:	b29a      	uxth	r2, r3
 80084e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80084e6:	4313      	orrs	r3, r2
 80084e8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80084f0:	60da      	str	r2, [r3, #12]
 80084f2:	e0bc      	b.n	800866e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80084f4:	2301      	movs	r3, #1
 80084f6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80084fa:	e0b8      	b.n	800866e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80084fc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008500:	2b20      	cmp	r3, #32
 8008502:	dc4b      	bgt.n	800859c <UART_SetConfig+0xbd0>
 8008504:	2b00      	cmp	r3, #0
 8008506:	f2c0 8087 	blt.w	8008618 <UART_SetConfig+0xc4c>
 800850a:	2b20      	cmp	r3, #32
 800850c:	f200 8084 	bhi.w	8008618 <UART_SetConfig+0xc4c>
 8008510:	a201      	add	r2, pc, #4	; (adr r2, 8008518 <UART_SetConfig+0xb4c>)
 8008512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008516:	bf00      	nop
 8008518:	080085a3 	.word	0x080085a3
 800851c:	080085ab 	.word	0x080085ab
 8008520:	08008619 	.word	0x08008619
 8008524:	08008619 	.word	0x08008619
 8008528:	080085b3 	.word	0x080085b3
 800852c:	08008619 	.word	0x08008619
 8008530:	08008619 	.word	0x08008619
 8008534:	08008619 	.word	0x08008619
 8008538:	080085c3 	.word	0x080085c3
 800853c:	08008619 	.word	0x08008619
 8008540:	08008619 	.word	0x08008619
 8008544:	08008619 	.word	0x08008619
 8008548:	08008619 	.word	0x08008619
 800854c:	08008619 	.word	0x08008619
 8008550:	08008619 	.word	0x08008619
 8008554:	08008619 	.word	0x08008619
 8008558:	080085d3 	.word	0x080085d3
 800855c:	08008619 	.word	0x08008619
 8008560:	08008619 	.word	0x08008619
 8008564:	08008619 	.word	0x08008619
 8008568:	08008619 	.word	0x08008619
 800856c:	08008619 	.word	0x08008619
 8008570:	08008619 	.word	0x08008619
 8008574:	08008619 	.word	0x08008619
 8008578:	08008619 	.word	0x08008619
 800857c:	08008619 	.word	0x08008619
 8008580:	08008619 	.word	0x08008619
 8008584:	08008619 	.word	0x08008619
 8008588:	08008619 	.word	0x08008619
 800858c:	08008619 	.word	0x08008619
 8008590:	08008619 	.word	0x08008619
 8008594:	08008619 	.word	0x08008619
 8008598:	0800860b 	.word	0x0800860b
 800859c:	2b40      	cmp	r3, #64	; 0x40
 800859e:	d037      	beq.n	8008610 <UART_SetConfig+0xc44>
 80085a0:	e03a      	b.n	8008618 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085a2:	f7fb ffeb 	bl	800457c <HAL_RCC_GetPCLK1Freq>
 80085a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80085a8:	e03c      	b.n	8008624 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80085aa:	f7fb fffd 	bl	80045a8 <HAL_RCC_GetPCLK2Freq>
 80085ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80085b0:	e038      	b.n	8008624 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085b6:	4618      	mov	r0, r3
 80085b8:	f7fd f9c2 	bl	8005940 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80085bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085c0:	e030      	b.n	8008624 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085c2:	f107 0318 	add.w	r3, r7, #24
 80085c6:	4618      	mov	r0, r3
 80085c8:	f7fd fb0e 	bl	8005be8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80085cc:	69fb      	ldr	r3, [r7, #28]
 80085ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085d0:	e028      	b.n	8008624 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085d2:	4b09      	ldr	r3, [pc, #36]	; (80085f8 <UART_SetConfig+0xc2c>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f003 0320 	and.w	r3, r3, #32
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d012      	beq.n	8008604 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80085de:	4b06      	ldr	r3, [pc, #24]	; (80085f8 <UART_SetConfig+0xc2c>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	08db      	lsrs	r3, r3, #3
 80085e4:	f003 0303 	and.w	r3, r3, #3
 80085e8:	4a04      	ldr	r2, [pc, #16]	; (80085fc <UART_SetConfig+0xc30>)
 80085ea:	fa22 f303 	lsr.w	r3, r2, r3
 80085ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80085f0:	e018      	b.n	8008624 <UART_SetConfig+0xc58>
 80085f2:	bf00      	nop
 80085f4:	0800acc4 	.word	0x0800acc4
 80085f8:	58024400 	.word	0x58024400
 80085fc:	03d09000 	.word	0x03d09000
 8008600:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8008604:	4b24      	ldr	r3, [pc, #144]	; (8008698 <UART_SetConfig+0xccc>)
 8008606:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008608:	e00c      	b.n	8008624 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800860a:	4b24      	ldr	r3, [pc, #144]	; (800869c <UART_SetConfig+0xcd0>)
 800860c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800860e:	e009      	b.n	8008624 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008610:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008614:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008616:	e005      	b.n	8008624 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8008618:	2300      	movs	r3, #0
 800861a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800861c:	2301      	movs	r3, #1
 800861e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008622:	bf00      	nop
    }

    if (pclk != 0U)
 8008624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008626:	2b00      	cmp	r3, #0
 8008628:	d021      	beq.n	800866e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800862e:	4a1c      	ldr	r2, [pc, #112]	; (80086a0 <UART_SetConfig+0xcd4>)
 8008630:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008634:	461a      	mov	r2, r3
 8008636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008638:	fbb3 f2f2 	udiv	r2, r3, r2
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	085b      	lsrs	r3, r3, #1
 8008642:	441a      	add	r2, r3
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	fbb2 f3f3 	udiv	r3, r2, r3
 800864c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800864e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008650:	2b0f      	cmp	r3, #15
 8008652:	d909      	bls.n	8008668 <UART_SetConfig+0xc9c>
 8008654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008656:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800865a:	d205      	bcs.n	8008668 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800865c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800865e:	b29a      	uxth	r2, r3
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	60da      	str	r2, [r3, #12]
 8008666:	e002      	b.n	800866e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008668:	2301      	movs	r3, #1
 800866a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	2201      	movs	r2, #1
 8008672:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	2201      	movs	r2, #1
 800867a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	2200      	movs	r2, #0
 8008682:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	2200      	movs	r2, #0
 8008688:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800868a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800868e:	4618      	mov	r0, r3
 8008690:	3748      	adds	r7, #72	; 0x48
 8008692:	46bd      	mov	sp, r7
 8008694:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008698:	03d09000 	.word	0x03d09000
 800869c:	003d0900 	.word	0x003d0900
 80086a0:	0800acc4 	.word	0x0800acc4

080086a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b083      	sub	sp, #12
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086b0:	f003 0308 	and.w	r3, r3, #8
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d00a      	beq.n	80086ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	430a      	orrs	r2, r1
 80086cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086d2:	f003 0301 	and.w	r3, r3, #1
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d00a      	beq.n	80086f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	430a      	orrs	r2, r1
 80086ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086f4:	f003 0302 	and.w	r3, r3, #2
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d00a      	beq.n	8008712 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	430a      	orrs	r2, r1
 8008710:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008716:	f003 0304 	and.w	r3, r3, #4
 800871a:	2b00      	cmp	r3, #0
 800871c:	d00a      	beq.n	8008734 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	430a      	orrs	r2, r1
 8008732:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008738:	f003 0310 	and.w	r3, r3, #16
 800873c:	2b00      	cmp	r3, #0
 800873e:	d00a      	beq.n	8008756 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	689b      	ldr	r3, [r3, #8]
 8008746:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	430a      	orrs	r2, r1
 8008754:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800875a:	f003 0320 	and.w	r3, r3, #32
 800875e:	2b00      	cmp	r3, #0
 8008760:	d00a      	beq.n	8008778 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	430a      	orrs	r2, r1
 8008776:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800877c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008780:	2b00      	cmp	r3, #0
 8008782:	d01a      	beq.n	80087ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	430a      	orrs	r2, r1
 8008798:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800879e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087a2:	d10a      	bne.n	80087ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	430a      	orrs	r2, r1
 80087b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d00a      	beq.n	80087dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	430a      	orrs	r2, r1
 80087da:	605a      	str	r2, [r3, #4]
  }
}
 80087dc:	bf00      	nop
 80087de:	370c      	adds	r7, #12
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr

080087e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b098      	sub	sp, #96	; 0x60
 80087ec:	af02      	add	r7, sp, #8
 80087ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2200      	movs	r2, #0
 80087f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80087f8:	f7f9 fa9e 	bl	8001d38 <HAL_GetTick>
 80087fc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f003 0308 	and.w	r3, r3, #8
 8008808:	2b08      	cmp	r3, #8
 800880a:	d12f      	bne.n	800886c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800880c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008810:	9300      	str	r3, [sp, #0]
 8008812:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008814:	2200      	movs	r2, #0
 8008816:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 f88e 	bl	800893c <UART_WaitOnFlagUntilTimeout>
 8008820:	4603      	mov	r3, r0
 8008822:	2b00      	cmp	r3, #0
 8008824:	d022      	beq.n	800886c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800882c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800882e:	e853 3f00 	ldrex	r3, [r3]
 8008832:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008836:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800883a:	653b      	str	r3, [r7, #80]	; 0x50
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	461a      	mov	r2, r3
 8008842:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008844:	647b      	str	r3, [r7, #68]	; 0x44
 8008846:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008848:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800884a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800884c:	e841 2300 	strex	r3, r2, [r1]
 8008850:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008854:	2b00      	cmp	r3, #0
 8008856:	d1e6      	bne.n	8008826 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2220      	movs	r2, #32
 800885c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2200      	movs	r2, #0
 8008864:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008868:	2303      	movs	r3, #3
 800886a:	e063      	b.n	8008934 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f003 0304 	and.w	r3, r3, #4
 8008876:	2b04      	cmp	r3, #4
 8008878:	d149      	bne.n	800890e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800887a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800887e:	9300      	str	r3, [sp, #0]
 8008880:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008882:	2200      	movs	r2, #0
 8008884:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 f857 	bl	800893c <UART_WaitOnFlagUntilTimeout>
 800888e:	4603      	mov	r3, r0
 8008890:	2b00      	cmp	r3, #0
 8008892:	d03c      	beq.n	800890e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800889a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800889c:	e853 3f00 	ldrex	r3, [r3]
 80088a0:	623b      	str	r3, [r7, #32]
   return(result);
 80088a2:	6a3b      	ldr	r3, [r7, #32]
 80088a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80088a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	461a      	mov	r2, r3
 80088b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088b2:	633b      	str	r3, [r7, #48]	; 0x30
 80088b4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80088b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088ba:	e841 2300 	strex	r3, r2, [r1]
 80088be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80088c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d1e6      	bne.n	8008894 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	3308      	adds	r3, #8
 80088cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	e853 3f00 	ldrex	r3, [r3]
 80088d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	f023 0301 	bic.w	r3, r3, #1
 80088dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	3308      	adds	r3, #8
 80088e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088e6:	61fa      	str	r2, [r7, #28]
 80088e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ea:	69b9      	ldr	r1, [r7, #24]
 80088ec:	69fa      	ldr	r2, [r7, #28]
 80088ee:	e841 2300 	strex	r3, r2, [r1]
 80088f2:	617b      	str	r3, [r7, #20]
   return(result);
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d1e5      	bne.n	80088c6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2220      	movs	r2, #32
 80088fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2200      	movs	r2, #0
 8008906:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800890a:	2303      	movs	r3, #3
 800890c:	e012      	b.n	8008934 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2220      	movs	r2, #32
 8008912:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2220      	movs	r2, #32
 800891a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2200      	movs	r2, #0
 8008922:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2200      	movs	r2, #0
 8008928:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2200      	movs	r2, #0
 800892e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008932:	2300      	movs	r3, #0
}
 8008934:	4618      	mov	r0, r3
 8008936:	3758      	adds	r7, #88	; 0x58
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b084      	sub	sp, #16
 8008940:	af00      	add	r7, sp, #0
 8008942:	60f8      	str	r0, [r7, #12]
 8008944:	60b9      	str	r1, [r7, #8]
 8008946:	603b      	str	r3, [r7, #0]
 8008948:	4613      	mov	r3, r2
 800894a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800894c:	e04f      	b.n	80089ee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800894e:	69bb      	ldr	r3, [r7, #24]
 8008950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008954:	d04b      	beq.n	80089ee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008956:	f7f9 f9ef 	bl	8001d38 <HAL_GetTick>
 800895a:	4602      	mov	r2, r0
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	1ad3      	subs	r3, r2, r3
 8008960:	69ba      	ldr	r2, [r7, #24]
 8008962:	429a      	cmp	r2, r3
 8008964:	d302      	bcc.n	800896c <UART_WaitOnFlagUntilTimeout+0x30>
 8008966:	69bb      	ldr	r3, [r7, #24]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d101      	bne.n	8008970 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800896c:	2303      	movs	r3, #3
 800896e:	e04e      	b.n	8008a0e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f003 0304 	and.w	r3, r3, #4
 800897a:	2b00      	cmp	r3, #0
 800897c:	d037      	beq.n	80089ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	2b80      	cmp	r3, #128	; 0x80
 8008982:	d034      	beq.n	80089ee <UART_WaitOnFlagUntilTimeout+0xb2>
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	2b40      	cmp	r3, #64	; 0x40
 8008988:	d031      	beq.n	80089ee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	69db      	ldr	r3, [r3, #28]
 8008990:	f003 0308 	and.w	r3, r3, #8
 8008994:	2b08      	cmp	r3, #8
 8008996:	d110      	bne.n	80089ba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	2208      	movs	r2, #8
 800899e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80089a0:	68f8      	ldr	r0, [r7, #12]
 80089a2:	f000 f95b 	bl	8008c5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2208      	movs	r2, #8
 80089aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2200      	movs	r2, #0
 80089b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80089b6:	2301      	movs	r3, #1
 80089b8:	e029      	b.n	8008a0e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	69db      	ldr	r3, [r3, #28]
 80089c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089c8:	d111      	bne.n	80089ee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80089d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80089d4:	68f8      	ldr	r0, [r7, #12]
 80089d6:	f000 f941 	bl	8008c5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2220      	movs	r2, #32
 80089de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	2200      	movs	r2, #0
 80089e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80089ea:	2303      	movs	r3, #3
 80089ec:	e00f      	b.n	8008a0e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	69da      	ldr	r2, [r3, #28]
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	4013      	ands	r3, r2
 80089f8:	68ba      	ldr	r2, [r7, #8]
 80089fa:	429a      	cmp	r2, r3
 80089fc:	bf0c      	ite	eq
 80089fe:	2301      	moveq	r3, #1
 8008a00:	2300      	movne	r3, #0
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	461a      	mov	r2, r3
 8008a06:	79fb      	ldrb	r3, [r7, #7]
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d0a0      	beq.n	800894e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a0c:	2300      	movs	r3, #0
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3710      	adds	r7, #16
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}
	...

08008a18 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b0a3      	sub	sp, #140	; 0x8c
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	60f8      	str	r0, [r7, #12]
 8008a20:	60b9      	str	r1, [r7, #8]
 8008a22:	4613      	mov	r3, r2
 8008a24:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	68ba      	ldr	r2, [r7, #8]
 8008a2a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	88fa      	ldrh	r2, [r7, #6]
 8008a30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	88fa      	ldrh	r2, [r7, #6]
 8008a38:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	689b      	ldr	r3, [r3, #8]
 8008a46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a4a:	d10e      	bne.n	8008a6a <UART_Start_Receive_IT+0x52>
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	691b      	ldr	r3, [r3, #16]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d105      	bne.n	8008a60 <UART_Start_Receive_IT+0x48>
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008a5a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008a5e:	e02d      	b.n	8008abc <UART_Start_Receive_IT+0xa4>
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	22ff      	movs	r2, #255	; 0xff
 8008a64:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008a68:	e028      	b.n	8008abc <UART_Start_Receive_IT+0xa4>
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	689b      	ldr	r3, [r3, #8]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d10d      	bne.n	8008a8e <UART_Start_Receive_IT+0x76>
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	691b      	ldr	r3, [r3, #16]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d104      	bne.n	8008a84 <UART_Start_Receive_IT+0x6c>
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	22ff      	movs	r2, #255	; 0xff
 8008a7e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008a82:	e01b      	b.n	8008abc <UART_Start_Receive_IT+0xa4>
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	227f      	movs	r2, #127	; 0x7f
 8008a88:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008a8c:	e016      	b.n	8008abc <UART_Start_Receive_IT+0xa4>
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	689b      	ldr	r3, [r3, #8]
 8008a92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a96:	d10d      	bne.n	8008ab4 <UART_Start_Receive_IT+0x9c>
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	691b      	ldr	r3, [r3, #16]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d104      	bne.n	8008aaa <UART_Start_Receive_IT+0x92>
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	227f      	movs	r2, #127	; 0x7f
 8008aa4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008aa8:	e008      	b.n	8008abc <UART_Start_Receive_IT+0xa4>
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	223f      	movs	r2, #63	; 0x3f
 8008aae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008ab2:	e003      	b.n	8008abc <UART_Start_Receive_IT+0xa4>
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2222      	movs	r2, #34	; 0x22
 8008ac8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	3308      	adds	r3, #8
 8008ad2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ad6:	e853 3f00 	ldrex	r3, [r3]
 8008ada:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008adc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ade:	f043 0301 	orr.w	r3, r3, #1
 8008ae2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	3308      	adds	r3, #8
 8008aec:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008af0:	673a      	str	r2, [r7, #112]	; 0x70
 8008af2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008af4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008af6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008af8:	e841 2300 	strex	r3, r2, [r1]
 8008afc:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008afe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d1e3      	bne.n	8008acc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b0c:	d14f      	bne.n	8008bae <UART_Start_Receive_IT+0x196>
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008b14:	88fa      	ldrh	r2, [r7, #6]
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d349      	bcc.n	8008bae <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b22:	d107      	bne.n	8008b34 <UART_Start_Receive_IT+0x11c>
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	691b      	ldr	r3, [r3, #16]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d103      	bne.n	8008b34 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	4a47      	ldr	r2, [pc, #284]	; (8008c4c <UART_Start_Receive_IT+0x234>)
 8008b30:	675a      	str	r2, [r3, #116]	; 0x74
 8008b32:	e002      	b.n	8008b3a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	4a46      	ldr	r2, [pc, #280]	; (8008c50 <UART_Start_Receive_IT+0x238>)
 8008b38:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	691b      	ldr	r3, [r3, #16]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d01a      	beq.n	8008b78 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b4a:	e853 3f00 	ldrex	r3, [r3]
 8008b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008b50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	461a      	mov	r2, r3
 8008b60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008b64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b66:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b68:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008b6a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008b6c:	e841 2300 	strex	r3, r2, [r1]
 8008b70:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008b72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d1e4      	bne.n	8008b42 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	3308      	adds	r3, #8
 8008b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b82:	e853 3f00 	ldrex	r3, [r3]
 8008b86:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b8e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	3308      	adds	r3, #8
 8008b96:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008b98:	64ba      	str	r2, [r7, #72]	; 0x48
 8008b9a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b9c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008b9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ba0:	e841 2300 	strex	r3, r2, [r1]
 8008ba4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008ba6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d1e5      	bne.n	8008b78 <UART_Start_Receive_IT+0x160>
 8008bac:	e046      	b.n	8008c3c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	689b      	ldr	r3, [r3, #8]
 8008bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bb6:	d107      	bne.n	8008bc8 <UART_Start_Receive_IT+0x1b0>
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	691b      	ldr	r3, [r3, #16]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d103      	bne.n	8008bc8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	4a24      	ldr	r2, [pc, #144]	; (8008c54 <UART_Start_Receive_IT+0x23c>)
 8008bc4:	675a      	str	r2, [r3, #116]	; 0x74
 8008bc6:	e002      	b.n	8008bce <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	4a23      	ldr	r2, [pc, #140]	; (8008c58 <UART_Start_Receive_IT+0x240>)
 8008bcc:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	691b      	ldr	r3, [r3, #16]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d019      	beq.n	8008c0a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bde:	e853 3f00 	ldrex	r3, [r3]
 8008be2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008bea:	677b      	str	r3, [r7, #116]	; 0x74
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	461a      	mov	r2, r3
 8008bf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008bf4:	637b      	str	r3, [r7, #52]	; 0x34
 8008bf6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bf8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008bfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008bfc:	e841 2300 	strex	r3, r2, [r1]
 8008c00:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d1e6      	bne.n	8008bd6 <UART_Start_Receive_IT+0x1be>
 8008c08:	e018      	b.n	8008c3c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	e853 3f00 	ldrex	r3, [r3]
 8008c16:	613b      	str	r3, [r7, #16]
   return(result);
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	f043 0320 	orr.w	r3, r3, #32
 8008c1e:	67bb      	str	r3, [r7, #120]	; 0x78
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	461a      	mov	r2, r3
 8008c26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c28:	623b      	str	r3, [r7, #32]
 8008c2a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c2c:	69f9      	ldr	r1, [r7, #28]
 8008c2e:	6a3a      	ldr	r2, [r7, #32]
 8008c30:	e841 2300 	strex	r3, r2, [r1]
 8008c34:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c36:	69bb      	ldr	r3, [r7, #24]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d1e6      	bne.n	8008c0a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008c3c:	2300      	movs	r3, #0
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	378c      	adds	r7, #140	; 0x8c
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr
 8008c4a:	bf00      	nop
 8008c4c:	0800947d 	.word	0x0800947d
 8008c50:	0800911d 	.word	0x0800911d
 8008c54:	08008f65 	.word	0x08008f65
 8008c58:	08008dad 	.word	0x08008dad

08008c5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b095      	sub	sp, #84	; 0x54
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c6c:	e853 3f00 	ldrex	r3, [r3]
 8008c70:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	461a      	mov	r2, r3
 8008c80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c82:	643b      	str	r3, [r7, #64]	; 0x40
 8008c84:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c86:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008c88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008c8a:	e841 2300 	strex	r3, r2, [r1]
 8008c8e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d1e6      	bne.n	8008c64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	3308      	adds	r3, #8
 8008c9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c9e:	6a3b      	ldr	r3, [r7, #32]
 8008ca0:	e853 3f00 	ldrex	r3, [r3]
 8008ca4:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ca6:	69fa      	ldr	r2, [r7, #28]
 8008ca8:	4b1e      	ldr	r3, [pc, #120]	; (8008d24 <UART_EndRxTransfer+0xc8>)
 8008caa:	4013      	ands	r3, r2
 8008cac:	64bb      	str	r3, [r7, #72]	; 0x48
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	3308      	adds	r3, #8
 8008cb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008cb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008cb8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008cbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cbe:	e841 2300 	strex	r3, r2, [r1]
 8008cc2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d1e5      	bne.n	8008c96 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cce:	2b01      	cmp	r3, #1
 8008cd0:	d118      	bne.n	8008d04 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	e853 3f00 	ldrex	r3, [r3]
 8008cde:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	f023 0310 	bic.w	r3, r3, #16
 8008ce6:	647b      	str	r3, [r7, #68]	; 0x44
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	461a      	mov	r2, r3
 8008cee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cf0:	61bb      	str	r3, [r7, #24]
 8008cf2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cf4:	6979      	ldr	r1, [r7, #20]
 8008cf6:	69ba      	ldr	r2, [r7, #24]
 8008cf8:	e841 2300 	strex	r3, r2, [r1]
 8008cfc:	613b      	str	r3, [r7, #16]
   return(result);
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d1e6      	bne.n	8008cd2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2220      	movs	r2, #32
 8008d08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2200      	movs	r2, #0
 8008d16:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008d18:	bf00      	nop
 8008d1a:	3754      	adds	r7, #84	; 0x54
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d22:	4770      	bx	lr
 8008d24:	effffffe 	.word	0xeffffffe

08008d28 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b084      	sub	sp, #16
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d34:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2200      	movs	r2, #0
 8008d42:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d46:	68f8      	ldr	r0, [r7, #12]
 8008d48:	f7fe fe2a 	bl	80079a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d4c:	bf00      	nop
 8008d4e:	3710      	adds	r7, #16
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b088      	sub	sp, #32
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	e853 3f00 	ldrex	r3, [r3]
 8008d68:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d70:	61fb      	str	r3, [r7, #28]
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	461a      	mov	r2, r3
 8008d78:	69fb      	ldr	r3, [r7, #28]
 8008d7a:	61bb      	str	r3, [r7, #24]
 8008d7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d7e:	6979      	ldr	r1, [r7, #20]
 8008d80:	69ba      	ldr	r2, [r7, #24]
 8008d82:	e841 2300 	strex	r3, r2, [r1]
 8008d86:	613b      	str	r3, [r7, #16]
   return(result);
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d1e6      	bne.n	8008d5c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2220      	movs	r2, #32
 8008d92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f7fe fdf5 	bl	800798c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008da2:	bf00      	nop
 8008da4:	3720      	adds	r7, #32
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}
	...

08008dac <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b09c      	sub	sp, #112	; 0x70
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008dba:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008dc4:	2b22      	cmp	r3, #34	; 0x22
 8008dc6:	f040 80be 	bne.w	8008f46 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008dd4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008dd8:	b2d9      	uxtb	r1, r3
 8008dda:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008dde:	b2da      	uxtb	r2, r3
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008de4:	400a      	ands	r2, r1
 8008de6:	b2d2      	uxtb	r2, r2
 8008de8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dee:	1c5a      	adds	r2, r3, #1
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	3b01      	subs	r3, #1
 8008dfe:	b29a      	uxth	r2, r3
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e0c:	b29b      	uxth	r3, r3
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	f040 80a1 	bne.w	8008f56 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e1c:	e853 3f00 	ldrex	r3, [r3]
 8008e20:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008e22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e28:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	461a      	mov	r2, r3
 8008e30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008e32:	65bb      	str	r3, [r7, #88]	; 0x58
 8008e34:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e36:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008e38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008e3a:	e841 2300 	strex	r3, r2, [r1]
 8008e3e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008e40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d1e6      	bne.n	8008e14 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	3308      	adds	r3, #8
 8008e4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e50:	e853 3f00 	ldrex	r3, [r3]
 8008e54:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e58:	f023 0301 	bic.w	r3, r3, #1
 8008e5c:	667b      	str	r3, [r7, #100]	; 0x64
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	3308      	adds	r3, #8
 8008e64:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008e66:	647a      	str	r2, [r7, #68]	; 0x44
 8008e68:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e6a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008e6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e6e:	e841 2300 	strex	r3, r2, [r1]
 8008e72:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008e74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d1e5      	bne.n	8008e46 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2220      	movs	r2, #32
 8008e7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2200      	movs	r2, #0
 8008e86:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4a33      	ldr	r2, [pc, #204]	; (8008f60 <UART_RxISR_8BIT+0x1b4>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d01f      	beq.n	8008ed8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d018      	beq.n	8008ed8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eae:	e853 3f00 	ldrex	r3, [r3]
 8008eb2:	623b      	str	r3, [r7, #32]
   return(result);
 8008eb4:	6a3b      	ldr	r3, [r7, #32]
 8008eb6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008eba:	663b      	str	r3, [r7, #96]	; 0x60
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ec4:	633b      	str	r3, [r7, #48]	; 0x30
 8008ec6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008eca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ecc:	e841 2300 	strex	r3, r2, [r1]
 8008ed0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d1e6      	bne.n	8008ea6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d12e      	bne.n	8008f3e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	e853 3f00 	ldrex	r3, [r3]
 8008ef2:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	f023 0310 	bic.w	r3, r3, #16
 8008efa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	461a      	mov	r2, r3
 8008f02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f04:	61fb      	str	r3, [r7, #28]
 8008f06:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f08:	69b9      	ldr	r1, [r7, #24]
 8008f0a:	69fa      	ldr	r2, [r7, #28]
 8008f0c:	e841 2300 	strex	r3, r2, [r1]
 8008f10:	617b      	str	r3, [r7, #20]
   return(result);
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d1e6      	bne.n	8008ee6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	69db      	ldr	r3, [r3, #28]
 8008f1e:	f003 0310 	and.w	r3, r3, #16
 8008f22:	2b10      	cmp	r3, #16
 8008f24:	d103      	bne.n	8008f2e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	2210      	movs	r2, #16
 8008f2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008f34:	4619      	mov	r1, r3
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f7fe fd3c 	bl	80079b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f3c:	e00b      	b.n	8008f56 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f7f7 fd6c 	bl	8000a1c <HAL_UART_RxCpltCallback>
}
 8008f44:	e007      	b.n	8008f56 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	699a      	ldr	r2, [r3, #24]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f042 0208 	orr.w	r2, r2, #8
 8008f54:	619a      	str	r2, [r3, #24]
}
 8008f56:	bf00      	nop
 8008f58:	3770      	adds	r7, #112	; 0x70
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}
 8008f5e:	bf00      	nop
 8008f60:	58000c00 	.word	0x58000c00

08008f64 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b09c      	sub	sp, #112	; 0x70
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008f72:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f7c:	2b22      	cmp	r3, #34	; 0x22
 8008f7e:	f040 80be 	bne.w	80090fe <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f88:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f90:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008f92:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8008f96:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008f9a:	4013      	ands	r3, r2
 8008f9c:	b29a      	uxth	r2, r3
 8008f9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008fa0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fa6:	1c9a      	adds	r2, r3, #2
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008fb2:	b29b      	uxth	r3, r3
 8008fb4:	3b01      	subs	r3, #1
 8008fb6:	b29a      	uxth	r2, r3
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008fc4:	b29b      	uxth	r3, r3
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	f040 80a1 	bne.w	800910e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fd4:	e853 3f00 	ldrex	r3, [r3]
 8008fd8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008fda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fdc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008fe0:	667b      	str	r3, [r7, #100]	; 0x64
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	461a      	mov	r2, r3
 8008fe8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008fea:	657b      	str	r3, [r7, #84]	; 0x54
 8008fec:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008ff0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008ff2:	e841 2300 	strex	r3, r2, [r1]
 8008ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008ff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d1e6      	bne.n	8008fcc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	3308      	adds	r3, #8
 8009004:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009008:	e853 3f00 	ldrex	r3, [r3]
 800900c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800900e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009010:	f023 0301 	bic.w	r3, r3, #1
 8009014:	663b      	str	r3, [r7, #96]	; 0x60
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	3308      	adds	r3, #8
 800901c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800901e:	643a      	str	r2, [r7, #64]	; 0x40
 8009020:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009022:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009024:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009026:	e841 2300 	strex	r3, r2, [r1]
 800902a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800902c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800902e:	2b00      	cmp	r3, #0
 8009030:	d1e5      	bne.n	8008ffe <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2220      	movs	r2, #32
 8009036:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2200      	movs	r2, #0
 800903e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2200      	movs	r2, #0
 8009044:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4a33      	ldr	r2, [pc, #204]	; (8009118 <UART_RxISR_16BIT+0x1b4>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d01f      	beq.n	8009090 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800905a:	2b00      	cmp	r3, #0
 800905c:	d018      	beq.n	8009090 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009064:	6a3b      	ldr	r3, [r7, #32]
 8009066:	e853 3f00 	ldrex	r3, [r3]
 800906a:	61fb      	str	r3, [r7, #28]
   return(result);
 800906c:	69fb      	ldr	r3, [r7, #28]
 800906e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009072:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	461a      	mov	r2, r3
 800907a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800907c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800907e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009080:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009082:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009084:	e841 2300 	strex	r3, r2, [r1]
 8009088:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800908a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800908c:	2b00      	cmp	r3, #0
 800908e:	d1e6      	bne.n	800905e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009094:	2b01      	cmp	r3, #1
 8009096:	d12e      	bne.n	80090f6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2200      	movs	r2, #0
 800909c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	e853 3f00 	ldrex	r3, [r3]
 80090aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	f023 0310 	bic.w	r3, r3, #16
 80090b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	461a      	mov	r2, r3
 80090ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80090bc:	61bb      	str	r3, [r7, #24]
 80090be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c0:	6979      	ldr	r1, [r7, #20]
 80090c2:	69ba      	ldr	r2, [r7, #24]
 80090c4:	e841 2300 	strex	r3, r2, [r1]
 80090c8:	613b      	str	r3, [r7, #16]
   return(result);
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d1e6      	bne.n	800909e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	69db      	ldr	r3, [r3, #28]
 80090d6:	f003 0310 	and.w	r3, r3, #16
 80090da:	2b10      	cmp	r3, #16
 80090dc:	d103      	bne.n	80090e6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	2210      	movs	r2, #16
 80090e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80090ec:	4619      	mov	r1, r3
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f7fe fc60 	bl	80079b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80090f4:	e00b      	b.n	800910e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f7f7 fc90 	bl	8000a1c <HAL_UART_RxCpltCallback>
}
 80090fc:	e007      	b.n	800910e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	699a      	ldr	r2, [r3, #24]
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f042 0208 	orr.w	r2, r2, #8
 800910c:	619a      	str	r2, [r3, #24]
}
 800910e:	bf00      	nop
 8009110:	3770      	adds	r7, #112	; 0x70
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}
 8009116:	bf00      	nop
 8009118:	58000c00 	.word	0x58000c00

0800911c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b0ac      	sub	sp, #176	; 0xb0
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800912a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	69db      	ldr	r3, [r3, #28]
 8009134:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	689b      	ldr	r3, [r3, #8]
 8009148:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009152:	2b22      	cmp	r3, #34	; 0x22
 8009154:	f040 8180 	bne.w	8009458 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800915e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009162:	e123      	b.n	80093ac <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800916a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800916e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8009172:	b2d9      	uxtb	r1, r3
 8009174:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009178:	b2da      	uxtb	r2, r3
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800917e:	400a      	ands	r2, r1
 8009180:	b2d2      	uxtb	r2, r2
 8009182:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009188:	1c5a      	adds	r2, r3, #1
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009194:	b29b      	uxth	r3, r3
 8009196:	3b01      	subs	r3, #1
 8009198:	b29a      	uxth	r2, r3
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	69db      	ldr	r3, [r3, #28]
 80091a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80091aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80091ae:	f003 0307 	and.w	r3, r3, #7
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d053      	beq.n	800925e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80091b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80091ba:	f003 0301 	and.w	r3, r3, #1
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d011      	beq.n	80091e6 <UART_RxISR_8BIT_FIFOEN+0xca>
 80091c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80091c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d00b      	beq.n	80091e6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	2201      	movs	r2, #1
 80091d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091dc:	f043 0201 	orr.w	r2, r3, #1
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80091e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80091ea:	f003 0302 	and.w	r3, r3, #2
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d011      	beq.n	8009216 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80091f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80091f6:	f003 0301 	and.w	r3, r3, #1
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d00b      	beq.n	8009216 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	2202      	movs	r2, #2
 8009204:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800920c:	f043 0204 	orr.w	r2, r3, #4
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009216:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800921a:	f003 0304 	and.w	r3, r3, #4
 800921e:	2b00      	cmp	r3, #0
 8009220:	d011      	beq.n	8009246 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009222:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009226:	f003 0301 	and.w	r3, r3, #1
 800922a:	2b00      	cmp	r3, #0
 800922c:	d00b      	beq.n	8009246 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	2204      	movs	r2, #4
 8009234:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800923c:	f043 0202 	orr.w	r2, r3, #2
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800924c:	2b00      	cmp	r3, #0
 800924e:	d006      	beq.n	800925e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f7fe fba5 	bl	80079a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2200      	movs	r2, #0
 800925a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009264:	b29b      	uxth	r3, r3
 8009266:	2b00      	cmp	r3, #0
 8009268:	f040 80a0 	bne.w	80093ac <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009272:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009274:	e853 3f00 	ldrex	r3, [r3]
 8009278:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800927a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800927c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009280:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	461a      	mov	r2, r3
 800928a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800928e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009290:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009292:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8009294:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009296:	e841 2300 	strex	r3, r2, [r1]
 800929a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800929c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d1e4      	bne.n	800926c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	3308      	adds	r3, #8
 80092a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092ac:	e853 3f00 	ldrex	r3, [r3]
 80092b0:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80092b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80092b4:	4b6e      	ldr	r3, [pc, #440]	; (8009470 <UART_RxISR_8BIT_FIFOEN+0x354>)
 80092b6:	4013      	ands	r3, r2
 80092b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	3308      	adds	r3, #8
 80092c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80092c6:	66ba      	str	r2, [r7, #104]	; 0x68
 80092c8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ca:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80092cc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80092ce:	e841 2300 	strex	r3, r2, [r1]
 80092d2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80092d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d1e3      	bne.n	80092a2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2220      	movs	r2, #32
 80092de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2200      	movs	r2, #0
 80092e6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2200      	movs	r2, #0
 80092ec:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	4a60      	ldr	r2, [pc, #384]	; (8009474 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d021      	beq.n	800933c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009302:	2b00      	cmp	r3, #0
 8009304:	d01a      	beq.n	800933c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800930c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800930e:	e853 3f00 	ldrex	r3, [r3]
 8009312:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009314:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009316:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800931a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	461a      	mov	r2, r3
 8009324:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009328:	657b      	str	r3, [r7, #84]	; 0x54
 800932a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800932c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800932e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009330:	e841 2300 	strex	r3, r2, [r1]
 8009334:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009336:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009338:	2b00      	cmp	r3, #0
 800933a:	d1e4      	bne.n	8009306 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009340:	2b01      	cmp	r3, #1
 8009342:	d130      	bne.n	80093a6 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2200      	movs	r2, #0
 8009348:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009352:	e853 3f00 	ldrex	r3, [r3]
 8009356:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800935a:	f023 0310 	bic.w	r3, r3, #16
 800935e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	461a      	mov	r2, r3
 8009368:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800936c:	643b      	str	r3, [r7, #64]	; 0x40
 800936e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009370:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009372:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009374:	e841 2300 	strex	r3, r2, [r1]
 8009378:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800937a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800937c:	2b00      	cmp	r3, #0
 800937e:	d1e4      	bne.n	800934a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	69db      	ldr	r3, [r3, #28]
 8009386:	f003 0310 	and.w	r3, r3, #16
 800938a:	2b10      	cmp	r3, #16
 800938c:	d103      	bne.n	8009396 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	2210      	movs	r2, #16
 8009394:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800939c:	4619      	mov	r1, r3
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f7fe fb08 	bl	80079b4 <HAL_UARTEx_RxEventCallback>
 80093a4:	e002      	b.n	80093ac <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f7f7 fb38 	bl	8000a1c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80093ac:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d006      	beq.n	80093c2 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80093b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80093b8:	f003 0320 	and.w	r3, r3, #32
 80093bc:	2b00      	cmp	r3, #0
 80093be:	f47f aed1 	bne.w	8009164 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80093c8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80093cc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d049      	beq.n	8009468 <UART_RxISR_8BIT_FIFOEN+0x34c>
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80093da:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80093de:	429a      	cmp	r2, r3
 80093e0:	d242      	bcs.n	8009468 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	3308      	adds	r3, #8
 80093e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ea:	6a3b      	ldr	r3, [r7, #32]
 80093ec:	e853 3f00 	ldrex	r3, [r3]
 80093f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80093f2:	69fb      	ldr	r3, [r7, #28]
 80093f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80093f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	3308      	adds	r3, #8
 8009402:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009406:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009408:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800940a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800940c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800940e:	e841 2300 	strex	r3, r2, [r1]
 8009412:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009416:	2b00      	cmp	r3, #0
 8009418:	d1e3      	bne.n	80093e2 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	4a16      	ldr	r2, [pc, #88]	; (8009478 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800941e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	e853 3f00 	ldrex	r3, [r3]
 800942c:	60bb      	str	r3, [r7, #8]
   return(result);
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	f043 0320 	orr.w	r3, r3, #32
 8009434:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	461a      	mov	r2, r3
 800943e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009442:	61bb      	str	r3, [r7, #24]
 8009444:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009446:	6979      	ldr	r1, [r7, #20]
 8009448:	69ba      	ldr	r2, [r7, #24]
 800944a:	e841 2300 	strex	r3, r2, [r1]
 800944e:	613b      	str	r3, [r7, #16]
   return(result);
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d1e4      	bne.n	8009420 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009456:	e007      	b.n	8009468 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	699a      	ldr	r2, [r3, #24]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f042 0208 	orr.w	r2, r2, #8
 8009466:	619a      	str	r2, [r3, #24]
}
 8009468:	bf00      	nop
 800946a:	37b0      	adds	r7, #176	; 0xb0
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}
 8009470:	effffffe 	.word	0xeffffffe
 8009474:	58000c00 	.word	0x58000c00
 8009478:	08008dad 	.word	0x08008dad

0800947c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b0ae      	sub	sp, #184	; 0xb8
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800948a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	69db      	ldr	r3, [r3, #28]
 8009494:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	689b      	ldr	r3, [r3, #8]
 80094a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094b2:	2b22      	cmp	r3, #34	; 0x22
 80094b4:	f040 8184 	bne.w	80097c0 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80094be:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80094c2:	e127      	b.n	8009714 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ca:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80094d6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80094da:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80094de:	4013      	ands	r3, r2
 80094e0:	b29a      	uxth	r2, r3
 80094e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80094e6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094ec:	1c9a      	adds	r2, r3, #2
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80094f8:	b29b      	uxth	r3, r3
 80094fa:	3b01      	subs	r3, #1
 80094fc:	b29a      	uxth	r2, r3
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	69db      	ldr	r3, [r3, #28]
 800950a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800950e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009512:	f003 0307 	and.w	r3, r3, #7
 8009516:	2b00      	cmp	r3, #0
 8009518:	d053      	beq.n	80095c2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800951a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800951e:	f003 0301 	and.w	r3, r3, #1
 8009522:	2b00      	cmp	r3, #0
 8009524:	d011      	beq.n	800954a <UART_RxISR_16BIT_FIFOEN+0xce>
 8009526:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800952a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800952e:	2b00      	cmp	r3, #0
 8009530:	d00b      	beq.n	800954a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	2201      	movs	r2, #1
 8009538:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009540:	f043 0201 	orr.w	r2, r3, #1
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800954a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800954e:	f003 0302 	and.w	r3, r3, #2
 8009552:	2b00      	cmp	r3, #0
 8009554:	d011      	beq.n	800957a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009556:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800955a:	f003 0301 	and.w	r3, r3, #1
 800955e:	2b00      	cmp	r3, #0
 8009560:	d00b      	beq.n	800957a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	2202      	movs	r2, #2
 8009568:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009570:	f043 0204 	orr.w	r2, r3, #4
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800957a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800957e:	f003 0304 	and.w	r3, r3, #4
 8009582:	2b00      	cmp	r3, #0
 8009584:	d011      	beq.n	80095aa <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009586:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800958a:	f003 0301 	and.w	r3, r3, #1
 800958e:	2b00      	cmp	r3, #0
 8009590:	d00b      	beq.n	80095aa <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	2204      	movs	r2, #4
 8009598:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095a0:	f043 0202 	orr.w	r2, r3, #2
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d006      	beq.n	80095c2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f7fe f9f3 	bl	80079a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2200      	movs	r2, #0
 80095be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80095c8:	b29b      	uxth	r3, r3
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	f040 80a2 	bne.w	8009714 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80095d8:	e853 3f00 	ldrex	r3, [r3]
 80095dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80095de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80095e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80095e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	461a      	mov	r2, r3
 80095ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80095f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80095f6:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80095fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80095fe:	e841 2300 	strex	r3, r2, [r1]
 8009602:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009604:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009606:	2b00      	cmp	r3, #0
 8009608:	d1e2      	bne.n	80095d0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	3308      	adds	r3, #8
 8009610:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009612:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009614:	e853 3f00 	ldrex	r3, [r3]
 8009618:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800961a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800961c:	4b6e      	ldr	r3, [pc, #440]	; (80097d8 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800961e:	4013      	ands	r3, r2
 8009620:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	3308      	adds	r3, #8
 800962a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800962e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009630:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009632:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009634:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009636:	e841 2300 	strex	r3, r2, [r1]
 800963a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800963c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800963e:	2b00      	cmp	r3, #0
 8009640:	d1e3      	bne.n	800960a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2220      	movs	r2, #32
 8009646:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2200      	movs	r2, #0
 800964e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2200      	movs	r2, #0
 8009654:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4a60      	ldr	r2, [pc, #384]	; (80097dc <UART_RxISR_16BIT_FIFOEN+0x360>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d021      	beq.n	80096a4 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	685b      	ldr	r3, [r3, #4]
 8009666:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800966a:	2b00      	cmp	r3, #0
 800966c:	d01a      	beq.n	80096a4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009676:	e853 3f00 	ldrex	r3, [r3]
 800967a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800967c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800967e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009682:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	461a      	mov	r2, r3
 800968c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009690:	65bb      	str	r3, [r7, #88]	; 0x58
 8009692:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009694:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009696:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009698:	e841 2300 	strex	r3, r2, [r1]
 800969c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800969e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d1e4      	bne.n	800966e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096a8:	2b01      	cmp	r3, #1
 80096aa:	d130      	bne.n	800970e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2200      	movs	r2, #0
 80096b0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ba:	e853 3f00 	ldrex	r3, [r3]
 80096be:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80096c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096c2:	f023 0310 	bic.w	r3, r3, #16
 80096c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	461a      	mov	r2, r3
 80096d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80096d4:	647b      	str	r3, [r7, #68]	; 0x44
 80096d6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80096da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80096dc:	e841 2300 	strex	r3, r2, [r1]
 80096e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80096e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d1e4      	bne.n	80096b2 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	69db      	ldr	r3, [r3, #28]
 80096ee:	f003 0310 	and.w	r3, r3, #16
 80096f2:	2b10      	cmp	r3, #16
 80096f4:	d103      	bne.n	80096fe <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	2210      	movs	r2, #16
 80096fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009704:	4619      	mov	r1, r3
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f7fe f954 	bl	80079b4 <HAL_UARTEx_RxEventCallback>
 800970c:	e002      	b.n	8009714 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f7f7 f984 	bl	8000a1c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009714:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8009718:	2b00      	cmp	r3, #0
 800971a:	d006      	beq.n	800972a <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800971c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009720:	f003 0320 	and.w	r3, r3, #32
 8009724:	2b00      	cmp	r3, #0
 8009726:	f47f aecd 	bne.w	80094c4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009730:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009734:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009738:	2b00      	cmp	r3, #0
 800973a:	d049      	beq.n	80097d0 <UART_RxISR_16BIT_FIFOEN+0x354>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009742:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8009746:	429a      	cmp	r2, r3
 8009748:	d242      	bcs.n	80097d0 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	3308      	adds	r3, #8
 8009750:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009754:	e853 3f00 	ldrex	r3, [r3]
 8009758:	623b      	str	r3, [r7, #32]
   return(result);
 800975a:	6a3b      	ldr	r3, [r7, #32]
 800975c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009760:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	3308      	adds	r3, #8
 800976a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800976e:	633a      	str	r2, [r7, #48]	; 0x30
 8009770:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009772:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009774:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009776:	e841 2300 	strex	r3, r2, [r1]
 800977a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800977c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800977e:	2b00      	cmp	r3, #0
 8009780:	d1e3      	bne.n	800974a <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	4a16      	ldr	r2, [pc, #88]	; (80097e0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009786:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	e853 3f00 	ldrex	r3, [r3]
 8009794:	60fb      	str	r3, [r7, #12]
   return(result);
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	f043 0320 	orr.w	r3, r3, #32
 800979c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	461a      	mov	r2, r3
 80097a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80097aa:	61fb      	str	r3, [r7, #28]
 80097ac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ae:	69b9      	ldr	r1, [r7, #24]
 80097b0:	69fa      	ldr	r2, [r7, #28]
 80097b2:	e841 2300 	strex	r3, r2, [r1]
 80097b6:	617b      	str	r3, [r7, #20]
   return(result);
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d1e4      	bne.n	8009788 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80097be:	e007      	b.n	80097d0 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	699a      	ldr	r2, [r3, #24]
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f042 0208 	orr.w	r2, r2, #8
 80097ce:	619a      	str	r2, [r3, #24]
}
 80097d0:	bf00      	nop
 80097d2:	37b8      	adds	r7, #184	; 0xb8
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}
 80097d8:	effffffe 	.word	0xeffffffe
 80097dc:	58000c00 	.word	0x58000c00
 80097e0:	08008f65 	.word	0x08008f65

080097e4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80097e4:	b480      	push	{r7}
 80097e6:	b083      	sub	sp, #12
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80097ec:	bf00      	nop
 80097ee:	370c      	adds	r7, #12
 80097f0:	46bd      	mov	sp, r7
 80097f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f6:	4770      	bx	lr

080097f8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80097f8:	b480      	push	{r7}
 80097fa:	b083      	sub	sp, #12
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009800:	bf00      	nop
 8009802:	370c      	adds	r7, #12
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr

0800980c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800980c:	b480      	push	{r7}
 800980e:	b083      	sub	sp, #12
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009814:	bf00      	nop
 8009816:	370c      	adds	r7, #12
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr

08009820 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009820:	b480      	push	{r7}
 8009822:	b085      	sub	sp, #20
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800982e:	2b01      	cmp	r3, #1
 8009830:	d101      	bne.n	8009836 <HAL_UARTEx_DisableFifoMode+0x16>
 8009832:	2302      	movs	r3, #2
 8009834:	e027      	b.n	8009886 <HAL_UARTEx_DisableFifoMode+0x66>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2201      	movs	r2, #1
 800983a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2224      	movs	r2, #36	; 0x24
 8009842:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	681a      	ldr	r2, [r3, #0]
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f022 0201 	bic.w	r2, r2, #1
 800985c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009864:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2200      	movs	r2, #0
 800986a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	68fa      	ldr	r2, [r7, #12]
 8009872:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2220      	movs	r2, #32
 8009878:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2200      	movs	r2, #0
 8009880:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009884:	2300      	movs	r3, #0
}
 8009886:	4618      	mov	r0, r3
 8009888:	3714      	adds	r7, #20
 800988a:	46bd      	mov	sp, r7
 800988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009890:	4770      	bx	lr

08009892 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009892:	b580      	push	{r7, lr}
 8009894:	b084      	sub	sp, #16
 8009896:	af00      	add	r7, sp, #0
 8009898:	6078      	str	r0, [r7, #4]
 800989a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80098a2:	2b01      	cmp	r3, #1
 80098a4:	d101      	bne.n	80098aa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80098a6:	2302      	movs	r3, #2
 80098a8:	e02d      	b.n	8009906 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2201      	movs	r2, #1
 80098ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2224      	movs	r2, #36	; 0x24
 80098b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	681a      	ldr	r2, [r3, #0]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f022 0201 	bic.w	r2, r2, #1
 80098d0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	689b      	ldr	r3, [r3, #8]
 80098d8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	683a      	ldr	r2, [r7, #0]
 80098e2:	430a      	orrs	r2, r1
 80098e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 f850 	bl	800998c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	68fa      	ldr	r2, [r7, #12]
 80098f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2220      	movs	r2, #32
 80098f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2200      	movs	r2, #0
 8009900:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009904:	2300      	movs	r3, #0
}
 8009906:	4618      	mov	r0, r3
 8009908:	3710      	adds	r7, #16
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}

0800990e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800990e:	b580      	push	{r7, lr}
 8009910:	b084      	sub	sp, #16
 8009912:	af00      	add	r7, sp, #0
 8009914:	6078      	str	r0, [r7, #4]
 8009916:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800991e:	2b01      	cmp	r3, #1
 8009920:	d101      	bne.n	8009926 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009922:	2302      	movs	r3, #2
 8009924:	e02d      	b.n	8009982 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2201      	movs	r2, #1
 800992a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2224      	movs	r2, #36	; 0x24
 8009932:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	681a      	ldr	r2, [r3, #0]
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f022 0201 	bic.w	r2, r2, #1
 800994c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	689b      	ldr	r3, [r3, #8]
 8009954:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	683a      	ldr	r2, [r7, #0]
 800995e:	430a      	orrs	r2, r1
 8009960:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f000 f812 	bl	800998c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	68fa      	ldr	r2, [r7, #12]
 800996e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2220      	movs	r2, #32
 8009974:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2200      	movs	r2, #0
 800997c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009980:	2300      	movs	r3, #0
}
 8009982:	4618      	mov	r0, r3
 8009984:	3710      	adds	r7, #16
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}
	...

0800998c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800998c:	b480      	push	{r7}
 800998e:	b085      	sub	sp, #20
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009998:	2b00      	cmp	r3, #0
 800999a:	d108      	bne.n	80099ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2201      	movs	r2, #1
 80099a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2201      	movs	r2, #1
 80099a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80099ac:	e031      	b.n	8009a12 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80099ae:	2310      	movs	r3, #16
 80099b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80099b2:	2310      	movs	r3, #16
 80099b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	689b      	ldr	r3, [r3, #8]
 80099bc:	0e5b      	lsrs	r3, r3, #25
 80099be:	b2db      	uxtb	r3, r3
 80099c0:	f003 0307 	and.w	r3, r3, #7
 80099c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	689b      	ldr	r3, [r3, #8]
 80099cc:	0f5b      	lsrs	r3, r3, #29
 80099ce:	b2db      	uxtb	r3, r3
 80099d0:	f003 0307 	and.w	r3, r3, #7
 80099d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80099d6:	7bbb      	ldrb	r3, [r7, #14]
 80099d8:	7b3a      	ldrb	r2, [r7, #12]
 80099da:	4911      	ldr	r1, [pc, #68]	; (8009a20 <UARTEx_SetNbDataToProcess+0x94>)
 80099dc:	5c8a      	ldrb	r2, [r1, r2]
 80099de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80099e2:	7b3a      	ldrb	r2, [r7, #12]
 80099e4:	490f      	ldr	r1, [pc, #60]	; (8009a24 <UARTEx_SetNbDataToProcess+0x98>)
 80099e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80099e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80099ec:	b29a      	uxth	r2, r3
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80099f4:	7bfb      	ldrb	r3, [r7, #15]
 80099f6:	7b7a      	ldrb	r2, [r7, #13]
 80099f8:	4909      	ldr	r1, [pc, #36]	; (8009a20 <UARTEx_SetNbDataToProcess+0x94>)
 80099fa:	5c8a      	ldrb	r2, [r1, r2]
 80099fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009a00:	7b7a      	ldrb	r2, [r7, #13]
 8009a02:	4908      	ldr	r1, [pc, #32]	; (8009a24 <UARTEx_SetNbDataToProcess+0x98>)
 8009a04:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a06:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a0a:	b29a      	uxth	r2, r3
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009a12:	bf00      	nop
 8009a14:	3714      	adds	r7, #20
 8009a16:	46bd      	mov	sp, r7
 8009a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1c:	4770      	bx	lr
 8009a1e:	bf00      	nop
 8009a20:	0800acdc 	.word	0x0800acdc
 8009a24:	0800ace4 	.word	0x0800ace4

08009a28 <atoi>:
 8009a28:	220a      	movs	r2, #10
 8009a2a:	2100      	movs	r1, #0
 8009a2c:	f000 b882 	b.w	8009b34 <strtol>

08009a30 <_strtol_l.constprop.0>:
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a36:	d001      	beq.n	8009a3c <_strtol_l.constprop.0+0xc>
 8009a38:	2b24      	cmp	r3, #36	; 0x24
 8009a3a:	d906      	bls.n	8009a4a <_strtol_l.constprop.0+0x1a>
 8009a3c:	f000 fada 	bl	8009ff4 <__errno>
 8009a40:	2316      	movs	r3, #22
 8009a42:	6003      	str	r3, [r0, #0]
 8009a44:	2000      	movs	r0, #0
 8009a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a4a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009b30 <_strtol_l.constprop.0+0x100>
 8009a4e:	460d      	mov	r5, r1
 8009a50:	462e      	mov	r6, r5
 8009a52:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a56:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8009a5a:	f017 0708 	ands.w	r7, r7, #8
 8009a5e:	d1f7      	bne.n	8009a50 <_strtol_l.constprop.0+0x20>
 8009a60:	2c2d      	cmp	r4, #45	; 0x2d
 8009a62:	d132      	bne.n	8009aca <_strtol_l.constprop.0+0x9a>
 8009a64:	782c      	ldrb	r4, [r5, #0]
 8009a66:	2701      	movs	r7, #1
 8009a68:	1cb5      	adds	r5, r6, #2
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d05b      	beq.n	8009b26 <_strtol_l.constprop.0+0xf6>
 8009a6e:	2b10      	cmp	r3, #16
 8009a70:	d109      	bne.n	8009a86 <_strtol_l.constprop.0+0x56>
 8009a72:	2c30      	cmp	r4, #48	; 0x30
 8009a74:	d107      	bne.n	8009a86 <_strtol_l.constprop.0+0x56>
 8009a76:	782c      	ldrb	r4, [r5, #0]
 8009a78:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009a7c:	2c58      	cmp	r4, #88	; 0x58
 8009a7e:	d14d      	bne.n	8009b1c <_strtol_l.constprop.0+0xec>
 8009a80:	786c      	ldrb	r4, [r5, #1]
 8009a82:	2310      	movs	r3, #16
 8009a84:	3502      	adds	r5, #2
 8009a86:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009a8a:	f108 38ff 	add.w	r8, r8, #4294967295
 8009a8e:	f04f 0e00 	mov.w	lr, #0
 8009a92:	fbb8 f9f3 	udiv	r9, r8, r3
 8009a96:	4676      	mov	r6, lr
 8009a98:	fb03 8a19 	mls	sl, r3, r9, r8
 8009a9c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009aa0:	f1bc 0f09 	cmp.w	ip, #9
 8009aa4:	d816      	bhi.n	8009ad4 <_strtol_l.constprop.0+0xa4>
 8009aa6:	4664      	mov	r4, ip
 8009aa8:	42a3      	cmp	r3, r4
 8009aaa:	dd24      	ble.n	8009af6 <_strtol_l.constprop.0+0xc6>
 8009aac:	f1be 3fff 	cmp.w	lr, #4294967295
 8009ab0:	d008      	beq.n	8009ac4 <_strtol_l.constprop.0+0x94>
 8009ab2:	45b1      	cmp	r9, r6
 8009ab4:	d31c      	bcc.n	8009af0 <_strtol_l.constprop.0+0xc0>
 8009ab6:	d101      	bne.n	8009abc <_strtol_l.constprop.0+0x8c>
 8009ab8:	45a2      	cmp	sl, r4
 8009aba:	db19      	blt.n	8009af0 <_strtol_l.constprop.0+0xc0>
 8009abc:	fb06 4603 	mla	r6, r6, r3, r4
 8009ac0:	f04f 0e01 	mov.w	lr, #1
 8009ac4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ac8:	e7e8      	b.n	8009a9c <_strtol_l.constprop.0+0x6c>
 8009aca:	2c2b      	cmp	r4, #43	; 0x2b
 8009acc:	bf04      	itt	eq
 8009ace:	782c      	ldrbeq	r4, [r5, #0]
 8009ad0:	1cb5      	addeq	r5, r6, #2
 8009ad2:	e7ca      	b.n	8009a6a <_strtol_l.constprop.0+0x3a>
 8009ad4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009ad8:	f1bc 0f19 	cmp.w	ip, #25
 8009adc:	d801      	bhi.n	8009ae2 <_strtol_l.constprop.0+0xb2>
 8009ade:	3c37      	subs	r4, #55	; 0x37
 8009ae0:	e7e2      	b.n	8009aa8 <_strtol_l.constprop.0+0x78>
 8009ae2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009ae6:	f1bc 0f19 	cmp.w	ip, #25
 8009aea:	d804      	bhi.n	8009af6 <_strtol_l.constprop.0+0xc6>
 8009aec:	3c57      	subs	r4, #87	; 0x57
 8009aee:	e7db      	b.n	8009aa8 <_strtol_l.constprop.0+0x78>
 8009af0:	f04f 3eff 	mov.w	lr, #4294967295
 8009af4:	e7e6      	b.n	8009ac4 <_strtol_l.constprop.0+0x94>
 8009af6:	f1be 3fff 	cmp.w	lr, #4294967295
 8009afa:	d105      	bne.n	8009b08 <_strtol_l.constprop.0+0xd8>
 8009afc:	2322      	movs	r3, #34	; 0x22
 8009afe:	6003      	str	r3, [r0, #0]
 8009b00:	4646      	mov	r6, r8
 8009b02:	b942      	cbnz	r2, 8009b16 <_strtol_l.constprop.0+0xe6>
 8009b04:	4630      	mov	r0, r6
 8009b06:	e79e      	b.n	8009a46 <_strtol_l.constprop.0+0x16>
 8009b08:	b107      	cbz	r7, 8009b0c <_strtol_l.constprop.0+0xdc>
 8009b0a:	4276      	negs	r6, r6
 8009b0c:	2a00      	cmp	r2, #0
 8009b0e:	d0f9      	beq.n	8009b04 <_strtol_l.constprop.0+0xd4>
 8009b10:	f1be 0f00 	cmp.w	lr, #0
 8009b14:	d000      	beq.n	8009b18 <_strtol_l.constprop.0+0xe8>
 8009b16:	1e69      	subs	r1, r5, #1
 8009b18:	6011      	str	r1, [r2, #0]
 8009b1a:	e7f3      	b.n	8009b04 <_strtol_l.constprop.0+0xd4>
 8009b1c:	2430      	movs	r4, #48	; 0x30
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d1b1      	bne.n	8009a86 <_strtol_l.constprop.0+0x56>
 8009b22:	2308      	movs	r3, #8
 8009b24:	e7af      	b.n	8009a86 <_strtol_l.constprop.0+0x56>
 8009b26:	2c30      	cmp	r4, #48	; 0x30
 8009b28:	d0a5      	beq.n	8009a76 <_strtol_l.constprop.0+0x46>
 8009b2a:	230a      	movs	r3, #10
 8009b2c:	e7ab      	b.n	8009a86 <_strtol_l.constprop.0+0x56>
 8009b2e:	bf00      	nop
 8009b30:	0800aced 	.word	0x0800aced

08009b34 <strtol>:
 8009b34:	4613      	mov	r3, r2
 8009b36:	460a      	mov	r2, r1
 8009b38:	4601      	mov	r1, r0
 8009b3a:	4802      	ldr	r0, [pc, #8]	; (8009b44 <strtol+0x10>)
 8009b3c:	6800      	ldr	r0, [r0, #0]
 8009b3e:	f7ff bf77 	b.w	8009a30 <_strtol_l.constprop.0>
 8009b42:	bf00      	nop
 8009b44:	24000068 	.word	0x24000068

08009b48 <std>:
 8009b48:	2300      	movs	r3, #0
 8009b4a:	b510      	push	{r4, lr}
 8009b4c:	4604      	mov	r4, r0
 8009b4e:	e9c0 3300 	strd	r3, r3, [r0]
 8009b52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b56:	6083      	str	r3, [r0, #8]
 8009b58:	8181      	strh	r1, [r0, #12]
 8009b5a:	6643      	str	r3, [r0, #100]	; 0x64
 8009b5c:	81c2      	strh	r2, [r0, #14]
 8009b5e:	6183      	str	r3, [r0, #24]
 8009b60:	4619      	mov	r1, r3
 8009b62:	2208      	movs	r2, #8
 8009b64:	305c      	adds	r0, #92	; 0x5c
 8009b66:	f000 f9f7 	bl	8009f58 <memset>
 8009b6a:	4b0d      	ldr	r3, [pc, #52]	; (8009ba0 <std+0x58>)
 8009b6c:	6263      	str	r3, [r4, #36]	; 0x24
 8009b6e:	4b0d      	ldr	r3, [pc, #52]	; (8009ba4 <std+0x5c>)
 8009b70:	62a3      	str	r3, [r4, #40]	; 0x28
 8009b72:	4b0d      	ldr	r3, [pc, #52]	; (8009ba8 <std+0x60>)
 8009b74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009b76:	4b0d      	ldr	r3, [pc, #52]	; (8009bac <std+0x64>)
 8009b78:	6323      	str	r3, [r4, #48]	; 0x30
 8009b7a:	4b0d      	ldr	r3, [pc, #52]	; (8009bb0 <std+0x68>)
 8009b7c:	6224      	str	r4, [r4, #32]
 8009b7e:	429c      	cmp	r4, r3
 8009b80:	d006      	beq.n	8009b90 <std+0x48>
 8009b82:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009b86:	4294      	cmp	r4, r2
 8009b88:	d002      	beq.n	8009b90 <std+0x48>
 8009b8a:	33d0      	adds	r3, #208	; 0xd0
 8009b8c:	429c      	cmp	r4, r3
 8009b8e:	d105      	bne.n	8009b9c <std+0x54>
 8009b90:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009b94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b98:	f000 ba56 	b.w	800a048 <__retarget_lock_init_recursive>
 8009b9c:	bd10      	pop	{r4, pc}
 8009b9e:	bf00      	nop
 8009ba0:	08009da9 	.word	0x08009da9
 8009ba4:	08009dcb 	.word	0x08009dcb
 8009ba8:	08009e03 	.word	0x08009e03
 8009bac:	08009e27 	.word	0x08009e27
 8009bb0:	2400043c 	.word	0x2400043c

08009bb4 <stdio_exit_handler>:
 8009bb4:	4a02      	ldr	r2, [pc, #8]	; (8009bc0 <stdio_exit_handler+0xc>)
 8009bb6:	4903      	ldr	r1, [pc, #12]	; (8009bc4 <stdio_exit_handler+0x10>)
 8009bb8:	4803      	ldr	r0, [pc, #12]	; (8009bc8 <stdio_exit_handler+0x14>)
 8009bba:	f000 b869 	b.w	8009c90 <_fwalk_sglue>
 8009bbe:	bf00      	nop
 8009bc0:	24000010 	.word	0x24000010
 8009bc4:	0800a8f5 	.word	0x0800a8f5
 8009bc8:	2400001c 	.word	0x2400001c

08009bcc <cleanup_stdio>:
 8009bcc:	6841      	ldr	r1, [r0, #4]
 8009bce:	4b0c      	ldr	r3, [pc, #48]	; (8009c00 <cleanup_stdio+0x34>)
 8009bd0:	4299      	cmp	r1, r3
 8009bd2:	b510      	push	{r4, lr}
 8009bd4:	4604      	mov	r4, r0
 8009bd6:	d001      	beq.n	8009bdc <cleanup_stdio+0x10>
 8009bd8:	f000 fe8c 	bl	800a8f4 <_fflush_r>
 8009bdc:	68a1      	ldr	r1, [r4, #8]
 8009bde:	4b09      	ldr	r3, [pc, #36]	; (8009c04 <cleanup_stdio+0x38>)
 8009be0:	4299      	cmp	r1, r3
 8009be2:	d002      	beq.n	8009bea <cleanup_stdio+0x1e>
 8009be4:	4620      	mov	r0, r4
 8009be6:	f000 fe85 	bl	800a8f4 <_fflush_r>
 8009bea:	68e1      	ldr	r1, [r4, #12]
 8009bec:	4b06      	ldr	r3, [pc, #24]	; (8009c08 <cleanup_stdio+0x3c>)
 8009bee:	4299      	cmp	r1, r3
 8009bf0:	d004      	beq.n	8009bfc <cleanup_stdio+0x30>
 8009bf2:	4620      	mov	r0, r4
 8009bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bf8:	f000 be7c 	b.w	800a8f4 <_fflush_r>
 8009bfc:	bd10      	pop	{r4, pc}
 8009bfe:	bf00      	nop
 8009c00:	2400043c 	.word	0x2400043c
 8009c04:	240004a4 	.word	0x240004a4
 8009c08:	2400050c 	.word	0x2400050c

08009c0c <global_stdio_init.part.0>:
 8009c0c:	b510      	push	{r4, lr}
 8009c0e:	4b0b      	ldr	r3, [pc, #44]	; (8009c3c <global_stdio_init.part.0+0x30>)
 8009c10:	4c0b      	ldr	r4, [pc, #44]	; (8009c40 <global_stdio_init.part.0+0x34>)
 8009c12:	4a0c      	ldr	r2, [pc, #48]	; (8009c44 <global_stdio_init.part.0+0x38>)
 8009c14:	601a      	str	r2, [r3, #0]
 8009c16:	4620      	mov	r0, r4
 8009c18:	2200      	movs	r2, #0
 8009c1a:	2104      	movs	r1, #4
 8009c1c:	f7ff ff94 	bl	8009b48 <std>
 8009c20:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009c24:	2201      	movs	r2, #1
 8009c26:	2109      	movs	r1, #9
 8009c28:	f7ff ff8e 	bl	8009b48 <std>
 8009c2c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009c30:	2202      	movs	r2, #2
 8009c32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c36:	2112      	movs	r1, #18
 8009c38:	f7ff bf86 	b.w	8009b48 <std>
 8009c3c:	24000574 	.word	0x24000574
 8009c40:	2400043c 	.word	0x2400043c
 8009c44:	08009bb5 	.word	0x08009bb5

08009c48 <__sfp_lock_acquire>:
 8009c48:	4801      	ldr	r0, [pc, #4]	; (8009c50 <__sfp_lock_acquire+0x8>)
 8009c4a:	f000 b9fe 	b.w	800a04a <__retarget_lock_acquire_recursive>
 8009c4e:	bf00      	nop
 8009c50:	2400057d 	.word	0x2400057d

08009c54 <__sfp_lock_release>:
 8009c54:	4801      	ldr	r0, [pc, #4]	; (8009c5c <__sfp_lock_release+0x8>)
 8009c56:	f000 b9f9 	b.w	800a04c <__retarget_lock_release_recursive>
 8009c5a:	bf00      	nop
 8009c5c:	2400057d 	.word	0x2400057d

08009c60 <__sinit>:
 8009c60:	b510      	push	{r4, lr}
 8009c62:	4604      	mov	r4, r0
 8009c64:	f7ff fff0 	bl	8009c48 <__sfp_lock_acquire>
 8009c68:	6a23      	ldr	r3, [r4, #32]
 8009c6a:	b11b      	cbz	r3, 8009c74 <__sinit+0x14>
 8009c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c70:	f7ff bff0 	b.w	8009c54 <__sfp_lock_release>
 8009c74:	4b04      	ldr	r3, [pc, #16]	; (8009c88 <__sinit+0x28>)
 8009c76:	6223      	str	r3, [r4, #32]
 8009c78:	4b04      	ldr	r3, [pc, #16]	; (8009c8c <__sinit+0x2c>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d1f5      	bne.n	8009c6c <__sinit+0xc>
 8009c80:	f7ff ffc4 	bl	8009c0c <global_stdio_init.part.0>
 8009c84:	e7f2      	b.n	8009c6c <__sinit+0xc>
 8009c86:	bf00      	nop
 8009c88:	08009bcd 	.word	0x08009bcd
 8009c8c:	24000574 	.word	0x24000574

08009c90 <_fwalk_sglue>:
 8009c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c94:	4607      	mov	r7, r0
 8009c96:	4688      	mov	r8, r1
 8009c98:	4614      	mov	r4, r2
 8009c9a:	2600      	movs	r6, #0
 8009c9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009ca0:	f1b9 0901 	subs.w	r9, r9, #1
 8009ca4:	d505      	bpl.n	8009cb2 <_fwalk_sglue+0x22>
 8009ca6:	6824      	ldr	r4, [r4, #0]
 8009ca8:	2c00      	cmp	r4, #0
 8009caa:	d1f7      	bne.n	8009c9c <_fwalk_sglue+0xc>
 8009cac:	4630      	mov	r0, r6
 8009cae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cb2:	89ab      	ldrh	r3, [r5, #12]
 8009cb4:	2b01      	cmp	r3, #1
 8009cb6:	d907      	bls.n	8009cc8 <_fwalk_sglue+0x38>
 8009cb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009cbc:	3301      	adds	r3, #1
 8009cbe:	d003      	beq.n	8009cc8 <_fwalk_sglue+0x38>
 8009cc0:	4629      	mov	r1, r5
 8009cc2:	4638      	mov	r0, r7
 8009cc4:	47c0      	blx	r8
 8009cc6:	4306      	orrs	r6, r0
 8009cc8:	3568      	adds	r5, #104	; 0x68
 8009cca:	e7e9      	b.n	8009ca0 <_fwalk_sglue+0x10>

08009ccc <iprintf>:
 8009ccc:	b40f      	push	{r0, r1, r2, r3}
 8009cce:	b507      	push	{r0, r1, r2, lr}
 8009cd0:	4906      	ldr	r1, [pc, #24]	; (8009cec <iprintf+0x20>)
 8009cd2:	ab04      	add	r3, sp, #16
 8009cd4:	6808      	ldr	r0, [r1, #0]
 8009cd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cda:	6881      	ldr	r1, [r0, #8]
 8009cdc:	9301      	str	r3, [sp, #4]
 8009cde:	f000 fad9 	bl	800a294 <_vfiprintf_r>
 8009ce2:	b003      	add	sp, #12
 8009ce4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ce8:	b004      	add	sp, #16
 8009cea:	4770      	bx	lr
 8009cec:	24000068 	.word	0x24000068

08009cf0 <_puts_r>:
 8009cf0:	6a03      	ldr	r3, [r0, #32]
 8009cf2:	b570      	push	{r4, r5, r6, lr}
 8009cf4:	6884      	ldr	r4, [r0, #8]
 8009cf6:	4605      	mov	r5, r0
 8009cf8:	460e      	mov	r6, r1
 8009cfa:	b90b      	cbnz	r3, 8009d00 <_puts_r+0x10>
 8009cfc:	f7ff ffb0 	bl	8009c60 <__sinit>
 8009d00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d02:	07db      	lsls	r3, r3, #31
 8009d04:	d405      	bmi.n	8009d12 <_puts_r+0x22>
 8009d06:	89a3      	ldrh	r3, [r4, #12]
 8009d08:	0598      	lsls	r0, r3, #22
 8009d0a:	d402      	bmi.n	8009d12 <_puts_r+0x22>
 8009d0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d0e:	f000 f99c 	bl	800a04a <__retarget_lock_acquire_recursive>
 8009d12:	89a3      	ldrh	r3, [r4, #12]
 8009d14:	0719      	lsls	r1, r3, #28
 8009d16:	d513      	bpl.n	8009d40 <_puts_r+0x50>
 8009d18:	6923      	ldr	r3, [r4, #16]
 8009d1a:	b18b      	cbz	r3, 8009d40 <_puts_r+0x50>
 8009d1c:	3e01      	subs	r6, #1
 8009d1e:	68a3      	ldr	r3, [r4, #8]
 8009d20:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009d24:	3b01      	subs	r3, #1
 8009d26:	60a3      	str	r3, [r4, #8]
 8009d28:	b9e9      	cbnz	r1, 8009d66 <_puts_r+0x76>
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	da2e      	bge.n	8009d8c <_puts_r+0x9c>
 8009d2e:	4622      	mov	r2, r4
 8009d30:	210a      	movs	r1, #10
 8009d32:	4628      	mov	r0, r5
 8009d34:	f000 f87b 	bl	8009e2e <__swbuf_r>
 8009d38:	3001      	adds	r0, #1
 8009d3a:	d007      	beq.n	8009d4c <_puts_r+0x5c>
 8009d3c:	250a      	movs	r5, #10
 8009d3e:	e007      	b.n	8009d50 <_puts_r+0x60>
 8009d40:	4621      	mov	r1, r4
 8009d42:	4628      	mov	r0, r5
 8009d44:	f000 f8b0 	bl	8009ea8 <__swsetup_r>
 8009d48:	2800      	cmp	r0, #0
 8009d4a:	d0e7      	beq.n	8009d1c <_puts_r+0x2c>
 8009d4c:	f04f 35ff 	mov.w	r5, #4294967295
 8009d50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d52:	07da      	lsls	r2, r3, #31
 8009d54:	d405      	bmi.n	8009d62 <_puts_r+0x72>
 8009d56:	89a3      	ldrh	r3, [r4, #12]
 8009d58:	059b      	lsls	r3, r3, #22
 8009d5a:	d402      	bmi.n	8009d62 <_puts_r+0x72>
 8009d5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d5e:	f000 f975 	bl	800a04c <__retarget_lock_release_recursive>
 8009d62:	4628      	mov	r0, r5
 8009d64:	bd70      	pop	{r4, r5, r6, pc}
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	da04      	bge.n	8009d74 <_puts_r+0x84>
 8009d6a:	69a2      	ldr	r2, [r4, #24]
 8009d6c:	429a      	cmp	r2, r3
 8009d6e:	dc06      	bgt.n	8009d7e <_puts_r+0x8e>
 8009d70:	290a      	cmp	r1, #10
 8009d72:	d004      	beq.n	8009d7e <_puts_r+0x8e>
 8009d74:	6823      	ldr	r3, [r4, #0]
 8009d76:	1c5a      	adds	r2, r3, #1
 8009d78:	6022      	str	r2, [r4, #0]
 8009d7a:	7019      	strb	r1, [r3, #0]
 8009d7c:	e7cf      	b.n	8009d1e <_puts_r+0x2e>
 8009d7e:	4622      	mov	r2, r4
 8009d80:	4628      	mov	r0, r5
 8009d82:	f000 f854 	bl	8009e2e <__swbuf_r>
 8009d86:	3001      	adds	r0, #1
 8009d88:	d1c9      	bne.n	8009d1e <_puts_r+0x2e>
 8009d8a:	e7df      	b.n	8009d4c <_puts_r+0x5c>
 8009d8c:	6823      	ldr	r3, [r4, #0]
 8009d8e:	250a      	movs	r5, #10
 8009d90:	1c5a      	adds	r2, r3, #1
 8009d92:	6022      	str	r2, [r4, #0]
 8009d94:	701d      	strb	r5, [r3, #0]
 8009d96:	e7db      	b.n	8009d50 <_puts_r+0x60>

08009d98 <puts>:
 8009d98:	4b02      	ldr	r3, [pc, #8]	; (8009da4 <puts+0xc>)
 8009d9a:	4601      	mov	r1, r0
 8009d9c:	6818      	ldr	r0, [r3, #0]
 8009d9e:	f7ff bfa7 	b.w	8009cf0 <_puts_r>
 8009da2:	bf00      	nop
 8009da4:	24000068 	.word	0x24000068

08009da8 <__sread>:
 8009da8:	b510      	push	{r4, lr}
 8009daa:	460c      	mov	r4, r1
 8009dac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009db0:	f000 f8fc 	bl	8009fac <_read_r>
 8009db4:	2800      	cmp	r0, #0
 8009db6:	bfab      	itete	ge
 8009db8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009dba:	89a3      	ldrhlt	r3, [r4, #12]
 8009dbc:	181b      	addge	r3, r3, r0
 8009dbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009dc2:	bfac      	ite	ge
 8009dc4:	6563      	strge	r3, [r4, #84]	; 0x54
 8009dc6:	81a3      	strhlt	r3, [r4, #12]
 8009dc8:	bd10      	pop	{r4, pc}

08009dca <__swrite>:
 8009dca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dce:	461f      	mov	r7, r3
 8009dd0:	898b      	ldrh	r3, [r1, #12]
 8009dd2:	05db      	lsls	r3, r3, #23
 8009dd4:	4605      	mov	r5, r0
 8009dd6:	460c      	mov	r4, r1
 8009dd8:	4616      	mov	r6, r2
 8009dda:	d505      	bpl.n	8009de8 <__swrite+0x1e>
 8009ddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009de0:	2302      	movs	r3, #2
 8009de2:	2200      	movs	r2, #0
 8009de4:	f000 f8d0 	bl	8009f88 <_lseek_r>
 8009de8:	89a3      	ldrh	r3, [r4, #12]
 8009dea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009dee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009df2:	81a3      	strh	r3, [r4, #12]
 8009df4:	4632      	mov	r2, r6
 8009df6:	463b      	mov	r3, r7
 8009df8:	4628      	mov	r0, r5
 8009dfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009dfe:	f000 b8e7 	b.w	8009fd0 <_write_r>

08009e02 <__sseek>:
 8009e02:	b510      	push	{r4, lr}
 8009e04:	460c      	mov	r4, r1
 8009e06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e0a:	f000 f8bd 	bl	8009f88 <_lseek_r>
 8009e0e:	1c43      	adds	r3, r0, #1
 8009e10:	89a3      	ldrh	r3, [r4, #12]
 8009e12:	bf15      	itete	ne
 8009e14:	6560      	strne	r0, [r4, #84]	; 0x54
 8009e16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009e1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009e1e:	81a3      	strheq	r3, [r4, #12]
 8009e20:	bf18      	it	ne
 8009e22:	81a3      	strhne	r3, [r4, #12]
 8009e24:	bd10      	pop	{r4, pc}

08009e26 <__sclose>:
 8009e26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e2a:	f000 b89d 	b.w	8009f68 <_close_r>

08009e2e <__swbuf_r>:
 8009e2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e30:	460e      	mov	r6, r1
 8009e32:	4614      	mov	r4, r2
 8009e34:	4605      	mov	r5, r0
 8009e36:	b118      	cbz	r0, 8009e40 <__swbuf_r+0x12>
 8009e38:	6a03      	ldr	r3, [r0, #32]
 8009e3a:	b90b      	cbnz	r3, 8009e40 <__swbuf_r+0x12>
 8009e3c:	f7ff ff10 	bl	8009c60 <__sinit>
 8009e40:	69a3      	ldr	r3, [r4, #24]
 8009e42:	60a3      	str	r3, [r4, #8]
 8009e44:	89a3      	ldrh	r3, [r4, #12]
 8009e46:	071a      	lsls	r2, r3, #28
 8009e48:	d525      	bpl.n	8009e96 <__swbuf_r+0x68>
 8009e4a:	6923      	ldr	r3, [r4, #16]
 8009e4c:	b31b      	cbz	r3, 8009e96 <__swbuf_r+0x68>
 8009e4e:	6823      	ldr	r3, [r4, #0]
 8009e50:	6922      	ldr	r2, [r4, #16]
 8009e52:	1a98      	subs	r0, r3, r2
 8009e54:	6963      	ldr	r3, [r4, #20]
 8009e56:	b2f6      	uxtb	r6, r6
 8009e58:	4283      	cmp	r3, r0
 8009e5a:	4637      	mov	r7, r6
 8009e5c:	dc04      	bgt.n	8009e68 <__swbuf_r+0x3a>
 8009e5e:	4621      	mov	r1, r4
 8009e60:	4628      	mov	r0, r5
 8009e62:	f000 fd47 	bl	800a8f4 <_fflush_r>
 8009e66:	b9e0      	cbnz	r0, 8009ea2 <__swbuf_r+0x74>
 8009e68:	68a3      	ldr	r3, [r4, #8]
 8009e6a:	3b01      	subs	r3, #1
 8009e6c:	60a3      	str	r3, [r4, #8]
 8009e6e:	6823      	ldr	r3, [r4, #0]
 8009e70:	1c5a      	adds	r2, r3, #1
 8009e72:	6022      	str	r2, [r4, #0]
 8009e74:	701e      	strb	r6, [r3, #0]
 8009e76:	6962      	ldr	r2, [r4, #20]
 8009e78:	1c43      	adds	r3, r0, #1
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	d004      	beq.n	8009e88 <__swbuf_r+0x5a>
 8009e7e:	89a3      	ldrh	r3, [r4, #12]
 8009e80:	07db      	lsls	r3, r3, #31
 8009e82:	d506      	bpl.n	8009e92 <__swbuf_r+0x64>
 8009e84:	2e0a      	cmp	r6, #10
 8009e86:	d104      	bne.n	8009e92 <__swbuf_r+0x64>
 8009e88:	4621      	mov	r1, r4
 8009e8a:	4628      	mov	r0, r5
 8009e8c:	f000 fd32 	bl	800a8f4 <_fflush_r>
 8009e90:	b938      	cbnz	r0, 8009ea2 <__swbuf_r+0x74>
 8009e92:	4638      	mov	r0, r7
 8009e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e96:	4621      	mov	r1, r4
 8009e98:	4628      	mov	r0, r5
 8009e9a:	f000 f805 	bl	8009ea8 <__swsetup_r>
 8009e9e:	2800      	cmp	r0, #0
 8009ea0:	d0d5      	beq.n	8009e4e <__swbuf_r+0x20>
 8009ea2:	f04f 37ff 	mov.w	r7, #4294967295
 8009ea6:	e7f4      	b.n	8009e92 <__swbuf_r+0x64>

08009ea8 <__swsetup_r>:
 8009ea8:	b538      	push	{r3, r4, r5, lr}
 8009eaa:	4b2a      	ldr	r3, [pc, #168]	; (8009f54 <__swsetup_r+0xac>)
 8009eac:	4605      	mov	r5, r0
 8009eae:	6818      	ldr	r0, [r3, #0]
 8009eb0:	460c      	mov	r4, r1
 8009eb2:	b118      	cbz	r0, 8009ebc <__swsetup_r+0x14>
 8009eb4:	6a03      	ldr	r3, [r0, #32]
 8009eb6:	b90b      	cbnz	r3, 8009ebc <__swsetup_r+0x14>
 8009eb8:	f7ff fed2 	bl	8009c60 <__sinit>
 8009ebc:	89a3      	ldrh	r3, [r4, #12]
 8009ebe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ec2:	0718      	lsls	r0, r3, #28
 8009ec4:	d422      	bmi.n	8009f0c <__swsetup_r+0x64>
 8009ec6:	06d9      	lsls	r1, r3, #27
 8009ec8:	d407      	bmi.n	8009eda <__swsetup_r+0x32>
 8009eca:	2309      	movs	r3, #9
 8009ecc:	602b      	str	r3, [r5, #0]
 8009ece:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009ed2:	81a3      	strh	r3, [r4, #12]
 8009ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ed8:	e034      	b.n	8009f44 <__swsetup_r+0x9c>
 8009eda:	0758      	lsls	r0, r3, #29
 8009edc:	d512      	bpl.n	8009f04 <__swsetup_r+0x5c>
 8009ede:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ee0:	b141      	cbz	r1, 8009ef4 <__swsetup_r+0x4c>
 8009ee2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ee6:	4299      	cmp	r1, r3
 8009ee8:	d002      	beq.n	8009ef0 <__swsetup_r+0x48>
 8009eea:	4628      	mov	r0, r5
 8009eec:	f000 f8b0 	bl	800a050 <_free_r>
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	6363      	str	r3, [r4, #52]	; 0x34
 8009ef4:	89a3      	ldrh	r3, [r4, #12]
 8009ef6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009efa:	81a3      	strh	r3, [r4, #12]
 8009efc:	2300      	movs	r3, #0
 8009efe:	6063      	str	r3, [r4, #4]
 8009f00:	6923      	ldr	r3, [r4, #16]
 8009f02:	6023      	str	r3, [r4, #0]
 8009f04:	89a3      	ldrh	r3, [r4, #12]
 8009f06:	f043 0308 	orr.w	r3, r3, #8
 8009f0a:	81a3      	strh	r3, [r4, #12]
 8009f0c:	6923      	ldr	r3, [r4, #16]
 8009f0e:	b94b      	cbnz	r3, 8009f24 <__swsetup_r+0x7c>
 8009f10:	89a3      	ldrh	r3, [r4, #12]
 8009f12:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009f16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f1a:	d003      	beq.n	8009f24 <__swsetup_r+0x7c>
 8009f1c:	4621      	mov	r1, r4
 8009f1e:	4628      	mov	r0, r5
 8009f20:	f000 fd36 	bl	800a990 <__smakebuf_r>
 8009f24:	89a0      	ldrh	r0, [r4, #12]
 8009f26:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f2a:	f010 0301 	ands.w	r3, r0, #1
 8009f2e:	d00a      	beq.n	8009f46 <__swsetup_r+0x9e>
 8009f30:	2300      	movs	r3, #0
 8009f32:	60a3      	str	r3, [r4, #8]
 8009f34:	6963      	ldr	r3, [r4, #20]
 8009f36:	425b      	negs	r3, r3
 8009f38:	61a3      	str	r3, [r4, #24]
 8009f3a:	6923      	ldr	r3, [r4, #16]
 8009f3c:	b943      	cbnz	r3, 8009f50 <__swsetup_r+0xa8>
 8009f3e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009f42:	d1c4      	bne.n	8009ece <__swsetup_r+0x26>
 8009f44:	bd38      	pop	{r3, r4, r5, pc}
 8009f46:	0781      	lsls	r1, r0, #30
 8009f48:	bf58      	it	pl
 8009f4a:	6963      	ldrpl	r3, [r4, #20]
 8009f4c:	60a3      	str	r3, [r4, #8]
 8009f4e:	e7f4      	b.n	8009f3a <__swsetup_r+0x92>
 8009f50:	2000      	movs	r0, #0
 8009f52:	e7f7      	b.n	8009f44 <__swsetup_r+0x9c>
 8009f54:	24000068 	.word	0x24000068

08009f58 <memset>:
 8009f58:	4402      	add	r2, r0
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d100      	bne.n	8009f62 <memset+0xa>
 8009f60:	4770      	bx	lr
 8009f62:	f803 1b01 	strb.w	r1, [r3], #1
 8009f66:	e7f9      	b.n	8009f5c <memset+0x4>

08009f68 <_close_r>:
 8009f68:	b538      	push	{r3, r4, r5, lr}
 8009f6a:	4d06      	ldr	r5, [pc, #24]	; (8009f84 <_close_r+0x1c>)
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	4604      	mov	r4, r0
 8009f70:	4608      	mov	r0, r1
 8009f72:	602b      	str	r3, [r5, #0]
 8009f74:	f7f7 fad1 	bl	800151a <_close>
 8009f78:	1c43      	adds	r3, r0, #1
 8009f7a:	d102      	bne.n	8009f82 <_close_r+0x1a>
 8009f7c:	682b      	ldr	r3, [r5, #0]
 8009f7e:	b103      	cbz	r3, 8009f82 <_close_r+0x1a>
 8009f80:	6023      	str	r3, [r4, #0]
 8009f82:	bd38      	pop	{r3, r4, r5, pc}
 8009f84:	24000578 	.word	0x24000578

08009f88 <_lseek_r>:
 8009f88:	b538      	push	{r3, r4, r5, lr}
 8009f8a:	4d07      	ldr	r5, [pc, #28]	; (8009fa8 <_lseek_r+0x20>)
 8009f8c:	4604      	mov	r4, r0
 8009f8e:	4608      	mov	r0, r1
 8009f90:	4611      	mov	r1, r2
 8009f92:	2200      	movs	r2, #0
 8009f94:	602a      	str	r2, [r5, #0]
 8009f96:	461a      	mov	r2, r3
 8009f98:	f7f7 fae6 	bl	8001568 <_lseek>
 8009f9c:	1c43      	adds	r3, r0, #1
 8009f9e:	d102      	bne.n	8009fa6 <_lseek_r+0x1e>
 8009fa0:	682b      	ldr	r3, [r5, #0]
 8009fa2:	b103      	cbz	r3, 8009fa6 <_lseek_r+0x1e>
 8009fa4:	6023      	str	r3, [r4, #0]
 8009fa6:	bd38      	pop	{r3, r4, r5, pc}
 8009fa8:	24000578 	.word	0x24000578

08009fac <_read_r>:
 8009fac:	b538      	push	{r3, r4, r5, lr}
 8009fae:	4d07      	ldr	r5, [pc, #28]	; (8009fcc <_read_r+0x20>)
 8009fb0:	4604      	mov	r4, r0
 8009fb2:	4608      	mov	r0, r1
 8009fb4:	4611      	mov	r1, r2
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	602a      	str	r2, [r5, #0]
 8009fba:	461a      	mov	r2, r3
 8009fbc:	f7f7 fa90 	bl	80014e0 <_read>
 8009fc0:	1c43      	adds	r3, r0, #1
 8009fc2:	d102      	bne.n	8009fca <_read_r+0x1e>
 8009fc4:	682b      	ldr	r3, [r5, #0]
 8009fc6:	b103      	cbz	r3, 8009fca <_read_r+0x1e>
 8009fc8:	6023      	str	r3, [r4, #0]
 8009fca:	bd38      	pop	{r3, r4, r5, pc}
 8009fcc:	24000578 	.word	0x24000578

08009fd0 <_write_r>:
 8009fd0:	b538      	push	{r3, r4, r5, lr}
 8009fd2:	4d07      	ldr	r5, [pc, #28]	; (8009ff0 <_write_r+0x20>)
 8009fd4:	4604      	mov	r4, r0
 8009fd6:	4608      	mov	r0, r1
 8009fd8:	4611      	mov	r1, r2
 8009fda:	2200      	movs	r2, #0
 8009fdc:	602a      	str	r2, [r5, #0]
 8009fde:	461a      	mov	r2, r3
 8009fe0:	f7f6 fb6c 	bl	80006bc <_write>
 8009fe4:	1c43      	adds	r3, r0, #1
 8009fe6:	d102      	bne.n	8009fee <_write_r+0x1e>
 8009fe8:	682b      	ldr	r3, [r5, #0]
 8009fea:	b103      	cbz	r3, 8009fee <_write_r+0x1e>
 8009fec:	6023      	str	r3, [r4, #0]
 8009fee:	bd38      	pop	{r3, r4, r5, pc}
 8009ff0:	24000578 	.word	0x24000578

08009ff4 <__errno>:
 8009ff4:	4b01      	ldr	r3, [pc, #4]	; (8009ffc <__errno+0x8>)
 8009ff6:	6818      	ldr	r0, [r3, #0]
 8009ff8:	4770      	bx	lr
 8009ffa:	bf00      	nop
 8009ffc:	24000068 	.word	0x24000068

0800a000 <__libc_init_array>:
 800a000:	b570      	push	{r4, r5, r6, lr}
 800a002:	4d0d      	ldr	r5, [pc, #52]	; (800a038 <__libc_init_array+0x38>)
 800a004:	4c0d      	ldr	r4, [pc, #52]	; (800a03c <__libc_init_array+0x3c>)
 800a006:	1b64      	subs	r4, r4, r5
 800a008:	10a4      	asrs	r4, r4, #2
 800a00a:	2600      	movs	r6, #0
 800a00c:	42a6      	cmp	r6, r4
 800a00e:	d109      	bne.n	800a024 <__libc_init_array+0x24>
 800a010:	4d0b      	ldr	r5, [pc, #44]	; (800a040 <__libc_init_array+0x40>)
 800a012:	4c0c      	ldr	r4, [pc, #48]	; (800a044 <__libc_init_array+0x44>)
 800a014:	f000 fd6e 	bl	800aaf4 <_init>
 800a018:	1b64      	subs	r4, r4, r5
 800a01a:	10a4      	asrs	r4, r4, #2
 800a01c:	2600      	movs	r6, #0
 800a01e:	42a6      	cmp	r6, r4
 800a020:	d105      	bne.n	800a02e <__libc_init_array+0x2e>
 800a022:	bd70      	pop	{r4, r5, r6, pc}
 800a024:	f855 3b04 	ldr.w	r3, [r5], #4
 800a028:	4798      	blx	r3
 800a02a:	3601      	adds	r6, #1
 800a02c:	e7ee      	b.n	800a00c <__libc_init_array+0xc>
 800a02e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a032:	4798      	blx	r3
 800a034:	3601      	adds	r6, #1
 800a036:	e7f2      	b.n	800a01e <__libc_init_array+0x1e>
 800a038:	0800ae28 	.word	0x0800ae28
 800a03c:	0800ae28 	.word	0x0800ae28
 800a040:	0800ae28 	.word	0x0800ae28
 800a044:	0800ae2c 	.word	0x0800ae2c

0800a048 <__retarget_lock_init_recursive>:
 800a048:	4770      	bx	lr

0800a04a <__retarget_lock_acquire_recursive>:
 800a04a:	4770      	bx	lr

0800a04c <__retarget_lock_release_recursive>:
 800a04c:	4770      	bx	lr
	...

0800a050 <_free_r>:
 800a050:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a052:	2900      	cmp	r1, #0
 800a054:	d044      	beq.n	800a0e0 <_free_r+0x90>
 800a056:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a05a:	9001      	str	r0, [sp, #4]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	f1a1 0404 	sub.w	r4, r1, #4
 800a062:	bfb8      	it	lt
 800a064:	18e4      	addlt	r4, r4, r3
 800a066:	f000 f8df 	bl	800a228 <__malloc_lock>
 800a06a:	4a1e      	ldr	r2, [pc, #120]	; (800a0e4 <_free_r+0x94>)
 800a06c:	9801      	ldr	r0, [sp, #4]
 800a06e:	6813      	ldr	r3, [r2, #0]
 800a070:	b933      	cbnz	r3, 800a080 <_free_r+0x30>
 800a072:	6063      	str	r3, [r4, #4]
 800a074:	6014      	str	r4, [r2, #0]
 800a076:	b003      	add	sp, #12
 800a078:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a07c:	f000 b8da 	b.w	800a234 <__malloc_unlock>
 800a080:	42a3      	cmp	r3, r4
 800a082:	d908      	bls.n	800a096 <_free_r+0x46>
 800a084:	6825      	ldr	r5, [r4, #0]
 800a086:	1961      	adds	r1, r4, r5
 800a088:	428b      	cmp	r3, r1
 800a08a:	bf01      	itttt	eq
 800a08c:	6819      	ldreq	r1, [r3, #0]
 800a08e:	685b      	ldreq	r3, [r3, #4]
 800a090:	1949      	addeq	r1, r1, r5
 800a092:	6021      	streq	r1, [r4, #0]
 800a094:	e7ed      	b.n	800a072 <_free_r+0x22>
 800a096:	461a      	mov	r2, r3
 800a098:	685b      	ldr	r3, [r3, #4]
 800a09a:	b10b      	cbz	r3, 800a0a0 <_free_r+0x50>
 800a09c:	42a3      	cmp	r3, r4
 800a09e:	d9fa      	bls.n	800a096 <_free_r+0x46>
 800a0a0:	6811      	ldr	r1, [r2, #0]
 800a0a2:	1855      	adds	r5, r2, r1
 800a0a4:	42a5      	cmp	r5, r4
 800a0a6:	d10b      	bne.n	800a0c0 <_free_r+0x70>
 800a0a8:	6824      	ldr	r4, [r4, #0]
 800a0aa:	4421      	add	r1, r4
 800a0ac:	1854      	adds	r4, r2, r1
 800a0ae:	42a3      	cmp	r3, r4
 800a0b0:	6011      	str	r1, [r2, #0]
 800a0b2:	d1e0      	bne.n	800a076 <_free_r+0x26>
 800a0b4:	681c      	ldr	r4, [r3, #0]
 800a0b6:	685b      	ldr	r3, [r3, #4]
 800a0b8:	6053      	str	r3, [r2, #4]
 800a0ba:	440c      	add	r4, r1
 800a0bc:	6014      	str	r4, [r2, #0]
 800a0be:	e7da      	b.n	800a076 <_free_r+0x26>
 800a0c0:	d902      	bls.n	800a0c8 <_free_r+0x78>
 800a0c2:	230c      	movs	r3, #12
 800a0c4:	6003      	str	r3, [r0, #0]
 800a0c6:	e7d6      	b.n	800a076 <_free_r+0x26>
 800a0c8:	6825      	ldr	r5, [r4, #0]
 800a0ca:	1961      	adds	r1, r4, r5
 800a0cc:	428b      	cmp	r3, r1
 800a0ce:	bf04      	itt	eq
 800a0d0:	6819      	ldreq	r1, [r3, #0]
 800a0d2:	685b      	ldreq	r3, [r3, #4]
 800a0d4:	6063      	str	r3, [r4, #4]
 800a0d6:	bf04      	itt	eq
 800a0d8:	1949      	addeq	r1, r1, r5
 800a0da:	6021      	streq	r1, [r4, #0]
 800a0dc:	6054      	str	r4, [r2, #4]
 800a0de:	e7ca      	b.n	800a076 <_free_r+0x26>
 800a0e0:	b003      	add	sp, #12
 800a0e2:	bd30      	pop	{r4, r5, pc}
 800a0e4:	24000580 	.word	0x24000580

0800a0e8 <sbrk_aligned>:
 800a0e8:	b570      	push	{r4, r5, r6, lr}
 800a0ea:	4e0e      	ldr	r6, [pc, #56]	; (800a124 <sbrk_aligned+0x3c>)
 800a0ec:	460c      	mov	r4, r1
 800a0ee:	6831      	ldr	r1, [r6, #0]
 800a0f0:	4605      	mov	r5, r0
 800a0f2:	b911      	cbnz	r1, 800a0fa <sbrk_aligned+0x12>
 800a0f4:	f000 fcaa 	bl	800aa4c <_sbrk_r>
 800a0f8:	6030      	str	r0, [r6, #0]
 800a0fa:	4621      	mov	r1, r4
 800a0fc:	4628      	mov	r0, r5
 800a0fe:	f000 fca5 	bl	800aa4c <_sbrk_r>
 800a102:	1c43      	adds	r3, r0, #1
 800a104:	d00a      	beq.n	800a11c <sbrk_aligned+0x34>
 800a106:	1cc4      	adds	r4, r0, #3
 800a108:	f024 0403 	bic.w	r4, r4, #3
 800a10c:	42a0      	cmp	r0, r4
 800a10e:	d007      	beq.n	800a120 <sbrk_aligned+0x38>
 800a110:	1a21      	subs	r1, r4, r0
 800a112:	4628      	mov	r0, r5
 800a114:	f000 fc9a 	bl	800aa4c <_sbrk_r>
 800a118:	3001      	adds	r0, #1
 800a11a:	d101      	bne.n	800a120 <sbrk_aligned+0x38>
 800a11c:	f04f 34ff 	mov.w	r4, #4294967295
 800a120:	4620      	mov	r0, r4
 800a122:	bd70      	pop	{r4, r5, r6, pc}
 800a124:	24000584 	.word	0x24000584

0800a128 <_malloc_r>:
 800a128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a12c:	1ccd      	adds	r5, r1, #3
 800a12e:	f025 0503 	bic.w	r5, r5, #3
 800a132:	3508      	adds	r5, #8
 800a134:	2d0c      	cmp	r5, #12
 800a136:	bf38      	it	cc
 800a138:	250c      	movcc	r5, #12
 800a13a:	2d00      	cmp	r5, #0
 800a13c:	4607      	mov	r7, r0
 800a13e:	db01      	blt.n	800a144 <_malloc_r+0x1c>
 800a140:	42a9      	cmp	r1, r5
 800a142:	d905      	bls.n	800a150 <_malloc_r+0x28>
 800a144:	230c      	movs	r3, #12
 800a146:	603b      	str	r3, [r7, #0]
 800a148:	2600      	movs	r6, #0
 800a14a:	4630      	mov	r0, r6
 800a14c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a150:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a224 <_malloc_r+0xfc>
 800a154:	f000 f868 	bl	800a228 <__malloc_lock>
 800a158:	f8d8 3000 	ldr.w	r3, [r8]
 800a15c:	461c      	mov	r4, r3
 800a15e:	bb5c      	cbnz	r4, 800a1b8 <_malloc_r+0x90>
 800a160:	4629      	mov	r1, r5
 800a162:	4638      	mov	r0, r7
 800a164:	f7ff ffc0 	bl	800a0e8 <sbrk_aligned>
 800a168:	1c43      	adds	r3, r0, #1
 800a16a:	4604      	mov	r4, r0
 800a16c:	d155      	bne.n	800a21a <_malloc_r+0xf2>
 800a16e:	f8d8 4000 	ldr.w	r4, [r8]
 800a172:	4626      	mov	r6, r4
 800a174:	2e00      	cmp	r6, #0
 800a176:	d145      	bne.n	800a204 <_malloc_r+0xdc>
 800a178:	2c00      	cmp	r4, #0
 800a17a:	d048      	beq.n	800a20e <_malloc_r+0xe6>
 800a17c:	6823      	ldr	r3, [r4, #0]
 800a17e:	4631      	mov	r1, r6
 800a180:	4638      	mov	r0, r7
 800a182:	eb04 0903 	add.w	r9, r4, r3
 800a186:	f000 fc61 	bl	800aa4c <_sbrk_r>
 800a18a:	4581      	cmp	r9, r0
 800a18c:	d13f      	bne.n	800a20e <_malloc_r+0xe6>
 800a18e:	6821      	ldr	r1, [r4, #0]
 800a190:	1a6d      	subs	r5, r5, r1
 800a192:	4629      	mov	r1, r5
 800a194:	4638      	mov	r0, r7
 800a196:	f7ff ffa7 	bl	800a0e8 <sbrk_aligned>
 800a19a:	3001      	adds	r0, #1
 800a19c:	d037      	beq.n	800a20e <_malloc_r+0xe6>
 800a19e:	6823      	ldr	r3, [r4, #0]
 800a1a0:	442b      	add	r3, r5
 800a1a2:	6023      	str	r3, [r4, #0]
 800a1a4:	f8d8 3000 	ldr.w	r3, [r8]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d038      	beq.n	800a21e <_malloc_r+0xf6>
 800a1ac:	685a      	ldr	r2, [r3, #4]
 800a1ae:	42a2      	cmp	r2, r4
 800a1b0:	d12b      	bne.n	800a20a <_malloc_r+0xe2>
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	605a      	str	r2, [r3, #4]
 800a1b6:	e00f      	b.n	800a1d8 <_malloc_r+0xb0>
 800a1b8:	6822      	ldr	r2, [r4, #0]
 800a1ba:	1b52      	subs	r2, r2, r5
 800a1bc:	d41f      	bmi.n	800a1fe <_malloc_r+0xd6>
 800a1be:	2a0b      	cmp	r2, #11
 800a1c0:	d917      	bls.n	800a1f2 <_malloc_r+0xca>
 800a1c2:	1961      	adds	r1, r4, r5
 800a1c4:	42a3      	cmp	r3, r4
 800a1c6:	6025      	str	r5, [r4, #0]
 800a1c8:	bf18      	it	ne
 800a1ca:	6059      	strne	r1, [r3, #4]
 800a1cc:	6863      	ldr	r3, [r4, #4]
 800a1ce:	bf08      	it	eq
 800a1d0:	f8c8 1000 	streq.w	r1, [r8]
 800a1d4:	5162      	str	r2, [r4, r5]
 800a1d6:	604b      	str	r3, [r1, #4]
 800a1d8:	4638      	mov	r0, r7
 800a1da:	f104 060b 	add.w	r6, r4, #11
 800a1de:	f000 f829 	bl	800a234 <__malloc_unlock>
 800a1e2:	f026 0607 	bic.w	r6, r6, #7
 800a1e6:	1d23      	adds	r3, r4, #4
 800a1e8:	1af2      	subs	r2, r6, r3
 800a1ea:	d0ae      	beq.n	800a14a <_malloc_r+0x22>
 800a1ec:	1b9b      	subs	r3, r3, r6
 800a1ee:	50a3      	str	r3, [r4, r2]
 800a1f0:	e7ab      	b.n	800a14a <_malloc_r+0x22>
 800a1f2:	42a3      	cmp	r3, r4
 800a1f4:	6862      	ldr	r2, [r4, #4]
 800a1f6:	d1dd      	bne.n	800a1b4 <_malloc_r+0x8c>
 800a1f8:	f8c8 2000 	str.w	r2, [r8]
 800a1fc:	e7ec      	b.n	800a1d8 <_malloc_r+0xb0>
 800a1fe:	4623      	mov	r3, r4
 800a200:	6864      	ldr	r4, [r4, #4]
 800a202:	e7ac      	b.n	800a15e <_malloc_r+0x36>
 800a204:	4634      	mov	r4, r6
 800a206:	6876      	ldr	r6, [r6, #4]
 800a208:	e7b4      	b.n	800a174 <_malloc_r+0x4c>
 800a20a:	4613      	mov	r3, r2
 800a20c:	e7cc      	b.n	800a1a8 <_malloc_r+0x80>
 800a20e:	230c      	movs	r3, #12
 800a210:	603b      	str	r3, [r7, #0]
 800a212:	4638      	mov	r0, r7
 800a214:	f000 f80e 	bl	800a234 <__malloc_unlock>
 800a218:	e797      	b.n	800a14a <_malloc_r+0x22>
 800a21a:	6025      	str	r5, [r4, #0]
 800a21c:	e7dc      	b.n	800a1d8 <_malloc_r+0xb0>
 800a21e:	605b      	str	r3, [r3, #4]
 800a220:	deff      	udf	#255	; 0xff
 800a222:	bf00      	nop
 800a224:	24000580 	.word	0x24000580

0800a228 <__malloc_lock>:
 800a228:	4801      	ldr	r0, [pc, #4]	; (800a230 <__malloc_lock+0x8>)
 800a22a:	f7ff bf0e 	b.w	800a04a <__retarget_lock_acquire_recursive>
 800a22e:	bf00      	nop
 800a230:	2400057c 	.word	0x2400057c

0800a234 <__malloc_unlock>:
 800a234:	4801      	ldr	r0, [pc, #4]	; (800a23c <__malloc_unlock+0x8>)
 800a236:	f7ff bf09 	b.w	800a04c <__retarget_lock_release_recursive>
 800a23a:	bf00      	nop
 800a23c:	2400057c 	.word	0x2400057c

0800a240 <__sfputc_r>:
 800a240:	6893      	ldr	r3, [r2, #8]
 800a242:	3b01      	subs	r3, #1
 800a244:	2b00      	cmp	r3, #0
 800a246:	b410      	push	{r4}
 800a248:	6093      	str	r3, [r2, #8]
 800a24a:	da08      	bge.n	800a25e <__sfputc_r+0x1e>
 800a24c:	6994      	ldr	r4, [r2, #24]
 800a24e:	42a3      	cmp	r3, r4
 800a250:	db01      	blt.n	800a256 <__sfputc_r+0x16>
 800a252:	290a      	cmp	r1, #10
 800a254:	d103      	bne.n	800a25e <__sfputc_r+0x1e>
 800a256:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a25a:	f7ff bde8 	b.w	8009e2e <__swbuf_r>
 800a25e:	6813      	ldr	r3, [r2, #0]
 800a260:	1c58      	adds	r0, r3, #1
 800a262:	6010      	str	r0, [r2, #0]
 800a264:	7019      	strb	r1, [r3, #0]
 800a266:	4608      	mov	r0, r1
 800a268:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a26c:	4770      	bx	lr

0800a26e <__sfputs_r>:
 800a26e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a270:	4606      	mov	r6, r0
 800a272:	460f      	mov	r7, r1
 800a274:	4614      	mov	r4, r2
 800a276:	18d5      	adds	r5, r2, r3
 800a278:	42ac      	cmp	r4, r5
 800a27a:	d101      	bne.n	800a280 <__sfputs_r+0x12>
 800a27c:	2000      	movs	r0, #0
 800a27e:	e007      	b.n	800a290 <__sfputs_r+0x22>
 800a280:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a284:	463a      	mov	r2, r7
 800a286:	4630      	mov	r0, r6
 800a288:	f7ff ffda 	bl	800a240 <__sfputc_r>
 800a28c:	1c43      	adds	r3, r0, #1
 800a28e:	d1f3      	bne.n	800a278 <__sfputs_r+0xa>
 800a290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a294 <_vfiprintf_r>:
 800a294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a298:	460d      	mov	r5, r1
 800a29a:	b09d      	sub	sp, #116	; 0x74
 800a29c:	4614      	mov	r4, r2
 800a29e:	4698      	mov	r8, r3
 800a2a0:	4606      	mov	r6, r0
 800a2a2:	b118      	cbz	r0, 800a2ac <_vfiprintf_r+0x18>
 800a2a4:	6a03      	ldr	r3, [r0, #32]
 800a2a6:	b90b      	cbnz	r3, 800a2ac <_vfiprintf_r+0x18>
 800a2a8:	f7ff fcda 	bl	8009c60 <__sinit>
 800a2ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2ae:	07d9      	lsls	r1, r3, #31
 800a2b0:	d405      	bmi.n	800a2be <_vfiprintf_r+0x2a>
 800a2b2:	89ab      	ldrh	r3, [r5, #12]
 800a2b4:	059a      	lsls	r2, r3, #22
 800a2b6:	d402      	bmi.n	800a2be <_vfiprintf_r+0x2a>
 800a2b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2ba:	f7ff fec6 	bl	800a04a <__retarget_lock_acquire_recursive>
 800a2be:	89ab      	ldrh	r3, [r5, #12]
 800a2c0:	071b      	lsls	r3, r3, #28
 800a2c2:	d501      	bpl.n	800a2c8 <_vfiprintf_r+0x34>
 800a2c4:	692b      	ldr	r3, [r5, #16]
 800a2c6:	b99b      	cbnz	r3, 800a2f0 <_vfiprintf_r+0x5c>
 800a2c8:	4629      	mov	r1, r5
 800a2ca:	4630      	mov	r0, r6
 800a2cc:	f7ff fdec 	bl	8009ea8 <__swsetup_r>
 800a2d0:	b170      	cbz	r0, 800a2f0 <_vfiprintf_r+0x5c>
 800a2d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2d4:	07dc      	lsls	r4, r3, #31
 800a2d6:	d504      	bpl.n	800a2e2 <_vfiprintf_r+0x4e>
 800a2d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a2dc:	b01d      	add	sp, #116	; 0x74
 800a2de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2e2:	89ab      	ldrh	r3, [r5, #12]
 800a2e4:	0598      	lsls	r0, r3, #22
 800a2e6:	d4f7      	bmi.n	800a2d8 <_vfiprintf_r+0x44>
 800a2e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2ea:	f7ff feaf 	bl	800a04c <__retarget_lock_release_recursive>
 800a2ee:	e7f3      	b.n	800a2d8 <_vfiprintf_r+0x44>
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	9309      	str	r3, [sp, #36]	; 0x24
 800a2f4:	2320      	movs	r3, #32
 800a2f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a2fa:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2fe:	2330      	movs	r3, #48	; 0x30
 800a300:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a4b4 <_vfiprintf_r+0x220>
 800a304:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a308:	f04f 0901 	mov.w	r9, #1
 800a30c:	4623      	mov	r3, r4
 800a30e:	469a      	mov	sl, r3
 800a310:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a314:	b10a      	cbz	r2, 800a31a <_vfiprintf_r+0x86>
 800a316:	2a25      	cmp	r2, #37	; 0x25
 800a318:	d1f9      	bne.n	800a30e <_vfiprintf_r+0x7a>
 800a31a:	ebba 0b04 	subs.w	fp, sl, r4
 800a31e:	d00b      	beq.n	800a338 <_vfiprintf_r+0xa4>
 800a320:	465b      	mov	r3, fp
 800a322:	4622      	mov	r2, r4
 800a324:	4629      	mov	r1, r5
 800a326:	4630      	mov	r0, r6
 800a328:	f7ff ffa1 	bl	800a26e <__sfputs_r>
 800a32c:	3001      	adds	r0, #1
 800a32e:	f000 80a9 	beq.w	800a484 <_vfiprintf_r+0x1f0>
 800a332:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a334:	445a      	add	r2, fp
 800a336:	9209      	str	r2, [sp, #36]	; 0x24
 800a338:	f89a 3000 	ldrb.w	r3, [sl]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	f000 80a1 	beq.w	800a484 <_vfiprintf_r+0x1f0>
 800a342:	2300      	movs	r3, #0
 800a344:	f04f 32ff 	mov.w	r2, #4294967295
 800a348:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a34c:	f10a 0a01 	add.w	sl, sl, #1
 800a350:	9304      	str	r3, [sp, #16]
 800a352:	9307      	str	r3, [sp, #28]
 800a354:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a358:	931a      	str	r3, [sp, #104]	; 0x68
 800a35a:	4654      	mov	r4, sl
 800a35c:	2205      	movs	r2, #5
 800a35e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a362:	4854      	ldr	r0, [pc, #336]	; (800a4b4 <_vfiprintf_r+0x220>)
 800a364:	f7f5 ffdc 	bl	8000320 <memchr>
 800a368:	9a04      	ldr	r2, [sp, #16]
 800a36a:	b9d8      	cbnz	r0, 800a3a4 <_vfiprintf_r+0x110>
 800a36c:	06d1      	lsls	r1, r2, #27
 800a36e:	bf44      	itt	mi
 800a370:	2320      	movmi	r3, #32
 800a372:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a376:	0713      	lsls	r3, r2, #28
 800a378:	bf44      	itt	mi
 800a37a:	232b      	movmi	r3, #43	; 0x2b
 800a37c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a380:	f89a 3000 	ldrb.w	r3, [sl]
 800a384:	2b2a      	cmp	r3, #42	; 0x2a
 800a386:	d015      	beq.n	800a3b4 <_vfiprintf_r+0x120>
 800a388:	9a07      	ldr	r2, [sp, #28]
 800a38a:	4654      	mov	r4, sl
 800a38c:	2000      	movs	r0, #0
 800a38e:	f04f 0c0a 	mov.w	ip, #10
 800a392:	4621      	mov	r1, r4
 800a394:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a398:	3b30      	subs	r3, #48	; 0x30
 800a39a:	2b09      	cmp	r3, #9
 800a39c:	d94d      	bls.n	800a43a <_vfiprintf_r+0x1a6>
 800a39e:	b1b0      	cbz	r0, 800a3ce <_vfiprintf_r+0x13a>
 800a3a0:	9207      	str	r2, [sp, #28]
 800a3a2:	e014      	b.n	800a3ce <_vfiprintf_r+0x13a>
 800a3a4:	eba0 0308 	sub.w	r3, r0, r8
 800a3a8:	fa09 f303 	lsl.w	r3, r9, r3
 800a3ac:	4313      	orrs	r3, r2
 800a3ae:	9304      	str	r3, [sp, #16]
 800a3b0:	46a2      	mov	sl, r4
 800a3b2:	e7d2      	b.n	800a35a <_vfiprintf_r+0xc6>
 800a3b4:	9b03      	ldr	r3, [sp, #12]
 800a3b6:	1d19      	adds	r1, r3, #4
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	9103      	str	r1, [sp, #12]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	bfbb      	ittet	lt
 800a3c0:	425b      	neglt	r3, r3
 800a3c2:	f042 0202 	orrlt.w	r2, r2, #2
 800a3c6:	9307      	strge	r3, [sp, #28]
 800a3c8:	9307      	strlt	r3, [sp, #28]
 800a3ca:	bfb8      	it	lt
 800a3cc:	9204      	strlt	r2, [sp, #16]
 800a3ce:	7823      	ldrb	r3, [r4, #0]
 800a3d0:	2b2e      	cmp	r3, #46	; 0x2e
 800a3d2:	d10c      	bne.n	800a3ee <_vfiprintf_r+0x15a>
 800a3d4:	7863      	ldrb	r3, [r4, #1]
 800a3d6:	2b2a      	cmp	r3, #42	; 0x2a
 800a3d8:	d134      	bne.n	800a444 <_vfiprintf_r+0x1b0>
 800a3da:	9b03      	ldr	r3, [sp, #12]
 800a3dc:	1d1a      	adds	r2, r3, #4
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	9203      	str	r2, [sp, #12]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	bfb8      	it	lt
 800a3e6:	f04f 33ff 	movlt.w	r3, #4294967295
 800a3ea:	3402      	adds	r4, #2
 800a3ec:	9305      	str	r3, [sp, #20]
 800a3ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a4c4 <_vfiprintf_r+0x230>
 800a3f2:	7821      	ldrb	r1, [r4, #0]
 800a3f4:	2203      	movs	r2, #3
 800a3f6:	4650      	mov	r0, sl
 800a3f8:	f7f5 ff92 	bl	8000320 <memchr>
 800a3fc:	b138      	cbz	r0, 800a40e <_vfiprintf_r+0x17a>
 800a3fe:	9b04      	ldr	r3, [sp, #16]
 800a400:	eba0 000a 	sub.w	r0, r0, sl
 800a404:	2240      	movs	r2, #64	; 0x40
 800a406:	4082      	lsls	r2, r0
 800a408:	4313      	orrs	r3, r2
 800a40a:	3401      	adds	r4, #1
 800a40c:	9304      	str	r3, [sp, #16]
 800a40e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a412:	4829      	ldr	r0, [pc, #164]	; (800a4b8 <_vfiprintf_r+0x224>)
 800a414:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a418:	2206      	movs	r2, #6
 800a41a:	f7f5 ff81 	bl	8000320 <memchr>
 800a41e:	2800      	cmp	r0, #0
 800a420:	d03f      	beq.n	800a4a2 <_vfiprintf_r+0x20e>
 800a422:	4b26      	ldr	r3, [pc, #152]	; (800a4bc <_vfiprintf_r+0x228>)
 800a424:	bb1b      	cbnz	r3, 800a46e <_vfiprintf_r+0x1da>
 800a426:	9b03      	ldr	r3, [sp, #12]
 800a428:	3307      	adds	r3, #7
 800a42a:	f023 0307 	bic.w	r3, r3, #7
 800a42e:	3308      	adds	r3, #8
 800a430:	9303      	str	r3, [sp, #12]
 800a432:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a434:	443b      	add	r3, r7
 800a436:	9309      	str	r3, [sp, #36]	; 0x24
 800a438:	e768      	b.n	800a30c <_vfiprintf_r+0x78>
 800a43a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a43e:	460c      	mov	r4, r1
 800a440:	2001      	movs	r0, #1
 800a442:	e7a6      	b.n	800a392 <_vfiprintf_r+0xfe>
 800a444:	2300      	movs	r3, #0
 800a446:	3401      	adds	r4, #1
 800a448:	9305      	str	r3, [sp, #20]
 800a44a:	4619      	mov	r1, r3
 800a44c:	f04f 0c0a 	mov.w	ip, #10
 800a450:	4620      	mov	r0, r4
 800a452:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a456:	3a30      	subs	r2, #48	; 0x30
 800a458:	2a09      	cmp	r2, #9
 800a45a:	d903      	bls.n	800a464 <_vfiprintf_r+0x1d0>
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d0c6      	beq.n	800a3ee <_vfiprintf_r+0x15a>
 800a460:	9105      	str	r1, [sp, #20]
 800a462:	e7c4      	b.n	800a3ee <_vfiprintf_r+0x15a>
 800a464:	fb0c 2101 	mla	r1, ip, r1, r2
 800a468:	4604      	mov	r4, r0
 800a46a:	2301      	movs	r3, #1
 800a46c:	e7f0      	b.n	800a450 <_vfiprintf_r+0x1bc>
 800a46e:	ab03      	add	r3, sp, #12
 800a470:	9300      	str	r3, [sp, #0]
 800a472:	462a      	mov	r2, r5
 800a474:	4b12      	ldr	r3, [pc, #72]	; (800a4c0 <_vfiprintf_r+0x22c>)
 800a476:	a904      	add	r1, sp, #16
 800a478:	4630      	mov	r0, r6
 800a47a:	f3af 8000 	nop.w
 800a47e:	4607      	mov	r7, r0
 800a480:	1c78      	adds	r0, r7, #1
 800a482:	d1d6      	bne.n	800a432 <_vfiprintf_r+0x19e>
 800a484:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a486:	07d9      	lsls	r1, r3, #31
 800a488:	d405      	bmi.n	800a496 <_vfiprintf_r+0x202>
 800a48a:	89ab      	ldrh	r3, [r5, #12]
 800a48c:	059a      	lsls	r2, r3, #22
 800a48e:	d402      	bmi.n	800a496 <_vfiprintf_r+0x202>
 800a490:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a492:	f7ff fddb 	bl	800a04c <__retarget_lock_release_recursive>
 800a496:	89ab      	ldrh	r3, [r5, #12]
 800a498:	065b      	lsls	r3, r3, #25
 800a49a:	f53f af1d 	bmi.w	800a2d8 <_vfiprintf_r+0x44>
 800a49e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a4a0:	e71c      	b.n	800a2dc <_vfiprintf_r+0x48>
 800a4a2:	ab03      	add	r3, sp, #12
 800a4a4:	9300      	str	r3, [sp, #0]
 800a4a6:	462a      	mov	r2, r5
 800a4a8:	4b05      	ldr	r3, [pc, #20]	; (800a4c0 <_vfiprintf_r+0x22c>)
 800a4aa:	a904      	add	r1, sp, #16
 800a4ac:	4630      	mov	r0, r6
 800a4ae:	f000 f879 	bl	800a5a4 <_printf_i>
 800a4b2:	e7e4      	b.n	800a47e <_vfiprintf_r+0x1ea>
 800a4b4:	0800aded 	.word	0x0800aded
 800a4b8:	0800adf7 	.word	0x0800adf7
 800a4bc:	00000000 	.word	0x00000000
 800a4c0:	0800a26f 	.word	0x0800a26f
 800a4c4:	0800adf3 	.word	0x0800adf3

0800a4c8 <_printf_common>:
 800a4c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4cc:	4616      	mov	r6, r2
 800a4ce:	4699      	mov	r9, r3
 800a4d0:	688a      	ldr	r2, [r1, #8]
 800a4d2:	690b      	ldr	r3, [r1, #16]
 800a4d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a4d8:	4293      	cmp	r3, r2
 800a4da:	bfb8      	it	lt
 800a4dc:	4613      	movlt	r3, r2
 800a4de:	6033      	str	r3, [r6, #0]
 800a4e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a4e4:	4607      	mov	r7, r0
 800a4e6:	460c      	mov	r4, r1
 800a4e8:	b10a      	cbz	r2, 800a4ee <_printf_common+0x26>
 800a4ea:	3301      	adds	r3, #1
 800a4ec:	6033      	str	r3, [r6, #0]
 800a4ee:	6823      	ldr	r3, [r4, #0]
 800a4f0:	0699      	lsls	r1, r3, #26
 800a4f2:	bf42      	ittt	mi
 800a4f4:	6833      	ldrmi	r3, [r6, #0]
 800a4f6:	3302      	addmi	r3, #2
 800a4f8:	6033      	strmi	r3, [r6, #0]
 800a4fa:	6825      	ldr	r5, [r4, #0]
 800a4fc:	f015 0506 	ands.w	r5, r5, #6
 800a500:	d106      	bne.n	800a510 <_printf_common+0x48>
 800a502:	f104 0a19 	add.w	sl, r4, #25
 800a506:	68e3      	ldr	r3, [r4, #12]
 800a508:	6832      	ldr	r2, [r6, #0]
 800a50a:	1a9b      	subs	r3, r3, r2
 800a50c:	42ab      	cmp	r3, r5
 800a50e:	dc26      	bgt.n	800a55e <_printf_common+0x96>
 800a510:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a514:	1e13      	subs	r3, r2, #0
 800a516:	6822      	ldr	r2, [r4, #0]
 800a518:	bf18      	it	ne
 800a51a:	2301      	movne	r3, #1
 800a51c:	0692      	lsls	r2, r2, #26
 800a51e:	d42b      	bmi.n	800a578 <_printf_common+0xb0>
 800a520:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a524:	4649      	mov	r1, r9
 800a526:	4638      	mov	r0, r7
 800a528:	47c0      	blx	r8
 800a52a:	3001      	adds	r0, #1
 800a52c:	d01e      	beq.n	800a56c <_printf_common+0xa4>
 800a52e:	6823      	ldr	r3, [r4, #0]
 800a530:	6922      	ldr	r2, [r4, #16]
 800a532:	f003 0306 	and.w	r3, r3, #6
 800a536:	2b04      	cmp	r3, #4
 800a538:	bf02      	ittt	eq
 800a53a:	68e5      	ldreq	r5, [r4, #12]
 800a53c:	6833      	ldreq	r3, [r6, #0]
 800a53e:	1aed      	subeq	r5, r5, r3
 800a540:	68a3      	ldr	r3, [r4, #8]
 800a542:	bf0c      	ite	eq
 800a544:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a548:	2500      	movne	r5, #0
 800a54a:	4293      	cmp	r3, r2
 800a54c:	bfc4      	itt	gt
 800a54e:	1a9b      	subgt	r3, r3, r2
 800a550:	18ed      	addgt	r5, r5, r3
 800a552:	2600      	movs	r6, #0
 800a554:	341a      	adds	r4, #26
 800a556:	42b5      	cmp	r5, r6
 800a558:	d11a      	bne.n	800a590 <_printf_common+0xc8>
 800a55a:	2000      	movs	r0, #0
 800a55c:	e008      	b.n	800a570 <_printf_common+0xa8>
 800a55e:	2301      	movs	r3, #1
 800a560:	4652      	mov	r2, sl
 800a562:	4649      	mov	r1, r9
 800a564:	4638      	mov	r0, r7
 800a566:	47c0      	blx	r8
 800a568:	3001      	adds	r0, #1
 800a56a:	d103      	bne.n	800a574 <_printf_common+0xac>
 800a56c:	f04f 30ff 	mov.w	r0, #4294967295
 800a570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a574:	3501      	adds	r5, #1
 800a576:	e7c6      	b.n	800a506 <_printf_common+0x3e>
 800a578:	18e1      	adds	r1, r4, r3
 800a57a:	1c5a      	adds	r2, r3, #1
 800a57c:	2030      	movs	r0, #48	; 0x30
 800a57e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a582:	4422      	add	r2, r4
 800a584:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a588:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a58c:	3302      	adds	r3, #2
 800a58e:	e7c7      	b.n	800a520 <_printf_common+0x58>
 800a590:	2301      	movs	r3, #1
 800a592:	4622      	mov	r2, r4
 800a594:	4649      	mov	r1, r9
 800a596:	4638      	mov	r0, r7
 800a598:	47c0      	blx	r8
 800a59a:	3001      	adds	r0, #1
 800a59c:	d0e6      	beq.n	800a56c <_printf_common+0xa4>
 800a59e:	3601      	adds	r6, #1
 800a5a0:	e7d9      	b.n	800a556 <_printf_common+0x8e>
	...

0800a5a4 <_printf_i>:
 800a5a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a5a8:	7e0f      	ldrb	r7, [r1, #24]
 800a5aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a5ac:	2f78      	cmp	r7, #120	; 0x78
 800a5ae:	4691      	mov	r9, r2
 800a5b0:	4680      	mov	r8, r0
 800a5b2:	460c      	mov	r4, r1
 800a5b4:	469a      	mov	sl, r3
 800a5b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a5ba:	d807      	bhi.n	800a5cc <_printf_i+0x28>
 800a5bc:	2f62      	cmp	r7, #98	; 0x62
 800a5be:	d80a      	bhi.n	800a5d6 <_printf_i+0x32>
 800a5c0:	2f00      	cmp	r7, #0
 800a5c2:	f000 80d4 	beq.w	800a76e <_printf_i+0x1ca>
 800a5c6:	2f58      	cmp	r7, #88	; 0x58
 800a5c8:	f000 80c0 	beq.w	800a74c <_printf_i+0x1a8>
 800a5cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a5d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a5d4:	e03a      	b.n	800a64c <_printf_i+0xa8>
 800a5d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a5da:	2b15      	cmp	r3, #21
 800a5dc:	d8f6      	bhi.n	800a5cc <_printf_i+0x28>
 800a5de:	a101      	add	r1, pc, #4	; (adr r1, 800a5e4 <_printf_i+0x40>)
 800a5e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a5e4:	0800a63d 	.word	0x0800a63d
 800a5e8:	0800a651 	.word	0x0800a651
 800a5ec:	0800a5cd 	.word	0x0800a5cd
 800a5f0:	0800a5cd 	.word	0x0800a5cd
 800a5f4:	0800a5cd 	.word	0x0800a5cd
 800a5f8:	0800a5cd 	.word	0x0800a5cd
 800a5fc:	0800a651 	.word	0x0800a651
 800a600:	0800a5cd 	.word	0x0800a5cd
 800a604:	0800a5cd 	.word	0x0800a5cd
 800a608:	0800a5cd 	.word	0x0800a5cd
 800a60c:	0800a5cd 	.word	0x0800a5cd
 800a610:	0800a755 	.word	0x0800a755
 800a614:	0800a67d 	.word	0x0800a67d
 800a618:	0800a70f 	.word	0x0800a70f
 800a61c:	0800a5cd 	.word	0x0800a5cd
 800a620:	0800a5cd 	.word	0x0800a5cd
 800a624:	0800a777 	.word	0x0800a777
 800a628:	0800a5cd 	.word	0x0800a5cd
 800a62c:	0800a67d 	.word	0x0800a67d
 800a630:	0800a5cd 	.word	0x0800a5cd
 800a634:	0800a5cd 	.word	0x0800a5cd
 800a638:	0800a717 	.word	0x0800a717
 800a63c:	682b      	ldr	r3, [r5, #0]
 800a63e:	1d1a      	adds	r2, r3, #4
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	602a      	str	r2, [r5, #0]
 800a644:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a648:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a64c:	2301      	movs	r3, #1
 800a64e:	e09f      	b.n	800a790 <_printf_i+0x1ec>
 800a650:	6820      	ldr	r0, [r4, #0]
 800a652:	682b      	ldr	r3, [r5, #0]
 800a654:	0607      	lsls	r7, r0, #24
 800a656:	f103 0104 	add.w	r1, r3, #4
 800a65a:	6029      	str	r1, [r5, #0]
 800a65c:	d501      	bpl.n	800a662 <_printf_i+0xbe>
 800a65e:	681e      	ldr	r6, [r3, #0]
 800a660:	e003      	b.n	800a66a <_printf_i+0xc6>
 800a662:	0646      	lsls	r6, r0, #25
 800a664:	d5fb      	bpl.n	800a65e <_printf_i+0xba>
 800a666:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a66a:	2e00      	cmp	r6, #0
 800a66c:	da03      	bge.n	800a676 <_printf_i+0xd2>
 800a66e:	232d      	movs	r3, #45	; 0x2d
 800a670:	4276      	negs	r6, r6
 800a672:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a676:	485a      	ldr	r0, [pc, #360]	; (800a7e0 <_printf_i+0x23c>)
 800a678:	230a      	movs	r3, #10
 800a67a:	e012      	b.n	800a6a2 <_printf_i+0xfe>
 800a67c:	682b      	ldr	r3, [r5, #0]
 800a67e:	6820      	ldr	r0, [r4, #0]
 800a680:	1d19      	adds	r1, r3, #4
 800a682:	6029      	str	r1, [r5, #0]
 800a684:	0605      	lsls	r5, r0, #24
 800a686:	d501      	bpl.n	800a68c <_printf_i+0xe8>
 800a688:	681e      	ldr	r6, [r3, #0]
 800a68a:	e002      	b.n	800a692 <_printf_i+0xee>
 800a68c:	0641      	lsls	r1, r0, #25
 800a68e:	d5fb      	bpl.n	800a688 <_printf_i+0xe4>
 800a690:	881e      	ldrh	r6, [r3, #0]
 800a692:	4853      	ldr	r0, [pc, #332]	; (800a7e0 <_printf_i+0x23c>)
 800a694:	2f6f      	cmp	r7, #111	; 0x6f
 800a696:	bf0c      	ite	eq
 800a698:	2308      	moveq	r3, #8
 800a69a:	230a      	movne	r3, #10
 800a69c:	2100      	movs	r1, #0
 800a69e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a6a2:	6865      	ldr	r5, [r4, #4]
 800a6a4:	60a5      	str	r5, [r4, #8]
 800a6a6:	2d00      	cmp	r5, #0
 800a6a8:	bfa2      	ittt	ge
 800a6aa:	6821      	ldrge	r1, [r4, #0]
 800a6ac:	f021 0104 	bicge.w	r1, r1, #4
 800a6b0:	6021      	strge	r1, [r4, #0]
 800a6b2:	b90e      	cbnz	r6, 800a6b8 <_printf_i+0x114>
 800a6b4:	2d00      	cmp	r5, #0
 800a6b6:	d04b      	beq.n	800a750 <_printf_i+0x1ac>
 800a6b8:	4615      	mov	r5, r2
 800a6ba:	fbb6 f1f3 	udiv	r1, r6, r3
 800a6be:	fb03 6711 	mls	r7, r3, r1, r6
 800a6c2:	5dc7      	ldrb	r7, [r0, r7]
 800a6c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a6c8:	4637      	mov	r7, r6
 800a6ca:	42bb      	cmp	r3, r7
 800a6cc:	460e      	mov	r6, r1
 800a6ce:	d9f4      	bls.n	800a6ba <_printf_i+0x116>
 800a6d0:	2b08      	cmp	r3, #8
 800a6d2:	d10b      	bne.n	800a6ec <_printf_i+0x148>
 800a6d4:	6823      	ldr	r3, [r4, #0]
 800a6d6:	07de      	lsls	r6, r3, #31
 800a6d8:	d508      	bpl.n	800a6ec <_printf_i+0x148>
 800a6da:	6923      	ldr	r3, [r4, #16]
 800a6dc:	6861      	ldr	r1, [r4, #4]
 800a6de:	4299      	cmp	r1, r3
 800a6e0:	bfde      	ittt	le
 800a6e2:	2330      	movle	r3, #48	; 0x30
 800a6e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a6e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a6ec:	1b52      	subs	r2, r2, r5
 800a6ee:	6122      	str	r2, [r4, #16]
 800a6f0:	f8cd a000 	str.w	sl, [sp]
 800a6f4:	464b      	mov	r3, r9
 800a6f6:	aa03      	add	r2, sp, #12
 800a6f8:	4621      	mov	r1, r4
 800a6fa:	4640      	mov	r0, r8
 800a6fc:	f7ff fee4 	bl	800a4c8 <_printf_common>
 800a700:	3001      	adds	r0, #1
 800a702:	d14a      	bne.n	800a79a <_printf_i+0x1f6>
 800a704:	f04f 30ff 	mov.w	r0, #4294967295
 800a708:	b004      	add	sp, #16
 800a70a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a70e:	6823      	ldr	r3, [r4, #0]
 800a710:	f043 0320 	orr.w	r3, r3, #32
 800a714:	6023      	str	r3, [r4, #0]
 800a716:	4833      	ldr	r0, [pc, #204]	; (800a7e4 <_printf_i+0x240>)
 800a718:	2778      	movs	r7, #120	; 0x78
 800a71a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a71e:	6823      	ldr	r3, [r4, #0]
 800a720:	6829      	ldr	r1, [r5, #0]
 800a722:	061f      	lsls	r7, r3, #24
 800a724:	f851 6b04 	ldr.w	r6, [r1], #4
 800a728:	d402      	bmi.n	800a730 <_printf_i+0x18c>
 800a72a:	065f      	lsls	r7, r3, #25
 800a72c:	bf48      	it	mi
 800a72e:	b2b6      	uxthmi	r6, r6
 800a730:	07df      	lsls	r7, r3, #31
 800a732:	bf48      	it	mi
 800a734:	f043 0320 	orrmi.w	r3, r3, #32
 800a738:	6029      	str	r1, [r5, #0]
 800a73a:	bf48      	it	mi
 800a73c:	6023      	strmi	r3, [r4, #0]
 800a73e:	b91e      	cbnz	r6, 800a748 <_printf_i+0x1a4>
 800a740:	6823      	ldr	r3, [r4, #0]
 800a742:	f023 0320 	bic.w	r3, r3, #32
 800a746:	6023      	str	r3, [r4, #0]
 800a748:	2310      	movs	r3, #16
 800a74a:	e7a7      	b.n	800a69c <_printf_i+0xf8>
 800a74c:	4824      	ldr	r0, [pc, #144]	; (800a7e0 <_printf_i+0x23c>)
 800a74e:	e7e4      	b.n	800a71a <_printf_i+0x176>
 800a750:	4615      	mov	r5, r2
 800a752:	e7bd      	b.n	800a6d0 <_printf_i+0x12c>
 800a754:	682b      	ldr	r3, [r5, #0]
 800a756:	6826      	ldr	r6, [r4, #0]
 800a758:	6961      	ldr	r1, [r4, #20]
 800a75a:	1d18      	adds	r0, r3, #4
 800a75c:	6028      	str	r0, [r5, #0]
 800a75e:	0635      	lsls	r5, r6, #24
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	d501      	bpl.n	800a768 <_printf_i+0x1c4>
 800a764:	6019      	str	r1, [r3, #0]
 800a766:	e002      	b.n	800a76e <_printf_i+0x1ca>
 800a768:	0670      	lsls	r0, r6, #25
 800a76a:	d5fb      	bpl.n	800a764 <_printf_i+0x1c0>
 800a76c:	8019      	strh	r1, [r3, #0]
 800a76e:	2300      	movs	r3, #0
 800a770:	6123      	str	r3, [r4, #16]
 800a772:	4615      	mov	r5, r2
 800a774:	e7bc      	b.n	800a6f0 <_printf_i+0x14c>
 800a776:	682b      	ldr	r3, [r5, #0]
 800a778:	1d1a      	adds	r2, r3, #4
 800a77a:	602a      	str	r2, [r5, #0]
 800a77c:	681d      	ldr	r5, [r3, #0]
 800a77e:	6862      	ldr	r2, [r4, #4]
 800a780:	2100      	movs	r1, #0
 800a782:	4628      	mov	r0, r5
 800a784:	f7f5 fdcc 	bl	8000320 <memchr>
 800a788:	b108      	cbz	r0, 800a78e <_printf_i+0x1ea>
 800a78a:	1b40      	subs	r0, r0, r5
 800a78c:	6060      	str	r0, [r4, #4]
 800a78e:	6863      	ldr	r3, [r4, #4]
 800a790:	6123      	str	r3, [r4, #16]
 800a792:	2300      	movs	r3, #0
 800a794:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a798:	e7aa      	b.n	800a6f0 <_printf_i+0x14c>
 800a79a:	6923      	ldr	r3, [r4, #16]
 800a79c:	462a      	mov	r2, r5
 800a79e:	4649      	mov	r1, r9
 800a7a0:	4640      	mov	r0, r8
 800a7a2:	47d0      	blx	sl
 800a7a4:	3001      	adds	r0, #1
 800a7a6:	d0ad      	beq.n	800a704 <_printf_i+0x160>
 800a7a8:	6823      	ldr	r3, [r4, #0]
 800a7aa:	079b      	lsls	r3, r3, #30
 800a7ac:	d413      	bmi.n	800a7d6 <_printf_i+0x232>
 800a7ae:	68e0      	ldr	r0, [r4, #12]
 800a7b0:	9b03      	ldr	r3, [sp, #12]
 800a7b2:	4298      	cmp	r0, r3
 800a7b4:	bfb8      	it	lt
 800a7b6:	4618      	movlt	r0, r3
 800a7b8:	e7a6      	b.n	800a708 <_printf_i+0x164>
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	4632      	mov	r2, r6
 800a7be:	4649      	mov	r1, r9
 800a7c0:	4640      	mov	r0, r8
 800a7c2:	47d0      	blx	sl
 800a7c4:	3001      	adds	r0, #1
 800a7c6:	d09d      	beq.n	800a704 <_printf_i+0x160>
 800a7c8:	3501      	adds	r5, #1
 800a7ca:	68e3      	ldr	r3, [r4, #12]
 800a7cc:	9903      	ldr	r1, [sp, #12]
 800a7ce:	1a5b      	subs	r3, r3, r1
 800a7d0:	42ab      	cmp	r3, r5
 800a7d2:	dcf2      	bgt.n	800a7ba <_printf_i+0x216>
 800a7d4:	e7eb      	b.n	800a7ae <_printf_i+0x20a>
 800a7d6:	2500      	movs	r5, #0
 800a7d8:	f104 0619 	add.w	r6, r4, #25
 800a7dc:	e7f5      	b.n	800a7ca <_printf_i+0x226>
 800a7de:	bf00      	nop
 800a7e0:	0800adfe 	.word	0x0800adfe
 800a7e4:	0800ae0f 	.word	0x0800ae0f

0800a7e8 <__sflush_r>:
 800a7e8:	898a      	ldrh	r2, [r1, #12]
 800a7ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7ee:	4605      	mov	r5, r0
 800a7f0:	0710      	lsls	r0, r2, #28
 800a7f2:	460c      	mov	r4, r1
 800a7f4:	d458      	bmi.n	800a8a8 <__sflush_r+0xc0>
 800a7f6:	684b      	ldr	r3, [r1, #4]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	dc05      	bgt.n	800a808 <__sflush_r+0x20>
 800a7fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	dc02      	bgt.n	800a808 <__sflush_r+0x20>
 800a802:	2000      	movs	r0, #0
 800a804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a808:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a80a:	2e00      	cmp	r6, #0
 800a80c:	d0f9      	beq.n	800a802 <__sflush_r+0x1a>
 800a80e:	2300      	movs	r3, #0
 800a810:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a814:	682f      	ldr	r7, [r5, #0]
 800a816:	6a21      	ldr	r1, [r4, #32]
 800a818:	602b      	str	r3, [r5, #0]
 800a81a:	d032      	beq.n	800a882 <__sflush_r+0x9a>
 800a81c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a81e:	89a3      	ldrh	r3, [r4, #12]
 800a820:	075a      	lsls	r2, r3, #29
 800a822:	d505      	bpl.n	800a830 <__sflush_r+0x48>
 800a824:	6863      	ldr	r3, [r4, #4]
 800a826:	1ac0      	subs	r0, r0, r3
 800a828:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a82a:	b10b      	cbz	r3, 800a830 <__sflush_r+0x48>
 800a82c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a82e:	1ac0      	subs	r0, r0, r3
 800a830:	2300      	movs	r3, #0
 800a832:	4602      	mov	r2, r0
 800a834:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a836:	6a21      	ldr	r1, [r4, #32]
 800a838:	4628      	mov	r0, r5
 800a83a:	47b0      	blx	r6
 800a83c:	1c43      	adds	r3, r0, #1
 800a83e:	89a3      	ldrh	r3, [r4, #12]
 800a840:	d106      	bne.n	800a850 <__sflush_r+0x68>
 800a842:	6829      	ldr	r1, [r5, #0]
 800a844:	291d      	cmp	r1, #29
 800a846:	d82b      	bhi.n	800a8a0 <__sflush_r+0xb8>
 800a848:	4a29      	ldr	r2, [pc, #164]	; (800a8f0 <__sflush_r+0x108>)
 800a84a:	410a      	asrs	r2, r1
 800a84c:	07d6      	lsls	r6, r2, #31
 800a84e:	d427      	bmi.n	800a8a0 <__sflush_r+0xb8>
 800a850:	2200      	movs	r2, #0
 800a852:	6062      	str	r2, [r4, #4]
 800a854:	04d9      	lsls	r1, r3, #19
 800a856:	6922      	ldr	r2, [r4, #16]
 800a858:	6022      	str	r2, [r4, #0]
 800a85a:	d504      	bpl.n	800a866 <__sflush_r+0x7e>
 800a85c:	1c42      	adds	r2, r0, #1
 800a85e:	d101      	bne.n	800a864 <__sflush_r+0x7c>
 800a860:	682b      	ldr	r3, [r5, #0]
 800a862:	b903      	cbnz	r3, 800a866 <__sflush_r+0x7e>
 800a864:	6560      	str	r0, [r4, #84]	; 0x54
 800a866:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a868:	602f      	str	r7, [r5, #0]
 800a86a:	2900      	cmp	r1, #0
 800a86c:	d0c9      	beq.n	800a802 <__sflush_r+0x1a>
 800a86e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a872:	4299      	cmp	r1, r3
 800a874:	d002      	beq.n	800a87c <__sflush_r+0x94>
 800a876:	4628      	mov	r0, r5
 800a878:	f7ff fbea 	bl	800a050 <_free_r>
 800a87c:	2000      	movs	r0, #0
 800a87e:	6360      	str	r0, [r4, #52]	; 0x34
 800a880:	e7c0      	b.n	800a804 <__sflush_r+0x1c>
 800a882:	2301      	movs	r3, #1
 800a884:	4628      	mov	r0, r5
 800a886:	47b0      	blx	r6
 800a888:	1c41      	adds	r1, r0, #1
 800a88a:	d1c8      	bne.n	800a81e <__sflush_r+0x36>
 800a88c:	682b      	ldr	r3, [r5, #0]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d0c5      	beq.n	800a81e <__sflush_r+0x36>
 800a892:	2b1d      	cmp	r3, #29
 800a894:	d001      	beq.n	800a89a <__sflush_r+0xb2>
 800a896:	2b16      	cmp	r3, #22
 800a898:	d101      	bne.n	800a89e <__sflush_r+0xb6>
 800a89a:	602f      	str	r7, [r5, #0]
 800a89c:	e7b1      	b.n	800a802 <__sflush_r+0x1a>
 800a89e:	89a3      	ldrh	r3, [r4, #12]
 800a8a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8a4:	81a3      	strh	r3, [r4, #12]
 800a8a6:	e7ad      	b.n	800a804 <__sflush_r+0x1c>
 800a8a8:	690f      	ldr	r7, [r1, #16]
 800a8aa:	2f00      	cmp	r7, #0
 800a8ac:	d0a9      	beq.n	800a802 <__sflush_r+0x1a>
 800a8ae:	0793      	lsls	r3, r2, #30
 800a8b0:	680e      	ldr	r6, [r1, #0]
 800a8b2:	bf08      	it	eq
 800a8b4:	694b      	ldreq	r3, [r1, #20]
 800a8b6:	600f      	str	r7, [r1, #0]
 800a8b8:	bf18      	it	ne
 800a8ba:	2300      	movne	r3, #0
 800a8bc:	eba6 0807 	sub.w	r8, r6, r7
 800a8c0:	608b      	str	r3, [r1, #8]
 800a8c2:	f1b8 0f00 	cmp.w	r8, #0
 800a8c6:	dd9c      	ble.n	800a802 <__sflush_r+0x1a>
 800a8c8:	6a21      	ldr	r1, [r4, #32]
 800a8ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a8cc:	4643      	mov	r3, r8
 800a8ce:	463a      	mov	r2, r7
 800a8d0:	4628      	mov	r0, r5
 800a8d2:	47b0      	blx	r6
 800a8d4:	2800      	cmp	r0, #0
 800a8d6:	dc06      	bgt.n	800a8e6 <__sflush_r+0xfe>
 800a8d8:	89a3      	ldrh	r3, [r4, #12]
 800a8da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8de:	81a3      	strh	r3, [r4, #12]
 800a8e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a8e4:	e78e      	b.n	800a804 <__sflush_r+0x1c>
 800a8e6:	4407      	add	r7, r0
 800a8e8:	eba8 0800 	sub.w	r8, r8, r0
 800a8ec:	e7e9      	b.n	800a8c2 <__sflush_r+0xda>
 800a8ee:	bf00      	nop
 800a8f0:	dfbffffe 	.word	0xdfbffffe

0800a8f4 <_fflush_r>:
 800a8f4:	b538      	push	{r3, r4, r5, lr}
 800a8f6:	690b      	ldr	r3, [r1, #16]
 800a8f8:	4605      	mov	r5, r0
 800a8fa:	460c      	mov	r4, r1
 800a8fc:	b913      	cbnz	r3, 800a904 <_fflush_r+0x10>
 800a8fe:	2500      	movs	r5, #0
 800a900:	4628      	mov	r0, r5
 800a902:	bd38      	pop	{r3, r4, r5, pc}
 800a904:	b118      	cbz	r0, 800a90e <_fflush_r+0x1a>
 800a906:	6a03      	ldr	r3, [r0, #32]
 800a908:	b90b      	cbnz	r3, 800a90e <_fflush_r+0x1a>
 800a90a:	f7ff f9a9 	bl	8009c60 <__sinit>
 800a90e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d0f3      	beq.n	800a8fe <_fflush_r+0xa>
 800a916:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a918:	07d0      	lsls	r0, r2, #31
 800a91a:	d404      	bmi.n	800a926 <_fflush_r+0x32>
 800a91c:	0599      	lsls	r1, r3, #22
 800a91e:	d402      	bmi.n	800a926 <_fflush_r+0x32>
 800a920:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a922:	f7ff fb92 	bl	800a04a <__retarget_lock_acquire_recursive>
 800a926:	4628      	mov	r0, r5
 800a928:	4621      	mov	r1, r4
 800a92a:	f7ff ff5d 	bl	800a7e8 <__sflush_r>
 800a92e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a930:	07da      	lsls	r2, r3, #31
 800a932:	4605      	mov	r5, r0
 800a934:	d4e4      	bmi.n	800a900 <_fflush_r+0xc>
 800a936:	89a3      	ldrh	r3, [r4, #12]
 800a938:	059b      	lsls	r3, r3, #22
 800a93a:	d4e1      	bmi.n	800a900 <_fflush_r+0xc>
 800a93c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a93e:	f7ff fb85 	bl	800a04c <__retarget_lock_release_recursive>
 800a942:	e7dd      	b.n	800a900 <_fflush_r+0xc>

0800a944 <__swhatbuf_r>:
 800a944:	b570      	push	{r4, r5, r6, lr}
 800a946:	460c      	mov	r4, r1
 800a948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a94c:	2900      	cmp	r1, #0
 800a94e:	b096      	sub	sp, #88	; 0x58
 800a950:	4615      	mov	r5, r2
 800a952:	461e      	mov	r6, r3
 800a954:	da0d      	bge.n	800a972 <__swhatbuf_r+0x2e>
 800a956:	89a3      	ldrh	r3, [r4, #12]
 800a958:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a95c:	f04f 0100 	mov.w	r1, #0
 800a960:	bf0c      	ite	eq
 800a962:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a966:	2340      	movne	r3, #64	; 0x40
 800a968:	2000      	movs	r0, #0
 800a96a:	6031      	str	r1, [r6, #0]
 800a96c:	602b      	str	r3, [r5, #0]
 800a96e:	b016      	add	sp, #88	; 0x58
 800a970:	bd70      	pop	{r4, r5, r6, pc}
 800a972:	466a      	mov	r2, sp
 800a974:	f000 f848 	bl	800aa08 <_fstat_r>
 800a978:	2800      	cmp	r0, #0
 800a97a:	dbec      	blt.n	800a956 <__swhatbuf_r+0x12>
 800a97c:	9901      	ldr	r1, [sp, #4]
 800a97e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a982:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a986:	4259      	negs	r1, r3
 800a988:	4159      	adcs	r1, r3
 800a98a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a98e:	e7eb      	b.n	800a968 <__swhatbuf_r+0x24>

0800a990 <__smakebuf_r>:
 800a990:	898b      	ldrh	r3, [r1, #12]
 800a992:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a994:	079d      	lsls	r5, r3, #30
 800a996:	4606      	mov	r6, r0
 800a998:	460c      	mov	r4, r1
 800a99a:	d507      	bpl.n	800a9ac <__smakebuf_r+0x1c>
 800a99c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a9a0:	6023      	str	r3, [r4, #0]
 800a9a2:	6123      	str	r3, [r4, #16]
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	6163      	str	r3, [r4, #20]
 800a9a8:	b002      	add	sp, #8
 800a9aa:	bd70      	pop	{r4, r5, r6, pc}
 800a9ac:	ab01      	add	r3, sp, #4
 800a9ae:	466a      	mov	r2, sp
 800a9b0:	f7ff ffc8 	bl	800a944 <__swhatbuf_r>
 800a9b4:	9900      	ldr	r1, [sp, #0]
 800a9b6:	4605      	mov	r5, r0
 800a9b8:	4630      	mov	r0, r6
 800a9ba:	f7ff fbb5 	bl	800a128 <_malloc_r>
 800a9be:	b948      	cbnz	r0, 800a9d4 <__smakebuf_r+0x44>
 800a9c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9c4:	059a      	lsls	r2, r3, #22
 800a9c6:	d4ef      	bmi.n	800a9a8 <__smakebuf_r+0x18>
 800a9c8:	f023 0303 	bic.w	r3, r3, #3
 800a9cc:	f043 0302 	orr.w	r3, r3, #2
 800a9d0:	81a3      	strh	r3, [r4, #12]
 800a9d2:	e7e3      	b.n	800a99c <__smakebuf_r+0xc>
 800a9d4:	89a3      	ldrh	r3, [r4, #12]
 800a9d6:	6020      	str	r0, [r4, #0]
 800a9d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9dc:	81a3      	strh	r3, [r4, #12]
 800a9de:	9b00      	ldr	r3, [sp, #0]
 800a9e0:	6163      	str	r3, [r4, #20]
 800a9e2:	9b01      	ldr	r3, [sp, #4]
 800a9e4:	6120      	str	r0, [r4, #16]
 800a9e6:	b15b      	cbz	r3, 800aa00 <__smakebuf_r+0x70>
 800a9e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9ec:	4630      	mov	r0, r6
 800a9ee:	f000 f81d 	bl	800aa2c <_isatty_r>
 800a9f2:	b128      	cbz	r0, 800aa00 <__smakebuf_r+0x70>
 800a9f4:	89a3      	ldrh	r3, [r4, #12]
 800a9f6:	f023 0303 	bic.w	r3, r3, #3
 800a9fa:	f043 0301 	orr.w	r3, r3, #1
 800a9fe:	81a3      	strh	r3, [r4, #12]
 800aa00:	89a3      	ldrh	r3, [r4, #12]
 800aa02:	431d      	orrs	r5, r3
 800aa04:	81a5      	strh	r5, [r4, #12]
 800aa06:	e7cf      	b.n	800a9a8 <__smakebuf_r+0x18>

0800aa08 <_fstat_r>:
 800aa08:	b538      	push	{r3, r4, r5, lr}
 800aa0a:	4d07      	ldr	r5, [pc, #28]	; (800aa28 <_fstat_r+0x20>)
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	4604      	mov	r4, r0
 800aa10:	4608      	mov	r0, r1
 800aa12:	4611      	mov	r1, r2
 800aa14:	602b      	str	r3, [r5, #0]
 800aa16:	f7f6 fd8c 	bl	8001532 <_fstat>
 800aa1a:	1c43      	adds	r3, r0, #1
 800aa1c:	d102      	bne.n	800aa24 <_fstat_r+0x1c>
 800aa1e:	682b      	ldr	r3, [r5, #0]
 800aa20:	b103      	cbz	r3, 800aa24 <_fstat_r+0x1c>
 800aa22:	6023      	str	r3, [r4, #0]
 800aa24:	bd38      	pop	{r3, r4, r5, pc}
 800aa26:	bf00      	nop
 800aa28:	24000578 	.word	0x24000578

0800aa2c <_isatty_r>:
 800aa2c:	b538      	push	{r3, r4, r5, lr}
 800aa2e:	4d06      	ldr	r5, [pc, #24]	; (800aa48 <_isatty_r+0x1c>)
 800aa30:	2300      	movs	r3, #0
 800aa32:	4604      	mov	r4, r0
 800aa34:	4608      	mov	r0, r1
 800aa36:	602b      	str	r3, [r5, #0]
 800aa38:	f7f6 fd8b 	bl	8001552 <_isatty>
 800aa3c:	1c43      	adds	r3, r0, #1
 800aa3e:	d102      	bne.n	800aa46 <_isatty_r+0x1a>
 800aa40:	682b      	ldr	r3, [r5, #0]
 800aa42:	b103      	cbz	r3, 800aa46 <_isatty_r+0x1a>
 800aa44:	6023      	str	r3, [r4, #0]
 800aa46:	bd38      	pop	{r3, r4, r5, pc}
 800aa48:	24000578 	.word	0x24000578

0800aa4c <_sbrk_r>:
 800aa4c:	b538      	push	{r3, r4, r5, lr}
 800aa4e:	4d06      	ldr	r5, [pc, #24]	; (800aa68 <_sbrk_r+0x1c>)
 800aa50:	2300      	movs	r3, #0
 800aa52:	4604      	mov	r4, r0
 800aa54:	4608      	mov	r0, r1
 800aa56:	602b      	str	r3, [r5, #0]
 800aa58:	f7f6 fd94 	bl	8001584 <_sbrk>
 800aa5c:	1c43      	adds	r3, r0, #1
 800aa5e:	d102      	bne.n	800aa66 <_sbrk_r+0x1a>
 800aa60:	682b      	ldr	r3, [r5, #0]
 800aa62:	b103      	cbz	r3, 800aa66 <_sbrk_r+0x1a>
 800aa64:	6023      	str	r3, [r4, #0]
 800aa66:	bd38      	pop	{r3, r4, r5, pc}
 800aa68:	24000578 	.word	0x24000578

0800aa6c <round>:
 800aa6c:	ee10 1a90 	vmov	r1, s1
 800aa70:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800aa74:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800aa78:	2b13      	cmp	r3, #19
 800aa7a:	b510      	push	{r4, lr}
 800aa7c:	ee10 4a10 	vmov	r4, s0
 800aa80:	dc19      	bgt.n	800aab6 <round+0x4a>
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	da09      	bge.n	800aa9a <round+0x2e>
 800aa86:	3301      	adds	r3, #1
 800aa88:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800aa8c:	d103      	bne.n	800aa96 <round+0x2a>
 800aa8e:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800aa92:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800aa96:	2000      	movs	r0, #0
 800aa98:	e025      	b.n	800aae6 <round+0x7a>
 800aa9a:	4815      	ldr	r0, [pc, #84]	; (800aaf0 <round+0x84>)
 800aa9c:	4118      	asrs	r0, r3
 800aa9e:	ea01 0200 	and.w	r2, r1, r0
 800aaa2:	4322      	orrs	r2, r4
 800aaa4:	d00e      	beq.n	800aac4 <round+0x58>
 800aaa6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800aaaa:	fa42 f303 	asr.w	r3, r2, r3
 800aaae:	440b      	add	r3, r1
 800aab0:	ea23 0100 	bic.w	r1, r3, r0
 800aab4:	e7ef      	b.n	800aa96 <round+0x2a>
 800aab6:	2b33      	cmp	r3, #51	; 0x33
 800aab8:	dd05      	ble.n	800aac6 <round+0x5a>
 800aaba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aabe:	d101      	bne.n	800aac4 <round+0x58>
 800aac0:	ee30 0b00 	vadd.f64	d0, d0, d0
 800aac4:	bd10      	pop	{r4, pc}
 800aac6:	f2a2 4013 	subw	r0, r2, #1043	; 0x413
 800aaca:	f04f 32ff 	mov.w	r2, #4294967295
 800aace:	40c2      	lsrs	r2, r0
 800aad0:	4222      	tst	r2, r4
 800aad2:	d0f7      	beq.n	800aac4 <round+0x58>
 800aad4:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
 800aad8:	2001      	movs	r0, #1
 800aada:	4098      	lsls	r0, r3
 800aadc:	1900      	adds	r0, r0, r4
 800aade:	bf28      	it	cs
 800aae0:	3101      	addcs	r1, #1
 800aae2:	ea20 0002 	bic.w	r0, r0, r2
 800aae6:	460b      	mov	r3, r1
 800aae8:	4602      	mov	r2, r0
 800aaea:	ec43 2b10 	vmov	d0, r2, r3
 800aaee:	e7e9      	b.n	800aac4 <round+0x58>
 800aaf0:	000fffff 	.word	0x000fffff

0800aaf4 <_init>:
 800aaf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaf6:	bf00      	nop
 800aaf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aafa:	bc08      	pop	{r3}
 800aafc:	469e      	mov	lr, r3
 800aafe:	4770      	bx	lr

0800ab00 <_fini>:
 800ab00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab02:	bf00      	nop
 800ab04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab06:	bc08      	pop	{r3}
 800ab08:	469e      	mov	lr, r3
 800ab0a:	4770      	bx	lr
