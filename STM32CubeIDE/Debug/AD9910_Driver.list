
AD9910_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5e0  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  0800a8b0  0800a8b0  0001a8b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800aa9c  0800aa9c  0001aa9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800aaa4  0800aaa4  0001aaa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800aaa8  0800aaa8  0001aaa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  0800aaac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  2400006c  0800ab18  0002006c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000cc  0800ab78  000200cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000448  24000130  0800abd8  00020130  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  24000578  0800abd8  00020578  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002015a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017b4f  00000000  00000000  0002019d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b67  00000000  00000000  00037cec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fc8  00000000  00000000  0003a858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c2a  00000000  00000000  0003b820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003444a  00000000  00000000  0003c44a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016ca2  00000000  00000000  00070894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0014cbd9  00000000  00000000  00087536  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000049f0  00000000  00000000  001d4110  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  001d8b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000130 	.word	0x24000130
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800a898 	.word	0x0800a898

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000134 	.word	0x24000134
 800030c:	0800a898 	.word	0x0800a898

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b970 	b.w	80006b8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9e08      	ldr	r6, [sp, #32]
 80003f6:	460d      	mov	r5, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	460f      	mov	r7, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4694      	mov	ip, r2
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0xe2>
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	b143      	cbz	r3, 800041e <__udivmoddi4+0x2e>
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	f1c3 0220 	rsb	r2, r3, #32
 8000414:	409f      	lsls	r7, r3
 8000416:	fa20 f202 	lsr.w	r2, r0, r2
 800041a:	4317      	orrs	r7, r2
 800041c:	409c      	lsls	r4, r3
 800041e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000422:	fa1f f58c 	uxth.w	r5, ip
 8000426:	fbb7 f1fe 	udiv	r1, r7, lr
 800042a:	0c22      	lsrs	r2, r4, #16
 800042c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000430:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000434:	fb01 f005 	mul.w	r0, r1, r5
 8000438:	4290      	cmp	r0, r2
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x62>
 800043c:	eb1c 0202 	adds.w	r2, ip, r2
 8000440:	f101 37ff 	add.w	r7, r1, #4294967295
 8000444:	f080 811c 	bcs.w	8000680 <__udivmoddi4+0x290>
 8000448:	4290      	cmp	r0, r2
 800044a:	f240 8119 	bls.w	8000680 <__udivmoddi4+0x290>
 800044e:	3902      	subs	r1, #2
 8000450:	4462      	add	r2, ip
 8000452:	1a12      	subs	r2, r2, r0
 8000454:	b2a4      	uxth	r4, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000462:	fb00 f505 	mul.w	r5, r0, r5
 8000466:	42a5      	cmp	r5, r4
 8000468:	d90a      	bls.n	8000480 <__udivmoddi4+0x90>
 800046a:	eb1c 0404 	adds.w	r4, ip, r4
 800046e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000472:	f080 8107 	bcs.w	8000684 <__udivmoddi4+0x294>
 8000476:	42a5      	cmp	r5, r4
 8000478:	f240 8104 	bls.w	8000684 <__udivmoddi4+0x294>
 800047c:	4464      	add	r4, ip
 800047e:	3802      	subs	r0, #2
 8000480:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000484:	1b64      	subs	r4, r4, r5
 8000486:	2100      	movs	r1, #0
 8000488:	b11e      	cbz	r6, 8000492 <__udivmoddi4+0xa2>
 800048a:	40dc      	lsrs	r4, r3
 800048c:	2300      	movs	r3, #0
 800048e:	e9c6 4300 	strd	r4, r3, [r6]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0xbc>
 800049a:	2e00      	cmp	r6, #0
 800049c:	f000 80ed 	beq.w	800067a <__udivmoddi4+0x28a>
 80004a0:	2100      	movs	r1, #0
 80004a2:	e9c6 0500 	strd	r0, r5, [r6]
 80004a6:	4608      	mov	r0, r1
 80004a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ac:	fab3 f183 	clz	r1, r3
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d149      	bne.n	8000548 <__udivmoddi4+0x158>
 80004b4:	42ab      	cmp	r3, r5
 80004b6:	d302      	bcc.n	80004be <__udivmoddi4+0xce>
 80004b8:	4282      	cmp	r2, r0
 80004ba:	f200 80f8 	bhi.w	80006ae <__udivmoddi4+0x2be>
 80004be:	1a84      	subs	r4, r0, r2
 80004c0:	eb65 0203 	sbc.w	r2, r5, r3
 80004c4:	2001      	movs	r0, #1
 80004c6:	4617      	mov	r7, r2
 80004c8:	2e00      	cmp	r6, #0
 80004ca:	d0e2      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	e9c6 4700 	strd	r4, r7, [r6]
 80004d0:	e7df      	b.n	8000492 <__udivmoddi4+0xa2>
 80004d2:	b902      	cbnz	r2, 80004d6 <__udivmoddi4+0xe6>
 80004d4:	deff      	udf	#255	; 0xff
 80004d6:	fab2 f382 	clz	r3, r2
 80004da:	2b00      	cmp	r3, #0
 80004dc:	f040 8090 	bne.w	8000600 <__udivmoddi4+0x210>
 80004e0:	1a8a      	subs	r2, r1, r2
 80004e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e6:	fa1f fe8c 	uxth.w	lr, ip
 80004ea:	2101      	movs	r1, #1
 80004ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80004f0:	fb07 2015 	mls	r0, r7, r5, r2
 80004f4:	0c22      	lsrs	r2, r4, #16
 80004f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004fa:	fb0e f005 	mul.w	r0, lr, r5
 80004fe:	4290      	cmp	r0, r2
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x124>
 8000502:	eb1c 0202 	adds.w	r2, ip, r2
 8000506:	f105 38ff 	add.w	r8, r5, #4294967295
 800050a:	d202      	bcs.n	8000512 <__udivmoddi4+0x122>
 800050c:	4290      	cmp	r0, r2
 800050e:	f200 80cb 	bhi.w	80006a8 <__udivmoddi4+0x2b8>
 8000512:	4645      	mov	r5, r8
 8000514:	1a12      	subs	r2, r2, r0
 8000516:	b2a4      	uxth	r4, r4
 8000518:	fbb2 f0f7 	udiv	r0, r2, r7
 800051c:	fb07 2210 	mls	r2, r7, r0, r2
 8000520:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000524:	fb0e fe00 	mul.w	lr, lr, r0
 8000528:	45a6      	cmp	lr, r4
 800052a:	d908      	bls.n	800053e <__udivmoddi4+0x14e>
 800052c:	eb1c 0404 	adds.w	r4, ip, r4
 8000530:	f100 32ff 	add.w	r2, r0, #4294967295
 8000534:	d202      	bcs.n	800053c <__udivmoddi4+0x14c>
 8000536:	45a6      	cmp	lr, r4
 8000538:	f200 80bb 	bhi.w	80006b2 <__udivmoddi4+0x2c2>
 800053c:	4610      	mov	r0, r2
 800053e:	eba4 040e 	sub.w	r4, r4, lr
 8000542:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000546:	e79f      	b.n	8000488 <__udivmoddi4+0x98>
 8000548:	f1c1 0720 	rsb	r7, r1, #32
 800054c:	408b      	lsls	r3, r1
 800054e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000552:	ea4c 0c03 	orr.w	ip, ip, r3
 8000556:	fa05 f401 	lsl.w	r4, r5, r1
 800055a:	fa20 f307 	lsr.w	r3, r0, r7
 800055e:	40fd      	lsrs	r5, r7
 8000560:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000564:	4323      	orrs	r3, r4
 8000566:	fbb5 f8f9 	udiv	r8, r5, r9
 800056a:	fa1f fe8c 	uxth.w	lr, ip
 800056e:	fb09 5518 	mls	r5, r9, r8, r5
 8000572:	0c1c      	lsrs	r4, r3, #16
 8000574:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000578:	fb08 f50e 	mul.w	r5, r8, lr
 800057c:	42a5      	cmp	r5, r4
 800057e:	fa02 f201 	lsl.w	r2, r2, r1
 8000582:	fa00 f001 	lsl.w	r0, r0, r1
 8000586:	d90b      	bls.n	80005a0 <__udivmoddi4+0x1b0>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000590:	f080 8088 	bcs.w	80006a4 <__udivmoddi4+0x2b4>
 8000594:	42a5      	cmp	r5, r4
 8000596:	f240 8085 	bls.w	80006a4 <__udivmoddi4+0x2b4>
 800059a:	f1a8 0802 	sub.w	r8, r8, #2
 800059e:	4464      	add	r4, ip
 80005a0:	1b64      	subs	r4, r4, r5
 80005a2:	b29d      	uxth	r5, r3
 80005a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80005a8:	fb09 4413 	mls	r4, r9, r3, r4
 80005ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005b4:	45a6      	cmp	lr, r4
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x1da>
 80005b8:	eb1c 0404 	adds.w	r4, ip, r4
 80005bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80005c0:	d26c      	bcs.n	800069c <__udivmoddi4+0x2ac>
 80005c2:	45a6      	cmp	lr, r4
 80005c4:	d96a      	bls.n	800069c <__udivmoddi4+0x2ac>
 80005c6:	3b02      	subs	r3, #2
 80005c8:	4464      	add	r4, ip
 80005ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005ce:	fba3 9502 	umull	r9, r5, r3, r2
 80005d2:	eba4 040e 	sub.w	r4, r4, lr
 80005d6:	42ac      	cmp	r4, r5
 80005d8:	46c8      	mov	r8, r9
 80005da:	46ae      	mov	lr, r5
 80005dc:	d356      	bcc.n	800068c <__udivmoddi4+0x29c>
 80005de:	d053      	beq.n	8000688 <__udivmoddi4+0x298>
 80005e0:	b156      	cbz	r6, 80005f8 <__udivmoddi4+0x208>
 80005e2:	ebb0 0208 	subs.w	r2, r0, r8
 80005e6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ea:	fa04 f707 	lsl.w	r7, r4, r7
 80005ee:	40ca      	lsrs	r2, r1
 80005f0:	40cc      	lsrs	r4, r1
 80005f2:	4317      	orrs	r7, r2
 80005f4:	e9c6 7400 	strd	r7, r4, [r6]
 80005f8:	4618      	mov	r0, r3
 80005fa:	2100      	movs	r1, #0
 80005fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000600:	f1c3 0120 	rsb	r1, r3, #32
 8000604:	fa02 fc03 	lsl.w	ip, r2, r3
 8000608:	fa20 f201 	lsr.w	r2, r0, r1
 800060c:	fa25 f101 	lsr.w	r1, r5, r1
 8000610:	409d      	lsls	r5, r3
 8000612:	432a      	orrs	r2, r5
 8000614:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000618:	fa1f fe8c 	uxth.w	lr, ip
 800061c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000620:	fb07 1510 	mls	r5, r7, r0, r1
 8000624:	0c11      	lsrs	r1, r2, #16
 8000626:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800062a:	fb00 f50e 	mul.w	r5, r0, lr
 800062e:	428d      	cmp	r5, r1
 8000630:	fa04 f403 	lsl.w	r4, r4, r3
 8000634:	d908      	bls.n	8000648 <__udivmoddi4+0x258>
 8000636:	eb1c 0101 	adds.w	r1, ip, r1
 800063a:	f100 38ff 	add.w	r8, r0, #4294967295
 800063e:	d22f      	bcs.n	80006a0 <__udivmoddi4+0x2b0>
 8000640:	428d      	cmp	r5, r1
 8000642:	d92d      	bls.n	80006a0 <__udivmoddi4+0x2b0>
 8000644:	3802      	subs	r0, #2
 8000646:	4461      	add	r1, ip
 8000648:	1b49      	subs	r1, r1, r5
 800064a:	b292      	uxth	r2, r2
 800064c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000650:	fb07 1115 	mls	r1, r7, r5, r1
 8000654:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000658:	fb05 f10e 	mul.w	r1, r5, lr
 800065c:	4291      	cmp	r1, r2
 800065e:	d908      	bls.n	8000672 <__udivmoddi4+0x282>
 8000660:	eb1c 0202 	adds.w	r2, ip, r2
 8000664:	f105 38ff 	add.w	r8, r5, #4294967295
 8000668:	d216      	bcs.n	8000698 <__udivmoddi4+0x2a8>
 800066a:	4291      	cmp	r1, r2
 800066c:	d914      	bls.n	8000698 <__udivmoddi4+0x2a8>
 800066e:	3d02      	subs	r5, #2
 8000670:	4462      	add	r2, ip
 8000672:	1a52      	subs	r2, r2, r1
 8000674:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000678:	e738      	b.n	80004ec <__udivmoddi4+0xfc>
 800067a:	4631      	mov	r1, r6
 800067c:	4630      	mov	r0, r6
 800067e:	e708      	b.n	8000492 <__udivmoddi4+0xa2>
 8000680:	4639      	mov	r1, r7
 8000682:	e6e6      	b.n	8000452 <__udivmoddi4+0x62>
 8000684:	4610      	mov	r0, r2
 8000686:	e6fb      	b.n	8000480 <__udivmoddi4+0x90>
 8000688:	4548      	cmp	r0, r9
 800068a:	d2a9      	bcs.n	80005e0 <__udivmoddi4+0x1f0>
 800068c:	ebb9 0802 	subs.w	r8, r9, r2
 8000690:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000694:	3b01      	subs	r3, #1
 8000696:	e7a3      	b.n	80005e0 <__udivmoddi4+0x1f0>
 8000698:	4645      	mov	r5, r8
 800069a:	e7ea      	b.n	8000672 <__udivmoddi4+0x282>
 800069c:	462b      	mov	r3, r5
 800069e:	e794      	b.n	80005ca <__udivmoddi4+0x1da>
 80006a0:	4640      	mov	r0, r8
 80006a2:	e7d1      	b.n	8000648 <__udivmoddi4+0x258>
 80006a4:	46d0      	mov	r8, sl
 80006a6:	e77b      	b.n	80005a0 <__udivmoddi4+0x1b0>
 80006a8:	3d02      	subs	r5, #2
 80006aa:	4462      	add	r2, ip
 80006ac:	e732      	b.n	8000514 <__udivmoddi4+0x124>
 80006ae:	4608      	mov	r0, r1
 80006b0:	e70a      	b.n	80004c8 <__udivmoddi4+0xd8>
 80006b2:	4464      	add	r4, ip
 80006b4:	3802      	subs	r0, #2
 80006b6:	e742      	b.n	800053e <__udivmoddi4+0x14e>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <_write>:
static void MX_ETH_Init(void);
static void MX_SPI1_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_USB_OTG_HS_USB_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	60b9      	str	r1, [r7, #8]
 80006c6:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	b29a      	uxth	r2, r3
 80006cc:	f04f 33ff 	mov.w	r3, #4294967295
 80006d0:	68b9      	ldr	r1, [r7, #8]
 80006d2:	4804      	ldr	r0, [pc, #16]	; (80006e4 <_write+0x28>)
 80006d4:	f006 fc6b 	bl	8006fae <HAL_UART_Transmit>
    return len;
 80006d8:	687b      	ldr	r3, [r7, #4]
}
 80006da:	4618      	mov	r0, r3
 80006dc:	3710      	adds	r7, #16
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	240002bc 	.word	0x240002bc

080006e8 <DDS_Test>:

void UART_SendString(char *message);

void processCommand(void);

void DDS_Test() {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
    uint64_t read_value = 0x000000000000;
 80006ee:	f04f 0200 	mov.w	r2, #0
 80006f2:	f04f 0300 	mov.w	r3, #0
 80006f6:	e9c7 2300 	strd	r2, r3, [r7]

    // Écriture dans un registre (par exemple 0x04 pour la fréquence de base)
    if (AD9910_WriteRegister(0x00, 0x00800302) == HAL_OK) {
 80006fa:	4a16      	ldr	r2, [pc, #88]	; (8000754 <DDS_Test+0x6c>)
 80006fc:	f04f 0300 	mov.w	r3, #0
 8000700:	2000      	movs	r0, #0
 8000702:	f000 ff83 	bl	800160c <AD9910_WriteRegister>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d103      	bne.n	8000714 <DDS_Test+0x2c>
        printf("Registre écrit avec succès.\n");
 800070c:	4812      	ldr	r0, [pc, #72]	; (8000758 <DDS_Test+0x70>)
 800070e:	f009 fa59 	bl	8009bc4 <puts>
 8000712:	e002      	b.n	800071a <DDS_Test+0x32>
    } else {
        printf("Erreur d'écriture dans le registre.\n");
 8000714:	4811      	ldr	r0, [pc, #68]	; (800075c <DDS_Test+0x74>)
 8000716:	f009 fa55 	bl	8009bc4 <puts>
    }
    AD9910_IOUpdate();
 800071a:	f000 ff61 	bl	80015e0 <AD9910_IOUpdate>
    HAL_Delay(10);
 800071e:	200a      	movs	r0, #10
 8000720:	f001 fabc 	bl	8001c9c <HAL_Delay>

    // Lecture dans un registre (par exemple 0x04 pour la fréquence de base)
    if (AD9910_ReadRegister(0x0E, &read_value) == HAL_OK) {
 8000724:	463b      	mov	r3, r7
 8000726:	4619      	mov	r1, r3
 8000728:	200e      	movs	r0, #14
 800072a:	f000 ffdf 	bl	80016ec <AD9910_ReadRegister>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d105      	bne.n	8000740 <DDS_Test+0x58>
        printf("Valeur lue du registre 0x00 : 0x%016lX\n", read_value);
 8000734:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000738:	4809      	ldr	r0, [pc, #36]	; (8000760 <DDS_Test+0x78>)
 800073a:	f009 f9dd 	bl	8009af8 <iprintf>
    } else {
        printf("Erreur de lecture dans le registre.");
        printf("Test commit develop");
    }
}
 800073e:	e005      	b.n	800074c <DDS_Test+0x64>
        printf("Erreur de lecture dans le registre.");
 8000740:	4808      	ldr	r0, [pc, #32]	; (8000764 <DDS_Test+0x7c>)
 8000742:	f009 f9d9 	bl	8009af8 <iprintf>
        printf("Test commit develop");
 8000746:	4808      	ldr	r0, [pc, #32]	; (8000768 <DDS_Test+0x80>)
 8000748:	f009 f9d6 	bl	8009af8 <iprintf>
}
 800074c:	bf00      	nop
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	00800302 	.word	0x00800302
 8000758:	0800a8b0 	.word	0x0800a8b0
 800075c:	0800a8d0 	.word	0x0800a8d0
 8000760:	0800a8f8 	.word	0x0800a8f8
 8000764:	0800a920 	.word	0x0800a920
 8000768:	0800a944 	.word	0x0800a944
 800076c:	00000000 	.word	0x00000000

08000770 <DDS_Reg_Update>:
void DDS_Reg_Update() {
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
	uint64_t readback = 0;
 8000776:	f04f 0200 	mov.w	r2, #0
 800077a:	f04f 0300 	mov.w	r3, #0
 800077e:	e9c7 2300 	strd	r2, r3, [r7]

	ad9910_regs[0] 		= 0x00800302;
 8000782:	4971      	ldr	r1, [pc, #452]	; (8000948 <DDS_Reg_Update+0x1d8>)
 8000784:	4a71      	ldr	r2, [pc, #452]	; (800094c <DDS_Reg_Update+0x1dc>)
 8000786:	f04f 0300 	mov.w	r3, #0
 800078a:	e9c1 2300 	strd	r2, r3, [r1]
	ad9910_regs[1] 		= 0x01000820;
 800078e:	496e      	ldr	r1, [pc, #440]	; (8000948 <DDS_Reg_Update+0x1d8>)
 8000790:	4a6f      	ldr	r2, [pc, #444]	; (8000950 <DDS_Reg_Update+0x1e0>)
 8000792:	f04f 0300 	mov.w	r3, #0
 8000796:	e9c1 2302 	strd	r2, r3, [r1, #8]
	ad9910_regs[2] 		= 0x01204118; //PLL ON, VCO1, N=12
 800079a:	496b      	ldr	r1, [pc, #428]	; (8000948 <DDS_Reg_Update+0x1d8>)
 800079c:	a366      	add	r3, pc, #408	; (adr r3, 8000938 <DDS_Reg_Update+0x1c8>)
 800079e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007a2:	e9c1 2304 	strd	r2, r3, [r1, #16]
	ad9910_regs[3] 		= 0x0000007F;
 80007a6:	4968      	ldr	r1, [pc, #416]	; (8000948 <DDS_Reg_Update+0x1d8>)
 80007a8:	f04f 027f 	mov.w	r2, #127	; 0x7f
 80007ac:	f04f 0300 	mov.w	r3, #0
 80007b0:	e9c1 2306 	strd	r2, r3, [r1, #24]
	ad9910_regs[4] 		= 0xFFFFFFFF;
 80007b4:	4964      	ldr	r1, [pc, #400]	; (8000948 <DDS_Reg_Update+0x1d8>)
 80007b6:	f04f 32ff 	mov.w	r2, #4294967295
 80007ba:	f04f 0300 	mov.w	r3, #0
 80007be:	e9c1 2308 	strd	r2, r3, [r1, #32]
	ad9910_regs[5] 		= 0x000000000000;
 80007c2:	4961      	ldr	r1, [pc, #388]	; (8000948 <DDS_Reg_Update+0x1d8>)
 80007c4:	f04f 0200 	mov.w	r2, #0
 80007c8:	f04f 0300 	mov.w	r3, #0
 80007cc:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	ad9910_regs[6] 		= 0x000000000000;
 80007d0:	495d      	ldr	r1, [pc, #372]	; (8000948 <DDS_Reg_Update+0x1d8>)
 80007d2:	f04f 0200 	mov.w	r2, #0
 80007d6:	f04f 0300 	mov.w	r3, #0
 80007da:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	ad9910_regs[7] 		= 0x00000000; //FTW 100MHz
 80007de:	495a      	ldr	r1, [pc, #360]	; (8000948 <DDS_Reg_Update+0x1d8>)
 80007e0:	f04f 0200 	mov.w	r2, #0
 80007e4:	f04f 0300 	mov.w	r3, #0
 80007e8:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	ad9910_regs[8] 		= 0x0000; //POW
 80007ec:	4956      	ldr	r1, [pc, #344]	; (8000948 <DDS_Reg_Update+0x1d8>)
 80007ee:	f04f 0200 	mov.w	r2, #0
 80007f2:	f04f 0300 	mov.w	r3, #0
 80007f6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	ad9910_regs[9] 		= 0x0001FFFC; //ASF full scale
 80007fa:	4953      	ldr	r1, [pc, #332]	; (8000948 <DDS_Reg_Update+0x1d8>)
 80007fc:	4a55      	ldr	r2, [pc, #340]	; (8000954 <DDS_Reg_Update+0x1e4>)
 80007fe:	f04f 0300 	mov.w	r3, #0
 8000802:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	ad9910_regs[0x0A] 	= 0x00000000;
 8000806:	4950      	ldr	r1, [pc, #320]	; (8000948 <DDS_Reg_Update+0x1d8>)
 8000808:	f04f 0200 	mov.w	r2, #0
 800080c:	f04f 0300 	mov.w	r3, #0
 8000810:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	ad9910_regs[0x0B] 	= 0x0000000000000000;
 8000814:	494c      	ldr	r1, [pc, #304]	; (8000948 <DDS_Reg_Update+0x1d8>)
 8000816:	f04f 0200 	mov.w	r2, #0
 800081a:	f04f 0300 	mov.w	r3, #0
 800081e:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	ad9910_regs[0x0C] 	= 0x0000000000000000;
 8000822:	4949      	ldr	r1, [pc, #292]	; (8000948 <DDS_Reg_Update+0x1d8>)
 8000824:	f04f 0200 	mov.w	r2, #0
 8000828:	f04f 0300 	mov.w	r3, #0
 800082c:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	ad9910_regs[0x0D] 	= 0x00000000;
 8000830:	4945      	ldr	r1, [pc, #276]	; (8000948 <DDS_Reg_Update+0x1d8>)
 8000832:	f04f 0200 	mov.w	r2, #0
 8000836:	f04f 0300 	mov.w	r3, #0
 800083a:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	ad9910_regs[0x0E] 	= 0x3FFF000000000000;
 800083e:	4942      	ldr	r1, [pc, #264]	; (8000948 <DDS_Reg_Update+0x1d8>)
 8000840:	f04f 0200 	mov.w	r2, #0
 8000844:	4b44      	ldr	r3, [pc, #272]	; (8000958 <DDS_Reg_Update+0x1e8>)
 8000846:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	ad9910_regs[0x0F] 	= 0x3FFF000000000000;
 800084a:	493f      	ldr	r1, [pc, #252]	; (8000948 <DDS_Reg_Update+0x1d8>)
 800084c:	f04f 0200 	mov.w	r2, #0
 8000850:	4b41      	ldr	r3, [pc, #260]	; (8000958 <DDS_Reg_Update+0x1e8>)
 8000852:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	ad9910_regs[0x10] 	= 0x3FFF000000000000;
 8000856:	493c      	ldr	r1, [pc, #240]	; (8000948 <DDS_Reg_Update+0x1d8>)
 8000858:	f04f 0200 	mov.w	r2, #0
 800085c:	4b3e      	ldr	r3, [pc, #248]	; (8000958 <DDS_Reg_Update+0x1e8>)
 800085e:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
	ad9910_regs[0x11] 	= 0x3FFF000000000000;
 8000862:	4939      	ldr	r1, [pc, #228]	; (8000948 <DDS_Reg_Update+0x1d8>)
 8000864:	f04f 0200 	mov.w	r2, #0
 8000868:	4b3b      	ldr	r3, [pc, #236]	; (8000958 <DDS_Reg_Update+0x1e8>)
 800086a:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	ad9910_regs[0x12] 	= 0x3FFF000000000000;
 800086e:	4936      	ldr	r1, [pc, #216]	; (8000948 <DDS_Reg_Update+0x1d8>)
 8000870:	f04f 0200 	mov.w	r2, #0
 8000874:	4b38      	ldr	r3, [pc, #224]	; (8000958 <DDS_Reg_Update+0x1e8>)
 8000876:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
	ad9910_regs[0x13] 	= 0x3FFF000000000000;
 800087a:	4933      	ldr	r1, [pc, #204]	; (8000948 <DDS_Reg_Update+0x1d8>)
 800087c:	f04f 0200 	mov.w	r2, #0
 8000880:	4b35      	ldr	r3, [pc, #212]	; (8000958 <DDS_Reg_Update+0x1e8>)
 8000882:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
	ad9910_regs[0x14] 	= 0x3FFF0000574D1F00;
 8000886:	4930      	ldr	r1, [pc, #192]	; (8000948 <DDS_Reg_Update+0x1d8>)
 8000888:	a32d      	add	r3, pc, #180	; (adr r3, 8000940 <DDS_Reg_Update+0x1d0>)
 800088a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800088e:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
	ad9910_regs[0x15] 	= 0x3FFF0000574D1F00;
 8000892:	492d      	ldr	r1, [pc, #180]	; (8000948 <DDS_Reg_Update+0x1d8>)
 8000894:	a32a      	add	r3, pc, #168	; (adr r3, 8000940 <DDS_Reg_Update+0x1d0>)
 8000896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800089a:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
	ad9910_regs[0x16] 	= 0x00000000;
 800089e:	492a      	ldr	r1, [pc, #168]	; (8000948 <DDS_Reg_Update+0x1d8>)
 80008a0:	f04f 0200 	mov.w	r2, #0
 80008a4:	f04f 0300 	mov.w	r3, #0
 80008a8:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0
	printf("Ecriture des registres.\n");
 80008ac:	482b      	ldr	r0, [pc, #172]	; (800095c <DDS_Reg_Update+0x1ec>)
 80008ae:	f009 f989 	bl	8009bc4 <puts>

	for (uint8_t i = 0; i < 23; i++) {
 80008b2:	2300      	movs	r3, #0
 80008b4:	73fb      	strb	r3, [r7, #15]
 80008b6:	e00c      	b.n	80008d2 <DDS_Reg_Update+0x162>
			AD9910_WriteRegister(i,ad9910_regs[i]);
 80008b8:	7bfb      	ldrb	r3, [r7, #15]
 80008ba:	4a23      	ldr	r2, [pc, #140]	; (8000948 <DDS_Reg_Update+0x1d8>)
 80008bc:	00db      	lsls	r3, r3, #3
 80008be:	4413      	add	r3, r2
 80008c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008c4:	7bf9      	ldrb	r1, [r7, #15]
 80008c6:	4608      	mov	r0, r1
 80008c8:	f000 fea0 	bl	800160c <AD9910_WriteRegister>
	for (uint8_t i = 0; i < 23; i++) {
 80008cc:	7bfb      	ldrb	r3, [r7, #15]
 80008ce:	3301      	adds	r3, #1
 80008d0:	73fb      	strb	r3, [r7, #15]
 80008d2:	7bfb      	ldrb	r3, [r7, #15]
 80008d4:	2b16      	cmp	r3, #22
 80008d6:	d9ef      	bls.n	80008b8 <DDS_Reg_Update+0x148>
	    }
	printf("IO Update.\n");
 80008d8:	4821      	ldr	r0, [pc, #132]	; (8000960 <DDS_Reg_Update+0x1f0>)
 80008da:	f009 f973 	bl	8009bc4 <puts>
	AD9910_IOUpdate();
 80008de:	f000 fe7f 	bl	80015e0 <AD9910_IOUpdate>
	HAL_Delay(10);
 80008e2:	200a      	movs	r0, #10
 80008e4:	f001 f9da 	bl	8001c9c <HAL_Delay>
	for (int i = 0; i < 23; i++) {
 80008e8:	2300      	movs	r3, #0
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	e01a      	b.n	8000924 <DDS_Reg_Update+0x1b4>
		 AD9910_ReadRegister(i,&readback);
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	463a      	mov	r2, r7
 80008f4:	4611      	mov	r1, r2
 80008f6:	4618      	mov	r0, r3
 80008f8:	f000 fef8 	bl	80016ec <AD9910_ReadRegister>
		 printf("Valeur du registre 0x%X = 0x%08lX%08lX\n", i, (uint32_t)(readback >> 32), (uint32_t)(readback));
 80008fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000900:	f04f 0200 	mov.w	r2, #0
 8000904:	f04f 0300 	mov.w	r3, #0
 8000908:	000a      	movs	r2, r1
 800090a:	2300      	movs	r3, #0
 800090c:	4611      	mov	r1, r2
 800090e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000912:	4613      	mov	r3, r2
 8000914:	460a      	mov	r2, r1
 8000916:	68b9      	ldr	r1, [r7, #8]
 8000918:	4812      	ldr	r0, [pc, #72]	; (8000964 <DDS_Reg_Update+0x1f4>)
 800091a:	f009 f8ed 	bl	8009af8 <iprintf>
	for (int i = 0; i < 23; i++) {
 800091e:	68bb      	ldr	r3, [r7, #8]
 8000920:	3301      	adds	r3, #1
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	2b16      	cmp	r3, #22
 8000928:	dde1      	ble.n	80008ee <DDS_Reg_Update+0x17e>
	    }
}
 800092a:	bf00      	nop
 800092c:	bf00      	nop
 800092e:	3710      	adds	r7, #16
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	f3af 8000 	nop.w
 8000938:	01204118 	.word	0x01204118
 800093c:	00000000 	.word	0x00000000
 8000940:	574d1f00 	.word	0x574d1f00
 8000944:	3fff0000 	.word	0x3fff0000
 8000948:	24000360 	.word	0x24000360
 800094c:	00800302 	.word	0x00800302
 8000950:	01000820 	.word	0x01000820
 8000954:	0001fffc 	.word	0x0001fffc
 8000958:	3fff0000 	.word	0x3fff0000
 800095c:	0800a958 	.word	0x0800a958
 8000960:	0800a970 	.word	0x0800a970
 8000964:	0800a97c 	.word	0x0800a97c

08000968 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
    static uint8_t index = 0;

    if (huart->Instance == USART3) {
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a17      	ldr	r2, [pc, #92]	; (80009d4 <HAL_UART_RxCpltCallback+0x6c>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d128      	bne.n	80009cc <HAL_UART_RxCpltCallback+0x64>
        if (rx_buffer[0] == '\n' || rx_buffer[0] == '\r') {  // Fin de commande
 800097a:	4b17      	ldr	r3, [pc, #92]	; (80009d8 <HAL_UART_RxCpltCallback+0x70>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	2b0a      	cmp	r3, #10
 8000980:	d003      	beq.n	800098a <HAL_UART_RxCpltCallback+0x22>
 8000982:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <HAL_UART_RxCpltCallback+0x70>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	2b0d      	cmp	r3, #13
 8000988:	d10c      	bne.n	80009a4 <HAL_UART_RxCpltCallback+0x3c>
            command_buffer[index] = '\0';
 800098a:	4b14      	ldr	r3, [pc, #80]	; (80009dc <HAL_UART_RxCpltCallback+0x74>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	461a      	mov	r2, r3
 8000990:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <HAL_UART_RxCpltCallback+0x78>)
 8000992:	2100      	movs	r1, #0
 8000994:	5499      	strb	r1, [r3, r2]
            index = 0;
 8000996:	4b11      	ldr	r3, [pc, #68]	; (80009dc <HAL_UART_RxCpltCallback+0x74>)
 8000998:	2200      	movs	r2, #0
 800099a:	701a      	strb	r2, [r3, #0]
            command_ready = 1;
 800099c:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <HAL_UART_RxCpltCallback+0x7c>)
 800099e:	2201      	movs	r2, #1
 80009a0:	701a      	strb	r2, [r3, #0]
 80009a2:	e00e      	b.n	80009c2 <HAL_UART_RxCpltCallback+0x5a>
        } else if (index < sizeof(command_buffer) - 1) {
 80009a4:	4b0d      	ldr	r3, [pc, #52]	; (80009dc <HAL_UART_RxCpltCallback+0x74>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	2b08      	cmp	r3, #8
 80009aa:	d80a      	bhi.n	80009c2 <HAL_UART_RxCpltCallback+0x5a>
            command_buffer[index++] = rx_buffer[0];
 80009ac:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <HAL_UART_RxCpltCallback+0x74>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	1c5a      	adds	r2, r3, #1
 80009b2:	b2d1      	uxtb	r1, r2
 80009b4:	4a09      	ldr	r2, [pc, #36]	; (80009dc <HAL_UART_RxCpltCallback+0x74>)
 80009b6:	7011      	strb	r1, [r2, #0]
 80009b8:	461a      	mov	r2, r3
 80009ba:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <HAL_UART_RxCpltCallback+0x70>)
 80009bc:	7819      	ldrb	r1, [r3, #0]
 80009be:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <HAL_UART_RxCpltCallback+0x78>)
 80009c0:	5499      	strb	r1, [r3, r2]
        }

        // Relance la réception
        HAL_UART_Receive_IT(&huart3, (uint8_t *)rx_buffer, 1);
 80009c2:	2201      	movs	r2, #1
 80009c4:	4904      	ldr	r1, [pc, #16]	; (80009d8 <HAL_UART_RxCpltCallback+0x70>)
 80009c6:	4808      	ldr	r0, [pc, #32]	; (80009e8 <HAL_UART_RxCpltCallback+0x80>)
 80009c8:	f006 fb80 	bl	80070cc <HAL_UART_Receive_IT>
    }
}
 80009cc:	bf00      	nop
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40004800 	.word	0x40004800
 80009d8:	24000350 	.word	0x24000350
 80009dc:	24000418 	.word	0x24000418
 80009e0:	24000354 	.word	0x24000354
 80009e4:	2400035e 	.word	0x2400035e
 80009e8:	240002bc 	.word	0x240002bc

080009ec <UART_SendString>:

void UART_SendString(char *message) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 80009f4:	6878      	ldr	r0, [r7, #4]
 80009f6:	f7ff fc8b 	bl	8000310 <strlen>
 80009fa:	4603      	mov	r3, r0
 80009fc:	b29a      	uxth	r2, r3
 80009fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000a02:	6879      	ldr	r1, [r7, #4]
 8000a04:	4803      	ldr	r0, [pc, #12]	; (8000a14 <UART_SendString+0x28>)
 8000a06:	f006 fad2 	bl	8006fae <HAL_UART_Transmit>
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	240002bc 	.word	0x240002bc

08000a18 <processCommand>:

void processCommand(void) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0

	if (command_buffer[0] == '1' || command_buffer[0] == '2' || command_buffer[0] == '3'){
 8000a1c:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <processCommand+0x58>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	2b31      	cmp	r3, #49	; 0x31
 8000a22:	d007      	beq.n	8000a34 <processCommand+0x1c>
 8000a24:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <processCommand+0x58>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b32      	cmp	r3, #50	; 0x32
 8000a2a:	d003      	beq.n	8000a34 <processCommand+0x1c>
 8000a2c:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <processCommand+0x58>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b33      	cmp	r3, #51	; 0x33
 8000a32:	d118      	bne.n	8000a66 <processCommand+0x4e>
        // Effectuer l'action correspondante
        switch (command_buffer[0]) {
 8000a34:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <processCommand+0x58>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2b33      	cmp	r3, #51	; 0x33
 8000a3a:	d00c      	beq.n	8000a56 <processCommand+0x3e>
 8000a3c:	2b33      	cmp	r3, #51	; 0x33
 8000a3e:	dc0d      	bgt.n	8000a5c <processCommand+0x44>
 8000a40:	2b31      	cmp	r3, #49	; 0x31
 8000a42:	d002      	beq.n	8000a4a <processCommand+0x32>
 8000a44:	2b32      	cmp	r3, #50	; 0x32
 8000a46:	d003      	beq.n	8000a50 <processCommand+0x38>
 8000a48:	e008      	b.n	8000a5c <processCommand+0x44>
            case '1': AD9910_Reset(); break;
 8000a4a:	f000 fdb5 	bl	80015b8 <AD9910_Reset>
 8000a4e:	e009      	b.n	8000a64 <processCommand+0x4c>
            case '2': DDS_Test(); break;
 8000a50:	f7ff fe4a 	bl	80006e8 <DDS_Test>
 8000a54:	e006      	b.n	8000a64 <processCommand+0x4c>
            case '3': DDS_Reg_Update();break;
 8000a56:	f7ff fe8b 	bl	8000770 <DDS_Reg_Update>
 8000a5a:	e003      	b.n	8000a64 <processCommand+0x4c>
            default:
                UART_SendString("IO invalide\r\n");
 8000a5c:	4805      	ldr	r0, [pc, #20]	; (8000a74 <processCommand+0x5c>)
 8000a5e:	f7ff ffc5 	bl	80009ec <UART_SendString>
                return;
 8000a62:	e004      	b.n	8000a6e <processCommand+0x56>
        switch (command_buffer[0]) {
 8000a64:	e003      	b.n	8000a6e <processCommand+0x56>
        }
	} else
        {
        	printf("Commande invalide\r\n");
 8000a66:	4804      	ldr	r0, [pc, #16]	; (8000a78 <processCommand+0x60>)
 8000a68:	f009 f8ac 	bl	8009bc4 <puts>
        	return;
 8000a6c:	bf00      	nop
        }

        // Confirmation après exécution

}
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	24000354 	.word	0x24000354
 8000a74:	0800a9a4 	.word	0x0800a9a4
 8000a78:	0800a9b4 	.word	0x0800a9b4

08000a7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a80:	f001 f87a 	bl	8001b78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a84:	f000 f828 	bl	8000ad8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a88:	f000 f98c 	bl	8000da4 <MX_GPIO_Init>
  MX_ETH_Init();
 8000a8c:	f000 f894 	bl	8000bb8 <MX_ETH_Init>
  MX_SPI1_Init();
 8000a90:	f000 f8de 	bl	8000c50 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8000a94:	f000 f932 	bl	8000cfc <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000a98:	f000 f97c 	bl	8000d94 <MX_USB_OTG_HS_USB_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, (uint8_t *)rx_buffer, 1);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	490a      	ldr	r1, [pc, #40]	; (8000ac8 <main+0x4c>)
 8000aa0:	480a      	ldr	r0, [pc, #40]	; (8000acc <main+0x50>)
 8000aa2:	f006 fb13 	bl	80070cc <HAL_UART_Receive_IT>
  AD9910_Reset();
 8000aa6:	f000 fd87 	bl	80015b8 <AD9910_Reset>
  UART_SendString("Programme de test. Entrez une commande.\r\n");
 8000aaa:	4809      	ldr	r0, [pc, #36]	; (8000ad0 <main+0x54>)
 8000aac:	f7ff ff9e 	bl	80009ec <UART_SendString>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (command_ready) {
 8000ab0:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <main+0x58>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d0fa      	beq.n	8000ab0 <main+0x34>
	             command_ready = 0;
 8000aba:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <main+0x58>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	701a      	strb	r2, [r3, #0]
	             processCommand();
 8000ac0:	f7ff ffaa 	bl	8000a18 <processCommand>
	  if (command_ready) {
 8000ac4:	e7f4      	b.n	8000ab0 <main+0x34>
 8000ac6:	bf00      	nop
 8000ac8:	24000350 	.word	0x24000350
 8000acc:	240002bc 	.word	0x240002bc
 8000ad0:	0800a9c8 	.word	0x0800a9c8
 8000ad4:	2400035e 	.word	0x2400035e

08000ad8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b09c      	sub	sp, #112	; 0x70
 8000adc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ade:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae2:	224c      	movs	r2, #76	; 0x4c
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f009 f94c 	bl	8009d84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aec:	1d3b      	adds	r3, r7, #4
 8000aee:	2220      	movs	r2, #32
 8000af0:	2100      	movs	r1, #0
 8000af2:	4618      	mov	r0, r3
 8000af4:	f009 f946 	bl	8009d84 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000af8:	2002      	movs	r0, #2
 8000afa:	f002 fd71 	bl	80035e0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000afe:	2300      	movs	r3, #0
 8000b00:	603b      	str	r3, [r7, #0]
 8000b02:	4b2c      	ldr	r3, [pc, #176]	; (8000bb4 <SystemClock_Config+0xdc>)
 8000b04:	699b      	ldr	r3, [r3, #24]
 8000b06:	4a2b      	ldr	r2, [pc, #172]	; (8000bb4 <SystemClock_Config+0xdc>)
 8000b08:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b0c:	6193      	str	r3, [r2, #24]
 8000b0e:	4b29      	ldr	r3, [pc, #164]	; (8000bb4 <SystemClock_Config+0xdc>)
 8000b10:	699b      	ldr	r3, [r3, #24]
 8000b12:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b16:	603b      	str	r3, [r7, #0]
 8000b18:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b1a:	bf00      	nop
 8000b1c:	4b25      	ldr	r3, [pc, #148]	; (8000bb4 <SystemClock_Config+0xdc>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b28:	d1f8      	bne.n	8000b1c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000b2a:	2321      	movs	r3, #33	; 0x21
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b2e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b32:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000b34:	2301      	movs	r3, #1
 8000b36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b40:	2304      	movs	r3, #4
 8000b42:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000b44:	f240 1313 	movw	r3, #275	; 0x113
 8000b48:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b4e:	2304      	movs	r3, #4
 8000b50:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b52:	2302      	movs	r3, #2
 8000b54:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000b56:	2304      	movs	r3, #4
 8000b58:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b66:	4618      	mov	r0, r3
 8000b68:	f002 fd74 	bl	8003654 <HAL_RCC_OscConfig>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000b72:	f000 fa39 	bl	8000fe8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b76:	233f      	movs	r3, #63	; 0x3f
 8000b78:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b82:	2308      	movs	r3, #8
 8000b84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b86:	2340      	movs	r3, #64	; 0x40
 8000b88:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b8a:	2340      	movs	r3, #64	; 0x40
 8000b8c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b92:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b94:	2340      	movs	r3, #64	; 0x40
 8000b96:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b98:	1d3b      	adds	r3, r7, #4
 8000b9a:	2103      	movs	r1, #3
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f003 f933 	bl	8003e08 <HAL_RCC_ClockConfig>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000ba8:	f000 fa1e 	bl	8000fe8 <Error_Handler>
  }
}
 8000bac:	bf00      	nop
 8000bae:	3770      	adds	r7, #112	; 0x70
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	58024800 	.word	0x58024800

08000bb8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000bbc:	4b1e      	ldr	r3, [pc, #120]	; (8000c38 <MX_ETH_Init+0x80>)
 8000bbe:	4a1f      	ldr	r2, [pc, #124]	; (8000c3c <MX_ETH_Init+0x84>)
 8000bc0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000bc2:	4b1f      	ldr	r3, [pc, #124]	; (8000c40 <MX_ETH_Init+0x88>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000bc8:	4b1d      	ldr	r3, [pc, #116]	; (8000c40 <MX_ETH_Init+0x88>)
 8000bca:	2280      	movs	r2, #128	; 0x80
 8000bcc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000bce:	4b1c      	ldr	r3, [pc, #112]	; (8000c40 <MX_ETH_Init+0x88>)
 8000bd0:	22e1      	movs	r2, #225	; 0xe1
 8000bd2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000bd4:	4b1a      	ldr	r3, [pc, #104]	; (8000c40 <MX_ETH_Init+0x88>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000bda:	4b19      	ldr	r3, [pc, #100]	; (8000c40 <MX_ETH_Init+0x88>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000be0:	4b17      	ldr	r3, [pc, #92]	; (8000c40 <MX_ETH_Init+0x88>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000be6:	4b14      	ldr	r3, [pc, #80]	; (8000c38 <MX_ETH_Init+0x80>)
 8000be8:	4a15      	ldr	r2, [pc, #84]	; (8000c40 <MX_ETH_Init+0x88>)
 8000bea:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000bec:	4b12      	ldr	r3, [pc, #72]	; (8000c38 <MX_ETH_Init+0x80>)
 8000bee:	2201      	movs	r2, #1
 8000bf0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000bf2:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <MX_ETH_Init+0x80>)
 8000bf4:	4a13      	ldr	r2, [pc, #76]	; (8000c44 <MX_ETH_Init+0x8c>)
 8000bf6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000bf8:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <MX_ETH_Init+0x80>)
 8000bfa:	4a13      	ldr	r2, [pc, #76]	; (8000c48 <MX_ETH_Init+0x90>)
 8000bfc:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <MX_ETH_Init+0x80>)
 8000c00:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000c04:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000c06:	480c      	ldr	r0, [pc, #48]	; (8000c38 <MX_ETH_Init+0x80>)
 8000c08:	f001 fef4 	bl	80029f4 <HAL_ETH_Init>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000c12:	f000 f9e9 	bl	8000fe8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000c16:	2238      	movs	r2, #56	; 0x38
 8000c18:	2100      	movs	r1, #0
 8000c1a:	480c      	ldr	r0, [pc, #48]	; (8000c4c <MX_ETH_Init+0x94>)
 8000c1c:	f009 f8b2 	bl	8009d84 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000c20:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <MX_ETH_Init+0x94>)
 8000c22:	2221      	movs	r2, #33	; 0x21
 8000c24:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000c26:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <MX_ETH_Init+0x94>)
 8000c28:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000c2c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000c2e:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <MX_ETH_Init+0x94>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	24000184 	.word	0x24000184
 8000c3c:	40028000 	.word	0x40028000
 8000c40:	2400041c 	.word	0x2400041c
 8000c44:	240000cc 	.word	0x240000cc
 8000c48:	2400006c 	.word	0x2400006c
 8000c4c:	2400014c 	.word	0x2400014c

08000c50 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c54:	4b27      	ldr	r3, [pc, #156]	; (8000cf4 <MX_SPI1_Init+0xa4>)
 8000c56:	4a28      	ldr	r2, [pc, #160]	; (8000cf8 <MX_SPI1_Init+0xa8>)
 8000c58:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c5a:	4b26      	ldr	r3, [pc, #152]	; (8000cf4 <MX_SPI1_Init+0xa4>)
 8000c5c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000c60:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c62:	4b24      	ldr	r3, [pc, #144]	; (8000cf4 <MX_SPI1_Init+0xa4>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c68:	4b22      	ldr	r3, [pc, #136]	; (8000cf4 <MX_SPI1_Init+0xa4>)
 8000c6a:	2207      	movs	r2, #7
 8000c6c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c6e:	4b21      	ldr	r3, [pc, #132]	; (8000cf4 <MX_SPI1_Init+0xa4>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c74:	4b1f      	ldr	r3, [pc, #124]	; (8000cf4 <MX_SPI1_Init+0xa4>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c7a:	4b1e      	ldr	r3, [pc, #120]	; (8000cf4 <MX_SPI1_Init+0xa4>)
 8000c7c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000c80:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000c82:	4b1c      	ldr	r3, [pc, #112]	; (8000cf4 <MX_SPI1_Init+0xa4>)
 8000c84:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8000c88:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c8a:	4b1a      	ldr	r3, [pc, #104]	; (8000cf4 <MX_SPI1_Init+0xa4>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c90:	4b18      	ldr	r3, [pc, #96]	; (8000cf4 <MX_SPI1_Init+0xa4>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c96:	4b17      	ldr	r3, [pc, #92]	; (8000cf4 <MX_SPI1_Init+0xa4>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000c9c:	4b15      	ldr	r3, [pc, #84]	; (8000cf4 <MX_SPI1_Init+0xa4>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ca2:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <MX_SPI1_Init+0xa4>)
 8000ca4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ca8:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000caa:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <MX_SPI1_Init+0xa4>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000cb0:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <MX_SPI1_Init+0xa4>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000cb6:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <MX_SPI1_Init+0xa4>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000cbc:	4b0d      	ldr	r3, [pc, #52]	; (8000cf4 <MX_SPI1_Init+0xa4>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000cc2:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <MX_SPI1_Init+0xa4>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000cc8:	4b0a      	ldr	r3, [pc, #40]	; (8000cf4 <MX_SPI1_Init+0xa4>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000cce:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <MX_SPI1_Init+0xa4>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000cd4:	4b07      	ldr	r3, [pc, #28]	; (8000cf4 <MX_SPI1_Init+0xa4>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000cda:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <MX_SPI1_Init+0xa4>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ce0:	4804      	ldr	r0, [pc, #16]	; (8000cf4 <MX_SPI1_Init+0xa4>)
 8000ce2:	f005 f9df 	bl	80060a4 <HAL_SPI_Init>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000cec:	f000 f97c 	bl	8000fe8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cf0:	bf00      	nop
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	24000234 	.word	0x24000234
 8000cf8:	40013000 	.word	0x40013000

08000cfc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d00:	4b22      	ldr	r3, [pc, #136]	; (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d02:	4a23      	ldr	r2, [pc, #140]	; (8000d90 <MX_USART3_UART_Init+0x94>)
 8000d04:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d06:	4b21      	ldr	r3, [pc, #132]	; (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d0c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d0e:	4b1f      	ldr	r3, [pc, #124]	; (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d14:	4b1d      	ldr	r3, [pc, #116]	; (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d1a:	4b1c      	ldr	r3, [pc, #112]	; (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d20:	4b1a      	ldr	r3, [pc, #104]	; (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d22:	220c      	movs	r2, #12
 8000d24:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d26:	4b19      	ldr	r3, [pc, #100]	; (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d2c:	4b17      	ldr	r3, [pc, #92]	; (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d32:	4b16      	ldr	r3, [pc, #88]	; (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d38:	4b14      	ldr	r3, [pc, #80]	; (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d3e:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d44:	4811      	ldr	r0, [pc, #68]	; (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d46:	f006 f8e2 	bl	8006f0e <HAL_UART_Init>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d50:	f000 f94a 	bl	8000fe8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d54:	2100      	movs	r1, #0
 8000d56:	480d      	ldr	r0, [pc, #52]	; (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d58:	f008 fd41 	bl	80097de <HAL_UARTEx_SetTxFifoThreshold>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d62:	f000 f941 	bl	8000fe8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d66:	2100      	movs	r1, #0
 8000d68:	4808      	ldr	r0, [pc, #32]	; (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d6a:	f008 fd76 	bl	800985a <HAL_UARTEx_SetRxFifoThreshold>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d74:	f000 f938 	bl	8000fe8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d78:	4804      	ldr	r0, [pc, #16]	; (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d7a:	f008 fcf7 	bl	800976c <HAL_UARTEx_DisableFifoMode>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d84:	f000 f930 	bl	8000fe8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	240002bc 	.word	0x240002bc
 8000d90:	40004800 	.word	0x40004800

08000d94 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
	...

08000da4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08e      	sub	sp, #56	; 0x38
 8000da8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000daa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]
 8000db6:	60da      	str	r2, [r3, #12]
 8000db8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dba:	4b83      	ldr	r3, [pc, #524]	; (8000fc8 <MX_GPIO_Init+0x224>)
 8000dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc0:	4a81      	ldr	r2, [pc, #516]	; (8000fc8 <MX_GPIO_Init+0x224>)
 8000dc2:	f043 0304 	orr.w	r3, r3, #4
 8000dc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dca:	4b7f      	ldr	r3, [pc, #508]	; (8000fc8 <MX_GPIO_Init+0x224>)
 8000dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd0:	f003 0304 	and.w	r3, r3, #4
 8000dd4:	623b      	str	r3, [r7, #32]
 8000dd6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dd8:	4b7b      	ldr	r3, [pc, #492]	; (8000fc8 <MX_GPIO_Init+0x224>)
 8000dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dde:	4a7a      	ldr	r2, [pc, #488]	; (8000fc8 <MX_GPIO_Init+0x224>)
 8000de0:	f043 0320 	orr.w	r3, r3, #32
 8000de4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000de8:	4b77      	ldr	r3, [pc, #476]	; (8000fc8 <MX_GPIO_Init+0x224>)
 8000dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dee:	f003 0320 	and.w	r3, r3, #32
 8000df2:	61fb      	str	r3, [r7, #28]
 8000df4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000df6:	4b74      	ldr	r3, [pc, #464]	; (8000fc8 <MX_GPIO_Init+0x224>)
 8000df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dfc:	4a72      	ldr	r2, [pc, #456]	; (8000fc8 <MX_GPIO_Init+0x224>)
 8000dfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e06:	4b70      	ldr	r3, [pc, #448]	; (8000fc8 <MX_GPIO_Init+0x224>)
 8000e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e10:	61bb      	str	r3, [r7, #24]
 8000e12:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e14:	4b6c      	ldr	r3, [pc, #432]	; (8000fc8 <MX_GPIO_Init+0x224>)
 8000e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e1a:	4a6b      	ldr	r2, [pc, #428]	; (8000fc8 <MX_GPIO_Init+0x224>)
 8000e1c:	f043 0301 	orr.w	r3, r3, #1
 8000e20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e24:	4b68      	ldr	r3, [pc, #416]	; (8000fc8 <MX_GPIO_Init+0x224>)
 8000e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	617b      	str	r3, [r7, #20]
 8000e30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e32:	4b65      	ldr	r3, [pc, #404]	; (8000fc8 <MX_GPIO_Init+0x224>)
 8000e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e38:	4a63      	ldr	r2, [pc, #396]	; (8000fc8 <MX_GPIO_Init+0x224>)
 8000e3a:	f043 0302 	orr.w	r3, r3, #2
 8000e3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e42:	4b61      	ldr	r3, [pc, #388]	; (8000fc8 <MX_GPIO_Init+0x224>)
 8000e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e48:	f003 0302 	and.w	r3, r3, #2
 8000e4c:	613b      	str	r3, [r7, #16]
 8000e4e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e50:	4b5d      	ldr	r3, [pc, #372]	; (8000fc8 <MX_GPIO_Init+0x224>)
 8000e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e56:	4a5c      	ldr	r2, [pc, #368]	; (8000fc8 <MX_GPIO_Init+0x224>)
 8000e58:	f043 0308 	orr.w	r3, r3, #8
 8000e5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e60:	4b59      	ldr	r3, [pc, #356]	; (8000fc8 <MX_GPIO_Init+0x224>)
 8000e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e66:	f003 0308 	and.w	r3, r3, #8
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e6e:	4b56      	ldr	r3, [pc, #344]	; (8000fc8 <MX_GPIO_Init+0x224>)
 8000e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e74:	4a54      	ldr	r2, [pc, #336]	; (8000fc8 <MX_GPIO_Init+0x224>)
 8000e76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e7e:	4b52      	ldr	r3, [pc, #328]	; (8000fc8 <MX_GPIO_Init+0x224>)
 8000e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e88:	60bb      	str	r3, [r7, #8]
 8000e8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e8c:	4b4e      	ldr	r3, [pc, #312]	; (8000fc8 <MX_GPIO_Init+0x224>)
 8000e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e92:	4a4d      	ldr	r2, [pc, #308]	; (8000fc8 <MX_GPIO_Init+0x224>)
 8000e94:	f043 0310 	orr.w	r3, r3, #16
 8000e98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e9c:	4b4a      	ldr	r3, [pc, #296]	; (8000fc8 <MX_GPIO_Init+0x224>)
 8000e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea2:	f003 0310 	and.w	r3, r3, #16
 8000ea6:	607b      	str	r3, [r7, #4]
 8000ea8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DDS_IO_Update_GPIO_Port, DDS_IO_Update_Pin, GPIO_PIN_RESET);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eb0:	4846      	ldr	r0, [pc, #280]	; (8000fcc <MX_GPIO_Init+0x228>)
 8000eb2:	f002 fb7b 	bl	80035ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|DDS_CSn_Pin|DDS_Reset_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f244 0107 	movw	r1, #16391	; 0x4007
 8000ebc:	4844      	ldr	r0, [pc, #272]	; (8000fd0 <MX_GPIO_Init+0x22c>)
 8000ebe:	f002 fb75 	bl	80035ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ec8:	4842      	ldr	r0, [pc, #264]	; (8000fd4 <MX_GPIO_Init+0x230>)
 8000eca:	f002 fb6f 	bl	80035ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2102      	movs	r1, #2
 8000ed2:	4841      	ldr	r0, [pc, #260]	; (8000fd8 <MX_GPIO_Init+0x234>)
 8000ed4:	f002 fb6a 	bl	80035ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ed8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000edc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ee6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eea:	4619      	mov	r1, r3
 8000eec:	483b      	ldr	r0, [pc, #236]	; (8000fdc <MX_GPIO_Init+0x238>)
 8000eee:	f002 f9b5 	bl	800325c <HAL_GPIO_Init>

  /*Configure GPIO pin : DDS_IO_Update_Pin */
  GPIO_InitStruct.Pin = DDS_IO_Update_Pin;
 8000ef2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ef6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f00:	2300      	movs	r3, #0
 8000f02:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DDS_IO_Update_GPIO_Port, &GPIO_InitStruct);
 8000f04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4830      	ldr	r0, [pc, #192]	; (8000fcc <MX_GPIO_Init+0x228>)
 8000f0c:	f002 f9a6 	bl	800325c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin DDS_CSn_Pin DDS_Reset_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|DDS_CSn_Pin|DDS_Reset_Pin|LED_RED_Pin;
 8000f10:	f244 0307 	movw	r3, #16391	; 0x4007
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f16:	2301      	movs	r3, #1
 8000f18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f26:	4619      	mov	r1, r3
 8000f28:	4829      	ldr	r0, [pc, #164]	; (8000fd0 <MX_GPIO_Init+0x22c>)
 8000f2a:	f002 f997 	bl	800325c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000f2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f34:	2301      	movs	r3, #1
 8000f36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000f40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f44:	4619      	mov	r1, r3
 8000f46:	4823      	ldr	r0, [pc, #140]	; (8000fd4 <MX_GPIO_Init+0x230>)
 8000f48:	f002 f988 	bl	800325c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000f4c:	2380      	movs	r3, #128	; 0x80
 8000f4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f50:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000f5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f5e:	4619      	mov	r1, r3
 8000f60:	481f      	ldr	r0, [pc, #124]	; (8000fe0 <MX_GPIO_Init+0x23c>)
 8000f62:	f002 f97b 	bl	800325c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000f66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f78:	4619      	mov	r1, r3
 8000f7a:	481a      	ldr	r0, [pc, #104]	; (8000fe4 <MX_GPIO_Init+0x240>)
 8000f7c:	f002 f96e 	bl	800325c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000f80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	2302      	movs	r3, #2
 8000f88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000f92:	230a      	movs	r3, #10
 8000f94:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000f96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4811      	ldr	r0, [pc, #68]	; (8000fe4 <MX_GPIO_Init+0x240>)
 8000f9e:	f002 f95d 	bl	800325c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000fb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4807      	ldr	r0, [pc, #28]	; (8000fd8 <MX_GPIO_Init+0x234>)
 8000fba:	f002 f94f 	bl	800325c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fbe:	bf00      	nop
 8000fc0:	3738      	adds	r7, #56	; 0x38
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	58024400 	.word	0x58024400
 8000fcc:	58021400 	.word	0x58021400
 8000fd0:	58020400 	.word	0x58020400
 8000fd4:	58020c00 	.word	0x58020c00
 8000fd8:	58021000 	.word	0x58021000
 8000fdc:	58020800 	.word	0x58020800
 8000fe0:	58021800 	.word	0x58021800
 8000fe4:	58020000 	.word	0x58020000

08000fe8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fec:	b672      	cpsid	i
}
 8000fee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ff0:	e7fe      	b.n	8000ff0 <Error_Handler+0x8>
	...

08000ff4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <HAL_MspInit+0x30>)
 8000ffc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001000:	4a08      	ldr	r2, [pc, #32]	; (8001024 <HAL_MspInit+0x30>)
 8001002:	f043 0302 	orr.w	r3, r3, #2
 8001006:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800100a:	4b06      	ldr	r3, [pc, #24]	; (8001024 <HAL_MspInit+0x30>)
 800100c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001010:	f003 0302 	and.w	r3, r3, #2
 8001014:	607b      	str	r3, [r7, #4]
 8001016:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	58024400 	.word	0x58024400

08001028 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08e      	sub	sp, #56	; 0x38
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a59      	ldr	r2, [pc, #356]	; (80011ac <HAL_ETH_MspInit+0x184>)
 8001046:	4293      	cmp	r3, r2
 8001048:	f040 80ab 	bne.w	80011a2 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800104c:	4b58      	ldr	r3, [pc, #352]	; (80011b0 <HAL_ETH_MspInit+0x188>)
 800104e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001052:	4a57      	ldr	r2, [pc, #348]	; (80011b0 <HAL_ETH_MspInit+0x188>)
 8001054:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001058:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800105c:	4b54      	ldr	r3, [pc, #336]	; (80011b0 <HAL_ETH_MspInit+0x188>)
 800105e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001062:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001066:	623b      	str	r3, [r7, #32]
 8001068:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800106a:	4b51      	ldr	r3, [pc, #324]	; (80011b0 <HAL_ETH_MspInit+0x188>)
 800106c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001070:	4a4f      	ldr	r2, [pc, #316]	; (80011b0 <HAL_ETH_MspInit+0x188>)
 8001072:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001076:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800107a:	4b4d      	ldr	r3, [pc, #308]	; (80011b0 <HAL_ETH_MspInit+0x188>)
 800107c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001080:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001084:	61fb      	str	r3, [r7, #28]
 8001086:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001088:	4b49      	ldr	r3, [pc, #292]	; (80011b0 <HAL_ETH_MspInit+0x188>)
 800108a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800108e:	4a48      	ldr	r2, [pc, #288]	; (80011b0 <HAL_ETH_MspInit+0x188>)
 8001090:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001094:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001098:	4b45      	ldr	r3, [pc, #276]	; (80011b0 <HAL_ETH_MspInit+0x188>)
 800109a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800109e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a2:	61bb      	str	r3, [r7, #24]
 80010a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a6:	4b42      	ldr	r3, [pc, #264]	; (80011b0 <HAL_ETH_MspInit+0x188>)
 80010a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ac:	4a40      	ldr	r2, [pc, #256]	; (80011b0 <HAL_ETH_MspInit+0x188>)
 80010ae:	f043 0304 	orr.w	r3, r3, #4
 80010b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010b6:	4b3e      	ldr	r3, [pc, #248]	; (80011b0 <HAL_ETH_MspInit+0x188>)
 80010b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010bc:	f003 0304 	and.w	r3, r3, #4
 80010c0:	617b      	str	r3, [r7, #20]
 80010c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c4:	4b3a      	ldr	r3, [pc, #232]	; (80011b0 <HAL_ETH_MspInit+0x188>)
 80010c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ca:	4a39      	ldr	r2, [pc, #228]	; (80011b0 <HAL_ETH_MspInit+0x188>)
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010d4:	4b36      	ldr	r3, [pc, #216]	; (80011b0 <HAL_ETH_MspInit+0x188>)
 80010d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	613b      	str	r3, [r7, #16]
 80010e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e2:	4b33      	ldr	r3, [pc, #204]	; (80011b0 <HAL_ETH_MspInit+0x188>)
 80010e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e8:	4a31      	ldr	r2, [pc, #196]	; (80011b0 <HAL_ETH_MspInit+0x188>)
 80010ea:	f043 0302 	orr.w	r3, r3, #2
 80010ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010f2:	4b2f      	ldr	r3, [pc, #188]	; (80011b0 <HAL_ETH_MspInit+0x188>)
 80010f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f8:	f003 0302 	and.w	r3, r3, #2
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001100:	4b2b      	ldr	r3, [pc, #172]	; (80011b0 <HAL_ETH_MspInit+0x188>)
 8001102:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001106:	4a2a      	ldr	r2, [pc, #168]	; (80011b0 <HAL_ETH_MspInit+0x188>)
 8001108:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800110c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001110:	4b27      	ldr	r3, [pc, #156]	; (80011b0 <HAL_ETH_MspInit+0x188>)
 8001112:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800111e:	2332      	movs	r3, #50	; 0x32
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001122:	2302      	movs	r3, #2
 8001124:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112a:	2300      	movs	r3, #0
 800112c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800112e:	230b      	movs	r3, #11
 8001130:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001132:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001136:	4619      	mov	r1, r3
 8001138:	481e      	ldr	r0, [pc, #120]	; (80011b4 <HAL_ETH_MspInit+0x18c>)
 800113a:	f002 f88f 	bl	800325c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800113e:	2386      	movs	r3, #134	; 0x86
 8001140:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001142:	2302      	movs	r3, #2
 8001144:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114a:	2300      	movs	r3, #0
 800114c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800114e:	230b      	movs	r3, #11
 8001150:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001152:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001156:	4619      	mov	r1, r3
 8001158:	4817      	ldr	r0, [pc, #92]	; (80011b8 <HAL_ETH_MspInit+0x190>)
 800115a:	f002 f87f 	bl	800325c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800115e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001162:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001164:	2302      	movs	r3, #2
 8001166:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116c:	2300      	movs	r3, #0
 800116e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001170:	230b      	movs	r3, #11
 8001172:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001174:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001178:	4619      	mov	r1, r3
 800117a:	4810      	ldr	r0, [pc, #64]	; (80011bc <HAL_ETH_MspInit+0x194>)
 800117c:	f002 f86e 	bl	800325c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001180:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001184:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001186:	2302      	movs	r3, #2
 8001188:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118e:	2300      	movs	r3, #0
 8001190:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001192:	230b      	movs	r3, #11
 8001194:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001196:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800119a:	4619      	mov	r1, r3
 800119c:	4808      	ldr	r0, [pc, #32]	; (80011c0 <HAL_ETH_MspInit+0x198>)
 800119e:	f002 f85d 	bl	800325c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80011a2:	bf00      	nop
 80011a4:	3738      	adds	r7, #56	; 0x38
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40028000 	.word	0x40028000
 80011b0:	58024400 	.word	0x58024400
 80011b4:	58020800 	.word	0x58020800
 80011b8:	58020000 	.word	0x58020000
 80011bc:	58020400 	.word	0x58020400
 80011c0:	58021800 	.word	0x58021800

080011c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b0ba      	sub	sp, #232	; 0xe8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011cc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011dc:	f107 0318 	add.w	r3, r7, #24
 80011e0:	22b8      	movs	r2, #184	; 0xb8
 80011e2:	2100      	movs	r1, #0
 80011e4:	4618      	mov	r0, r3
 80011e6:	f008 fdcd 	bl	8009d84 <memset>
  if(hspi->Instance==SPI1)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a38      	ldr	r2, [pc, #224]	; (80012d0 <HAL_SPI_MspInit+0x10c>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d168      	bne.n	80012c6 <HAL_SPI_MspInit+0x102>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80011f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011f8:	f04f 0300 	mov.w	r3, #0
 80011fc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001200:	2300      	movs	r3, #0
 8001202:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001204:	f107 0318 	add.w	r3, r7, #24
 8001208:	4618      	mov	r0, r3
 800120a:	f003 f989 	bl	8004520 <HAL_RCCEx_PeriphCLKConfig>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001214:	f7ff fee8 	bl	8000fe8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001218:	4b2e      	ldr	r3, [pc, #184]	; (80012d4 <HAL_SPI_MspInit+0x110>)
 800121a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800121e:	4a2d      	ldr	r2, [pc, #180]	; (80012d4 <HAL_SPI_MspInit+0x110>)
 8001220:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001224:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001228:	4b2a      	ldr	r3, [pc, #168]	; (80012d4 <HAL_SPI_MspInit+0x110>)
 800122a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800122e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001232:	617b      	str	r3, [r7, #20]
 8001234:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001236:	4b27      	ldr	r3, [pc, #156]	; (80012d4 <HAL_SPI_MspInit+0x110>)
 8001238:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800123c:	4a25      	ldr	r2, [pc, #148]	; (80012d4 <HAL_SPI_MspInit+0x110>)
 800123e:	f043 0301 	orr.w	r3, r3, #1
 8001242:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001246:	4b23      	ldr	r3, [pc, #140]	; (80012d4 <HAL_SPI_MspInit+0x110>)
 8001248:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800124c:	f003 0301 	and.w	r3, r3, #1
 8001250:	613b      	str	r3, [r7, #16]
 8001252:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001254:	4b1f      	ldr	r3, [pc, #124]	; (80012d4 <HAL_SPI_MspInit+0x110>)
 8001256:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800125a:	4a1e      	ldr	r2, [pc, #120]	; (80012d4 <HAL_SPI_MspInit+0x110>)
 800125c:	f043 0308 	orr.w	r3, r3, #8
 8001260:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001264:	4b1b      	ldr	r3, [pc, #108]	; (80012d4 <HAL_SPI_MspInit+0x110>)
 8001266:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800126a:	f003 0308 	and.w	r3, r3, #8
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001272:	2360      	movs	r3, #96	; 0x60
 8001274:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001278:	2302      	movs	r3, #2
 800127a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001284:	2300      	movs	r3, #0
 8001286:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800128a:	2305      	movs	r3, #5
 800128c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001290:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001294:	4619      	mov	r1, r3
 8001296:	4810      	ldr	r0, [pc, #64]	; (80012d8 <HAL_SPI_MspInit+0x114>)
 8001298:	f001 ffe0 	bl	800325c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800129c:	2380      	movs	r3, #128	; 0x80
 800129e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a2:	2302      	movs	r3, #2
 80012a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ae:	2300      	movs	r3, #0
 80012b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012b4:	2305      	movs	r3, #5
 80012b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012ba:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012be:	4619      	mov	r1, r3
 80012c0:	4806      	ldr	r0, [pc, #24]	; (80012dc <HAL_SPI_MspInit+0x118>)
 80012c2:	f001 ffcb 	bl	800325c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80012c6:	bf00      	nop
 80012c8:	37e8      	adds	r7, #232	; 0xe8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40013000 	.word	0x40013000
 80012d4:	58024400 	.word	0x58024400
 80012d8:	58020000 	.word	0x58020000
 80012dc:	58020c00 	.word	0x58020c00

080012e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b0b8      	sub	sp, #224	; 0xe0
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012f8:	f107 0310 	add.w	r3, r7, #16
 80012fc:	22b8      	movs	r2, #184	; 0xb8
 80012fe:	2100      	movs	r1, #0
 8001300:	4618      	mov	r0, r3
 8001302:	f008 fd3f 	bl	8009d84 <memset>
  if(huart->Instance==USART3)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a2b      	ldr	r2, [pc, #172]	; (80013b8 <HAL_UART_MspInit+0xd8>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d14e      	bne.n	80013ae <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001310:	f04f 0202 	mov.w	r2, #2
 8001314:	f04f 0300 	mov.w	r3, #0
 8001318:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800131c:	2300      	movs	r3, #0
 800131e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001322:	f107 0310 	add.w	r3, r7, #16
 8001326:	4618      	mov	r0, r3
 8001328:	f003 f8fa 	bl	8004520 <HAL_RCCEx_PeriphCLKConfig>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001332:	f7ff fe59 	bl	8000fe8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001336:	4b21      	ldr	r3, [pc, #132]	; (80013bc <HAL_UART_MspInit+0xdc>)
 8001338:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800133c:	4a1f      	ldr	r2, [pc, #124]	; (80013bc <HAL_UART_MspInit+0xdc>)
 800133e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001342:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001346:	4b1d      	ldr	r3, [pc, #116]	; (80013bc <HAL_UART_MspInit+0xdc>)
 8001348:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800134c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001354:	4b19      	ldr	r3, [pc, #100]	; (80013bc <HAL_UART_MspInit+0xdc>)
 8001356:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800135a:	4a18      	ldr	r2, [pc, #96]	; (80013bc <HAL_UART_MspInit+0xdc>)
 800135c:	f043 0308 	orr.w	r3, r3, #8
 8001360:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001364:	4b15      	ldr	r3, [pc, #84]	; (80013bc <HAL_UART_MspInit+0xdc>)
 8001366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800136a:	f003 0308 	and.w	r3, r3, #8
 800136e:	60bb      	str	r3, [r7, #8]
 8001370:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8001372:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001376:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137a:	2302      	movs	r3, #2
 800137c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001386:	2300      	movs	r3, #0
 8001388:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800138c:	2307      	movs	r3, #7
 800138e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001392:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001396:	4619      	mov	r1, r3
 8001398:	4809      	ldr	r0, [pc, #36]	; (80013c0 <HAL_UART_MspInit+0xe0>)
 800139a:	f001 ff5f 	bl	800325c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800139e:	2200      	movs	r2, #0
 80013a0:	2100      	movs	r1, #0
 80013a2:	2027      	movs	r0, #39	; 0x27
 80013a4:	f000 fd8d 	bl	8001ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80013a8:	2027      	movs	r0, #39	; 0x27
 80013aa:	f000 fda4 	bl	8001ef6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013ae:	bf00      	nop
 80013b0:	37e0      	adds	r7, #224	; 0xe0
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40004800 	.word	0x40004800
 80013bc:	58024400 	.word	0x58024400
 80013c0:	58020c00 	.word	0x58020c00

080013c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013c8:	e7fe      	b.n	80013c8 <NMI_Handler+0x4>

080013ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ce:	e7fe      	b.n	80013ce <HardFault_Handler+0x4>

080013d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013d4:	e7fe      	b.n	80013d4 <MemManage_Handler+0x4>

080013d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013da:	e7fe      	b.n	80013da <BusFault_Handler+0x4>

080013dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e0:	e7fe      	b.n	80013e0 <UsageFault_Handler+0x4>

080013e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr

080013fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013fe:	b480      	push	{r7}
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001410:	f000 fc24 	bl	8001c5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}

08001418 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800141c:	4802      	ldr	r0, [pc, #8]	; (8001428 <USART3_IRQHandler+0x10>)
 800141e:	f005 fea1 	bl	8007164 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	240002bc 	.word	0x240002bc

0800142c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	e00a      	b.n	8001454 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800143e:	f3af 8000 	nop.w
 8001442:	4601      	mov	r1, r0
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	1c5a      	adds	r2, r3, #1
 8001448:	60ba      	str	r2, [r7, #8]
 800144a:	b2ca      	uxtb	r2, r1
 800144c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	3301      	adds	r3, #1
 8001452:	617b      	str	r3, [r7, #20]
 8001454:	697a      	ldr	r2, [r7, #20]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	429a      	cmp	r2, r3
 800145a:	dbf0      	blt.n	800143e <_read+0x12>
  }

  return len;
 800145c:	687b      	ldr	r3, [r7, #4]
}
 800145e:	4618      	mov	r0, r3
 8001460:	3718      	adds	r7, #24
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001466:	b480      	push	{r7}
 8001468:	b083      	sub	sp, #12
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800146e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001472:	4618      	mov	r0, r3
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800147e:	b480      	push	{r7}
 8001480:	b083      	sub	sp, #12
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
 8001486:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800148e:	605a      	str	r2, [r3, #4]
  return 0;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <_isatty>:

int _isatty(int file)
{
 800149e:	b480      	push	{r7}
 80014a0:	b083      	sub	sp, #12
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014a6:	2301      	movs	r3, #1
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3714      	adds	r7, #20
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
	...

080014d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014d8:	4a14      	ldr	r2, [pc, #80]	; (800152c <_sbrk+0x5c>)
 80014da:	4b15      	ldr	r3, [pc, #84]	; (8001530 <_sbrk+0x60>)
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014e4:	4b13      	ldr	r3, [pc, #76]	; (8001534 <_sbrk+0x64>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d102      	bne.n	80014f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014ec:	4b11      	ldr	r3, [pc, #68]	; (8001534 <_sbrk+0x64>)
 80014ee:	4a12      	ldr	r2, [pc, #72]	; (8001538 <_sbrk+0x68>)
 80014f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014f2:	4b10      	ldr	r3, [pc, #64]	; (8001534 <_sbrk+0x64>)
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4413      	add	r3, r2
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d207      	bcs.n	8001510 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001500:	f008 fc8e 	bl	8009e20 <__errno>
 8001504:	4603      	mov	r3, r0
 8001506:	220c      	movs	r2, #12
 8001508:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800150a:	f04f 33ff 	mov.w	r3, #4294967295
 800150e:	e009      	b.n	8001524 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001510:	4b08      	ldr	r3, [pc, #32]	; (8001534 <_sbrk+0x64>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001516:	4b07      	ldr	r3, [pc, #28]	; (8001534 <_sbrk+0x64>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4413      	add	r3, r2
 800151e:	4a05      	ldr	r2, [pc, #20]	; (8001534 <_sbrk+0x64>)
 8001520:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001522:	68fb      	ldr	r3, [r7, #12]
}
 8001524:	4618      	mov	r0, r3
 8001526:	3718      	adds	r7, #24
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	24050000 	.word	0x24050000
 8001530:	00000400 	.word	0x00000400
 8001534:	24000424 	.word	0x24000424
 8001538:	24000578 	.word	0x24000578

0800153c <AD9910_GetRegSize>:
    // Reset DDS
    AD9910_Reset();
}


uint8_t AD9910_GetRegSize(uint8_t reg_id) {
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	71fb      	strb	r3, [r7, #7]
    // Renvoit la taille du buffer
	switch(reg_id)
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	2b16      	cmp	r3, #22
 800154a:	bf8c      	ite	hi
 800154c:	2201      	movhi	r2, #1
 800154e:	2200      	movls	r2, #0
 8001550:	b2d2      	uxtb	r2, r2
 8001552:	2a00      	cmp	r2, #0
 8001554:	d123      	bne.n	800159e <AD9910_GetRegSize+0x62>
 8001556:	2201      	movs	r2, #1
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	4a14      	ldr	r2, [pc, #80]	; (80015b0 <AD9910_GetRegSize+0x74>)
 800155e:	401a      	ands	r2, r3
 8001560:	2a00      	cmp	r2, #0
 8001562:	bf14      	ite	ne
 8001564:	2201      	movne	r2, #1
 8001566:	2200      	moveq	r2, #0
 8001568:	b2d2      	uxtb	r2, r2
 800156a:	2a00      	cmp	r2, #0
 800156c:	d115      	bne.n	800159a <AD9910_GetRegSize+0x5e>
 800156e:	4a11      	ldr	r2, [pc, #68]	; (80015b4 <AD9910_GetRegSize+0x78>)
 8001570:	401a      	ands	r2, r3
 8001572:	2a00      	cmp	r2, #0
 8001574:	bf14      	ite	ne
 8001576:	2201      	movne	r2, #1
 8001578:	2200      	moveq	r2, #0
 800157a:	b2d2      	uxtb	r2, r2
 800157c:	2a00      	cmp	r2, #0
 800157e:	d10a      	bne.n	8001596 <AD9910_GetRegSize+0x5a>
 8001580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001584:	2b00      	cmp	r3, #0
 8001586:	bf14      	ite	ne
 8001588:	2301      	movne	r3, #1
 800158a:	2300      	moveq	r3, #0
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b00      	cmp	r3, #0
 8001590:	d005      	beq.n	800159e <AD9910_GetRegSize+0x62>
		{
			case 8:
				return 2;
 8001592:	2302      	movs	r3, #2
 8001594:	e005      	b.n	80015a2 <AD9910_GetRegSize+0x66>
			case 7:
			case 9:
			case 0x0A:
			case 0x0D:
			case 0x16:
				return 4;
 8001596:	2304      	movs	r3, #4
 8001598:	e003      	b.n	80015a2 <AD9910_GetRegSize+0x66>
			case 0x11:
			case 0x12:
			case 0x13:
			case 0x14:
			case 0x15:
				return 8;
 800159a:	2308      	movs	r3, #8
 800159c:	e001      	b.n	80015a2 <AD9910_GetRegSize+0x66>

			default :
	            break;
 800159e:	bf00      	nop
		}

		return 0; // other registers
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	003fd800 	.word	0x003fd800
 80015b4:	0040269f 	.word	0x0040269f

080015b8 <AD9910_Reset>:

// Fonction de réinitialisation
void AD9910_Reset(void) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(AD9910_RESET_PORT, AD9910_RESET_PIN, GPIO_PIN_SET);
 80015bc:	2201      	movs	r2, #1
 80015be:	2104      	movs	r1, #4
 80015c0:	4806      	ldr	r0, [pc, #24]	; (80015dc <AD9910_Reset+0x24>)
 80015c2:	f001 fff3 	bl	80035ac <HAL_GPIO_WritePin>
    HAL_Delay(10); // 10 ms de délai
 80015c6:	200a      	movs	r0, #10
 80015c8:	f000 fb68 	bl	8001c9c <HAL_Delay>
    HAL_GPIO_WritePin(AD9910_RESET_PORT, AD9910_RESET_PIN, GPIO_PIN_RESET);
 80015cc:	2200      	movs	r2, #0
 80015ce:	2104      	movs	r1, #4
 80015d0:	4802      	ldr	r0, [pc, #8]	; (80015dc <AD9910_Reset+0x24>)
 80015d2:	f001 ffeb 	bl	80035ac <HAL_GPIO_WritePin>
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	58020400 	.word	0x58020400

080015e0 <AD9910_IOUpdate>:

// Mise à jour des registres
void AD9910_IOUpdate(void) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(AD9910_IO_UPDATE_PORT, AD9910_IO_UPDATE_PIN, GPIO_PIN_SET);
 80015e4:	2201      	movs	r2, #1
 80015e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015ea:	4807      	ldr	r0, [pc, #28]	; (8001608 <AD9910_IOUpdate+0x28>)
 80015ec:	f001 ffde 	bl	80035ac <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80015f0:	200a      	movs	r0, #10
 80015f2:	f000 fb53 	bl	8001c9c <HAL_Delay>
    HAL_GPIO_WritePin(AD9910_IO_UPDATE_PORT, AD9910_IO_UPDATE_PIN, GPIO_PIN_RESET);
 80015f6:	2200      	movs	r2, #0
 80015f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015fc:	4802      	ldr	r0, [pc, #8]	; (8001608 <AD9910_IOUpdate+0x28>)
 80015fe:	f001 ffd5 	bl	80035ac <HAL_GPIO_WritePin>
}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	58021400 	.word	0x58021400

0800160c <AD9910_WriteRegister>:

// Écriture dans un registre de l'AD9910
HAL_StatusTypeDef AD9910_WriteRegister(uint8_t reg_addr, uint64_t data) {
 800160c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800160e:	b08b      	sub	sp, #44	; 0x2c
 8001610:	af00      	add	r7, sp, #0
 8001612:	4601      	mov	r1, r0
 8001614:	e9c7 2300 	strd	r2, r3, [r7]
 8001618:	460b      	mov	r3, r1
 800161a:	73fb      	strb	r3, [r7, #15]
    uint8_t write_buffer[9] = {0};
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
 8001620:	f107 0318 	add.w	r3, r7, #24
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	711a      	strb	r2, [r3, #4]
    uint8_t reg_size = AD9910_GetRegSize(reg_addr);
 800162a:	7bfb      	ldrb	r3, [r7, #15]
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff ff85 	bl	800153c <AD9910_GetRegSize>
 8001632:	4603      	mov	r3, r0
 8001634:	77fb      	strb	r3, [r7, #31]

    //write_buffer[0] = reg_addr & 0x7F; // MSB à 0 pour écrire

    write_buffer[0] = 0 | reg_addr;	//Write + Register ID
 8001636:	7bfb      	ldrb	r3, [r7, #15]
 8001638:	753b      	strb	r3, [r7, #20]

	int8_t shift = (int8_t)((reg_size-1) * 8);
 800163a:	7ffb      	ldrb	r3, [r7, #31]
 800163c:	3b01      	subs	r3, #1
 800163e:	b2db      	uxtb	r3, r3
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	b2db      	uxtb	r3, r3
 8001644:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for(int i = 1; shift >= 0 ; i++)
 8001648:	2301      	movs	r3, #1
 800164a:	623b      	str	r3, [r7, #32]
 800164c:	e028      	b.n	80016a0 <AD9910_WriteRegister+0x94>
	{
		if(i < sizeof(write_buffer))
 800164e:	6a3b      	ldr	r3, [r7, #32]
 8001650:	2b08      	cmp	r3, #8
 8001652:	d819      	bhi.n	8001688 <AD9910_WriteRegister+0x7c>
		{
			write_buffer[i] = (uint8_t)(data >> shift);
 8001654:	f997 1027 	ldrsb.w	r1, [r7, #39]	; 0x27
 8001658:	e9d7 2300 	ldrd	r2, r3, [r7]
 800165c:	f1c1 0620 	rsb	r6, r1, #32
 8001660:	f1a1 0020 	sub.w	r0, r1, #32
 8001664:	fa22 f401 	lsr.w	r4, r2, r1
 8001668:	fa03 f606 	lsl.w	r6, r3, r6
 800166c:	4334      	orrs	r4, r6
 800166e:	fa23 f000 	lsr.w	r0, r3, r0
 8001672:	4304      	orrs	r4, r0
 8001674:	fa23 f501 	lsr.w	r5, r3, r1
 8001678:	b2e1      	uxtb	r1, r4
 800167a:	f107 0214 	add.w	r2, r7, #20
 800167e:	6a3b      	ldr	r3, [r7, #32]
 8001680:	4413      	add	r3, r2
 8001682:	460a      	mov	r2, r1
 8001684:	701a      	strb	r2, [r3, #0]
 8001686:	e002      	b.n	800168e <AD9910_WriteRegister+0x82>
		}else{
			printf("update_ad9910_reg overflow !");
 8001688:	4815      	ldr	r0, [pc, #84]	; (80016e0 <AD9910_WriteRegister+0xd4>)
 800168a:	f008 fa35 	bl	8009af8 <iprintf>
		}
		shift -= 8;
 800168e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001692:	3b08      	subs	r3, #8
 8001694:	b2db      	uxtb	r3, r3
 8001696:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for(int i = 1; shift >= 0 ; i++)
 800169a:	6a3b      	ldr	r3, [r7, #32]
 800169c:	3301      	adds	r3, #1
 800169e:	623b      	str	r3, [r7, #32]
 80016a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	dad2      	bge.n	800164e <AD9910_WriteRegister+0x42>
	}

    HAL_GPIO_WritePin(AD9910_CS_PORT, AD9910_CS_PIN, GPIO_PIN_RESET); // Sélection du périphérique
 80016a8:	2200      	movs	r2, #0
 80016aa:	2102      	movs	r1, #2
 80016ac:	480d      	ldr	r0, [pc, #52]	; (80016e4 <AD9910_WriteRegister+0xd8>)
 80016ae:	f001 ff7d 	bl	80035ac <HAL_GPIO_WritePin>
    HAL_StatusTypeDef status = HAL_SPI_Transmit(&AD9910_SPI_PORT, write_buffer, (reg_size+1), HAL_MAX_DELAY);
 80016b2:	7ffb      	ldrb	r3, [r7, #31]
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	3301      	adds	r3, #1
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	f107 0114 	add.w	r1, r7, #20
 80016be:	f04f 33ff 	mov.w	r3, #4294967295
 80016c2:	4809      	ldr	r0, [pc, #36]	; (80016e8 <AD9910_WriteRegister+0xdc>)
 80016c4:	f004 fe12 	bl	80062ec <HAL_SPI_Transmit>
 80016c8:	4603      	mov	r3, r0
 80016ca:	77bb      	strb	r3, [r7, #30]
    HAL_GPIO_WritePin(AD9910_CS_PORT, AD9910_CS_PIN, GPIO_PIN_SET); // Désélection du périphérique
 80016cc:	2201      	movs	r2, #1
 80016ce:	2102      	movs	r1, #2
 80016d0:	4804      	ldr	r0, [pc, #16]	; (80016e4 <AD9910_WriteRegister+0xd8>)
 80016d2:	f001 ff6b 	bl	80035ac <HAL_GPIO_WritePin>
    return status;
 80016d6:	7fbb      	ldrb	r3, [r7, #30]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	372c      	adds	r7, #44	; 0x2c
 80016dc:	46bd      	mov	sp, r7
 80016de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016e0:	0800a9f4 	.word	0x0800a9f4
 80016e4:	58020400 	.word	0x58020400
 80016e8:	24000234 	.word	0x24000234

080016ec <AD9910_ReadRegister>:

// Lecture dans un registre de l'AD9910
HAL_StatusTypeDef AD9910_ReadRegister(uint8_t reg_addr, uint64_t *data) {
 80016ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016f0:	b0ba      	sub	sp, #232	; 0xe8
 80016f2:	af02      	add	r7, sp, #8
 80016f4:	4603      	mov	r3, r0
 80016f6:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80016fa:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
    uint8_t write_buffer[9] = {0};
 80016fe:	2300      	movs	r3, #0
 8001700:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001704:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8001708:	2300      	movs	r3, #0
 800170a:	6013      	str	r3, [r2, #0]
 800170c:	7113      	strb	r3, [r2, #4]
    uint8_t read_buffer[9] = {0};
 800170e:	2300      	movs	r3, #0
 8001710:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001714:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8001718:	2300      	movs	r3, #0
 800171a:	6013      	str	r3, [r2, #0]
 800171c:	7113      	strb	r3, [r2, #4]
    uint8_t reg_size = AD9910_GetRegSize(reg_addr);
 800171e:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff ff0a 	bl	800153c <AD9910_GetRegSize>
 8001728:	4603      	mov	r3, r0
 800172a:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf

    write_buffer[0] = reg_addr | 0x80; // MSB à 1 pour lire
 800172e:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8001732:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001736:	b2db      	uxtb	r3, r3
 8001738:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4

    HAL_GPIO_WritePin(AD9910_CS_PORT, AD9910_CS_PIN, GPIO_PIN_RESET); // Sélection du périphérique
 800173c:	2200      	movs	r2, #0
 800173e:	2102      	movs	r1, #2
 8001740:	48b9      	ldr	r0, [pc, #740]	; (8001a28 <AD9910_ReadRegister+0x33c>)
 8001742:	f001 ff33 	bl	80035ac <HAL_GPIO_WritePin>

    HAL_SPI_TransmitReceive(&AD9910_SPI_PORT, write_buffer, read_buffer,(reg_size+1), HAL_MAX_DELAY);
 8001746:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 800174a:	b29b      	uxth	r3, r3
 800174c:	3301      	adds	r3, #1
 800174e:	b298      	uxth	r0, r3
 8001750:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8001754:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 8001758:	f04f 33ff 	mov.w	r3, #4294967295
 800175c:	9300      	str	r3, [sp, #0]
 800175e:	4603      	mov	r3, r0
 8001760:	48b2      	ldr	r0, [pc, #712]	; (8001a2c <AD9910_ReadRegister+0x340>)
 8001762:	f004 ffb1 	bl	80066c8 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(AD9910_CS_PORT, AD9910_CS_PIN, GPIO_PIN_SET); // Désélection du périphérique
 8001766:	2201      	movs	r2, #1
 8001768:	2102      	movs	r1, #2
 800176a:	48af      	ldr	r0, [pc, #700]	; (8001a28 <AD9910_ReadRegister+0x33c>)
 800176c:	f001 ff1e 	bl	80035ac <HAL_GPIO_WritePin>

    *data = 0;  // Initialise la data à 0
 8001770:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8001774:	f04f 0200 	mov.w	r2, #0
 8001778:	f04f 0300 	mov.w	r3, #0
 800177c:	e9c1 2300 	strd	r2, r3, [r1]

       /*for (int i = 0; i < 8; i++) {
           *data |= ((uint64_t)read_buffer[i] << (i * 8));  // Reconstruction en Little Endian
       }*/

    switch (reg_size) {
 8001780:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8001784:	2b08      	cmp	r3, #8
 8001786:	f000 8092 	beq.w	80018ae <AD9910_ReadRegister+0x1c2>
 800178a:	2b08      	cmp	r3, #8
 800178c:	f300 8141 	bgt.w	8001a12 <AD9910_ReadRegister+0x326>
 8001790:	2b02      	cmp	r3, #2
 8001792:	d002      	beq.n	800179a <AD9910_ReadRegister+0xae>
 8001794:	2b04      	cmp	r3, #4
 8001796:	d027      	beq.n	80017e8 <AD9910_ReadRegister+0xfc>
 8001798:	e13b      	b.n	8001a12 <AD9910_ReadRegister+0x326>
                case 2: *data = ((uint64_t)read_buffer[1] << 8) | ((uint64_t)read_buffer[2]); break;
 800179a:	f897 30c9 	ldrb.w	r3, [r7, #201]	; 0xc9
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	2200      	movs	r2, #0
 80017a2:	461c      	mov	r4, r3
 80017a4:	4615      	mov	r5, r2
 80017a6:	f04f 0200 	mov.w	r2, #0
 80017aa:	f04f 0300 	mov.w	r3, #0
 80017ae:	022b      	lsls	r3, r5, #8
 80017b0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80017b4:	0222      	lsls	r2, r4, #8
 80017b6:	f897 10ca 	ldrb.w	r1, [r7, #202]	; 0xca
 80017ba:	b2c9      	uxtb	r1, r1
 80017bc:	2000      	movs	r0, #0
 80017be:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 80017c2:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
 80017c6:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 80017ca:	4621      	mov	r1, r4
 80017cc:	4311      	orrs	r1, r2
 80017ce:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 80017d2:	4629      	mov	r1, r5
 80017d4:	4319      	orrs	r1, r3
 80017d6:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 80017da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80017de:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80017e2:	e9c3 1200 	strd	r1, r2, [r3]
 80017e6:	e119      	b.n	8001a1c <AD9910_ReadRegister+0x330>
                case 4: *data = ((uint64_t)read_buffer[1] << 24) | ((uint64_t)read_buffer[2] << 16) | ((uint64_t)read_buffer[3] << 8) | (uint64_t)read_buffer[4]; break;
 80017e8:	f897 30c9 	ldrb.w	r3, [r7, #201]	; 0xc9
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	2200      	movs	r2, #0
 80017f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80017f4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80017f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80017fc:	460b      	mov	r3, r1
 80017fe:	0a1b      	lsrs	r3, r3, #8
 8001800:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001804:	460b      	mov	r3, r1
 8001806:	061b      	lsls	r3, r3, #24
 8001808:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800180c:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2200      	movs	r2, #0
 8001814:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001818:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800181c:	f04f 0200 	mov.w	r2, #0
 8001820:	f04f 0300 	mov.w	r3, #0
 8001824:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8001828:	4629      	mov	r1, r5
 800182a:	040b      	lsls	r3, r1, #16
 800182c:	4621      	mov	r1, r4
 800182e:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8001832:	4621      	mov	r1, r4
 8001834:	040a      	lsls	r2, r1, #16
 8001836:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 800183a:	4621      	mov	r1, r4
 800183c:	ea41 0a02 	orr.w	sl, r1, r2
 8001840:	4629      	mov	r1, r5
 8001842:	ea41 0b03 	orr.w	fp, r1, r3
 8001846:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 800184a:	b2db      	uxtb	r3, r3
 800184c:	2200      	movs	r2, #0
 800184e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001852:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001856:	f04f 0200 	mov.w	r2, #0
 800185a:	f04f 0300 	mov.w	r3, #0
 800185e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001862:	4629      	mov	r1, r5
 8001864:	020b      	lsls	r3, r1, #8
 8001866:	4621      	mov	r1, r4
 8001868:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 800186c:	4621      	mov	r1, r4
 800186e:	020a      	lsls	r2, r1, #8
 8001870:	ea4a 0802 	orr.w	r8, sl, r2
 8001874:	ea4b 0903 	orr.w	r9, fp, r3
 8001878:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2200      	movs	r2, #0
 8001880:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001884:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001888:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800188c:	460b      	mov	r3, r1
 800188e:	ea48 0303 	orr.w	r3, r8, r3
 8001892:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001896:	4613      	mov	r3, r2
 8001898:	ea49 0303 	orr.w	r3, r9, r3
 800189c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80018a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80018a4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80018a8:	e9c3 1200 	strd	r1, r2, [r3]
 80018ac:	e0b6      	b.n	8001a1c <AD9910_ReadRegister+0x330>
                case 8: *data = ((uint64_t)read_buffer[1] << 56) | ((uint64_t)read_buffer[2] << 48) | ((uint64_t)read_buffer[3] << 40) | ((uint64_t)read_buffer[4] << 32) | ((uint64_t)read_buffer[5] << 24) | ((uint64_t)read_buffer[6] << 16) | ((uint64_t)read_buffer[7] << 8) | (uint64_t)read_buffer[8]; break;
 80018ae:	f897 30c9 	ldrb.w	r3, [r7, #201]	; 0xc9
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	2200      	movs	r2, #0
 80018b6:	67bb      	str	r3, [r7, #120]	; 0x78
 80018b8:	67fa      	str	r2, [r7, #124]	; 0x7c
 80018ba:	f04f 0000 	mov.w	r0, #0
 80018be:	f04f 0100 	mov.w	r1, #0
 80018c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80018c4:	0619      	lsls	r1, r3, #24
 80018c6:	2000      	movs	r0, #0
 80018c8:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2200      	movs	r2, #0
 80018d0:	673b      	str	r3, [r7, #112]	; 0x70
 80018d2:	677a      	str	r2, [r7, #116]	; 0x74
 80018d4:	f04f 0200 	mov.w	r2, #0
 80018d8:	f04f 0300 	mov.w	r3, #0
 80018dc:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 80018de:	0423      	lsls	r3, r4, #16
 80018e0:	2200      	movs	r2, #0
 80018e2:	ea40 0402 	orr.w	r4, r0, r2
 80018e6:	66bc      	str	r4, [r7, #104]	; 0x68
 80018e8:	430b      	orrs	r3, r1
 80018ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80018ec:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2200      	movs	r2, #0
 80018f4:	663b      	str	r3, [r7, #96]	; 0x60
 80018f6:	667a      	str	r2, [r7, #100]	; 0x64
 80018f8:	f04f 0200 	mov.w	r2, #0
 80018fc:	f04f 0300 	mov.w	r3, #0
 8001900:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001902:	020b      	lsls	r3, r1, #8
 8001904:	2200      	movs	r2, #0
 8001906:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 800190a:	4621      	mov	r1, r4
 800190c:	4311      	orrs	r1, r2
 800190e:	65b9      	str	r1, [r7, #88]	; 0x58
 8001910:	4629      	mov	r1, r5
 8001912:	4319      	orrs	r1, r3
 8001914:	65f9      	str	r1, [r7, #92]	; 0x5c
 8001916:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 800191a:	b2db      	uxtb	r3, r3
 800191c:	2200      	movs	r2, #0
 800191e:	653b      	str	r3, [r7, #80]	; 0x50
 8001920:	657a      	str	r2, [r7, #84]	; 0x54
 8001922:	f04f 0200 	mov.w	r2, #0
 8001926:	f04f 0300 	mov.w	r3, #0
 800192a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800192c:	000b      	movs	r3, r1
 800192e:	2200      	movs	r2, #0
 8001930:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001934:	4621      	mov	r1, r4
 8001936:	4311      	orrs	r1, r2
 8001938:	64b9      	str	r1, [r7, #72]	; 0x48
 800193a:	4629      	mov	r1, r5
 800193c:	4319      	orrs	r1, r3
 800193e:	64f9      	str	r1, [r7, #76]	; 0x4c
 8001940:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8001944:	b2db      	uxtb	r3, r3
 8001946:	2200      	movs	r2, #0
 8001948:	643b      	str	r3, [r7, #64]	; 0x40
 800194a:	647a      	str	r2, [r7, #68]	; 0x44
 800194c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8001950:	460b      	mov	r3, r1
 8001952:	0a1b      	lsrs	r3, r3, #8
 8001954:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001956:	460b      	mov	r3, r1
 8001958:	061b      	lsls	r3, r3, #24
 800195a:	63bb      	str	r3, [r7, #56]	; 0x38
 800195c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001960:	4623      	mov	r3, r4
 8001962:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001966:	4602      	mov	r2, r0
 8001968:	4313      	orrs	r3, r2
 800196a:	633b      	str	r3, [r7, #48]	; 0x30
 800196c:	462b      	mov	r3, r5
 800196e:	460a      	mov	r2, r1
 8001970:	4313      	orrs	r3, r2
 8001972:	637b      	str	r3, [r7, #52]	; 0x34
 8001974:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2200      	movs	r2, #0
 800197c:	62bb      	str	r3, [r7, #40]	; 0x28
 800197e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001980:	f04f 0200 	mov.w	r2, #0
 8001984:	f04f 0300 	mov.w	r3, #0
 8001988:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800198c:	4629      	mov	r1, r5
 800198e:	040b      	lsls	r3, r1, #16
 8001990:	4621      	mov	r1, r4
 8001992:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8001996:	4621      	mov	r1, r4
 8001998:	040a      	lsls	r2, r1, #16
 800199a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800199e:	4621      	mov	r1, r4
 80019a0:	4311      	orrs	r1, r2
 80019a2:	6239      	str	r1, [r7, #32]
 80019a4:	4629      	mov	r1, r5
 80019a6:	4319      	orrs	r1, r3
 80019a8:	6279      	str	r1, [r7, #36]	; 0x24
 80019aa:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	2200      	movs	r2, #0
 80019b2:	61bb      	str	r3, [r7, #24]
 80019b4:	61fa      	str	r2, [r7, #28]
 80019b6:	f04f 0200 	mov.w	r2, #0
 80019ba:	f04f 0300 	mov.w	r3, #0
 80019be:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80019c2:	4629      	mov	r1, r5
 80019c4:	020b      	lsls	r3, r1, #8
 80019c6:	4621      	mov	r1, r4
 80019c8:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 80019cc:	4621      	mov	r1, r4
 80019ce:	020a      	lsls	r2, r1, #8
 80019d0:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80019d4:	4621      	mov	r1, r4
 80019d6:	4311      	orrs	r1, r2
 80019d8:	6139      	str	r1, [r7, #16]
 80019da:	4629      	mov	r1, r5
 80019dc:	4319      	orrs	r1, r3
 80019de:	6179      	str	r1, [r7, #20]
 80019e0:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	2200      	movs	r2, #0
 80019e8:	60bb      	str	r3, [r7, #8]
 80019ea:	60fa      	str	r2, [r7, #12]
 80019ec:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80019f0:	4623      	mov	r3, r4
 80019f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019f6:	4602      	mov	r2, r0
 80019f8:	4313      	orrs	r3, r2
 80019fa:	603b      	str	r3, [r7, #0]
 80019fc:	462b      	mov	r3, r5
 80019fe:	460a      	mov	r2, r1
 8001a00:	4313      	orrs	r3, r2
 8001a02:	607b      	str	r3, [r7, #4]
 8001a04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a08:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001a0c:	e9c3 1200 	strd	r1, r2, [r3]
 8001a10:	e004      	b.n	8001a1c <AD9910_ReadRegister+0x330>
                default:
                    UART_SendString("Erreur de size sur regsize");
 8001a12:	4807      	ldr	r0, [pc, #28]	; (8001a30 <AD9910_ReadRegister+0x344>)
 8001a14:	f7fe ffea 	bl	80009ec <UART_SendString>
                    return;
 8001a18:	bf00      	nop
 8001a1a:	e000      	b.n	8001a1e <AD9910_ReadRegister+0x332>
            }


    return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	37e0      	adds	r7, #224	; 0xe0
 8001a22:	46bd      	mov	sp, r7
 8001a24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a28:	58020400 	.word	0x58020400
 8001a2c:	24000234 	.word	0x24000234
 8001a30:	0800aa14 	.word	0x0800aa14

08001a34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001a34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a6c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a38:	f000 f826 	bl	8001a88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a3c:	480c      	ldr	r0, [pc, #48]	; (8001a70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a3e:	490d      	ldr	r1, [pc, #52]	; (8001a74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a40:	4a0d      	ldr	r2, [pc, #52]	; (8001a78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a44:	e002      	b.n	8001a4c <LoopCopyDataInit>

08001a46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a4a:	3304      	adds	r3, #4

08001a4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a50:	d3f9      	bcc.n	8001a46 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a52:	4a0a      	ldr	r2, [pc, #40]	; (8001a7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a54:	4c0a      	ldr	r4, [pc, #40]	; (8001a80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a58:	e001      	b.n	8001a5e <LoopFillZerobss>

08001a5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a5c:	3204      	adds	r2, #4

08001a5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a60:	d3fb      	bcc.n	8001a5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a62:	f008 f9e3 	bl	8009e2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a66:	f7ff f809 	bl	8000a7c <main>
  bx  lr
 8001a6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a6c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001a70:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001a74:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8001a78:	0800aaac 	.word	0x0800aaac
  ldr r2, =_sbss
 8001a7c:	24000130 	.word	0x24000130
  ldr r4, =_ebss
 8001a80:	24000578 	.word	0x24000578

08001a84 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a84:	e7fe      	b.n	8001a84 <ADC3_IRQHandler>
	...

08001a88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a8c:	4b32      	ldr	r3, [pc, #200]	; (8001b58 <SystemInit+0xd0>)
 8001a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a92:	4a31      	ldr	r2, [pc, #196]	; (8001b58 <SystemInit+0xd0>)
 8001a94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a9c:	4b2f      	ldr	r3, [pc, #188]	; (8001b5c <SystemInit+0xd4>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 030f 	and.w	r3, r3, #15
 8001aa4:	2b06      	cmp	r3, #6
 8001aa6:	d807      	bhi.n	8001ab8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001aa8:	4b2c      	ldr	r3, [pc, #176]	; (8001b5c <SystemInit+0xd4>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f023 030f 	bic.w	r3, r3, #15
 8001ab0:	4a2a      	ldr	r2, [pc, #168]	; (8001b5c <SystemInit+0xd4>)
 8001ab2:	f043 0307 	orr.w	r3, r3, #7
 8001ab6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001ab8:	4b29      	ldr	r3, [pc, #164]	; (8001b60 <SystemInit+0xd8>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a28      	ldr	r2, [pc, #160]	; (8001b60 <SystemInit+0xd8>)
 8001abe:	f043 0301 	orr.w	r3, r3, #1
 8001ac2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001ac4:	4b26      	ldr	r3, [pc, #152]	; (8001b60 <SystemInit+0xd8>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001aca:	4b25      	ldr	r3, [pc, #148]	; (8001b60 <SystemInit+0xd8>)
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	4924      	ldr	r1, [pc, #144]	; (8001b60 <SystemInit+0xd8>)
 8001ad0:	4b24      	ldr	r3, [pc, #144]	; (8001b64 <SystemInit+0xdc>)
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ad6:	4b21      	ldr	r3, [pc, #132]	; (8001b5c <SystemInit+0xd4>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0308 	and.w	r3, r3, #8
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d007      	beq.n	8001af2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001ae2:	4b1e      	ldr	r3, [pc, #120]	; (8001b5c <SystemInit+0xd4>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f023 030f 	bic.w	r3, r3, #15
 8001aea:	4a1c      	ldr	r2, [pc, #112]	; (8001b5c <SystemInit+0xd4>)
 8001aec:	f043 0307 	orr.w	r3, r3, #7
 8001af0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001af2:	4b1b      	ldr	r3, [pc, #108]	; (8001b60 <SystemInit+0xd8>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001af8:	4b19      	ldr	r3, [pc, #100]	; (8001b60 <SystemInit+0xd8>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001afe:	4b18      	ldr	r3, [pc, #96]	; (8001b60 <SystemInit+0xd8>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001b04:	4b16      	ldr	r3, [pc, #88]	; (8001b60 <SystemInit+0xd8>)
 8001b06:	4a18      	ldr	r2, [pc, #96]	; (8001b68 <SystemInit+0xe0>)
 8001b08:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001b0a:	4b15      	ldr	r3, [pc, #84]	; (8001b60 <SystemInit+0xd8>)
 8001b0c:	4a17      	ldr	r2, [pc, #92]	; (8001b6c <SystemInit+0xe4>)
 8001b0e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001b10:	4b13      	ldr	r3, [pc, #76]	; (8001b60 <SystemInit+0xd8>)
 8001b12:	4a17      	ldr	r2, [pc, #92]	; (8001b70 <SystemInit+0xe8>)
 8001b14:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001b16:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <SystemInit+0xd8>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001b1c:	4b10      	ldr	r3, [pc, #64]	; (8001b60 <SystemInit+0xd8>)
 8001b1e:	4a14      	ldr	r2, [pc, #80]	; (8001b70 <SystemInit+0xe8>)
 8001b20:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001b22:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <SystemInit+0xd8>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001b28:	4b0d      	ldr	r3, [pc, #52]	; (8001b60 <SystemInit+0xd8>)
 8001b2a:	4a11      	ldr	r2, [pc, #68]	; (8001b70 <SystemInit+0xe8>)
 8001b2c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001b2e:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <SystemInit+0xd8>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b34:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <SystemInit+0xd8>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a09      	ldr	r2, [pc, #36]	; (8001b60 <SystemInit+0xd8>)
 8001b3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b3e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001b40:	4b07      	ldr	r3, [pc, #28]	; (8001b60 <SystemInit+0xd8>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001b46:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <SystemInit+0xec>)
 8001b48:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001b4c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001b4e:	bf00      	nop
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	e000ed00 	.word	0xe000ed00
 8001b5c:	52002000 	.word	0x52002000
 8001b60:	58024400 	.word	0x58024400
 8001b64:	eaf6ed7f 	.word	0xeaf6ed7f
 8001b68:	02020200 	.word	0x02020200
 8001b6c:	01ff0000 	.word	0x01ff0000
 8001b70:	01010280 	.word	0x01010280
 8001b74:	52004000 	.word	0x52004000

08001b78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b7e:	2003      	movs	r0, #3
 8001b80:	f000 f994 	bl	8001eac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001b84:	f002 faf6 	bl	8004174 <HAL_RCC_GetSysClockFreq>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	4b15      	ldr	r3, [pc, #84]	; (8001be0 <HAL_Init+0x68>)
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	0a1b      	lsrs	r3, r3, #8
 8001b90:	f003 030f 	and.w	r3, r3, #15
 8001b94:	4913      	ldr	r1, [pc, #76]	; (8001be4 <HAL_Init+0x6c>)
 8001b96:	5ccb      	ldrb	r3, [r1, r3]
 8001b98:	f003 031f 	and.w	r3, r3, #31
 8001b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ba2:	4b0f      	ldr	r3, [pc, #60]	; (8001be0 <HAL_Init+0x68>)
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	f003 030f 	and.w	r3, r3, #15
 8001baa:	4a0e      	ldr	r2, [pc, #56]	; (8001be4 <HAL_Init+0x6c>)
 8001bac:	5cd3      	ldrb	r3, [r2, r3]
 8001bae:	f003 031f 	and.w	r3, r3, #31
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb8:	4a0b      	ldr	r2, [pc, #44]	; (8001be8 <HAL_Init+0x70>)
 8001bba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001bbc:	4a0b      	ldr	r2, [pc, #44]	; (8001bec <HAL_Init+0x74>)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bc2:	2000      	movs	r0, #0
 8001bc4:	f000 f814 	bl	8001bf0 <HAL_InitTick>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e002      	b.n	8001bd8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001bd2:	f7ff fa0f 	bl	8000ff4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	58024400 	.word	0x58024400
 8001be4:	0800aa30 	.word	0x0800aa30
 8001be8:	24000004 	.word	0x24000004
 8001bec:	24000000 	.word	0x24000000

08001bf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001bf8:	4b15      	ldr	r3, [pc, #84]	; (8001c50 <HAL_InitTick+0x60>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d101      	bne.n	8001c04 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e021      	b.n	8001c48 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001c04:	4b13      	ldr	r3, [pc, #76]	; (8001c54 <HAL_InitTick+0x64>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	4b11      	ldr	r3, [pc, #68]	; (8001c50 <HAL_InitTick+0x60>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f000 f979 	bl	8001f12 <HAL_SYSTICK_Config>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e00e      	b.n	8001c48 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2b0f      	cmp	r3, #15
 8001c2e:	d80a      	bhi.n	8001c46 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c30:	2200      	movs	r2, #0
 8001c32:	6879      	ldr	r1, [r7, #4]
 8001c34:	f04f 30ff 	mov.w	r0, #4294967295
 8001c38:	f000 f943 	bl	8001ec2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c3c:	4a06      	ldr	r2, [pc, #24]	; (8001c58 <HAL_InitTick+0x68>)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
 8001c44:	e000      	b.n	8001c48 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	2400000c 	.word	0x2400000c
 8001c54:	24000000 	.word	0x24000000
 8001c58:	24000008 	.word	0x24000008

08001c5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c60:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <HAL_IncTick+0x20>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	461a      	mov	r2, r3
 8001c66:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <HAL_IncTick+0x24>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	4a04      	ldr	r2, [pc, #16]	; (8001c80 <HAL_IncTick+0x24>)
 8001c6e:	6013      	str	r3, [r2, #0]
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	2400000c 	.word	0x2400000c
 8001c80:	24000428 	.word	0x24000428

08001c84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  return uwTick;
 8001c88:	4b03      	ldr	r3, [pc, #12]	; (8001c98 <HAL_GetTick+0x14>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	24000428 	.word	0x24000428

08001c9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ca4:	f7ff ffee 	bl	8001c84 <HAL_GetTick>
 8001ca8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb4:	d005      	beq.n	8001cc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ce0 <HAL_Delay+0x44>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	461a      	mov	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cc2:	bf00      	nop
 8001cc4:	f7ff ffde 	bl	8001c84 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d8f7      	bhi.n	8001cc4 <HAL_Delay+0x28>
  {
  }
}
 8001cd4:	bf00      	nop
 8001cd6:	bf00      	nop
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	2400000c 	.word	0x2400000c

08001ce4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001cec:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001cf4:	4904      	ldr	r1, [pc, #16]	; (8001d08 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	604b      	str	r3, [r1, #4]
}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	58000400 	.word	0x58000400

08001d0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <__NVIC_SetPriorityGrouping+0x40>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d22:	68ba      	ldr	r2, [r7, #8]
 8001d24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d28:	4013      	ands	r3, r2
 8001d2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d34:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <__NVIC_SetPriorityGrouping+0x44>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d3a:	4a04      	ldr	r2, [pc, #16]	; (8001d4c <__NVIC_SetPriorityGrouping+0x40>)
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	60d3      	str	r3, [r2, #12]
}
 8001d40:	bf00      	nop
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	e000ed00 	.word	0xe000ed00
 8001d50:	05fa0000 	.word	0x05fa0000

08001d54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d58:	4b04      	ldr	r3, [pc, #16]	; (8001d6c <__NVIC_GetPriorityGrouping+0x18>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	0a1b      	lsrs	r3, r3, #8
 8001d5e:	f003 0307 	and.w	r3, r3, #7
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	db0b      	blt.n	8001d9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d82:	88fb      	ldrh	r3, [r7, #6]
 8001d84:	f003 021f 	and.w	r2, r3, #31
 8001d88:	4907      	ldr	r1, [pc, #28]	; (8001da8 <__NVIC_EnableIRQ+0x38>)
 8001d8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d8e:	095b      	lsrs	r3, r3, #5
 8001d90:	2001      	movs	r0, #1
 8001d92:	fa00 f202 	lsl.w	r2, r0, r2
 8001d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	e000e100 	.word	0xe000e100

08001dac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	6039      	str	r1, [r7, #0]
 8001db6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001db8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	db0a      	blt.n	8001dd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	490c      	ldr	r1, [pc, #48]	; (8001df8 <__NVIC_SetPriority+0x4c>)
 8001dc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dca:	0112      	lsls	r2, r2, #4
 8001dcc:	b2d2      	uxtb	r2, r2
 8001dce:	440b      	add	r3, r1
 8001dd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dd4:	e00a      	b.n	8001dec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	b2da      	uxtb	r2, r3
 8001dda:	4908      	ldr	r1, [pc, #32]	; (8001dfc <__NVIC_SetPriority+0x50>)
 8001ddc:	88fb      	ldrh	r3, [r7, #6]
 8001dde:	f003 030f 	and.w	r3, r3, #15
 8001de2:	3b04      	subs	r3, #4
 8001de4:	0112      	lsls	r2, r2, #4
 8001de6:	b2d2      	uxtb	r2, r2
 8001de8:	440b      	add	r3, r1
 8001dea:	761a      	strb	r2, [r3, #24]
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	e000e100 	.word	0xe000e100
 8001dfc:	e000ed00 	.word	0xe000ed00

08001e00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b089      	sub	sp, #36	; 0x24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	f1c3 0307 	rsb	r3, r3, #7
 8001e1a:	2b04      	cmp	r3, #4
 8001e1c:	bf28      	it	cs
 8001e1e:	2304      	movcs	r3, #4
 8001e20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	3304      	adds	r3, #4
 8001e26:	2b06      	cmp	r3, #6
 8001e28:	d902      	bls.n	8001e30 <NVIC_EncodePriority+0x30>
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	3b03      	subs	r3, #3
 8001e2e:	e000      	b.n	8001e32 <NVIC_EncodePriority+0x32>
 8001e30:	2300      	movs	r3, #0
 8001e32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e34:	f04f 32ff 	mov.w	r2, #4294967295
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43da      	mvns	r2, r3
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	401a      	ands	r2, r3
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e48:	f04f 31ff 	mov.w	r1, #4294967295
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e52:	43d9      	mvns	r1, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e58:	4313      	orrs	r3, r2
         );
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3724      	adds	r7, #36	; 0x24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
	...

08001e68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e78:	d301      	bcc.n	8001e7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e00f      	b.n	8001e9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ea8 <SysTick_Config+0x40>)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	3b01      	subs	r3, #1
 8001e84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e86:	210f      	movs	r1, #15
 8001e88:	f04f 30ff 	mov.w	r0, #4294967295
 8001e8c:	f7ff ff8e 	bl	8001dac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e90:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <SysTick_Config+0x40>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e96:	4b04      	ldr	r3, [pc, #16]	; (8001ea8 <SysTick_Config+0x40>)
 8001e98:	2207      	movs	r2, #7
 8001e9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	e000e010 	.word	0xe000e010

08001eac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f7ff ff29 	bl	8001d0c <__NVIC_SetPriorityGrouping>
}
 8001eba:	bf00      	nop
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b086      	sub	sp, #24
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	4603      	mov	r3, r0
 8001eca:	60b9      	str	r1, [r7, #8]
 8001ecc:	607a      	str	r2, [r7, #4]
 8001ece:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ed0:	f7ff ff40 	bl	8001d54 <__NVIC_GetPriorityGrouping>
 8001ed4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	68b9      	ldr	r1, [r7, #8]
 8001eda:	6978      	ldr	r0, [r7, #20]
 8001edc:	f7ff ff90 	bl	8001e00 <NVIC_EncodePriority>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ee6:	4611      	mov	r1, r2
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff ff5f 	bl	8001dac <__NVIC_SetPriority>
}
 8001eee:	bf00      	nop
 8001ef0:	3718      	adds	r7, #24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	4603      	mov	r3, r0
 8001efe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff ff33 	bl	8001d70 <__NVIC_EnableIRQ>
}
 8001f0a:	bf00      	nop
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b082      	sub	sp, #8
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7ff ffa4 	bl	8001e68 <SysTick_Config>
 8001f20:	4603      	mov	r3, r0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
	...

08001f2c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001f34:	f7ff fea6 	bl	8001c84 <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d101      	bne.n	8001f44 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e2dc      	b.n	80024fe <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d008      	beq.n	8001f62 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2280      	movs	r2, #128	; 0x80
 8001f54:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e2cd      	b.n	80024fe <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a76      	ldr	r2, [pc, #472]	; (8002140 <HAL_DMA_Abort+0x214>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d04a      	beq.n	8002002 <HAL_DMA_Abort+0xd6>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a74      	ldr	r2, [pc, #464]	; (8002144 <HAL_DMA_Abort+0x218>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d045      	beq.n	8002002 <HAL_DMA_Abort+0xd6>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a73      	ldr	r2, [pc, #460]	; (8002148 <HAL_DMA_Abort+0x21c>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d040      	beq.n	8002002 <HAL_DMA_Abort+0xd6>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a71      	ldr	r2, [pc, #452]	; (800214c <HAL_DMA_Abort+0x220>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d03b      	beq.n	8002002 <HAL_DMA_Abort+0xd6>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a70      	ldr	r2, [pc, #448]	; (8002150 <HAL_DMA_Abort+0x224>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d036      	beq.n	8002002 <HAL_DMA_Abort+0xd6>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a6e      	ldr	r2, [pc, #440]	; (8002154 <HAL_DMA_Abort+0x228>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d031      	beq.n	8002002 <HAL_DMA_Abort+0xd6>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a6d      	ldr	r2, [pc, #436]	; (8002158 <HAL_DMA_Abort+0x22c>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d02c      	beq.n	8002002 <HAL_DMA_Abort+0xd6>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a6b      	ldr	r2, [pc, #428]	; (800215c <HAL_DMA_Abort+0x230>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d027      	beq.n	8002002 <HAL_DMA_Abort+0xd6>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a6a      	ldr	r2, [pc, #424]	; (8002160 <HAL_DMA_Abort+0x234>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d022      	beq.n	8002002 <HAL_DMA_Abort+0xd6>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a68      	ldr	r2, [pc, #416]	; (8002164 <HAL_DMA_Abort+0x238>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d01d      	beq.n	8002002 <HAL_DMA_Abort+0xd6>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a67      	ldr	r2, [pc, #412]	; (8002168 <HAL_DMA_Abort+0x23c>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d018      	beq.n	8002002 <HAL_DMA_Abort+0xd6>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a65      	ldr	r2, [pc, #404]	; (800216c <HAL_DMA_Abort+0x240>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d013      	beq.n	8002002 <HAL_DMA_Abort+0xd6>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a64      	ldr	r2, [pc, #400]	; (8002170 <HAL_DMA_Abort+0x244>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d00e      	beq.n	8002002 <HAL_DMA_Abort+0xd6>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a62      	ldr	r2, [pc, #392]	; (8002174 <HAL_DMA_Abort+0x248>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d009      	beq.n	8002002 <HAL_DMA_Abort+0xd6>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a61      	ldr	r2, [pc, #388]	; (8002178 <HAL_DMA_Abort+0x24c>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d004      	beq.n	8002002 <HAL_DMA_Abort+0xd6>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a5f      	ldr	r2, [pc, #380]	; (800217c <HAL_DMA_Abort+0x250>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d101      	bne.n	8002006 <HAL_DMA_Abort+0xda>
 8002002:	2301      	movs	r3, #1
 8002004:	e000      	b.n	8002008 <HAL_DMA_Abort+0xdc>
 8002006:	2300      	movs	r3, #0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d013      	beq.n	8002034 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f022 021e 	bic.w	r2, r2, #30
 800201a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	695a      	ldr	r2, [r3, #20]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800202a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	617b      	str	r3, [r7, #20]
 8002032:	e00a      	b.n	800204a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f022 020e 	bic.w	r2, r2, #14
 8002042:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a3c      	ldr	r2, [pc, #240]	; (8002140 <HAL_DMA_Abort+0x214>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d072      	beq.n	800213a <HAL_DMA_Abort+0x20e>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a3a      	ldr	r2, [pc, #232]	; (8002144 <HAL_DMA_Abort+0x218>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d06d      	beq.n	800213a <HAL_DMA_Abort+0x20e>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a39      	ldr	r2, [pc, #228]	; (8002148 <HAL_DMA_Abort+0x21c>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d068      	beq.n	800213a <HAL_DMA_Abort+0x20e>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a37      	ldr	r2, [pc, #220]	; (800214c <HAL_DMA_Abort+0x220>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d063      	beq.n	800213a <HAL_DMA_Abort+0x20e>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a36      	ldr	r2, [pc, #216]	; (8002150 <HAL_DMA_Abort+0x224>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d05e      	beq.n	800213a <HAL_DMA_Abort+0x20e>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a34      	ldr	r2, [pc, #208]	; (8002154 <HAL_DMA_Abort+0x228>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d059      	beq.n	800213a <HAL_DMA_Abort+0x20e>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a33      	ldr	r2, [pc, #204]	; (8002158 <HAL_DMA_Abort+0x22c>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d054      	beq.n	800213a <HAL_DMA_Abort+0x20e>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a31      	ldr	r2, [pc, #196]	; (800215c <HAL_DMA_Abort+0x230>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d04f      	beq.n	800213a <HAL_DMA_Abort+0x20e>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a30      	ldr	r2, [pc, #192]	; (8002160 <HAL_DMA_Abort+0x234>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d04a      	beq.n	800213a <HAL_DMA_Abort+0x20e>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a2e      	ldr	r2, [pc, #184]	; (8002164 <HAL_DMA_Abort+0x238>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d045      	beq.n	800213a <HAL_DMA_Abort+0x20e>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a2d      	ldr	r2, [pc, #180]	; (8002168 <HAL_DMA_Abort+0x23c>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d040      	beq.n	800213a <HAL_DMA_Abort+0x20e>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a2b      	ldr	r2, [pc, #172]	; (800216c <HAL_DMA_Abort+0x240>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d03b      	beq.n	800213a <HAL_DMA_Abort+0x20e>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a2a      	ldr	r2, [pc, #168]	; (8002170 <HAL_DMA_Abort+0x244>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d036      	beq.n	800213a <HAL_DMA_Abort+0x20e>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a28      	ldr	r2, [pc, #160]	; (8002174 <HAL_DMA_Abort+0x248>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d031      	beq.n	800213a <HAL_DMA_Abort+0x20e>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a27      	ldr	r2, [pc, #156]	; (8002178 <HAL_DMA_Abort+0x24c>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d02c      	beq.n	800213a <HAL_DMA_Abort+0x20e>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a25      	ldr	r2, [pc, #148]	; (800217c <HAL_DMA_Abort+0x250>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d027      	beq.n	800213a <HAL_DMA_Abort+0x20e>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a24      	ldr	r2, [pc, #144]	; (8002180 <HAL_DMA_Abort+0x254>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d022      	beq.n	800213a <HAL_DMA_Abort+0x20e>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a22      	ldr	r2, [pc, #136]	; (8002184 <HAL_DMA_Abort+0x258>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d01d      	beq.n	800213a <HAL_DMA_Abort+0x20e>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a21      	ldr	r2, [pc, #132]	; (8002188 <HAL_DMA_Abort+0x25c>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d018      	beq.n	800213a <HAL_DMA_Abort+0x20e>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a1f      	ldr	r2, [pc, #124]	; (800218c <HAL_DMA_Abort+0x260>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d013      	beq.n	800213a <HAL_DMA_Abort+0x20e>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a1e      	ldr	r2, [pc, #120]	; (8002190 <HAL_DMA_Abort+0x264>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d00e      	beq.n	800213a <HAL_DMA_Abort+0x20e>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a1c      	ldr	r2, [pc, #112]	; (8002194 <HAL_DMA_Abort+0x268>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d009      	beq.n	800213a <HAL_DMA_Abort+0x20e>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a1b      	ldr	r2, [pc, #108]	; (8002198 <HAL_DMA_Abort+0x26c>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d004      	beq.n	800213a <HAL_DMA_Abort+0x20e>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a19      	ldr	r2, [pc, #100]	; (800219c <HAL_DMA_Abort+0x270>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d132      	bne.n	80021a0 <HAL_DMA_Abort+0x274>
 800213a:	2301      	movs	r3, #1
 800213c:	e031      	b.n	80021a2 <HAL_DMA_Abort+0x276>
 800213e:	bf00      	nop
 8002140:	40020010 	.word	0x40020010
 8002144:	40020028 	.word	0x40020028
 8002148:	40020040 	.word	0x40020040
 800214c:	40020058 	.word	0x40020058
 8002150:	40020070 	.word	0x40020070
 8002154:	40020088 	.word	0x40020088
 8002158:	400200a0 	.word	0x400200a0
 800215c:	400200b8 	.word	0x400200b8
 8002160:	40020410 	.word	0x40020410
 8002164:	40020428 	.word	0x40020428
 8002168:	40020440 	.word	0x40020440
 800216c:	40020458 	.word	0x40020458
 8002170:	40020470 	.word	0x40020470
 8002174:	40020488 	.word	0x40020488
 8002178:	400204a0 	.word	0x400204a0
 800217c:	400204b8 	.word	0x400204b8
 8002180:	58025408 	.word	0x58025408
 8002184:	5802541c 	.word	0x5802541c
 8002188:	58025430 	.word	0x58025430
 800218c:	58025444 	.word	0x58025444
 8002190:	58025458 	.word	0x58025458
 8002194:	5802546c 	.word	0x5802546c
 8002198:	58025480 	.word	0x58025480
 800219c:	58025494 	.word	0x58025494
 80021a0:	2300      	movs	r3, #0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d007      	beq.n	80021b6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a6d      	ldr	r2, [pc, #436]	; (8002370 <HAL_DMA_Abort+0x444>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d04a      	beq.n	8002256 <HAL_DMA_Abort+0x32a>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a6b      	ldr	r2, [pc, #428]	; (8002374 <HAL_DMA_Abort+0x448>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d045      	beq.n	8002256 <HAL_DMA_Abort+0x32a>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a6a      	ldr	r2, [pc, #424]	; (8002378 <HAL_DMA_Abort+0x44c>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d040      	beq.n	8002256 <HAL_DMA_Abort+0x32a>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a68      	ldr	r2, [pc, #416]	; (800237c <HAL_DMA_Abort+0x450>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d03b      	beq.n	8002256 <HAL_DMA_Abort+0x32a>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a67      	ldr	r2, [pc, #412]	; (8002380 <HAL_DMA_Abort+0x454>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d036      	beq.n	8002256 <HAL_DMA_Abort+0x32a>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a65      	ldr	r2, [pc, #404]	; (8002384 <HAL_DMA_Abort+0x458>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d031      	beq.n	8002256 <HAL_DMA_Abort+0x32a>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a64      	ldr	r2, [pc, #400]	; (8002388 <HAL_DMA_Abort+0x45c>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d02c      	beq.n	8002256 <HAL_DMA_Abort+0x32a>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a62      	ldr	r2, [pc, #392]	; (800238c <HAL_DMA_Abort+0x460>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d027      	beq.n	8002256 <HAL_DMA_Abort+0x32a>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a61      	ldr	r2, [pc, #388]	; (8002390 <HAL_DMA_Abort+0x464>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d022      	beq.n	8002256 <HAL_DMA_Abort+0x32a>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a5f      	ldr	r2, [pc, #380]	; (8002394 <HAL_DMA_Abort+0x468>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d01d      	beq.n	8002256 <HAL_DMA_Abort+0x32a>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a5e      	ldr	r2, [pc, #376]	; (8002398 <HAL_DMA_Abort+0x46c>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d018      	beq.n	8002256 <HAL_DMA_Abort+0x32a>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a5c      	ldr	r2, [pc, #368]	; (800239c <HAL_DMA_Abort+0x470>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d013      	beq.n	8002256 <HAL_DMA_Abort+0x32a>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a5b      	ldr	r2, [pc, #364]	; (80023a0 <HAL_DMA_Abort+0x474>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d00e      	beq.n	8002256 <HAL_DMA_Abort+0x32a>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a59      	ldr	r2, [pc, #356]	; (80023a4 <HAL_DMA_Abort+0x478>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d009      	beq.n	8002256 <HAL_DMA_Abort+0x32a>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a58      	ldr	r2, [pc, #352]	; (80023a8 <HAL_DMA_Abort+0x47c>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d004      	beq.n	8002256 <HAL_DMA_Abort+0x32a>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a56      	ldr	r2, [pc, #344]	; (80023ac <HAL_DMA_Abort+0x480>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d108      	bne.n	8002268 <HAL_DMA_Abort+0x33c>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f022 0201 	bic.w	r2, r2, #1
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	e007      	b.n	8002278 <HAL_DMA_Abort+0x34c>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f022 0201 	bic.w	r2, r2, #1
 8002276:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002278:	e013      	b.n	80022a2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800227a:	f7ff fd03 	bl	8001c84 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b05      	cmp	r3, #5
 8002286:	d90c      	bls.n	80022a2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2220      	movs	r2, #32
 800228c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2203      	movs	r2, #3
 8002292:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e12d      	b.n	80024fe <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1e5      	bne.n	800227a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a2f      	ldr	r2, [pc, #188]	; (8002370 <HAL_DMA_Abort+0x444>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d04a      	beq.n	800234e <HAL_DMA_Abort+0x422>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a2d      	ldr	r2, [pc, #180]	; (8002374 <HAL_DMA_Abort+0x448>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d045      	beq.n	800234e <HAL_DMA_Abort+0x422>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a2c      	ldr	r2, [pc, #176]	; (8002378 <HAL_DMA_Abort+0x44c>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d040      	beq.n	800234e <HAL_DMA_Abort+0x422>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a2a      	ldr	r2, [pc, #168]	; (800237c <HAL_DMA_Abort+0x450>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d03b      	beq.n	800234e <HAL_DMA_Abort+0x422>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a29      	ldr	r2, [pc, #164]	; (8002380 <HAL_DMA_Abort+0x454>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d036      	beq.n	800234e <HAL_DMA_Abort+0x422>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a27      	ldr	r2, [pc, #156]	; (8002384 <HAL_DMA_Abort+0x458>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d031      	beq.n	800234e <HAL_DMA_Abort+0x422>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a26      	ldr	r2, [pc, #152]	; (8002388 <HAL_DMA_Abort+0x45c>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d02c      	beq.n	800234e <HAL_DMA_Abort+0x422>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a24      	ldr	r2, [pc, #144]	; (800238c <HAL_DMA_Abort+0x460>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d027      	beq.n	800234e <HAL_DMA_Abort+0x422>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a23      	ldr	r2, [pc, #140]	; (8002390 <HAL_DMA_Abort+0x464>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d022      	beq.n	800234e <HAL_DMA_Abort+0x422>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a21      	ldr	r2, [pc, #132]	; (8002394 <HAL_DMA_Abort+0x468>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d01d      	beq.n	800234e <HAL_DMA_Abort+0x422>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a20      	ldr	r2, [pc, #128]	; (8002398 <HAL_DMA_Abort+0x46c>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d018      	beq.n	800234e <HAL_DMA_Abort+0x422>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a1e      	ldr	r2, [pc, #120]	; (800239c <HAL_DMA_Abort+0x470>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d013      	beq.n	800234e <HAL_DMA_Abort+0x422>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a1d      	ldr	r2, [pc, #116]	; (80023a0 <HAL_DMA_Abort+0x474>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d00e      	beq.n	800234e <HAL_DMA_Abort+0x422>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a1b      	ldr	r2, [pc, #108]	; (80023a4 <HAL_DMA_Abort+0x478>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d009      	beq.n	800234e <HAL_DMA_Abort+0x422>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a1a      	ldr	r2, [pc, #104]	; (80023a8 <HAL_DMA_Abort+0x47c>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d004      	beq.n	800234e <HAL_DMA_Abort+0x422>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a18      	ldr	r2, [pc, #96]	; (80023ac <HAL_DMA_Abort+0x480>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d101      	bne.n	8002352 <HAL_DMA_Abort+0x426>
 800234e:	2301      	movs	r3, #1
 8002350:	e000      	b.n	8002354 <HAL_DMA_Abort+0x428>
 8002352:	2300      	movs	r3, #0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d02b      	beq.n	80023b0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002362:	f003 031f 	and.w	r3, r3, #31
 8002366:	223f      	movs	r2, #63	; 0x3f
 8002368:	409a      	lsls	r2, r3
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	609a      	str	r2, [r3, #8]
 800236e:	e02a      	b.n	80023c6 <HAL_DMA_Abort+0x49a>
 8002370:	40020010 	.word	0x40020010
 8002374:	40020028 	.word	0x40020028
 8002378:	40020040 	.word	0x40020040
 800237c:	40020058 	.word	0x40020058
 8002380:	40020070 	.word	0x40020070
 8002384:	40020088 	.word	0x40020088
 8002388:	400200a0 	.word	0x400200a0
 800238c:	400200b8 	.word	0x400200b8
 8002390:	40020410 	.word	0x40020410
 8002394:	40020428 	.word	0x40020428
 8002398:	40020440 	.word	0x40020440
 800239c:	40020458 	.word	0x40020458
 80023a0:	40020470 	.word	0x40020470
 80023a4:	40020488 	.word	0x40020488
 80023a8:	400204a0 	.word	0x400204a0
 80023ac:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ba:	f003 031f 	and.w	r3, r3, #31
 80023be:	2201      	movs	r2, #1
 80023c0:	409a      	lsls	r2, r3
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a4f      	ldr	r2, [pc, #316]	; (8002508 <HAL_DMA_Abort+0x5dc>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d072      	beq.n	80024b6 <HAL_DMA_Abort+0x58a>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a4d      	ldr	r2, [pc, #308]	; (800250c <HAL_DMA_Abort+0x5e0>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d06d      	beq.n	80024b6 <HAL_DMA_Abort+0x58a>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a4c      	ldr	r2, [pc, #304]	; (8002510 <HAL_DMA_Abort+0x5e4>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d068      	beq.n	80024b6 <HAL_DMA_Abort+0x58a>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a4a      	ldr	r2, [pc, #296]	; (8002514 <HAL_DMA_Abort+0x5e8>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d063      	beq.n	80024b6 <HAL_DMA_Abort+0x58a>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a49      	ldr	r2, [pc, #292]	; (8002518 <HAL_DMA_Abort+0x5ec>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d05e      	beq.n	80024b6 <HAL_DMA_Abort+0x58a>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a47      	ldr	r2, [pc, #284]	; (800251c <HAL_DMA_Abort+0x5f0>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d059      	beq.n	80024b6 <HAL_DMA_Abort+0x58a>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a46      	ldr	r2, [pc, #280]	; (8002520 <HAL_DMA_Abort+0x5f4>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d054      	beq.n	80024b6 <HAL_DMA_Abort+0x58a>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a44      	ldr	r2, [pc, #272]	; (8002524 <HAL_DMA_Abort+0x5f8>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d04f      	beq.n	80024b6 <HAL_DMA_Abort+0x58a>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a43      	ldr	r2, [pc, #268]	; (8002528 <HAL_DMA_Abort+0x5fc>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d04a      	beq.n	80024b6 <HAL_DMA_Abort+0x58a>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a41      	ldr	r2, [pc, #260]	; (800252c <HAL_DMA_Abort+0x600>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d045      	beq.n	80024b6 <HAL_DMA_Abort+0x58a>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a40      	ldr	r2, [pc, #256]	; (8002530 <HAL_DMA_Abort+0x604>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d040      	beq.n	80024b6 <HAL_DMA_Abort+0x58a>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a3e      	ldr	r2, [pc, #248]	; (8002534 <HAL_DMA_Abort+0x608>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d03b      	beq.n	80024b6 <HAL_DMA_Abort+0x58a>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a3d      	ldr	r2, [pc, #244]	; (8002538 <HAL_DMA_Abort+0x60c>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d036      	beq.n	80024b6 <HAL_DMA_Abort+0x58a>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a3b      	ldr	r2, [pc, #236]	; (800253c <HAL_DMA_Abort+0x610>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d031      	beq.n	80024b6 <HAL_DMA_Abort+0x58a>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a3a      	ldr	r2, [pc, #232]	; (8002540 <HAL_DMA_Abort+0x614>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d02c      	beq.n	80024b6 <HAL_DMA_Abort+0x58a>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a38      	ldr	r2, [pc, #224]	; (8002544 <HAL_DMA_Abort+0x618>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d027      	beq.n	80024b6 <HAL_DMA_Abort+0x58a>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a37      	ldr	r2, [pc, #220]	; (8002548 <HAL_DMA_Abort+0x61c>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d022      	beq.n	80024b6 <HAL_DMA_Abort+0x58a>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a35      	ldr	r2, [pc, #212]	; (800254c <HAL_DMA_Abort+0x620>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d01d      	beq.n	80024b6 <HAL_DMA_Abort+0x58a>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a34      	ldr	r2, [pc, #208]	; (8002550 <HAL_DMA_Abort+0x624>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d018      	beq.n	80024b6 <HAL_DMA_Abort+0x58a>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a32      	ldr	r2, [pc, #200]	; (8002554 <HAL_DMA_Abort+0x628>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d013      	beq.n	80024b6 <HAL_DMA_Abort+0x58a>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a31      	ldr	r2, [pc, #196]	; (8002558 <HAL_DMA_Abort+0x62c>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d00e      	beq.n	80024b6 <HAL_DMA_Abort+0x58a>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a2f      	ldr	r2, [pc, #188]	; (800255c <HAL_DMA_Abort+0x630>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d009      	beq.n	80024b6 <HAL_DMA_Abort+0x58a>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a2e      	ldr	r2, [pc, #184]	; (8002560 <HAL_DMA_Abort+0x634>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d004      	beq.n	80024b6 <HAL_DMA_Abort+0x58a>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a2c      	ldr	r2, [pc, #176]	; (8002564 <HAL_DMA_Abort+0x638>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d101      	bne.n	80024ba <HAL_DMA_Abort+0x58e>
 80024b6:	2301      	movs	r3, #1
 80024b8:	e000      	b.n	80024bc <HAL_DMA_Abort+0x590>
 80024ba:	2300      	movs	r3, #0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d015      	beq.n	80024ec <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80024c8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00c      	beq.n	80024ec <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024e0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80024ea:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3718      	adds	r7, #24
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	40020010 	.word	0x40020010
 800250c:	40020028 	.word	0x40020028
 8002510:	40020040 	.word	0x40020040
 8002514:	40020058 	.word	0x40020058
 8002518:	40020070 	.word	0x40020070
 800251c:	40020088 	.word	0x40020088
 8002520:	400200a0 	.word	0x400200a0
 8002524:	400200b8 	.word	0x400200b8
 8002528:	40020410 	.word	0x40020410
 800252c:	40020428 	.word	0x40020428
 8002530:	40020440 	.word	0x40020440
 8002534:	40020458 	.word	0x40020458
 8002538:	40020470 	.word	0x40020470
 800253c:	40020488 	.word	0x40020488
 8002540:	400204a0 	.word	0x400204a0
 8002544:	400204b8 	.word	0x400204b8
 8002548:	58025408 	.word	0x58025408
 800254c:	5802541c 	.word	0x5802541c
 8002550:	58025430 	.word	0x58025430
 8002554:	58025444 	.word	0x58025444
 8002558:	58025458 	.word	0x58025458
 800255c:	5802546c 	.word	0x5802546c
 8002560:	58025480 	.word	0x58025480
 8002564:	58025494 	.word	0x58025494

08002568 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e237      	b.n	80029ea <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d004      	beq.n	8002590 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2280      	movs	r2, #128	; 0x80
 800258a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e22c      	b.n	80029ea <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a5c      	ldr	r2, [pc, #368]	; (8002708 <HAL_DMA_Abort_IT+0x1a0>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d04a      	beq.n	8002630 <HAL_DMA_Abort_IT+0xc8>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a5b      	ldr	r2, [pc, #364]	; (800270c <HAL_DMA_Abort_IT+0x1a4>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d045      	beq.n	8002630 <HAL_DMA_Abort_IT+0xc8>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a59      	ldr	r2, [pc, #356]	; (8002710 <HAL_DMA_Abort_IT+0x1a8>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d040      	beq.n	8002630 <HAL_DMA_Abort_IT+0xc8>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a58      	ldr	r2, [pc, #352]	; (8002714 <HAL_DMA_Abort_IT+0x1ac>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d03b      	beq.n	8002630 <HAL_DMA_Abort_IT+0xc8>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a56      	ldr	r2, [pc, #344]	; (8002718 <HAL_DMA_Abort_IT+0x1b0>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d036      	beq.n	8002630 <HAL_DMA_Abort_IT+0xc8>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a55      	ldr	r2, [pc, #340]	; (800271c <HAL_DMA_Abort_IT+0x1b4>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d031      	beq.n	8002630 <HAL_DMA_Abort_IT+0xc8>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a53      	ldr	r2, [pc, #332]	; (8002720 <HAL_DMA_Abort_IT+0x1b8>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d02c      	beq.n	8002630 <HAL_DMA_Abort_IT+0xc8>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a52      	ldr	r2, [pc, #328]	; (8002724 <HAL_DMA_Abort_IT+0x1bc>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d027      	beq.n	8002630 <HAL_DMA_Abort_IT+0xc8>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a50      	ldr	r2, [pc, #320]	; (8002728 <HAL_DMA_Abort_IT+0x1c0>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d022      	beq.n	8002630 <HAL_DMA_Abort_IT+0xc8>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a4f      	ldr	r2, [pc, #316]	; (800272c <HAL_DMA_Abort_IT+0x1c4>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d01d      	beq.n	8002630 <HAL_DMA_Abort_IT+0xc8>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a4d      	ldr	r2, [pc, #308]	; (8002730 <HAL_DMA_Abort_IT+0x1c8>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d018      	beq.n	8002630 <HAL_DMA_Abort_IT+0xc8>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a4c      	ldr	r2, [pc, #304]	; (8002734 <HAL_DMA_Abort_IT+0x1cc>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d013      	beq.n	8002630 <HAL_DMA_Abort_IT+0xc8>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a4a      	ldr	r2, [pc, #296]	; (8002738 <HAL_DMA_Abort_IT+0x1d0>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d00e      	beq.n	8002630 <HAL_DMA_Abort_IT+0xc8>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a49      	ldr	r2, [pc, #292]	; (800273c <HAL_DMA_Abort_IT+0x1d4>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d009      	beq.n	8002630 <HAL_DMA_Abort_IT+0xc8>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a47      	ldr	r2, [pc, #284]	; (8002740 <HAL_DMA_Abort_IT+0x1d8>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d004      	beq.n	8002630 <HAL_DMA_Abort_IT+0xc8>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a46      	ldr	r2, [pc, #280]	; (8002744 <HAL_DMA_Abort_IT+0x1dc>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d101      	bne.n	8002634 <HAL_DMA_Abort_IT+0xcc>
 8002630:	2301      	movs	r3, #1
 8002632:	e000      	b.n	8002636 <HAL_DMA_Abort_IT+0xce>
 8002634:	2300      	movs	r3, #0
 8002636:	2b00      	cmp	r3, #0
 8002638:	f000 8086 	beq.w	8002748 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2204      	movs	r2, #4
 8002640:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a2f      	ldr	r2, [pc, #188]	; (8002708 <HAL_DMA_Abort_IT+0x1a0>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d04a      	beq.n	80026e4 <HAL_DMA_Abort_IT+0x17c>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a2e      	ldr	r2, [pc, #184]	; (800270c <HAL_DMA_Abort_IT+0x1a4>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d045      	beq.n	80026e4 <HAL_DMA_Abort_IT+0x17c>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a2c      	ldr	r2, [pc, #176]	; (8002710 <HAL_DMA_Abort_IT+0x1a8>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d040      	beq.n	80026e4 <HAL_DMA_Abort_IT+0x17c>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a2b      	ldr	r2, [pc, #172]	; (8002714 <HAL_DMA_Abort_IT+0x1ac>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d03b      	beq.n	80026e4 <HAL_DMA_Abort_IT+0x17c>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a29      	ldr	r2, [pc, #164]	; (8002718 <HAL_DMA_Abort_IT+0x1b0>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d036      	beq.n	80026e4 <HAL_DMA_Abort_IT+0x17c>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a28      	ldr	r2, [pc, #160]	; (800271c <HAL_DMA_Abort_IT+0x1b4>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d031      	beq.n	80026e4 <HAL_DMA_Abort_IT+0x17c>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a26      	ldr	r2, [pc, #152]	; (8002720 <HAL_DMA_Abort_IT+0x1b8>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d02c      	beq.n	80026e4 <HAL_DMA_Abort_IT+0x17c>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a25      	ldr	r2, [pc, #148]	; (8002724 <HAL_DMA_Abort_IT+0x1bc>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d027      	beq.n	80026e4 <HAL_DMA_Abort_IT+0x17c>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a23      	ldr	r2, [pc, #140]	; (8002728 <HAL_DMA_Abort_IT+0x1c0>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d022      	beq.n	80026e4 <HAL_DMA_Abort_IT+0x17c>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a22      	ldr	r2, [pc, #136]	; (800272c <HAL_DMA_Abort_IT+0x1c4>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d01d      	beq.n	80026e4 <HAL_DMA_Abort_IT+0x17c>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a20      	ldr	r2, [pc, #128]	; (8002730 <HAL_DMA_Abort_IT+0x1c8>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d018      	beq.n	80026e4 <HAL_DMA_Abort_IT+0x17c>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a1f      	ldr	r2, [pc, #124]	; (8002734 <HAL_DMA_Abort_IT+0x1cc>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d013      	beq.n	80026e4 <HAL_DMA_Abort_IT+0x17c>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a1d      	ldr	r2, [pc, #116]	; (8002738 <HAL_DMA_Abort_IT+0x1d0>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d00e      	beq.n	80026e4 <HAL_DMA_Abort_IT+0x17c>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a1c      	ldr	r2, [pc, #112]	; (800273c <HAL_DMA_Abort_IT+0x1d4>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d009      	beq.n	80026e4 <HAL_DMA_Abort_IT+0x17c>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a1a      	ldr	r2, [pc, #104]	; (8002740 <HAL_DMA_Abort_IT+0x1d8>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d004      	beq.n	80026e4 <HAL_DMA_Abort_IT+0x17c>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a19      	ldr	r2, [pc, #100]	; (8002744 <HAL_DMA_Abort_IT+0x1dc>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d108      	bne.n	80026f6 <HAL_DMA_Abort_IT+0x18e>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f022 0201 	bic.w	r2, r2, #1
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	e178      	b.n	80029e8 <HAL_DMA_Abort_IT+0x480>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f022 0201 	bic.w	r2, r2, #1
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	e16f      	b.n	80029e8 <HAL_DMA_Abort_IT+0x480>
 8002708:	40020010 	.word	0x40020010
 800270c:	40020028 	.word	0x40020028
 8002710:	40020040 	.word	0x40020040
 8002714:	40020058 	.word	0x40020058
 8002718:	40020070 	.word	0x40020070
 800271c:	40020088 	.word	0x40020088
 8002720:	400200a0 	.word	0x400200a0
 8002724:	400200b8 	.word	0x400200b8
 8002728:	40020410 	.word	0x40020410
 800272c:	40020428 	.word	0x40020428
 8002730:	40020440 	.word	0x40020440
 8002734:	40020458 	.word	0x40020458
 8002738:	40020470 	.word	0x40020470
 800273c:	40020488 	.word	0x40020488
 8002740:	400204a0 	.word	0x400204a0
 8002744:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 020e 	bic.w	r2, r2, #14
 8002756:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a6c      	ldr	r2, [pc, #432]	; (8002910 <HAL_DMA_Abort_IT+0x3a8>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d04a      	beq.n	80027f8 <HAL_DMA_Abort_IT+0x290>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a6b      	ldr	r2, [pc, #428]	; (8002914 <HAL_DMA_Abort_IT+0x3ac>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d045      	beq.n	80027f8 <HAL_DMA_Abort_IT+0x290>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a69      	ldr	r2, [pc, #420]	; (8002918 <HAL_DMA_Abort_IT+0x3b0>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d040      	beq.n	80027f8 <HAL_DMA_Abort_IT+0x290>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a68      	ldr	r2, [pc, #416]	; (800291c <HAL_DMA_Abort_IT+0x3b4>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d03b      	beq.n	80027f8 <HAL_DMA_Abort_IT+0x290>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a66      	ldr	r2, [pc, #408]	; (8002920 <HAL_DMA_Abort_IT+0x3b8>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d036      	beq.n	80027f8 <HAL_DMA_Abort_IT+0x290>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a65      	ldr	r2, [pc, #404]	; (8002924 <HAL_DMA_Abort_IT+0x3bc>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d031      	beq.n	80027f8 <HAL_DMA_Abort_IT+0x290>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a63      	ldr	r2, [pc, #396]	; (8002928 <HAL_DMA_Abort_IT+0x3c0>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d02c      	beq.n	80027f8 <HAL_DMA_Abort_IT+0x290>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a62      	ldr	r2, [pc, #392]	; (800292c <HAL_DMA_Abort_IT+0x3c4>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d027      	beq.n	80027f8 <HAL_DMA_Abort_IT+0x290>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a60      	ldr	r2, [pc, #384]	; (8002930 <HAL_DMA_Abort_IT+0x3c8>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d022      	beq.n	80027f8 <HAL_DMA_Abort_IT+0x290>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a5f      	ldr	r2, [pc, #380]	; (8002934 <HAL_DMA_Abort_IT+0x3cc>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d01d      	beq.n	80027f8 <HAL_DMA_Abort_IT+0x290>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a5d      	ldr	r2, [pc, #372]	; (8002938 <HAL_DMA_Abort_IT+0x3d0>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d018      	beq.n	80027f8 <HAL_DMA_Abort_IT+0x290>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a5c      	ldr	r2, [pc, #368]	; (800293c <HAL_DMA_Abort_IT+0x3d4>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d013      	beq.n	80027f8 <HAL_DMA_Abort_IT+0x290>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a5a      	ldr	r2, [pc, #360]	; (8002940 <HAL_DMA_Abort_IT+0x3d8>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d00e      	beq.n	80027f8 <HAL_DMA_Abort_IT+0x290>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a59      	ldr	r2, [pc, #356]	; (8002944 <HAL_DMA_Abort_IT+0x3dc>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d009      	beq.n	80027f8 <HAL_DMA_Abort_IT+0x290>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a57      	ldr	r2, [pc, #348]	; (8002948 <HAL_DMA_Abort_IT+0x3e0>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d004      	beq.n	80027f8 <HAL_DMA_Abort_IT+0x290>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a56      	ldr	r2, [pc, #344]	; (800294c <HAL_DMA_Abort_IT+0x3e4>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d108      	bne.n	800280a <HAL_DMA_Abort_IT+0x2a2>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f022 0201 	bic.w	r2, r2, #1
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	e007      	b.n	800281a <HAL_DMA_Abort_IT+0x2b2>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 0201 	bic.w	r2, r2, #1
 8002818:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a3c      	ldr	r2, [pc, #240]	; (8002910 <HAL_DMA_Abort_IT+0x3a8>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d072      	beq.n	800290a <HAL_DMA_Abort_IT+0x3a2>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a3a      	ldr	r2, [pc, #232]	; (8002914 <HAL_DMA_Abort_IT+0x3ac>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d06d      	beq.n	800290a <HAL_DMA_Abort_IT+0x3a2>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a39      	ldr	r2, [pc, #228]	; (8002918 <HAL_DMA_Abort_IT+0x3b0>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d068      	beq.n	800290a <HAL_DMA_Abort_IT+0x3a2>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a37      	ldr	r2, [pc, #220]	; (800291c <HAL_DMA_Abort_IT+0x3b4>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d063      	beq.n	800290a <HAL_DMA_Abort_IT+0x3a2>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a36      	ldr	r2, [pc, #216]	; (8002920 <HAL_DMA_Abort_IT+0x3b8>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d05e      	beq.n	800290a <HAL_DMA_Abort_IT+0x3a2>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a34      	ldr	r2, [pc, #208]	; (8002924 <HAL_DMA_Abort_IT+0x3bc>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d059      	beq.n	800290a <HAL_DMA_Abort_IT+0x3a2>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a33      	ldr	r2, [pc, #204]	; (8002928 <HAL_DMA_Abort_IT+0x3c0>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d054      	beq.n	800290a <HAL_DMA_Abort_IT+0x3a2>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a31      	ldr	r2, [pc, #196]	; (800292c <HAL_DMA_Abort_IT+0x3c4>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d04f      	beq.n	800290a <HAL_DMA_Abort_IT+0x3a2>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a30      	ldr	r2, [pc, #192]	; (8002930 <HAL_DMA_Abort_IT+0x3c8>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d04a      	beq.n	800290a <HAL_DMA_Abort_IT+0x3a2>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a2e      	ldr	r2, [pc, #184]	; (8002934 <HAL_DMA_Abort_IT+0x3cc>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d045      	beq.n	800290a <HAL_DMA_Abort_IT+0x3a2>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a2d      	ldr	r2, [pc, #180]	; (8002938 <HAL_DMA_Abort_IT+0x3d0>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d040      	beq.n	800290a <HAL_DMA_Abort_IT+0x3a2>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a2b      	ldr	r2, [pc, #172]	; (800293c <HAL_DMA_Abort_IT+0x3d4>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d03b      	beq.n	800290a <HAL_DMA_Abort_IT+0x3a2>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a2a      	ldr	r2, [pc, #168]	; (8002940 <HAL_DMA_Abort_IT+0x3d8>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d036      	beq.n	800290a <HAL_DMA_Abort_IT+0x3a2>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a28      	ldr	r2, [pc, #160]	; (8002944 <HAL_DMA_Abort_IT+0x3dc>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d031      	beq.n	800290a <HAL_DMA_Abort_IT+0x3a2>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a27      	ldr	r2, [pc, #156]	; (8002948 <HAL_DMA_Abort_IT+0x3e0>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d02c      	beq.n	800290a <HAL_DMA_Abort_IT+0x3a2>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a25      	ldr	r2, [pc, #148]	; (800294c <HAL_DMA_Abort_IT+0x3e4>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d027      	beq.n	800290a <HAL_DMA_Abort_IT+0x3a2>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a24      	ldr	r2, [pc, #144]	; (8002950 <HAL_DMA_Abort_IT+0x3e8>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d022      	beq.n	800290a <HAL_DMA_Abort_IT+0x3a2>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a22      	ldr	r2, [pc, #136]	; (8002954 <HAL_DMA_Abort_IT+0x3ec>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d01d      	beq.n	800290a <HAL_DMA_Abort_IT+0x3a2>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a21      	ldr	r2, [pc, #132]	; (8002958 <HAL_DMA_Abort_IT+0x3f0>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d018      	beq.n	800290a <HAL_DMA_Abort_IT+0x3a2>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a1f      	ldr	r2, [pc, #124]	; (800295c <HAL_DMA_Abort_IT+0x3f4>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d013      	beq.n	800290a <HAL_DMA_Abort_IT+0x3a2>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a1e      	ldr	r2, [pc, #120]	; (8002960 <HAL_DMA_Abort_IT+0x3f8>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d00e      	beq.n	800290a <HAL_DMA_Abort_IT+0x3a2>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a1c      	ldr	r2, [pc, #112]	; (8002964 <HAL_DMA_Abort_IT+0x3fc>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d009      	beq.n	800290a <HAL_DMA_Abort_IT+0x3a2>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a1b      	ldr	r2, [pc, #108]	; (8002968 <HAL_DMA_Abort_IT+0x400>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d004      	beq.n	800290a <HAL_DMA_Abort_IT+0x3a2>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a19      	ldr	r2, [pc, #100]	; (800296c <HAL_DMA_Abort_IT+0x404>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d132      	bne.n	8002970 <HAL_DMA_Abort_IT+0x408>
 800290a:	2301      	movs	r3, #1
 800290c:	e031      	b.n	8002972 <HAL_DMA_Abort_IT+0x40a>
 800290e:	bf00      	nop
 8002910:	40020010 	.word	0x40020010
 8002914:	40020028 	.word	0x40020028
 8002918:	40020040 	.word	0x40020040
 800291c:	40020058 	.word	0x40020058
 8002920:	40020070 	.word	0x40020070
 8002924:	40020088 	.word	0x40020088
 8002928:	400200a0 	.word	0x400200a0
 800292c:	400200b8 	.word	0x400200b8
 8002930:	40020410 	.word	0x40020410
 8002934:	40020428 	.word	0x40020428
 8002938:	40020440 	.word	0x40020440
 800293c:	40020458 	.word	0x40020458
 8002940:	40020470 	.word	0x40020470
 8002944:	40020488 	.word	0x40020488
 8002948:	400204a0 	.word	0x400204a0
 800294c:	400204b8 	.word	0x400204b8
 8002950:	58025408 	.word	0x58025408
 8002954:	5802541c 	.word	0x5802541c
 8002958:	58025430 	.word	0x58025430
 800295c:	58025444 	.word	0x58025444
 8002960:	58025458 	.word	0x58025458
 8002964:	5802546c 	.word	0x5802546c
 8002968:	58025480 	.word	0x58025480
 800296c:	58025494 	.word	0x58025494
 8002970:	2300      	movs	r3, #0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d028      	beq.n	80029c8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002980:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002984:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800298a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002990:	f003 031f 	and.w	r3, r3, #31
 8002994:	2201      	movs	r2, #1
 8002996:	409a      	lsls	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80029a4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00c      	beq.n	80029c8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029bc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80029c6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d003      	beq.n	80029e8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop

080029f4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e0e3      	b.n	8002bce <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d106      	bne.n	8002a1e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2223      	movs	r2, #35	; 0x23
 8002a14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f7fe fb05 	bl	8001028 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a1e:	4b6e      	ldr	r3, [pc, #440]	; (8002bd8 <HAL_ETH_Init+0x1e4>)
 8002a20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002a24:	4a6c      	ldr	r2, [pc, #432]	; (8002bd8 <HAL_ETH_Init+0x1e4>)
 8002a26:	f043 0302 	orr.w	r3, r3, #2
 8002a2a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002a2e:	4b6a      	ldr	r3, [pc, #424]	; (8002bd8 <HAL_ETH_Init+0x1e4>)
 8002a30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	60bb      	str	r3, [r7, #8]
 8002a3a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	7a1b      	ldrb	r3, [r3, #8]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d103      	bne.n	8002a4c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002a44:	2000      	movs	r0, #0
 8002a46:	f7ff f94d 	bl	8001ce4 <HAL_SYSCFG_ETHInterfaceSelect>
 8002a4a:	e003      	b.n	8002a54 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002a4c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002a50:	f7ff f948 	bl	8001ce4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8002a54:	4b61      	ldr	r3, [pc, #388]	; (8002bdc <HAL_ETH_Init+0x1e8>)
 8002a56:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	6812      	ldr	r2, [r2, #0]
 8002a66:	f043 0301 	orr.w	r3, r3, #1
 8002a6a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a6e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a70:	f7ff f908 	bl	8001c84 <HAL_GetTick>
 8002a74:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002a76:	e011      	b.n	8002a9c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002a78:	f7ff f904 	bl	8001c84 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002a86:	d909      	bls.n	8002a9c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2204      	movs	r2, #4
 8002a8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	22e0      	movs	r2, #224	; 0xe0
 8002a94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e098      	b.n	8002bce <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1e4      	bne.n	8002a78 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 f89e 	bl	8002bf0 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002ab4:	f001 fcd8 	bl	8004468 <HAL_RCC_GetHCLKFreq>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	4a49      	ldr	r2, [pc, #292]	; (8002be0 <HAL_ETH_Init+0x1ec>)
 8002abc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac0:	0c9a      	lsrs	r2, r3, #18
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	3a01      	subs	r2, #1
 8002ac8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 fa81 	bl	8002fd4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ada:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002ade:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	6812      	ldr	r2, [r2, #0]
 8002ae6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002aea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002aee:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	f003 0303 	and.w	r3, r3, #3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d009      	beq.n	8002b12 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	22e0      	movs	r2, #224	; 0xe0
 8002b0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e05d      	b.n	8002bce <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b1a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002b1e:	4b31      	ldr	r3, [pc, #196]	; (8002be4 <HAL_ETH_Init+0x1f0>)
 8002b20:	4013      	ands	r3, r2
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	6952      	ldr	r2, [r2, #20]
 8002b26:	0051      	lsls	r1, r2, #1
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	6812      	ldr	r2, [r2, #0]
 8002b2c:	430b      	orrs	r3, r1
 8002b2e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002b32:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 fae9 	bl	800310e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 fb2f 	bl	80031a0 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	3305      	adds	r3, #5
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	021a      	lsls	r2, r3, #8
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	3304      	adds	r3, #4
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	4619      	mov	r1, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	3303      	adds	r3, #3
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	061a      	lsls	r2, r3, #24
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	3302      	adds	r3, #2
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	041b      	lsls	r3, r3, #16
 8002b74:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002b80:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002b8e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002b90:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	4b11      	ldr	r3, [pc, #68]	; (8002be8 <HAL_ETH_Init+0x1f4>)
 8002ba2:	430b      	orrs	r3, r1
 8002ba4:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f8d3 1710 	ldr.w	r1, [r3, #1808]	; 0x710
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	4b0d      	ldr	r3, [pc, #52]	; (8002bec <HAL_ETH_Init+0x1f8>)
 8002bb6:	430b      	orrs	r3, r1
 8002bb8:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2210      	movs	r2, #16
 8002bc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	58024400 	.word	0x58024400
 8002bdc:	58000400 	.word	0x58000400
 8002be0:	431bde83 	.word	0x431bde83
 8002be4:	ffff8001 	.word	0xffff8001
 8002be8:	0c020060 	.word	0x0c020060
 8002bec:	0c20c000 	.word	0x0c20c000

08002bf0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002c00:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c08:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002c0a:	f001 fc2d 	bl	8004468 <HAL_RCC_GetHCLKFreq>
 8002c0e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	4a1a      	ldr	r2, [pc, #104]	; (8002c7c <HAL_ETH_SetMDIOClockRange+0x8c>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d804      	bhi.n	8002c22 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	e022      	b.n	8002c68 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	4a16      	ldr	r2, [pc, #88]	; (8002c80 <HAL_ETH_SetMDIOClockRange+0x90>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d204      	bcs.n	8002c34 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002c30:	60fb      	str	r3, [r7, #12]
 8002c32:	e019      	b.n	8002c68 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	4a13      	ldr	r2, [pc, #76]	; (8002c84 <HAL_ETH_SetMDIOClockRange+0x94>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d915      	bls.n	8002c68 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	4a12      	ldr	r2, [pc, #72]	; (8002c88 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d804      	bhi.n	8002c4e <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c4a:	60fb      	str	r3, [r7, #12]
 8002c4c:	e00c      	b.n	8002c68 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	4a0e      	ldr	r2, [pc, #56]	; (8002c8c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d804      	bhi.n	8002c60 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c5c:	60fb      	str	r3, [r7, #12]
 8002c5e:	e003      	b.n	8002c68 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8002c66:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002c72:	bf00      	nop
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	02160ebf 	.word	0x02160ebf
 8002c80:	03938700 	.word	0x03938700
 8002c84:	05f5e0ff 	.word	0x05f5e0ff
 8002c88:	08f0d17f 	.word	0x08f0d17f
 8002c8c:	0ee6b27f 	.word	0x0ee6b27f

08002c90 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002ca2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	791b      	ldrb	r3, [r3, #4]
 8002ca8:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002caa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	7b1b      	ldrb	r3, [r3, #12]
 8002cb0:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002cb2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	7b5b      	ldrb	r3, [r3, #13]
 8002cb8:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002cba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	7b9b      	ldrb	r3, [r3, #14]
 8002cc0:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002cc2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	7bdb      	ldrb	r3, [r3, #15]
 8002cc8:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002cca:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	7c12      	ldrb	r2, [r2, #16]
 8002cd0:	2a00      	cmp	r2, #0
 8002cd2:	d102      	bne.n	8002cda <ETH_SetMACConfig+0x4a>
 8002cd4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002cd8:	e000      	b.n	8002cdc <ETH_SetMACConfig+0x4c>
 8002cda:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002cdc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	7c52      	ldrb	r2, [r2, #17]
 8002ce2:	2a00      	cmp	r2, #0
 8002ce4:	d102      	bne.n	8002cec <ETH_SetMACConfig+0x5c>
 8002ce6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002cea:	e000      	b.n	8002cee <ETH_SetMACConfig+0x5e>
 8002cec:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002cee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	7c9b      	ldrb	r3, [r3, #18]
 8002cf4:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002cf6:	431a      	orrs	r2, r3
               macconf->Speed |
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002cfc:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002d02:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	7f1b      	ldrb	r3, [r3, #28]
 8002d08:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002d0a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	7f5b      	ldrb	r3, [r3, #29]
 8002d10:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002d12:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002d14:	683a      	ldr	r2, [r7, #0]
 8002d16:	7f92      	ldrb	r2, [r2, #30]
 8002d18:	2a00      	cmp	r2, #0
 8002d1a:	d102      	bne.n	8002d22 <ETH_SetMACConfig+0x92>
 8002d1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d20:	e000      	b.n	8002d24 <ETH_SetMACConfig+0x94>
 8002d22:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002d24:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	7fdb      	ldrb	r3, [r3, #31]
 8002d2a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002d2c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002d34:	2a00      	cmp	r2, #0
 8002d36:	d102      	bne.n	8002d3e <ETH_SetMACConfig+0xae>
 8002d38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d3c:	e000      	b.n	8002d40 <ETH_SetMACConfig+0xb0>
 8002d3e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002d40:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002d46:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002d4e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002d50:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002d56:	4313      	orrs	r3, r2
 8002d58:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	4b56      	ldr	r3, [pc, #344]	; (8002ebc <ETH_SetMACConfig+0x22c>)
 8002d62:	4013      	ands	r3, r2
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	6812      	ldr	r2, [r2, #0]
 8002d68:	68f9      	ldr	r1, [r7, #12]
 8002d6a:	430b      	orrs	r3, r1
 8002d6c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d72:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d7a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002d7c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d84:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002d86:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002d8e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002d90:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002d92:	683a      	ldr	r2, [r7, #0]
 8002d94:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002d98:	2a00      	cmp	r2, #0
 8002d9a:	d102      	bne.n	8002da2 <ETH_SetMACConfig+0x112>
 8002d9c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002da0:	e000      	b.n	8002da4 <ETH_SetMACConfig+0x114>
 8002da2:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002da4:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002daa:	4313      	orrs	r3, r2
 8002dac:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	4b42      	ldr	r3, [pc, #264]	; (8002ec0 <ETH_SetMACConfig+0x230>)
 8002db6:	4013      	ands	r3, r2
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	6812      	ldr	r2, [r2, #0]
 8002dbc:	68f9      	ldr	r1, [r7, #12]
 8002dbe:	430b      	orrs	r3, r1
 8002dc0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dc8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68da      	ldr	r2, [r3, #12]
 8002dd8:	4b3a      	ldr	r3, [pc, #232]	; (8002ec4 <ETH_SetMACConfig+0x234>)
 8002dda:	4013      	ands	r3, r2
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	6812      	ldr	r2, [r2, #0]
 8002de0:	68f9      	ldr	r1, [r7, #12]
 8002de2:	430b      	orrs	r3, r1
 8002de4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002dec:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002df2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002dfa:	2a00      	cmp	r2, #0
 8002dfc:	d101      	bne.n	8002e02 <ETH_SetMACConfig+0x172>
 8002dfe:	2280      	movs	r2, #128	; 0x80
 8002e00:	e000      	b.n	8002e04 <ETH_SetMACConfig+0x174>
 8002e02:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002e04:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e0a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e16:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	6812      	ldr	r2, [r2, #0]
 8002e20:	68f9      	ldr	r1, [r7, #12]
 8002e22:	430b      	orrs	r3, r1
 8002e24:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002e2c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002e34:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002e36:	4313      	orrs	r3, r2
 8002e38:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e42:	f023 0103 	bic.w	r1, r3, #3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002e5a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002e76:	2a00      	cmp	r2, #0
 8002e78:	d101      	bne.n	8002e7e <ETH_SetMACConfig+0x1ee>
 8002e7a:	2240      	movs	r2, #64	; 0x40
 8002e7c:	e000      	b.n	8002e80 <ETH_SetMACConfig+0x1f0>
 8002e7e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002e80:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002e88:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002e8a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002e92:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002e94:	4313      	orrs	r3, r2
 8002e96:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002ea0:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002eb0:	bf00      	nop
 8002eb2:	3714      	adds	r7, #20
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	00048083 	.word	0x00048083
 8002ec0:	c0f88000 	.word	0xc0f88000
 8002ec4:	fffffef0 	.word	0xfffffef0

08002ec8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	4b38      	ldr	r3, [pc, #224]	; (8002fc0 <ETH_SetDMAConfig+0xf8>)
 8002ede:	4013      	ands	r3, r2
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	6811      	ldr	r1, [r2, #0]
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	6812      	ldr	r2, [r2, #0]
 8002ee8:	430b      	orrs	r3, r1
 8002eea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002eee:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	791b      	ldrb	r3, [r3, #4]
 8002ef4:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002efa:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	7b1b      	ldrb	r3, [r3, #12]
 8002f00:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002f02:	4313      	orrs	r3, r2
 8002f04:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f0e:	685a      	ldr	r2, [r3, #4]
 8002f10:	4b2c      	ldr	r3, [pc, #176]	; (8002fc4 <ETH_SetDMAConfig+0xfc>)
 8002f12:	4013      	ands	r3, r2
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	6812      	ldr	r2, [r2, #0]
 8002f18:	68f9      	ldr	r1, [r7, #12]
 8002f1a:	430b      	orrs	r3, r1
 8002f1c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002f20:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	7b5b      	ldrb	r3, [r3, #13]
 8002f26:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f38:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8002f3c:	4b22      	ldr	r3, [pc, #136]	; (8002fc8 <ETH_SetDMAConfig+0x100>)
 8002f3e:	4013      	ands	r3, r2
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	6812      	ldr	r2, [r2, #0]
 8002f44:	68f9      	ldr	r1, [r7, #12]
 8002f46:	430b      	orrs	r3, r1
 8002f48:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002f4c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	7d1b      	ldrb	r3, [r3, #20]
 8002f58:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002f5a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	7f5b      	ldrb	r3, [r3, #29]
 8002f60:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002f62:	4313      	orrs	r3, r2
 8002f64:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f6e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8002f72:	4b16      	ldr	r3, [pc, #88]	; (8002fcc <ETH_SetDMAConfig+0x104>)
 8002f74:	4013      	ands	r3, r2
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	6812      	ldr	r2, [r2, #0]
 8002f7a:	68f9      	ldr	r1, [r7, #12]
 8002f7c:	430b      	orrs	r3, r1
 8002f7e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002f82:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	7f1b      	ldrb	r3, [r3, #28]
 8002f8a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002f90:	4313      	orrs	r3, r2
 8002f92:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f9c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002fa0:	4b0b      	ldr	r3, [pc, #44]	; (8002fd0 <ETH_SetDMAConfig+0x108>)
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	6812      	ldr	r2, [r2, #0]
 8002fa8:	68f9      	ldr	r1, [r7, #12]
 8002faa:	430b      	orrs	r3, r1
 8002fac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002fb0:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8002fb4:	bf00      	nop
 8002fb6:	3714      	adds	r7, #20
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr
 8002fc0:	ffff87fd 	.word	0xffff87fd
 8002fc4:	ffff2ffe 	.word	0xffff2ffe
 8002fc8:	fffec000 	.word	0xfffec000
 8002fcc:	ffc0efef 	.word	0xffc0efef
 8002fd0:	7fc0ffff 	.word	0x7fc0ffff

08002fd4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b0a4      	sub	sp, #144	; 0x90
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002fec:	2300      	movs	r3, #0
 8002fee:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002ffe:	2301      	movs	r3, #1
 8003000:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003004:	2300      	movs	r3, #0
 8003006:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800300a:	2301      	movs	r3, #1
 800300c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003010:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003014:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003016:	2300      	movs	r3, #0
 8003018:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 800301c:	2300      	movs	r3, #0
 800301e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003020:	2300      	movs	r3, #0
 8003022:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003026:	2300      	movs	r3, #0
 8003028:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 800302c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8003030:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8003032:	2300      	movs	r3, #0
 8003034:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003038:	2300      	movs	r3, #0
 800303a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800303c:	2301      	movs	r3, #1
 800303e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8003042:	2300      	movs	r3, #0
 8003044:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003048:	2300      	movs	r3, #0
 800304a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800304e:	2300      	movs	r3, #0
 8003050:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8003052:	2300      	movs	r3, #0
 8003054:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8003056:	2300      	movs	r3, #0
 8003058:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800305a:	2300      	movs	r3, #0
 800305c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003060:	2300      	movs	r3, #0
 8003062:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8003066:	2301      	movs	r3, #1
 8003068:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800306c:	2320      	movs	r3, #32
 800306e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8003072:	2301      	movs	r3, #1
 8003074:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003078:	2300      	movs	r3, #0
 800307a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800307e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8003082:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003084:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003088:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800308a:	2300      	movs	r3, #0
 800308c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003090:	2302      	movs	r3, #2
 8003092:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003096:	2300      	movs	r3, #0
 8003098:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800309c:	2300      	movs	r3, #0
 800309e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80030a2:	2300      	movs	r3, #0
 80030a4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80030a8:	2301      	movs	r3, #1
 80030aa:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80030ae:	2300      	movs	r3, #0
 80030b0:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80030b2:	2301      	movs	r3, #1
 80030b4:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80030b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030bc:	4619      	mov	r1, r3
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f7ff fde6 	bl	8002c90 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80030c4:	2301      	movs	r3, #1
 80030c6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80030c8:	2301      	movs	r3, #1
 80030ca:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80030cc:	2300      	movs	r3, #0
 80030ce:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80030d0:	2300      	movs	r3, #0
 80030d2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80030d6:	2300      	movs	r3, #0
 80030d8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80030da:	2300      	movs	r3, #0
 80030dc:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80030de:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80030e2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80030e4:	2300      	movs	r3, #0
 80030e6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80030e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80030ec:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80030ee:	2300      	movs	r3, #0
 80030f0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80030f4:	f44f 7306 	mov.w	r3, #536	; 0x218
 80030f8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80030fa:	f107 0308 	add.w	r3, r7, #8
 80030fe:	4619      	mov	r1, r3
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f7ff fee1 	bl	8002ec8 <ETH_SetDMAConfig>
}
 8003106:	bf00      	nop
 8003108:	3790      	adds	r7, #144	; 0x90
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800310e:	b480      	push	{r7}
 8003110:	b085      	sub	sp, #20
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003116:	2300      	movs	r3, #0
 8003118:	60fb      	str	r3, [r7, #12]
 800311a:	e01d      	b.n	8003158 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	68d9      	ldr	r1, [r3, #12]
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	4613      	mov	r3, r2
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	4413      	add	r3, r2
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	440b      	add	r3, r1
 800312c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	2200      	movs	r2, #0
 8003132:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	2200      	movs	r2, #0
 8003138:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	2200      	movs	r2, #0
 800313e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	2200      	movs	r2, #0
 8003144:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003146:	68b9      	ldr	r1, [r7, #8]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	3206      	adds	r2, #6
 800314e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	3301      	adds	r3, #1
 8003156:	60fb      	str	r3, [r7, #12]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2b03      	cmp	r3, #3
 800315c:	d9de      	bls.n	800311c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800316c:	461a      	mov	r2, r3
 800316e:	2303      	movs	r3, #3
 8003170:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	68da      	ldr	r2, [r3, #12]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003180:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	68da      	ldr	r2, [r3, #12]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003190:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8003194:	bf00      	nop
 8003196:	3714      	adds	r7, #20
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80031a8:	2300      	movs	r3, #0
 80031aa:	60fb      	str	r3, [r7, #12]
 80031ac:	e023      	b.n	80031f6 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6919      	ldr	r1, [r3, #16]
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	4613      	mov	r3, r2
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	4413      	add	r3, r2
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	440b      	add	r3, r1
 80031be:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	2200      	movs	r2, #0
 80031c4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	2200      	movs	r2, #0
 80031ca:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	2200      	movs	r2, #0
 80031d0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	2200      	movs	r2, #0
 80031d6:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	2200      	movs	r2, #0
 80031dc:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	2200      	movs	r2, #0
 80031e2:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80031e4:	68b9      	ldr	r1, [r7, #8]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	3212      	adds	r2, #18
 80031ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	3301      	adds	r3, #1
 80031f4:	60fb      	str	r3, [r7, #12]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2b03      	cmp	r3, #3
 80031fa:	d9d8      	bls.n	80031ae <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003222:	461a      	mov	r2, r3
 8003224:	2303      	movs	r3, #3
 8003226:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	691a      	ldr	r2, [r3, #16]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003236:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800324a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800324e:	bf00      	nop
 8003250:	3714      	adds	r7, #20
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
	...

0800325c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800325c:	b480      	push	{r7}
 800325e:	b089      	sub	sp, #36	; 0x24
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003266:	2300      	movs	r3, #0
 8003268:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800326a:	4b86      	ldr	r3, [pc, #536]	; (8003484 <HAL_GPIO_Init+0x228>)
 800326c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800326e:	e18c      	b.n	800358a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	2101      	movs	r1, #1
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	fa01 f303 	lsl.w	r3, r1, r3
 800327c:	4013      	ands	r3, r2
 800327e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	2b00      	cmp	r3, #0
 8003284:	f000 817e 	beq.w	8003584 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f003 0303 	and.w	r3, r3, #3
 8003290:	2b01      	cmp	r3, #1
 8003292:	d005      	beq.n	80032a0 <HAL_GPIO_Init+0x44>
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f003 0303 	and.w	r3, r3, #3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d130      	bne.n	8003302 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	2203      	movs	r2, #3
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	43db      	mvns	r3, r3
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	4013      	ands	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	68da      	ldr	r2, [r3, #12]
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032d6:	2201      	movs	r2, #1
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	fa02 f303 	lsl.w	r3, r2, r3
 80032de:	43db      	mvns	r3, r3
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	4013      	ands	r3, r2
 80032e4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	091b      	lsrs	r3, r3, #4
 80032ec:	f003 0201 	and.w	r2, r3, #1
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	fa02 f303 	lsl.w	r3, r2, r3
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	69ba      	ldr	r2, [r7, #24]
 8003300:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f003 0303 	and.w	r3, r3, #3
 800330a:	2b03      	cmp	r3, #3
 800330c:	d017      	beq.n	800333e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	2203      	movs	r2, #3
 800331a:	fa02 f303 	lsl.w	r3, r2, r3
 800331e:	43db      	mvns	r3, r3
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	4013      	ands	r3, r2
 8003324:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	689a      	ldr	r2, [r3, #8]
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	fa02 f303 	lsl.w	r3, r2, r3
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	4313      	orrs	r3, r2
 8003336:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f003 0303 	and.w	r3, r3, #3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d123      	bne.n	8003392 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	08da      	lsrs	r2, r3, #3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	3208      	adds	r2, #8
 8003352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003356:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	f003 0307 	and.w	r3, r3, #7
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	220f      	movs	r2, #15
 8003362:	fa02 f303 	lsl.w	r3, r2, r3
 8003366:	43db      	mvns	r3, r3
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	4013      	ands	r3, r2
 800336c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	691a      	ldr	r2, [r3, #16]
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	f003 0307 	and.w	r3, r3, #7
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	4313      	orrs	r3, r2
 8003382:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	08da      	lsrs	r2, r3, #3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	3208      	adds	r2, #8
 800338c:	69b9      	ldr	r1, [r7, #24]
 800338e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	2203      	movs	r2, #3
 800339e:	fa02 f303 	lsl.w	r3, r2, r3
 80033a2:	43db      	mvns	r3, r3
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	4013      	ands	r3, r2
 80033a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f003 0203 	and.w	r2, r3, #3
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ba:	69ba      	ldr	r2, [r7, #24]
 80033bc:	4313      	orrs	r3, r2
 80033be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	69ba      	ldr	r2, [r7, #24]
 80033c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f000 80d8 	beq.w	8003584 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033d4:	4b2c      	ldr	r3, [pc, #176]	; (8003488 <HAL_GPIO_Init+0x22c>)
 80033d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80033da:	4a2b      	ldr	r2, [pc, #172]	; (8003488 <HAL_GPIO_Init+0x22c>)
 80033dc:	f043 0302 	orr.w	r3, r3, #2
 80033e0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80033e4:	4b28      	ldr	r3, [pc, #160]	; (8003488 <HAL_GPIO_Init+0x22c>)
 80033e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	60fb      	str	r3, [r7, #12]
 80033f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033f2:	4a26      	ldr	r2, [pc, #152]	; (800348c <HAL_GPIO_Init+0x230>)
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	089b      	lsrs	r3, r3, #2
 80033f8:	3302      	adds	r3, #2
 80033fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	f003 0303 	and.w	r3, r3, #3
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	220f      	movs	r2, #15
 800340a:	fa02 f303 	lsl.w	r3, r2, r3
 800340e:	43db      	mvns	r3, r3
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	4013      	ands	r3, r2
 8003414:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a1d      	ldr	r2, [pc, #116]	; (8003490 <HAL_GPIO_Init+0x234>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d04a      	beq.n	80034b4 <HAL_GPIO_Init+0x258>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a1c      	ldr	r2, [pc, #112]	; (8003494 <HAL_GPIO_Init+0x238>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d02b      	beq.n	800347e <HAL_GPIO_Init+0x222>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a1b      	ldr	r2, [pc, #108]	; (8003498 <HAL_GPIO_Init+0x23c>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d025      	beq.n	800347a <HAL_GPIO_Init+0x21e>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a1a      	ldr	r2, [pc, #104]	; (800349c <HAL_GPIO_Init+0x240>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d01f      	beq.n	8003476 <HAL_GPIO_Init+0x21a>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a19      	ldr	r2, [pc, #100]	; (80034a0 <HAL_GPIO_Init+0x244>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d019      	beq.n	8003472 <HAL_GPIO_Init+0x216>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a18      	ldr	r2, [pc, #96]	; (80034a4 <HAL_GPIO_Init+0x248>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d013      	beq.n	800346e <HAL_GPIO_Init+0x212>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a17      	ldr	r2, [pc, #92]	; (80034a8 <HAL_GPIO_Init+0x24c>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d00d      	beq.n	800346a <HAL_GPIO_Init+0x20e>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a16      	ldr	r2, [pc, #88]	; (80034ac <HAL_GPIO_Init+0x250>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d007      	beq.n	8003466 <HAL_GPIO_Init+0x20a>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a15      	ldr	r2, [pc, #84]	; (80034b0 <HAL_GPIO_Init+0x254>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d101      	bne.n	8003462 <HAL_GPIO_Init+0x206>
 800345e:	2309      	movs	r3, #9
 8003460:	e029      	b.n	80034b6 <HAL_GPIO_Init+0x25a>
 8003462:	230a      	movs	r3, #10
 8003464:	e027      	b.n	80034b6 <HAL_GPIO_Init+0x25a>
 8003466:	2307      	movs	r3, #7
 8003468:	e025      	b.n	80034b6 <HAL_GPIO_Init+0x25a>
 800346a:	2306      	movs	r3, #6
 800346c:	e023      	b.n	80034b6 <HAL_GPIO_Init+0x25a>
 800346e:	2305      	movs	r3, #5
 8003470:	e021      	b.n	80034b6 <HAL_GPIO_Init+0x25a>
 8003472:	2304      	movs	r3, #4
 8003474:	e01f      	b.n	80034b6 <HAL_GPIO_Init+0x25a>
 8003476:	2303      	movs	r3, #3
 8003478:	e01d      	b.n	80034b6 <HAL_GPIO_Init+0x25a>
 800347a:	2302      	movs	r3, #2
 800347c:	e01b      	b.n	80034b6 <HAL_GPIO_Init+0x25a>
 800347e:	2301      	movs	r3, #1
 8003480:	e019      	b.n	80034b6 <HAL_GPIO_Init+0x25a>
 8003482:	bf00      	nop
 8003484:	58000080 	.word	0x58000080
 8003488:	58024400 	.word	0x58024400
 800348c:	58000400 	.word	0x58000400
 8003490:	58020000 	.word	0x58020000
 8003494:	58020400 	.word	0x58020400
 8003498:	58020800 	.word	0x58020800
 800349c:	58020c00 	.word	0x58020c00
 80034a0:	58021000 	.word	0x58021000
 80034a4:	58021400 	.word	0x58021400
 80034a8:	58021800 	.word	0x58021800
 80034ac:	58021c00 	.word	0x58021c00
 80034b0:	58022400 	.word	0x58022400
 80034b4:	2300      	movs	r3, #0
 80034b6:	69fa      	ldr	r2, [r7, #28]
 80034b8:	f002 0203 	and.w	r2, r2, #3
 80034bc:	0092      	lsls	r2, r2, #2
 80034be:	4093      	lsls	r3, r2
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034c6:	4938      	ldr	r1, [pc, #224]	; (80035a8 <HAL_GPIO_Init+0x34c>)
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	089b      	lsrs	r3, r3, #2
 80034cc:	3302      	adds	r3, #2
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	43db      	mvns	r3, r3
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	4013      	ands	r3, r2
 80034e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d003      	beq.n	80034fa <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80034fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	43db      	mvns	r3, r3
 800350e:	69ba      	ldr	r2, [r7, #24]
 8003510:	4013      	ands	r3, r2
 8003512:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d003      	beq.n	8003528 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	4313      	orrs	r3, r2
 8003526:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003528:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	43db      	mvns	r3, r3
 800353a:	69ba      	ldr	r2, [r7, #24]
 800353c:	4013      	ands	r3, r2
 800353e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d003      	beq.n	8003554 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	4313      	orrs	r3, r2
 8003552:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	69ba      	ldr	r2, [r7, #24]
 8003558:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	43db      	mvns	r3, r3
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	4013      	ands	r3, r2
 8003568:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d003      	beq.n	800357e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	4313      	orrs	r3, r2
 800357c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	3301      	adds	r3, #1
 8003588:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	fa22 f303 	lsr.w	r3, r2, r3
 8003594:	2b00      	cmp	r3, #0
 8003596:	f47f ae6b 	bne.w	8003270 <HAL_GPIO_Init+0x14>
  }
}
 800359a:	bf00      	nop
 800359c:	bf00      	nop
 800359e:	3724      	adds	r7, #36	; 0x24
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr
 80035a8:	58000400 	.word	0x58000400

080035ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	460b      	mov	r3, r1
 80035b6:	807b      	strh	r3, [r7, #2]
 80035b8:	4613      	mov	r3, r2
 80035ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035bc:	787b      	ldrb	r3, [r7, #1]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035c2:	887a      	ldrh	r2, [r7, #2]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80035c8:	e003      	b.n	80035d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80035ca:	887b      	ldrh	r3, [r7, #2]
 80035cc:	041a      	lsls	r2, r3, #16
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	619a      	str	r2, [r3, #24]
}
 80035d2:	bf00      	nop
 80035d4:	370c      	adds	r7, #12
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
	...

080035e0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80035e8:	4b19      	ldr	r3, [pc, #100]	; (8003650 <HAL_PWREx_ConfigSupply+0x70>)
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	f003 0304 	and.w	r3, r3, #4
 80035f0:	2b04      	cmp	r3, #4
 80035f2:	d00a      	beq.n	800360a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80035f4:	4b16      	ldr	r3, [pc, #88]	; (8003650 <HAL_PWREx_ConfigSupply+0x70>)
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	f003 0307 	and.w	r3, r3, #7
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d001      	beq.n	8003606 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e01f      	b.n	8003646 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003606:	2300      	movs	r3, #0
 8003608:	e01d      	b.n	8003646 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800360a:	4b11      	ldr	r3, [pc, #68]	; (8003650 <HAL_PWREx_ConfigSupply+0x70>)
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	f023 0207 	bic.w	r2, r3, #7
 8003612:	490f      	ldr	r1, [pc, #60]	; (8003650 <HAL_PWREx_ConfigSupply+0x70>)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4313      	orrs	r3, r2
 8003618:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800361a:	f7fe fb33 	bl	8001c84 <HAL_GetTick>
 800361e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003620:	e009      	b.n	8003636 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003622:	f7fe fb2f 	bl	8001c84 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003630:	d901      	bls.n	8003636 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e007      	b.n	8003646 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003636:	4b06      	ldr	r3, [pc, #24]	; (8003650 <HAL_PWREx_ConfigSupply+0x70>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800363e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003642:	d1ee      	bne.n	8003622 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	58024800 	.word	0x58024800

08003654 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b08c      	sub	sp, #48	; 0x30
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d101      	bne.n	8003666 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e3c8      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	2b00      	cmp	r3, #0
 8003670:	f000 8087 	beq.w	8003782 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003674:	4b88      	ldr	r3, [pc, #544]	; (8003898 <HAL_RCC_OscConfig+0x244>)
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800367c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800367e:	4b86      	ldr	r3, [pc, #536]	; (8003898 <HAL_RCC_OscConfig+0x244>)
 8003680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003682:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003686:	2b10      	cmp	r3, #16
 8003688:	d007      	beq.n	800369a <HAL_RCC_OscConfig+0x46>
 800368a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800368c:	2b18      	cmp	r3, #24
 800368e:	d110      	bne.n	80036b2 <HAL_RCC_OscConfig+0x5e>
 8003690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003692:	f003 0303 	and.w	r3, r3, #3
 8003696:	2b02      	cmp	r3, #2
 8003698:	d10b      	bne.n	80036b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800369a:	4b7f      	ldr	r3, [pc, #508]	; (8003898 <HAL_RCC_OscConfig+0x244>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d06c      	beq.n	8003780 <HAL_RCC_OscConfig+0x12c>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d168      	bne.n	8003780 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e3a2      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036ba:	d106      	bne.n	80036ca <HAL_RCC_OscConfig+0x76>
 80036bc:	4b76      	ldr	r3, [pc, #472]	; (8003898 <HAL_RCC_OscConfig+0x244>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a75      	ldr	r2, [pc, #468]	; (8003898 <HAL_RCC_OscConfig+0x244>)
 80036c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036c6:	6013      	str	r3, [r2, #0]
 80036c8:	e02e      	b.n	8003728 <HAL_RCC_OscConfig+0xd4>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10c      	bne.n	80036ec <HAL_RCC_OscConfig+0x98>
 80036d2:	4b71      	ldr	r3, [pc, #452]	; (8003898 <HAL_RCC_OscConfig+0x244>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a70      	ldr	r2, [pc, #448]	; (8003898 <HAL_RCC_OscConfig+0x244>)
 80036d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036dc:	6013      	str	r3, [r2, #0]
 80036de:	4b6e      	ldr	r3, [pc, #440]	; (8003898 <HAL_RCC_OscConfig+0x244>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a6d      	ldr	r2, [pc, #436]	; (8003898 <HAL_RCC_OscConfig+0x244>)
 80036e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036e8:	6013      	str	r3, [r2, #0]
 80036ea:	e01d      	b.n	8003728 <HAL_RCC_OscConfig+0xd4>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036f4:	d10c      	bne.n	8003710 <HAL_RCC_OscConfig+0xbc>
 80036f6:	4b68      	ldr	r3, [pc, #416]	; (8003898 <HAL_RCC_OscConfig+0x244>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a67      	ldr	r2, [pc, #412]	; (8003898 <HAL_RCC_OscConfig+0x244>)
 80036fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003700:	6013      	str	r3, [r2, #0]
 8003702:	4b65      	ldr	r3, [pc, #404]	; (8003898 <HAL_RCC_OscConfig+0x244>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a64      	ldr	r2, [pc, #400]	; (8003898 <HAL_RCC_OscConfig+0x244>)
 8003708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800370c:	6013      	str	r3, [r2, #0]
 800370e:	e00b      	b.n	8003728 <HAL_RCC_OscConfig+0xd4>
 8003710:	4b61      	ldr	r3, [pc, #388]	; (8003898 <HAL_RCC_OscConfig+0x244>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a60      	ldr	r2, [pc, #384]	; (8003898 <HAL_RCC_OscConfig+0x244>)
 8003716:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800371a:	6013      	str	r3, [r2, #0]
 800371c:	4b5e      	ldr	r3, [pc, #376]	; (8003898 <HAL_RCC_OscConfig+0x244>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a5d      	ldr	r2, [pc, #372]	; (8003898 <HAL_RCC_OscConfig+0x244>)
 8003722:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003726:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d013      	beq.n	8003758 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003730:	f7fe faa8 	bl	8001c84 <HAL_GetTick>
 8003734:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003736:	e008      	b.n	800374a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003738:	f7fe faa4 	bl	8001c84 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b64      	cmp	r3, #100	; 0x64
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e356      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800374a:	4b53      	ldr	r3, [pc, #332]	; (8003898 <HAL_RCC_OscConfig+0x244>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d0f0      	beq.n	8003738 <HAL_RCC_OscConfig+0xe4>
 8003756:	e014      	b.n	8003782 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003758:	f7fe fa94 	bl	8001c84 <HAL_GetTick>
 800375c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800375e:	e008      	b.n	8003772 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003760:	f7fe fa90 	bl	8001c84 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b64      	cmp	r3, #100	; 0x64
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e342      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003772:	4b49      	ldr	r3, [pc, #292]	; (8003898 <HAL_RCC_OscConfig+0x244>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1f0      	bne.n	8003760 <HAL_RCC_OscConfig+0x10c>
 800377e:	e000      	b.n	8003782 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003780:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b00      	cmp	r3, #0
 800378c:	f000 808c 	beq.w	80038a8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003790:	4b41      	ldr	r3, [pc, #260]	; (8003898 <HAL_RCC_OscConfig+0x244>)
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003798:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800379a:	4b3f      	ldr	r3, [pc, #252]	; (8003898 <HAL_RCC_OscConfig+0x244>)
 800379c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80037a0:	6a3b      	ldr	r3, [r7, #32]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d007      	beq.n	80037b6 <HAL_RCC_OscConfig+0x162>
 80037a6:	6a3b      	ldr	r3, [r7, #32]
 80037a8:	2b18      	cmp	r3, #24
 80037aa:	d137      	bne.n	800381c <HAL_RCC_OscConfig+0x1c8>
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	f003 0303 	and.w	r3, r3, #3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d132      	bne.n	800381c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037b6:	4b38      	ldr	r3, [pc, #224]	; (8003898 <HAL_RCC_OscConfig+0x244>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0304 	and.w	r3, r3, #4
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d005      	beq.n	80037ce <HAL_RCC_OscConfig+0x17a>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e314      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80037ce:	4b32      	ldr	r3, [pc, #200]	; (8003898 <HAL_RCC_OscConfig+0x244>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f023 0219 	bic.w	r2, r3, #25
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	492f      	ldr	r1, [pc, #188]	; (8003898 <HAL_RCC_OscConfig+0x244>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e0:	f7fe fa50 	bl	8001c84 <HAL_GetTick>
 80037e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037e6:	e008      	b.n	80037fa <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037e8:	f7fe fa4c 	bl	8001c84 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e2fe      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037fa:	4b27      	ldr	r3, [pc, #156]	; (8003898 <HAL_RCC_OscConfig+0x244>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0304 	and.w	r3, r3, #4
 8003802:	2b00      	cmp	r3, #0
 8003804:	d0f0      	beq.n	80037e8 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003806:	4b24      	ldr	r3, [pc, #144]	; (8003898 <HAL_RCC_OscConfig+0x244>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	061b      	lsls	r3, r3, #24
 8003814:	4920      	ldr	r1, [pc, #128]	; (8003898 <HAL_RCC_OscConfig+0x244>)
 8003816:	4313      	orrs	r3, r2
 8003818:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800381a:	e045      	b.n	80038a8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d026      	beq.n	8003872 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003824:	4b1c      	ldr	r3, [pc, #112]	; (8003898 <HAL_RCC_OscConfig+0x244>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f023 0219 	bic.w	r2, r3, #25
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	4919      	ldr	r1, [pc, #100]	; (8003898 <HAL_RCC_OscConfig+0x244>)
 8003832:	4313      	orrs	r3, r2
 8003834:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003836:	f7fe fa25 	bl	8001c84 <HAL_GetTick>
 800383a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800383c:	e008      	b.n	8003850 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800383e:	f7fe fa21 	bl	8001c84 <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	2b02      	cmp	r3, #2
 800384a:	d901      	bls.n	8003850 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e2d3      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003850:	4b11      	ldr	r3, [pc, #68]	; (8003898 <HAL_RCC_OscConfig+0x244>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0304 	and.w	r3, r3, #4
 8003858:	2b00      	cmp	r3, #0
 800385a:	d0f0      	beq.n	800383e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800385c:	4b0e      	ldr	r3, [pc, #56]	; (8003898 <HAL_RCC_OscConfig+0x244>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	061b      	lsls	r3, r3, #24
 800386a:	490b      	ldr	r1, [pc, #44]	; (8003898 <HAL_RCC_OscConfig+0x244>)
 800386c:	4313      	orrs	r3, r2
 800386e:	604b      	str	r3, [r1, #4]
 8003870:	e01a      	b.n	80038a8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003872:	4b09      	ldr	r3, [pc, #36]	; (8003898 <HAL_RCC_OscConfig+0x244>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a08      	ldr	r2, [pc, #32]	; (8003898 <HAL_RCC_OscConfig+0x244>)
 8003878:	f023 0301 	bic.w	r3, r3, #1
 800387c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800387e:	f7fe fa01 	bl	8001c84 <HAL_GetTick>
 8003882:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003884:	e00a      	b.n	800389c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003886:	f7fe f9fd 	bl	8001c84 <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	2b02      	cmp	r3, #2
 8003892:	d903      	bls.n	800389c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e2af      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a4>
 8003898:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800389c:	4b96      	ldr	r3, [pc, #600]	; (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0304 	and.w	r3, r3, #4
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1ee      	bne.n	8003886 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0310 	and.w	r3, r3, #16
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d06a      	beq.n	800398a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038b4:	4b90      	ldr	r3, [pc, #576]	; (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038bc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80038be:	4b8e      	ldr	r3, [pc, #568]	; (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 80038c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c2:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	2b08      	cmp	r3, #8
 80038c8:	d007      	beq.n	80038da <HAL_RCC_OscConfig+0x286>
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	2b18      	cmp	r3, #24
 80038ce:	d11b      	bne.n	8003908 <HAL_RCC_OscConfig+0x2b4>
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	f003 0303 	and.w	r3, r3, #3
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d116      	bne.n	8003908 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80038da:	4b87      	ldr	r3, [pc, #540]	; (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d005      	beq.n	80038f2 <HAL_RCC_OscConfig+0x29e>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	69db      	ldr	r3, [r3, #28]
 80038ea:	2b80      	cmp	r3, #128	; 0x80
 80038ec:	d001      	beq.n	80038f2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e282      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80038f2:	4b81      	ldr	r3, [pc, #516]	; (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	061b      	lsls	r3, r3, #24
 8003900:	497d      	ldr	r1, [pc, #500]	; (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 8003902:	4313      	orrs	r3, r2
 8003904:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003906:	e040      	b.n	800398a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	69db      	ldr	r3, [r3, #28]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d023      	beq.n	8003958 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003910:	4b79      	ldr	r3, [pc, #484]	; (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a78      	ldr	r2, [pc, #480]	; (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 8003916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800391a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800391c:	f7fe f9b2 	bl	8001c84 <HAL_GetTick>
 8003920:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003922:	e008      	b.n	8003936 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003924:	f7fe f9ae 	bl	8001c84 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b02      	cmp	r3, #2
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e260      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003936:	4b70      	ldr	r3, [pc, #448]	; (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800393e:	2b00      	cmp	r3, #0
 8003940:	d0f0      	beq.n	8003924 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003942:	4b6d      	ldr	r3, [pc, #436]	; (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	061b      	lsls	r3, r3, #24
 8003950:	4969      	ldr	r1, [pc, #420]	; (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 8003952:	4313      	orrs	r3, r2
 8003954:	60cb      	str	r3, [r1, #12]
 8003956:	e018      	b.n	800398a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003958:	4b67      	ldr	r3, [pc, #412]	; (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a66      	ldr	r2, [pc, #408]	; (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 800395e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003962:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003964:	f7fe f98e 	bl	8001c84 <HAL_GetTick>
 8003968:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800396a:	e008      	b.n	800397e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800396c:	f7fe f98a 	bl	8001c84 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b02      	cmp	r3, #2
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e23c      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800397e:	4b5e      	ldr	r3, [pc, #376]	; (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1f0      	bne.n	800396c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0308 	and.w	r3, r3, #8
 8003992:	2b00      	cmp	r3, #0
 8003994:	d036      	beq.n	8003a04 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d019      	beq.n	80039d2 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800399e:	4b56      	ldr	r3, [pc, #344]	; (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 80039a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039a2:	4a55      	ldr	r2, [pc, #340]	; (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 80039a4:	f043 0301 	orr.w	r3, r3, #1
 80039a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039aa:	f7fe f96b 	bl	8001c84 <HAL_GetTick>
 80039ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80039b0:	e008      	b.n	80039c4 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039b2:	f7fe f967 	bl	8001c84 <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d901      	bls.n	80039c4 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e219      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80039c4:	4b4c      	ldr	r3, [pc, #304]	; (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 80039c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d0f0      	beq.n	80039b2 <HAL_RCC_OscConfig+0x35e>
 80039d0:	e018      	b.n	8003a04 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039d2:	4b49      	ldr	r3, [pc, #292]	; (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 80039d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039d6:	4a48      	ldr	r2, [pc, #288]	; (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 80039d8:	f023 0301 	bic.w	r3, r3, #1
 80039dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039de:	f7fe f951 	bl	8001c84 <HAL_GetTick>
 80039e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80039e4:	e008      	b.n	80039f8 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039e6:	f7fe f94d 	bl	8001c84 <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d901      	bls.n	80039f8 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e1ff      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80039f8:	4b3f      	ldr	r3, [pc, #252]	; (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 80039fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d1f0      	bne.n	80039e6 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0320 	and.w	r3, r3, #32
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d036      	beq.n	8003a7e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d019      	beq.n	8003a4c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a18:	4b37      	ldr	r3, [pc, #220]	; (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a36      	ldr	r2, [pc, #216]	; (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 8003a1e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a22:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003a24:	f7fe f92e 	bl	8001c84 <HAL_GetTick>
 8003a28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a2a:	e008      	b.n	8003a3e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a2c:	f7fe f92a 	bl	8001c84 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e1dc      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a3e:	4b2e      	ldr	r3, [pc, #184]	; (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d0f0      	beq.n	8003a2c <HAL_RCC_OscConfig+0x3d8>
 8003a4a:	e018      	b.n	8003a7e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a4c:	4b2a      	ldr	r3, [pc, #168]	; (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a29      	ldr	r2, [pc, #164]	; (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 8003a52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a56:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003a58:	f7fe f914 	bl	8001c84 <HAL_GetTick>
 8003a5c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a60:	f7fe f910 	bl	8001c84 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e1c2      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003a72:	4b21      	ldr	r3, [pc, #132]	; (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1f0      	bne.n	8003a60 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0304 	and.w	r3, r3, #4
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f000 8086 	beq.w	8003b98 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003a8c:	4b1b      	ldr	r3, [pc, #108]	; (8003afc <HAL_RCC_OscConfig+0x4a8>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a1a      	ldr	r2, [pc, #104]	; (8003afc <HAL_RCC_OscConfig+0x4a8>)
 8003a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a96:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a98:	f7fe f8f4 	bl	8001c84 <HAL_GetTick>
 8003a9c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a9e:	e008      	b.n	8003ab2 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aa0:	f7fe f8f0 	bl	8001c84 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b64      	cmp	r3, #100	; 0x64
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e1a2      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ab2:	4b12      	ldr	r3, [pc, #72]	; (8003afc <HAL_RCC_OscConfig+0x4a8>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d0f0      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d106      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x480>
 8003ac6:	4b0c      	ldr	r3, [pc, #48]	; (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 8003ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aca:	4a0b      	ldr	r2, [pc, #44]	; (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 8003acc:	f043 0301 	orr.w	r3, r3, #1
 8003ad0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ad2:	e032      	b.n	8003b3a <HAL_RCC_OscConfig+0x4e6>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d111      	bne.n	8003b00 <HAL_RCC_OscConfig+0x4ac>
 8003adc:	4b06      	ldr	r3, [pc, #24]	; (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 8003ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae0:	4a05      	ldr	r2, [pc, #20]	; (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 8003ae2:	f023 0301 	bic.w	r3, r3, #1
 8003ae6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ae8:	4b03      	ldr	r3, [pc, #12]	; (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 8003aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aec:	4a02      	ldr	r2, [pc, #8]	; (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 8003aee:	f023 0304 	bic.w	r3, r3, #4
 8003af2:	6713      	str	r3, [r2, #112]	; 0x70
 8003af4:	e021      	b.n	8003b3a <HAL_RCC_OscConfig+0x4e6>
 8003af6:	bf00      	nop
 8003af8:	58024400 	.word	0x58024400
 8003afc:	58024800 	.word	0x58024800
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	2b05      	cmp	r3, #5
 8003b06:	d10c      	bne.n	8003b22 <HAL_RCC_OscConfig+0x4ce>
 8003b08:	4b83      	ldr	r3, [pc, #524]	; (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0c:	4a82      	ldr	r2, [pc, #520]	; (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003b0e:	f043 0304 	orr.w	r3, r3, #4
 8003b12:	6713      	str	r3, [r2, #112]	; 0x70
 8003b14:	4b80      	ldr	r3, [pc, #512]	; (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b18:	4a7f      	ldr	r2, [pc, #508]	; (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003b1a:	f043 0301 	orr.w	r3, r3, #1
 8003b1e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b20:	e00b      	b.n	8003b3a <HAL_RCC_OscConfig+0x4e6>
 8003b22:	4b7d      	ldr	r3, [pc, #500]	; (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b26:	4a7c      	ldr	r2, [pc, #496]	; (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003b28:	f023 0301 	bic.w	r3, r3, #1
 8003b2c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b2e:	4b7a      	ldr	r3, [pc, #488]	; (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b32:	4a79      	ldr	r2, [pc, #484]	; (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003b34:	f023 0304 	bic.w	r3, r3, #4
 8003b38:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d015      	beq.n	8003b6e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b42:	f7fe f89f 	bl	8001c84 <HAL_GetTick>
 8003b46:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b48:	e00a      	b.n	8003b60 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b4a:	f7fe f89b 	bl	8001c84 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d901      	bls.n	8003b60 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e14b      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b60:	4b6d      	ldr	r3, [pc, #436]	; (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b64:	f003 0302 	and.w	r3, r3, #2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d0ee      	beq.n	8003b4a <HAL_RCC_OscConfig+0x4f6>
 8003b6c:	e014      	b.n	8003b98 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b6e:	f7fe f889 	bl	8001c84 <HAL_GetTick>
 8003b72:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b74:	e00a      	b.n	8003b8c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b76:	f7fe f885 	bl	8001c84 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d901      	bls.n	8003b8c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e135      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b8c:	4b62      	ldr	r3, [pc, #392]	; (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1ee      	bne.n	8003b76 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f000 812a 	beq.w	8003df6 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003ba2:	4b5d      	ldr	r3, [pc, #372]	; (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003baa:	2b18      	cmp	r3, #24
 8003bac:	f000 80ba 	beq.w	8003d24 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	f040 8095 	bne.w	8003ce4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bba:	4b57      	ldr	r3, [pc, #348]	; (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a56      	ldr	r2, [pc, #344]	; (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003bc0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc6:	f7fe f85d 	bl	8001c84 <HAL_GetTick>
 8003bca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003bcc:	e008      	b.n	8003be0 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bce:	f7fe f859 	bl	8001c84 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d901      	bls.n	8003be0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e10b      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003be0:	4b4d      	ldr	r3, [pc, #308]	; (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1f0      	bne.n	8003bce <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bec:	4b4a      	ldr	r3, [pc, #296]	; (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003bee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bf0:	4b4a      	ldr	r3, [pc, #296]	; (8003d1c <HAL_RCC_OscConfig+0x6c8>)
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003bfc:	0112      	lsls	r2, r2, #4
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	4945      	ldr	r1, [pc, #276]	; (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	628b      	str	r3, [r1, #40]	; 0x28
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c14:	3b01      	subs	r3, #1
 8003c16:	025b      	lsls	r3, r3, #9
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c20:	3b01      	subs	r3, #1
 8003c22:	041b      	lsls	r3, r3, #16
 8003c24:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003c28:	431a      	orrs	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	061b      	lsls	r3, r3, #24
 8003c32:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003c36:	4938      	ldr	r1, [pc, #224]	; (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003c3c:	4b36      	ldr	r3, [pc, #216]	; (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c40:	4a35      	ldr	r2, [pc, #212]	; (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003c42:	f023 0301 	bic.w	r3, r3, #1
 8003c46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003c48:	4b33      	ldr	r3, [pc, #204]	; (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003c4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c4c:	4b34      	ldr	r3, [pc, #208]	; (8003d20 <HAL_RCC_OscConfig+0x6cc>)
 8003c4e:	4013      	ands	r3, r2
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003c54:	00d2      	lsls	r2, r2, #3
 8003c56:	4930      	ldr	r1, [pc, #192]	; (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003c5c:	4b2e      	ldr	r3, [pc, #184]	; (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c60:	f023 020c 	bic.w	r2, r3, #12
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c68:	492b      	ldr	r1, [pc, #172]	; (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003c6e:	4b2a      	ldr	r3, [pc, #168]	; (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c72:	f023 0202 	bic.w	r2, r3, #2
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c7a:	4927      	ldr	r1, [pc, #156]	; (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003c80:	4b25      	ldr	r3, [pc, #148]	; (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c84:	4a24      	ldr	r2, [pc, #144]	; (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003c86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c8c:	4b22      	ldr	r3, [pc, #136]	; (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c90:	4a21      	ldr	r2, [pc, #132]	; (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003c92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003c98:	4b1f      	ldr	r3, [pc, #124]	; (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9c:	4a1e      	ldr	r2, [pc, #120]	; (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003c9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ca2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003ca4:	4b1c      	ldr	r3, [pc, #112]	; (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca8:	4a1b      	ldr	r2, [pc, #108]	; (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003caa:	f043 0301 	orr.w	r3, r3, #1
 8003cae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cb0:	4b19      	ldr	r3, [pc, #100]	; (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a18      	ldr	r2, [pc, #96]	; (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003cb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cbc:	f7fd ffe2 	bl	8001c84 <HAL_GetTick>
 8003cc0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cc4:	f7fd ffde 	bl	8001c84 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e090      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003cd6:	4b10      	ldr	r3, [pc, #64]	; (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d0f0      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x670>
 8003ce2:	e088      	b.n	8003df6 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ce4:	4b0c      	ldr	r3, [pc, #48]	; (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a0b      	ldr	r2, [pc, #44]	; (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003cea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf0:	f7fd ffc8 	bl	8001c84 <HAL_GetTick>
 8003cf4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003cf6:	e008      	b.n	8003d0a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cf8:	f7fd ffc4 	bl	8001c84 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e076      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d0a:	4b03      	ldr	r3, [pc, #12]	; (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1f0      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x6a4>
 8003d16:	e06e      	b.n	8003df6 <HAL_RCC_OscConfig+0x7a2>
 8003d18:	58024400 	.word	0x58024400
 8003d1c:	fffffc0c 	.word	0xfffffc0c
 8003d20:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003d24:	4b36      	ldr	r3, [pc, #216]	; (8003e00 <HAL_RCC_OscConfig+0x7ac>)
 8003d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d28:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003d2a:	4b35      	ldr	r3, [pc, #212]	; (8003e00 <HAL_RCC_OscConfig+0x7ac>)
 8003d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d031      	beq.n	8003d9c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	f003 0203 	and.w	r2, r3, #3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d12a      	bne.n	8003d9c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	091b      	lsrs	r3, r3, #4
 8003d4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d122      	bne.n	8003d9c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d60:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d11a      	bne.n	8003d9c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	0a5b      	lsrs	r3, r3, #9
 8003d6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d72:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d111      	bne.n	8003d9c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	0c1b      	lsrs	r3, r3, #16
 8003d7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d84:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d108      	bne.n	8003d9c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	0e1b      	lsrs	r3, r3, #24
 8003d8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d96:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d001      	beq.n	8003da0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e02b      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003da0:	4b17      	ldr	r3, [pc, #92]	; (8003e00 <HAL_RCC_OscConfig+0x7ac>)
 8003da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da4:	08db      	lsrs	r3, r3, #3
 8003da6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003daa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d01f      	beq.n	8003df6 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003db6:	4b12      	ldr	r3, [pc, #72]	; (8003e00 <HAL_RCC_OscConfig+0x7ac>)
 8003db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dba:	4a11      	ldr	r2, [pc, #68]	; (8003e00 <HAL_RCC_OscConfig+0x7ac>)
 8003dbc:	f023 0301 	bic.w	r3, r3, #1
 8003dc0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003dc2:	f7fd ff5f 	bl	8001c84 <HAL_GetTick>
 8003dc6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003dc8:	bf00      	nop
 8003dca:	f7fd ff5b 	bl	8001c84 <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d0f9      	beq.n	8003dca <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003dd6:	4b0a      	ldr	r3, [pc, #40]	; (8003e00 <HAL_RCC_OscConfig+0x7ac>)
 8003dd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dda:	4b0a      	ldr	r3, [pc, #40]	; (8003e04 <HAL_RCC_OscConfig+0x7b0>)
 8003ddc:	4013      	ands	r3, r2
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003de2:	00d2      	lsls	r2, r2, #3
 8003de4:	4906      	ldr	r1, [pc, #24]	; (8003e00 <HAL_RCC_OscConfig+0x7ac>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003dea:	4b05      	ldr	r3, [pc, #20]	; (8003e00 <HAL_RCC_OscConfig+0x7ac>)
 8003dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dee:	4a04      	ldr	r2, [pc, #16]	; (8003e00 <HAL_RCC_OscConfig+0x7ac>)
 8003df0:	f043 0301 	orr.w	r3, r3, #1
 8003df4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3730      	adds	r7, #48	; 0x30
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	58024400 	.word	0x58024400
 8003e04:	ffff0007 	.word	0xffff0007

08003e08 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d101      	bne.n	8003e1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e19c      	b.n	8004156 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e1c:	4b8a      	ldr	r3, [pc, #552]	; (8004048 <HAL_RCC_ClockConfig+0x240>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 030f 	and.w	r3, r3, #15
 8003e24:	683a      	ldr	r2, [r7, #0]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d910      	bls.n	8003e4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e2a:	4b87      	ldr	r3, [pc, #540]	; (8004048 <HAL_RCC_ClockConfig+0x240>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f023 020f 	bic.w	r2, r3, #15
 8003e32:	4985      	ldr	r1, [pc, #532]	; (8004048 <HAL_RCC_ClockConfig+0x240>)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e3a:	4b83      	ldr	r3, [pc, #524]	; (8004048 <HAL_RCC_ClockConfig+0x240>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 030f 	and.w	r3, r3, #15
 8003e42:	683a      	ldr	r2, [r7, #0]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d001      	beq.n	8003e4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e184      	b.n	8004156 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0304 	and.w	r3, r3, #4
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d010      	beq.n	8003e7a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	691a      	ldr	r2, [r3, #16]
 8003e5c:	4b7b      	ldr	r3, [pc, #492]	; (800404c <HAL_RCC_ClockConfig+0x244>)
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d908      	bls.n	8003e7a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003e68:	4b78      	ldr	r3, [pc, #480]	; (800404c <HAL_RCC_ClockConfig+0x244>)
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	4975      	ldr	r1, [pc, #468]	; (800404c <HAL_RCC_ClockConfig+0x244>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0308 	and.w	r3, r3, #8
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d010      	beq.n	8003ea8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	695a      	ldr	r2, [r3, #20]
 8003e8a:	4b70      	ldr	r3, [pc, #448]	; (800404c <HAL_RCC_ClockConfig+0x244>)
 8003e8c:	69db      	ldr	r3, [r3, #28]
 8003e8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d908      	bls.n	8003ea8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003e96:	4b6d      	ldr	r3, [pc, #436]	; (800404c <HAL_RCC_ClockConfig+0x244>)
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	496a      	ldr	r1, [pc, #424]	; (800404c <HAL_RCC_ClockConfig+0x244>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0310 	and.w	r3, r3, #16
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d010      	beq.n	8003ed6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	699a      	ldr	r2, [r3, #24]
 8003eb8:	4b64      	ldr	r3, [pc, #400]	; (800404c <HAL_RCC_ClockConfig+0x244>)
 8003eba:	69db      	ldr	r3, [r3, #28]
 8003ebc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d908      	bls.n	8003ed6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003ec4:	4b61      	ldr	r3, [pc, #388]	; (800404c <HAL_RCC_ClockConfig+0x244>)
 8003ec6:	69db      	ldr	r3, [r3, #28]
 8003ec8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	495e      	ldr	r1, [pc, #376]	; (800404c <HAL_RCC_ClockConfig+0x244>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0320 	and.w	r3, r3, #32
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d010      	beq.n	8003f04 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	69da      	ldr	r2, [r3, #28]
 8003ee6:	4b59      	ldr	r3, [pc, #356]	; (800404c <HAL_RCC_ClockConfig+0x244>)
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d908      	bls.n	8003f04 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003ef2:	4b56      	ldr	r3, [pc, #344]	; (800404c <HAL_RCC_ClockConfig+0x244>)
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	69db      	ldr	r3, [r3, #28]
 8003efe:	4953      	ldr	r1, [pc, #332]	; (800404c <HAL_RCC_ClockConfig+0x244>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0302 	and.w	r3, r3, #2
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d010      	beq.n	8003f32 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	68da      	ldr	r2, [r3, #12]
 8003f14:	4b4d      	ldr	r3, [pc, #308]	; (800404c <HAL_RCC_ClockConfig+0x244>)
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	f003 030f 	and.w	r3, r3, #15
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d908      	bls.n	8003f32 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f20:	4b4a      	ldr	r3, [pc, #296]	; (800404c <HAL_RCC_ClockConfig+0x244>)
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	f023 020f 	bic.w	r2, r3, #15
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	4947      	ldr	r1, [pc, #284]	; (800404c <HAL_RCC_ClockConfig+0x244>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d055      	beq.n	8003fea <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003f3e:	4b43      	ldr	r3, [pc, #268]	; (800404c <HAL_RCC_ClockConfig+0x244>)
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	4940      	ldr	r1, [pc, #256]	; (800404c <HAL_RCC_ClockConfig+0x244>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d107      	bne.n	8003f68 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f58:	4b3c      	ldr	r3, [pc, #240]	; (800404c <HAL_RCC_ClockConfig+0x244>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d121      	bne.n	8003fa8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e0f6      	b.n	8004156 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	2b03      	cmp	r3, #3
 8003f6e:	d107      	bne.n	8003f80 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f70:	4b36      	ldr	r3, [pc, #216]	; (800404c <HAL_RCC_ClockConfig+0x244>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d115      	bne.n	8003fa8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e0ea      	b.n	8004156 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d107      	bne.n	8003f98 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003f88:	4b30      	ldr	r3, [pc, #192]	; (800404c <HAL_RCC_ClockConfig+0x244>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d109      	bne.n	8003fa8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e0de      	b.n	8004156 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f98:	4b2c      	ldr	r3, [pc, #176]	; (800404c <HAL_RCC_ClockConfig+0x244>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0304 	and.w	r3, r3, #4
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d101      	bne.n	8003fa8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e0d6      	b.n	8004156 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003fa8:	4b28      	ldr	r3, [pc, #160]	; (800404c <HAL_RCC_ClockConfig+0x244>)
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	f023 0207 	bic.w	r2, r3, #7
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	4925      	ldr	r1, [pc, #148]	; (800404c <HAL_RCC_ClockConfig+0x244>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fba:	f7fd fe63 	bl	8001c84 <HAL_GetTick>
 8003fbe:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fc0:	e00a      	b.n	8003fd8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fc2:	f7fd fe5f 	bl	8001c84 <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d901      	bls.n	8003fd8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e0be      	b.n	8004156 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fd8:	4b1c      	ldr	r3, [pc, #112]	; (800404c <HAL_RCC_ClockConfig+0x244>)
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	00db      	lsls	r3, r3, #3
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d1eb      	bne.n	8003fc2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d010      	beq.n	8004018 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	68da      	ldr	r2, [r3, #12]
 8003ffa:	4b14      	ldr	r3, [pc, #80]	; (800404c <HAL_RCC_ClockConfig+0x244>)
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	f003 030f 	and.w	r3, r3, #15
 8004002:	429a      	cmp	r2, r3
 8004004:	d208      	bcs.n	8004018 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004006:	4b11      	ldr	r3, [pc, #68]	; (800404c <HAL_RCC_ClockConfig+0x244>)
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	f023 020f 	bic.w	r2, r3, #15
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	490e      	ldr	r1, [pc, #56]	; (800404c <HAL_RCC_ClockConfig+0x244>)
 8004014:	4313      	orrs	r3, r2
 8004016:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004018:	4b0b      	ldr	r3, [pc, #44]	; (8004048 <HAL_RCC_ClockConfig+0x240>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 030f 	and.w	r3, r3, #15
 8004020:	683a      	ldr	r2, [r7, #0]
 8004022:	429a      	cmp	r2, r3
 8004024:	d214      	bcs.n	8004050 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004026:	4b08      	ldr	r3, [pc, #32]	; (8004048 <HAL_RCC_ClockConfig+0x240>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f023 020f 	bic.w	r2, r3, #15
 800402e:	4906      	ldr	r1, [pc, #24]	; (8004048 <HAL_RCC_ClockConfig+0x240>)
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	4313      	orrs	r3, r2
 8004034:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004036:	4b04      	ldr	r3, [pc, #16]	; (8004048 <HAL_RCC_ClockConfig+0x240>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 030f 	and.w	r3, r3, #15
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	429a      	cmp	r2, r3
 8004042:	d005      	beq.n	8004050 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e086      	b.n	8004156 <HAL_RCC_ClockConfig+0x34e>
 8004048:	52002000 	.word	0x52002000
 800404c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0304 	and.w	r3, r3, #4
 8004058:	2b00      	cmp	r3, #0
 800405a:	d010      	beq.n	800407e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	691a      	ldr	r2, [r3, #16]
 8004060:	4b3f      	ldr	r3, [pc, #252]	; (8004160 <HAL_RCC_ClockConfig+0x358>)
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004068:	429a      	cmp	r2, r3
 800406a:	d208      	bcs.n	800407e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800406c:	4b3c      	ldr	r3, [pc, #240]	; (8004160 <HAL_RCC_ClockConfig+0x358>)
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	4939      	ldr	r1, [pc, #228]	; (8004160 <HAL_RCC_ClockConfig+0x358>)
 800407a:	4313      	orrs	r3, r2
 800407c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0308 	and.w	r3, r3, #8
 8004086:	2b00      	cmp	r3, #0
 8004088:	d010      	beq.n	80040ac <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	695a      	ldr	r2, [r3, #20]
 800408e:	4b34      	ldr	r3, [pc, #208]	; (8004160 <HAL_RCC_ClockConfig+0x358>)
 8004090:	69db      	ldr	r3, [r3, #28]
 8004092:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004096:	429a      	cmp	r2, r3
 8004098:	d208      	bcs.n	80040ac <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800409a:	4b31      	ldr	r3, [pc, #196]	; (8004160 <HAL_RCC_ClockConfig+0x358>)
 800409c:	69db      	ldr	r3, [r3, #28]
 800409e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	492e      	ldr	r1, [pc, #184]	; (8004160 <HAL_RCC_ClockConfig+0x358>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0310 	and.w	r3, r3, #16
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d010      	beq.n	80040da <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	699a      	ldr	r2, [r3, #24]
 80040bc:	4b28      	ldr	r3, [pc, #160]	; (8004160 <HAL_RCC_ClockConfig+0x358>)
 80040be:	69db      	ldr	r3, [r3, #28]
 80040c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d208      	bcs.n	80040da <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80040c8:	4b25      	ldr	r3, [pc, #148]	; (8004160 <HAL_RCC_ClockConfig+0x358>)
 80040ca:	69db      	ldr	r3, [r3, #28]
 80040cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	4922      	ldr	r1, [pc, #136]	; (8004160 <HAL_RCC_ClockConfig+0x358>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0320 	and.w	r3, r3, #32
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d010      	beq.n	8004108 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	69da      	ldr	r2, [r3, #28]
 80040ea:	4b1d      	ldr	r3, [pc, #116]	; (8004160 <HAL_RCC_ClockConfig+0x358>)
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d208      	bcs.n	8004108 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80040f6:	4b1a      	ldr	r3, [pc, #104]	; (8004160 <HAL_RCC_ClockConfig+0x358>)
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	69db      	ldr	r3, [r3, #28]
 8004102:	4917      	ldr	r1, [pc, #92]	; (8004160 <HAL_RCC_ClockConfig+0x358>)
 8004104:	4313      	orrs	r3, r2
 8004106:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004108:	f000 f834 	bl	8004174 <HAL_RCC_GetSysClockFreq>
 800410c:	4602      	mov	r2, r0
 800410e:	4b14      	ldr	r3, [pc, #80]	; (8004160 <HAL_RCC_ClockConfig+0x358>)
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	0a1b      	lsrs	r3, r3, #8
 8004114:	f003 030f 	and.w	r3, r3, #15
 8004118:	4912      	ldr	r1, [pc, #72]	; (8004164 <HAL_RCC_ClockConfig+0x35c>)
 800411a:	5ccb      	ldrb	r3, [r1, r3]
 800411c:	f003 031f 	and.w	r3, r3, #31
 8004120:	fa22 f303 	lsr.w	r3, r2, r3
 8004124:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004126:	4b0e      	ldr	r3, [pc, #56]	; (8004160 <HAL_RCC_ClockConfig+0x358>)
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	f003 030f 	and.w	r3, r3, #15
 800412e:	4a0d      	ldr	r2, [pc, #52]	; (8004164 <HAL_RCC_ClockConfig+0x35c>)
 8004130:	5cd3      	ldrb	r3, [r2, r3]
 8004132:	f003 031f 	and.w	r3, r3, #31
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	fa22 f303 	lsr.w	r3, r2, r3
 800413c:	4a0a      	ldr	r2, [pc, #40]	; (8004168 <HAL_RCC_ClockConfig+0x360>)
 800413e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004140:	4a0a      	ldr	r2, [pc, #40]	; (800416c <HAL_RCC_ClockConfig+0x364>)
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004146:	4b0a      	ldr	r3, [pc, #40]	; (8004170 <HAL_RCC_ClockConfig+0x368>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4618      	mov	r0, r3
 800414c:	f7fd fd50 	bl	8001bf0 <HAL_InitTick>
 8004150:	4603      	mov	r3, r0
 8004152:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004154:	7bfb      	ldrb	r3, [r7, #15]
}
 8004156:	4618      	mov	r0, r3
 8004158:	3718      	adds	r7, #24
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	58024400 	.word	0x58024400
 8004164:	0800aa30 	.word	0x0800aa30
 8004168:	24000004 	.word	0x24000004
 800416c:	24000000 	.word	0x24000000
 8004170:	24000008 	.word	0x24000008

08004174 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004174:	b480      	push	{r7}
 8004176:	b089      	sub	sp, #36	; 0x24
 8004178:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800417a:	4bb3      	ldr	r3, [pc, #716]	; (8004448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004182:	2b18      	cmp	r3, #24
 8004184:	f200 8155 	bhi.w	8004432 <HAL_RCC_GetSysClockFreq+0x2be>
 8004188:	a201      	add	r2, pc, #4	; (adr r2, 8004190 <HAL_RCC_GetSysClockFreq+0x1c>)
 800418a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800418e:	bf00      	nop
 8004190:	080041f5 	.word	0x080041f5
 8004194:	08004433 	.word	0x08004433
 8004198:	08004433 	.word	0x08004433
 800419c:	08004433 	.word	0x08004433
 80041a0:	08004433 	.word	0x08004433
 80041a4:	08004433 	.word	0x08004433
 80041a8:	08004433 	.word	0x08004433
 80041ac:	08004433 	.word	0x08004433
 80041b0:	0800421b 	.word	0x0800421b
 80041b4:	08004433 	.word	0x08004433
 80041b8:	08004433 	.word	0x08004433
 80041bc:	08004433 	.word	0x08004433
 80041c0:	08004433 	.word	0x08004433
 80041c4:	08004433 	.word	0x08004433
 80041c8:	08004433 	.word	0x08004433
 80041cc:	08004433 	.word	0x08004433
 80041d0:	08004221 	.word	0x08004221
 80041d4:	08004433 	.word	0x08004433
 80041d8:	08004433 	.word	0x08004433
 80041dc:	08004433 	.word	0x08004433
 80041e0:	08004433 	.word	0x08004433
 80041e4:	08004433 	.word	0x08004433
 80041e8:	08004433 	.word	0x08004433
 80041ec:	08004433 	.word	0x08004433
 80041f0:	08004227 	.word	0x08004227
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80041f4:	4b94      	ldr	r3, [pc, #592]	; (8004448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0320 	and.w	r3, r3, #32
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d009      	beq.n	8004214 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004200:	4b91      	ldr	r3, [pc, #580]	; (8004448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	08db      	lsrs	r3, r3, #3
 8004206:	f003 0303 	and.w	r3, r3, #3
 800420a:	4a90      	ldr	r2, [pc, #576]	; (800444c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800420c:	fa22 f303 	lsr.w	r3, r2, r3
 8004210:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004212:	e111      	b.n	8004438 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004214:	4b8d      	ldr	r3, [pc, #564]	; (800444c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004216:	61bb      	str	r3, [r7, #24]
      break;
 8004218:	e10e      	b.n	8004438 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800421a:	4b8d      	ldr	r3, [pc, #564]	; (8004450 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800421c:	61bb      	str	r3, [r7, #24]
      break;
 800421e:	e10b      	b.n	8004438 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004220:	4b8c      	ldr	r3, [pc, #560]	; (8004454 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004222:	61bb      	str	r3, [r7, #24]
      break;
 8004224:	e108      	b.n	8004438 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004226:	4b88      	ldr	r3, [pc, #544]	; (8004448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422a:	f003 0303 	and.w	r3, r3, #3
 800422e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004230:	4b85      	ldr	r3, [pc, #532]	; (8004448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004234:	091b      	lsrs	r3, r3, #4
 8004236:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800423a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800423c:	4b82      	ldr	r3, [pc, #520]	; (8004448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800423e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004246:	4b80      	ldr	r3, [pc, #512]	; (8004448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800424a:	08db      	lsrs	r3, r3, #3
 800424c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	fb02 f303 	mul.w	r3, r2, r3
 8004256:	ee07 3a90 	vmov	s15, r3
 800425a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800425e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	2b00      	cmp	r3, #0
 8004266:	f000 80e1 	beq.w	800442c <HAL_RCC_GetSysClockFreq+0x2b8>
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	2b02      	cmp	r3, #2
 800426e:	f000 8083 	beq.w	8004378 <HAL_RCC_GetSysClockFreq+0x204>
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	2b02      	cmp	r3, #2
 8004276:	f200 80a1 	bhi.w	80043bc <HAL_RCC_GetSysClockFreq+0x248>
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d003      	beq.n	8004288 <HAL_RCC_GetSysClockFreq+0x114>
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	2b01      	cmp	r3, #1
 8004284:	d056      	beq.n	8004334 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004286:	e099      	b.n	80043bc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004288:	4b6f      	ldr	r3, [pc, #444]	; (8004448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0320 	and.w	r3, r3, #32
 8004290:	2b00      	cmp	r3, #0
 8004292:	d02d      	beq.n	80042f0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004294:	4b6c      	ldr	r3, [pc, #432]	; (8004448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	08db      	lsrs	r3, r3, #3
 800429a:	f003 0303 	and.w	r3, r3, #3
 800429e:	4a6b      	ldr	r2, [pc, #428]	; (800444c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80042a0:	fa22 f303 	lsr.w	r3, r2, r3
 80042a4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	ee07 3a90 	vmov	s15, r3
 80042ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	ee07 3a90 	vmov	s15, r3
 80042b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042be:	4b62      	ldr	r3, [pc, #392]	; (8004448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042c6:	ee07 3a90 	vmov	s15, r3
 80042ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80042d2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004458 <HAL_RCC_GetSysClockFreq+0x2e4>
 80042d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042ea:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80042ee:	e087      	b.n	8004400 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	ee07 3a90 	vmov	s15, r3
 80042f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042fa:	eddf 6a58 	vldr	s13, [pc, #352]	; 800445c <HAL_RCC_GetSysClockFreq+0x2e8>
 80042fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004302:	4b51      	ldr	r3, [pc, #324]	; (8004448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800430a:	ee07 3a90 	vmov	s15, r3
 800430e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004312:	ed97 6a02 	vldr	s12, [r7, #8]
 8004316:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004458 <HAL_RCC_GetSysClockFreq+0x2e4>
 800431a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800431e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004322:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800432a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800432e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004332:	e065      	b.n	8004400 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	ee07 3a90 	vmov	s15, r3
 800433a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800433e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004460 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004346:	4b40      	ldr	r3, [pc, #256]	; (8004448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800434e:	ee07 3a90 	vmov	s15, r3
 8004352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004356:	ed97 6a02 	vldr	s12, [r7, #8]
 800435a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004458 <HAL_RCC_GetSysClockFreq+0x2e4>
 800435e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004366:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800436a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800436e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004372:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004376:	e043      	b.n	8004400 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	ee07 3a90 	vmov	s15, r3
 800437e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004382:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004464 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800438a:	4b2f      	ldr	r3, [pc, #188]	; (8004448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800438c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004392:	ee07 3a90 	vmov	s15, r3
 8004396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800439a:	ed97 6a02 	vldr	s12, [r7, #8]
 800439e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004458 <HAL_RCC_GetSysClockFreq+0x2e4>
 80043a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80043ba:	e021      	b.n	8004400 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	ee07 3a90 	vmov	s15, r3
 80043c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043c6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004460 <HAL_RCC_GetSysClockFreq+0x2ec>
 80043ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043ce:	4b1e      	ldr	r3, [pc, #120]	; (8004448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043d6:	ee07 3a90 	vmov	s15, r3
 80043da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043de:	ed97 6a02 	vldr	s12, [r7, #8]
 80043e2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004458 <HAL_RCC_GetSysClockFreq+0x2e4>
 80043e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80043fe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004400:	4b11      	ldr	r3, [pc, #68]	; (8004448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004404:	0a5b      	lsrs	r3, r3, #9
 8004406:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800440a:	3301      	adds	r3, #1
 800440c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	ee07 3a90 	vmov	s15, r3
 8004414:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004418:	edd7 6a07 	vldr	s13, [r7, #28]
 800441c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004420:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004424:	ee17 3a90 	vmov	r3, s15
 8004428:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800442a:	e005      	b.n	8004438 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800442c:	2300      	movs	r3, #0
 800442e:	61bb      	str	r3, [r7, #24]
      break;
 8004430:	e002      	b.n	8004438 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004432:	4b07      	ldr	r3, [pc, #28]	; (8004450 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004434:	61bb      	str	r3, [r7, #24]
      break;
 8004436:	bf00      	nop
  }

  return sysclockfreq;
 8004438:	69bb      	ldr	r3, [r7, #24]
}
 800443a:	4618      	mov	r0, r3
 800443c:	3724      	adds	r7, #36	; 0x24
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	58024400 	.word	0x58024400
 800444c:	03d09000 	.word	0x03d09000
 8004450:	003d0900 	.word	0x003d0900
 8004454:	007a1200 	.word	0x007a1200
 8004458:	46000000 	.word	0x46000000
 800445c:	4c742400 	.word	0x4c742400
 8004460:	4a742400 	.word	0x4a742400
 8004464:	4af42400 	.word	0x4af42400

08004468 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800446e:	f7ff fe81 	bl	8004174 <HAL_RCC_GetSysClockFreq>
 8004472:	4602      	mov	r2, r0
 8004474:	4b10      	ldr	r3, [pc, #64]	; (80044b8 <HAL_RCC_GetHCLKFreq+0x50>)
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	0a1b      	lsrs	r3, r3, #8
 800447a:	f003 030f 	and.w	r3, r3, #15
 800447e:	490f      	ldr	r1, [pc, #60]	; (80044bc <HAL_RCC_GetHCLKFreq+0x54>)
 8004480:	5ccb      	ldrb	r3, [r1, r3]
 8004482:	f003 031f 	and.w	r3, r3, #31
 8004486:	fa22 f303 	lsr.w	r3, r2, r3
 800448a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800448c:	4b0a      	ldr	r3, [pc, #40]	; (80044b8 <HAL_RCC_GetHCLKFreq+0x50>)
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	f003 030f 	and.w	r3, r3, #15
 8004494:	4a09      	ldr	r2, [pc, #36]	; (80044bc <HAL_RCC_GetHCLKFreq+0x54>)
 8004496:	5cd3      	ldrb	r3, [r2, r3]
 8004498:	f003 031f 	and.w	r3, r3, #31
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	fa22 f303 	lsr.w	r3, r2, r3
 80044a2:	4a07      	ldr	r2, [pc, #28]	; (80044c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80044a4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80044a6:	4a07      	ldr	r2, [pc, #28]	; (80044c4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80044ac:	4b04      	ldr	r3, [pc, #16]	; (80044c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80044ae:	681b      	ldr	r3, [r3, #0]
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3708      	adds	r7, #8
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	58024400 	.word	0x58024400
 80044bc:	0800aa30 	.word	0x0800aa30
 80044c0:	24000004 	.word	0x24000004
 80044c4:	24000000 	.word	0x24000000

080044c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80044cc:	f7ff ffcc 	bl	8004468 <HAL_RCC_GetHCLKFreq>
 80044d0:	4602      	mov	r2, r0
 80044d2:	4b06      	ldr	r3, [pc, #24]	; (80044ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80044d4:	69db      	ldr	r3, [r3, #28]
 80044d6:	091b      	lsrs	r3, r3, #4
 80044d8:	f003 0307 	and.w	r3, r3, #7
 80044dc:	4904      	ldr	r1, [pc, #16]	; (80044f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80044de:	5ccb      	ldrb	r3, [r1, r3]
 80044e0:	f003 031f 	and.w	r3, r3, #31
 80044e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	58024400 	.word	0x58024400
 80044f0:	0800aa30 	.word	0x0800aa30

080044f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80044f8:	f7ff ffb6 	bl	8004468 <HAL_RCC_GetHCLKFreq>
 80044fc:	4602      	mov	r2, r0
 80044fe:	4b06      	ldr	r3, [pc, #24]	; (8004518 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004500:	69db      	ldr	r3, [r3, #28]
 8004502:	0a1b      	lsrs	r3, r3, #8
 8004504:	f003 0307 	and.w	r3, r3, #7
 8004508:	4904      	ldr	r1, [pc, #16]	; (800451c <HAL_RCC_GetPCLK2Freq+0x28>)
 800450a:	5ccb      	ldrb	r3, [r1, r3]
 800450c:	f003 031f 	and.w	r3, r3, #31
 8004510:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004514:	4618      	mov	r0, r3
 8004516:	bd80      	pop	{r7, pc}
 8004518:	58024400 	.word	0x58024400
 800451c:	0800aa30 	.word	0x0800aa30

08004520 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004520:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004524:	b0c6      	sub	sp, #280	; 0x118
 8004526:	af00      	add	r7, sp, #0
 8004528:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800452c:	2300      	movs	r3, #0
 800452e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004532:	2300      	movs	r3, #0
 8004534:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004538:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800453c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004540:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8004544:	2500      	movs	r5, #0
 8004546:	ea54 0305 	orrs.w	r3, r4, r5
 800454a:	d049      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800454c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004550:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004552:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004556:	d02f      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004558:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800455c:	d828      	bhi.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800455e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004562:	d01a      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004564:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004568:	d822      	bhi.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800456a:	2b00      	cmp	r3, #0
 800456c:	d003      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800456e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004572:	d007      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004574:	e01c      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004576:	4bab      	ldr	r3, [pc, #684]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457a:	4aaa      	ldr	r2, [pc, #680]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800457c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004580:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004582:	e01a      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004584:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004588:	3308      	adds	r3, #8
 800458a:	2102      	movs	r1, #2
 800458c:	4618      	mov	r0, r3
 800458e:	f001 fc25 	bl	8005ddc <RCCEx_PLL2_Config>
 8004592:	4603      	mov	r3, r0
 8004594:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004598:	e00f      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800459a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800459e:	3328      	adds	r3, #40	; 0x28
 80045a0:	2102      	movs	r1, #2
 80045a2:	4618      	mov	r0, r3
 80045a4:	f001 fccc 	bl	8005f40 <RCCEx_PLL3_Config>
 80045a8:	4603      	mov	r3, r0
 80045aa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80045ae:	e004      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80045b6:	e000      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80045b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045ba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10a      	bne.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80045c2:	4b98      	ldr	r3, [pc, #608]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80045c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045c6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80045ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045d0:	4a94      	ldr	r2, [pc, #592]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80045d2:	430b      	orrs	r3, r1
 80045d4:	6513      	str	r3, [r2, #80]	; 0x50
 80045d6:	e003      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80045dc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80045e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80045ec:	f04f 0900 	mov.w	r9, #0
 80045f0:	ea58 0309 	orrs.w	r3, r8, r9
 80045f4:	d047      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80045f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045fc:	2b04      	cmp	r3, #4
 80045fe:	d82a      	bhi.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004600:	a201      	add	r2, pc, #4	; (adr r2, 8004608 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004606:	bf00      	nop
 8004608:	0800461d 	.word	0x0800461d
 800460c:	0800462b 	.word	0x0800462b
 8004610:	08004641 	.word	0x08004641
 8004614:	0800465f 	.word	0x0800465f
 8004618:	0800465f 	.word	0x0800465f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800461c:	4b81      	ldr	r3, [pc, #516]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800461e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004620:	4a80      	ldr	r2, [pc, #512]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004622:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004626:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004628:	e01a      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800462a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800462e:	3308      	adds	r3, #8
 8004630:	2100      	movs	r1, #0
 8004632:	4618      	mov	r0, r3
 8004634:	f001 fbd2 	bl	8005ddc <RCCEx_PLL2_Config>
 8004638:	4603      	mov	r3, r0
 800463a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800463e:	e00f      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004640:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004644:	3328      	adds	r3, #40	; 0x28
 8004646:	2100      	movs	r1, #0
 8004648:	4618      	mov	r0, r3
 800464a:	f001 fc79 	bl	8005f40 <RCCEx_PLL3_Config>
 800464e:	4603      	mov	r3, r0
 8004650:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004654:	e004      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800465c:	e000      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800465e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004660:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004664:	2b00      	cmp	r3, #0
 8004666:	d10a      	bne.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004668:	4b6e      	ldr	r3, [pc, #440]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800466a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800466c:	f023 0107 	bic.w	r1, r3, #7
 8004670:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004676:	4a6b      	ldr	r2, [pc, #428]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004678:	430b      	orrs	r3, r1
 800467a:	6513      	str	r3, [r2, #80]	; 0x50
 800467c:	e003      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800467e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004682:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004686:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800468a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800468e:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8004692:	f04f 0b00 	mov.w	fp, #0
 8004696:	ea5a 030b 	orrs.w	r3, sl, fp
 800469a:	d05b      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800469c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80046a4:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80046a8:	d03b      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80046aa:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80046ae:	d834      	bhi.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80046b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046b4:	d037      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80046b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046ba:	d82e      	bhi.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80046bc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80046c0:	d033      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80046c2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80046c6:	d828      	bhi.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80046c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046cc:	d01a      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80046ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046d2:	d822      	bhi.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d003      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80046d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046dc:	d007      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80046de:	e01c      	b.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046e0:	4b50      	ldr	r3, [pc, #320]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80046e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e4:	4a4f      	ldr	r2, [pc, #316]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80046e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80046ec:	e01e      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046f2:	3308      	adds	r3, #8
 80046f4:	2100      	movs	r1, #0
 80046f6:	4618      	mov	r0, r3
 80046f8:	f001 fb70 	bl	8005ddc <RCCEx_PLL2_Config>
 80046fc:	4603      	mov	r3, r0
 80046fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004702:	e013      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004704:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004708:	3328      	adds	r3, #40	; 0x28
 800470a:	2100      	movs	r1, #0
 800470c:	4618      	mov	r0, r3
 800470e:	f001 fc17 	bl	8005f40 <RCCEx_PLL3_Config>
 8004712:	4603      	mov	r3, r0
 8004714:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004718:	e008      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004720:	e004      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004722:	bf00      	nop
 8004724:	e002      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004726:	bf00      	nop
 8004728:	e000      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800472a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800472c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004730:	2b00      	cmp	r3, #0
 8004732:	d10b      	bne.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004734:	4b3b      	ldr	r3, [pc, #236]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004738:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800473c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004740:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004744:	4a37      	ldr	r2, [pc, #220]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004746:	430b      	orrs	r3, r1
 8004748:	6593      	str	r3, [r2, #88]	; 0x58
 800474a:	e003      	b.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800474c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004750:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004754:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800475c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004760:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004764:	2300      	movs	r3, #0
 8004766:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800476a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800476e:	460b      	mov	r3, r1
 8004770:	4313      	orrs	r3, r2
 8004772:	d05d      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004774:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004778:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800477c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004780:	d03b      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004782:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004786:	d834      	bhi.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004788:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800478c:	d037      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800478e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004792:	d82e      	bhi.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004794:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004798:	d033      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800479a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800479e:	d828      	bhi.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80047a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047a4:	d01a      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80047a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047aa:	d822      	bhi.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d003      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80047b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047b4:	d007      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80047b6:	e01c      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047b8:	4b1a      	ldr	r3, [pc, #104]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80047ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047bc:	4a19      	ldr	r2, [pc, #100]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80047be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80047c4:	e01e      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047ca:	3308      	adds	r3, #8
 80047cc:	2100      	movs	r1, #0
 80047ce:	4618      	mov	r0, r3
 80047d0:	f001 fb04 	bl	8005ddc <RCCEx_PLL2_Config>
 80047d4:	4603      	mov	r3, r0
 80047d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80047da:	e013      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80047dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047e0:	3328      	adds	r3, #40	; 0x28
 80047e2:	2100      	movs	r1, #0
 80047e4:	4618      	mov	r0, r3
 80047e6:	f001 fbab 	bl	8005f40 <RCCEx_PLL3_Config>
 80047ea:	4603      	mov	r3, r0
 80047ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80047f0:	e008      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80047f8:	e004      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80047fa:	bf00      	nop
 80047fc:	e002      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80047fe:	bf00      	nop
 8004800:	e000      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004802:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004804:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004808:	2b00      	cmp	r3, #0
 800480a:	d10d      	bne.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800480c:	4b05      	ldr	r3, [pc, #20]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800480e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004810:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004814:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004818:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800481c:	4a01      	ldr	r2, [pc, #4]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800481e:	430b      	orrs	r3, r1
 8004820:	6593      	str	r3, [r2, #88]	; 0x58
 8004822:	e005      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004824:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004828:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800482c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004830:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004838:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800483c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004840:	2300      	movs	r3, #0
 8004842:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004846:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800484a:	460b      	mov	r3, r1
 800484c:	4313      	orrs	r3, r2
 800484e:	d03a      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004850:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004856:	2b30      	cmp	r3, #48	; 0x30
 8004858:	d01f      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800485a:	2b30      	cmp	r3, #48	; 0x30
 800485c:	d819      	bhi.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800485e:	2b20      	cmp	r3, #32
 8004860:	d00c      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004862:	2b20      	cmp	r3, #32
 8004864:	d815      	bhi.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004866:	2b00      	cmp	r3, #0
 8004868:	d019      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800486a:	2b10      	cmp	r3, #16
 800486c:	d111      	bne.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800486e:	4baa      	ldr	r3, [pc, #680]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004872:	4aa9      	ldr	r2, [pc, #676]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004878:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800487a:	e011      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800487c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004880:	3308      	adds	r3, #8
 8004882:	2102      	movs	r1, #2
 8004884:	4618      	mov	r0, r3
 8004886:	f001 faa9 	bl	8005ddc <RCCEx_PLL2_Config>
 800488a:	4603      	mov	r3, r0
 800488c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004890:	e006      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004898:	e002      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800489a:	bf00      	nop
 800489c:	e000      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800489e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048a0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d10a      	bne.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80048a8:	4b9b      	ldr	r3, [pc, #620]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80048aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ac:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80048b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048b6:	4a98      	ldr	r2, [pc, #608]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80048b8:	430b      	orrs	r3, r1
 80048ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80048bc:	e003      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048be:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80048c2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80048c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ce:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80048d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80048d6:	2300      	movs	r3, #0
 80048d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80048dc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80048e0:	460b      	mov	r3, r1
 80048e2:	4313      	orrs	r3, r2
 80048e4:	d051      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80048e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048f0:	d035      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80048f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048f6:	d82e      	bhi.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80048f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80048fc:	d031      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x442>
 80048fe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004902:	d828      	bhi.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004904:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004908:	d01a      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800490a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800490e:	d822      	bhi.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004910:	2b00      	cmp	r3, #0
 8004912:	d003      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8004914:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004918:	d007      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800491a:	e01c      	b.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800491c:	4b7e      	ldr	r3, [pc, #504]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800491e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004920:	4a7d      	ldr	r2, [pc, #500]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004922:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004926:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004928:	e01c      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800492a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800492e:	3308      	adds	r3, #8
 8004930:	2100      	movs	r1, #0
 8004932:	4618      	mov	r0, r3
 8004934:	f001 fa52 	bl	8005ddc <RCCEx_PLL2_Config>
 8004938:	4603      	mov	r3, r0
 800493a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800493e:	e011      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004940:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004944:	3328      	adds	r3, #40	; 0x28
 8004946:	2100      	movs	r1, #0
 8004948:	4618      	mov	r0, r3
 800494a:	f001 faf9 	bl	8005f40 <RCCEx_PLL3_Config>
 800494e:	4603      	mov	r3, r0
 8004950:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004954:	e006      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800495c:	e002      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800495e:	bf00      	nop
 8004960:	e000      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004962:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004964:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004968:	2b00      	cmp	r3, #0
 800496a:	d10a      	bne.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800496c:	4b6a      	ldr	r3, [pc, #424]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800496e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004970:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004974:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800497a:	4a67      	ldr	r2, [pc, #412]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800497c:	430b      	orrs	r3, r1
 800497e:	6513      	str	r3, [r2, #80]	; 0x50
 8004980:	e003      	b.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004982:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004986:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800498a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800498e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004992:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004996:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800499a:	2300      	movs	r3, #0
 800499c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80049a0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80049a4:	460b      	mov	r3, r1
 80049a6:	4313      	orrs	r3, r2
 80049a8:	d053      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80049aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049b4:	d033      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80049b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049ba:	d82c      	bhi.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80049bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80049c0:	d02f      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x502>
 80049c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80049c6:	d826      	bhi.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80049c8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80049cc:	d02b      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80049ce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80049d2:	d820      	bhi.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80049d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049d8:	d012      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80049da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049de:	d81a      	bhi.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d022      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80049e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049e8:	d115      	bne.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80049ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049ee:	3308      	adds	r3, #8
 80049f0:	2101      	movs	r1, #1
 80049f2:	4618      	mov	r0, r3
 80049f4:	f001 f9f2 	bl	8005ddc <RCCEx_PLL2_Config>
 80049f8:	4603      	mov	r3, r0
 80049fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80049fe:	e015      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a04:	3328      	adds	r3, #40	; 0x28
 8004a06:	2101      	movs	r1, #1
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f001 fa99 	bl	8005f40 <RCCEx_PLL3_Config>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004a14:	e00a      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004a1c:	e006      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004a1e:	bf00      	nop
 8004a20:	e004      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004a22:	bf00      	nop
 8004a24:	e002      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004a26:	bf00      	nop
 8004a28:	e000      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004a2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a2c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d10a      	bne.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004a34:	4b38      	ldr	r3, [pc, #224]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a38:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a42:	4a35      	ldr	r2, [pc, #212]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004a44:	430b      	orrs	r3, r1
 8004a46:	6513      	str	r3, [r2, #80]	; 0x50
 8004a48:	e003      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a4a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004a4e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004a52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a5a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004a5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a62:	2300      	movs	r3, #0
 8004a64:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004a68:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	d058      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004a72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a76:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004a7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a7e:	d033      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004a80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a84:	d82c      	bhi.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004a86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a8a:	d02f      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a90:	d826      	bhi.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004a92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a96:	d02b      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004a98:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a9c:	d820      	bhi.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004a9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004aa2:	d012      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8004aa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004aa8:	d81a      	bhi.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d022      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004aae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ab2:	d115      	bne.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ab8:	3308      	adds	r3, #8
 8004aba:	2101      	movs	r1, #1
 8004abc:	4618      	mov	r0, r3
 8004abe:	f001 f98d 	bl	8005ddc <RCCEx_PLL2_Config>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004ac8:	e015      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ace:	3328      	adds	r3, #40	; 0x28
 8004ad0:	2101      	movs	r1, #1
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f001 fa34 	bl	8005f40 <RCCEx_PLL3_Config>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004ade:	e00a      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004ae6:	e006      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004ae8:	bf00      	nop
 8004aea:	e004      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004aec:	bf00      	nop
 8004aee:	e002      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004af0:	bf00      	nop
 8004af2:	e000      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004af4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004af6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d10e      	bne.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004afe:	4b06      	ldr	r3, [pc, #24]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b02:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004b06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b0a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004b0e:	4a02      	ldr	r2, [pc, #8]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004b10:	430b      	orrs	r3, r1
 8004b12:	6593      	str	r3, [r2, #88]	; 0x58
 8004b14:	e006      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004b16:	bf00      	nop
 8004b18:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b1c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004b20:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004b24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b2c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004b30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b34:	2300      	movs	r3, #0
 8004b36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004b3a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004b3e:	460b      	mov	r3, r1
 8004b40:	4313      	orrs	r3, r2
 8004b42:	d037      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004b44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b4e:	d00e      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004b50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b54:	d816      	bhi.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d018      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004b5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b5e:	d111      	bne.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b60:	4bc4      	ldr	r3, [pc, #784]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b64:	4ac3      	ldr	r2, [pc, #780]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004b6c:	e00f      	b.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b72:	3308      	adds	r3, #8
 8004b74:	2101      	movs	r1, #1
 8004b76:	4618      	mov	r0, r3
 8004b78:	f001 f930 	bl	8005ddc <RCCEx_PLL2_Config>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004b82:	e004      	b.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004b8a:	e000      	b.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004b8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b8e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d10a      	bne.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004b96:	4bb7      	ldr	r3, [pc, #732]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b9a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ba2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ba4:	4ab3      	ldr	r2, [pc, #716]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ba6:	430b      	orrs	r3, r1
 8004ba8:	6513      	str	r3, [r2, #80]	; 0x50
 8004baa:	e003      	b.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004bb0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004bb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bbc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004bc0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004bca:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004bce:	460b      	mov	r3, r1
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	d039      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bda:	2b03      	cmp	r3, #3
 8004bdc:	d81c      	bhi.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004bde:	a201      	add	r2, pc, #4	; (adr r2, 8004be4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be4:	08004c21 	.word	0x08004c21
 8004be8:	08004bf5 	.word	0x08004bf5
 8004bec:	08004c03 	.word	0x08004c03
 8004bf0:	08004c21 	.word	0x08004c21
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bf4:	4b9f      	ldr	r3, [pc, #636]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf8:	4a9e      	ldr	r2, [pc, #632]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004bfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bfe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004c00:	e00f      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c06:	3308      	adds	r3, #8
 8004c08:	2102      	movs	r1, #2
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f001 f8e6 	bl	8005ddc <RCCEx_PLL2_Config>
 8004c10:	4603      	mov	r3, r0
 8004c12:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004c16:	e004      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004c1e:	e000      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004c20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c22:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d10a      	bne.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004c2a:	4b92      	ldr	r3, [pc, #584]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c2e:	f023 0103 	bic.w	r1, r3, #3
 8004c32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c38:	4a8e      	ldr	r2, [pc, #568]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004c3a:	430b      	orrs	r3, r1
 8004c3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c3e:	e003      	b.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c40:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004c44:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c50:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004c54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c58:	2300      	movs	r3, #0
 8004c5a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004c5e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004c62:	460b      	mov	r3, r1
 8004c64:	4313      	orrs	r3, r2
 8004c66:	f000 8099 	beq.w	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c6a:	4b83      	ldr	r3, [pc, #524]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a82      	ldr	r2, [pc, #520]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c74:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c76:	f7fd f805 	bl	8001c84 <HAL_GetTick>
 8004c7a:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c7e:	e00b      	b.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c80:	f7fd f800 	bl	8001c84 <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	2b64      	cmp	r3, #100	; 0x64
 8004c8e:	d903      	bls.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004c96:	e005      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c98:	4b77      	ldr	r3, [pc, #476]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d0ed      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004ca4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d173      	bne.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004cac:	4b71      	ldr	r3, [pc, #452]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004cae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cb4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004cb8:	4053      	eors	r3, r2
 8004cba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d015      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004cc2:	4b6c      	ldr	r3, [pc, #432]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cca:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004cce:	4b69      	ldr	r3, [pc, #420]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd2:	4a68      	ldr	r2, [pc, #416]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cd8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004cda:	4b66      	ldr	r3, [pc, #408]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cde:	4a65      	ldr	r2, [pc, #404]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ce0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ce4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004ce6:	4a63      	ldr	r2, [pc, #396]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ce8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cec:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cf2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004cf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cfa:	d118      	bne.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cfc:	f7fc ffc2 	bl	8001c84 <HAL_GetTick>
 8004d00:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d04:	e00d      	b.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d06:	f7fc ffbd 	bl	8001c84 <HAL_GetTick>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004d10:	1ad2      	subs	r2, r2, r3
 8004d12:	f241 3388 	movw	r3, #5000	; 0x1388
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d903      	bls.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8004d20:	e005      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d22:	4b54      	ldr	r3, [pc, #336]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d0eb      	beq.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8004d2e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d129      	bne.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d46:	d10e      	bne.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004d48:	4b4a      	ldr	r3, [pc, #296]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d58:	091a      	lsrs	r2, r3, #4
 8004d5a:	4b48      	ldr	r3, [pc, #288]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	4a45      	ldr	r2, [pc, #276]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d60:	430b      	orrs	r3, r1
 8004d62:	6113      	str	r3, [r2, #16]
 8004d64:	e005      	b.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8004d66:	4b43      	ldr	r3, [pc, #268]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	4a42      	ldr	r2, [pc, #264]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d6c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004d70:	6113      	str	r3, [r2, #16]
 8004d72:	4b40      	ldr	r3, [pc, #256]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d74:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004d76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d82:	4a3c      	ldr	r2, [pc, #240]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d84:	430b      	orrs	r3, r1
 8004d86:	6713      	str	r3, [r2, #112]	; 0x70
 8004d88:	e008      	b.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d8a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004d8e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8004d92:	e003      	b.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d94:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004d98:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da4:	f002 0301 	and.w	r3, r2, #1
 8004da8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004dac:	2300      	movs	r3, #0
 8004dae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004db2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004db6:	460b      	mov	r3, r1
 8004db8:	4313      	orrs	r3, r2
 8004dba:	f000 808f 	beq.w	8004edc <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004dc4:	2b28      	cmp	r3, #40	; 0x28
 8004dc6:	d871      	bhi.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8004dc8:	a201      	add	r2, pc, #4	; (adr r2, 8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dce:	bf00      	nop
 8004dd0:	08004eb5 	.word	0x08004eb5
 8004dd4:	08004ead 	.word	0x08004ead
 8004dd8:	08004ead 	.word	0x08004ead
 8004ddc:	08004ead 	.word	0x08004ead
 8004de0:	08004ead 	.word	0x08004ead
 8004de4:	08004ead 	.word	0x08004ead
 8004de8:	08004ead 	.word	0x08004ead
 8004dec:	08004ead 	.word	0x08004ead
 8004df0:	08004e81 	.word	0x08004e81
 8004df4:	08004ead 	.word	0x08004ead
 8004df8:	08004ead 	.word	0x08004ead
 8004dfc:	08004ead 	.word	0x08004ead
 8004e00:	08004ead 	.word	0x08004ead
 8004e04:	08004ead 	.word	0x08004ead
 8004e08:	08004ead 	.word	0x08004ead
 8004e0c:	08004ead 	.word	0x08004ead
 8004e10:	08004e97 	.word	0x08004e97
 8004e14:	08004ead 	.word	0x08004ead
 8004e18:	08004ead 	.word	0x08004ead
 8004e1c:	08004ead 	.word	0x08004ead
 8004e20:	08004ead 	.word	0x08004ead
 8004e24:	08004ead 	.word	0x08004ead
 8004e28:	08004ead 	.word	0x08004ead
 8004e2c:	08004ead 	.word	0x08004ead
 8004e30:	08004eb5 	.word	0x08004eb5
 8004e34:	08004ead 	.word	0x08004ead
 8004e38:	08004ead 	.word	0x08004ead
 8004e3c:	08004ead 	.word	0x08004ead
 8004e40:	08004ead 	.word	0x08004ead
 8004e44:	08004ead 	.word	0x08004ead
 8004e48:	08004ead 	.word	0x08004ead
 8004e4c:	08004ead 	.word	0x08004ead
 8004e50:	08004eb5 	.word	0x08004eb5
 8004e54:	08004ead 	.word	0x08004ead
 8004e58:	08004ead 	.word	0x08004ead
 8004e5c:	08004ead 	.word	0x08004ead
 8004e60:	08004ead 	.word	0x08004ead
 8004e64:	08004ead 	.word	0x08004ead
 8004e68:	08004ead 	.word	0x08004ead
 8004e6c:	08004ead 	.word	0x08004ead
 8004e70:	08004eb5 	.word	0x08004eb5
 8004e74:	58024400 	.word	0x58024400
 8004e78:	58024800 	.word	0x58024800
 8004e7c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e84:	3308      	adds	r3, #8
 8004e86:	2101      	movs	r1, #1
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f000 ffa7 	bl	8005ddc <RCCEx_PLL2_Config>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004e94:	e00f      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e9a:	3328      	adds	r3, #40	; 0x28
 8004e9c:	2101      	movs	r1, #1
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f001 f84e 	bl	8005f40 <RCCEx_PLL3_Config>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004eaa:	e004      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004eb2:	e000      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004eb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004eb6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d10a      	bne.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004ebe:	4bbf      	ldr	r3, [pc, #764]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004ec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004eca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ecc:	4abb      	ldr	r2, [pc, #748]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004ece:	430b      	orrs	r3, r1
 8004ed0:	6553      	str	r3, [r2, #84]	; 0x54
 8004ed2:	e003      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ed4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004ed8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004edc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee4:	f002 0302 	and.w	r3, r2, #2
 8004ee8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004eec:	2300      	movs	r3, #0
 8004eee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ef2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	d041      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f02:	2b05      	cmp	r3, #5
 8004f04:	d824      	bhi.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8004f06:	a201      	add	r2, pc, #4	; (adr r2, 8004f0c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8004f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f0c:	08004f59 	.word	0x08004f59
 8004f10:	08004f25 	.word	0x08004f25
 8004f14:	08004f3b 	.word	0x08004f3b
 8004f18:	08004f59 	.word	0x08004f59
 8004f1c:	08004f59 	.word	0x08004f59
 8004f20:	08004f59 	.word	0x08004f59
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f28:	3308      	adds	r3, #8
 8004f2a:	2101      	movs	r1, #1
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f000 ff55 	bl	8005ddc <RCCEx_PLL2_Config>
 8004f32:	4603      	mov	r3, r0
 8004f34:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004f38:	e00f      	b.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f3e:	3328      	adds	r3, #40	; 0x28
 8004f40:	2101      	movs	r1, #1
 8004f42:	4618      	mov	r0, r3
 8004f44:	f000 fffc 	bl	8005f40 <RCCEx_PLL3_Config>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004f4e:	e004      	b.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004f56:	e000      	b.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8004f58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f5a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d10a      	bne.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004f62:	4b96      	ldr	r3, [pc, #600]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f66:	f023 0107 	bic.w	r1, r3, #7
 8004f6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f70:	4a92      	ldr	r2, [pc, #584]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004f72:	430b      	orrs	r3, r1
 8004f74:	6553      	str	r3, [r2, #84]	; 0x54
 8004f76:	e003      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f78:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004f7c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f88:	f002 0304 	and.w	r3, r2, #4
 8004f8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f90:	2300      	movs	r3, #0
 8004f92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004f96:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	d044      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa8:	2b05      	cmp	r3, #5
 8004faa:	d825      	bhi.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8004fac:	a201      	add	r2, pc, #4	; (adr r2, 8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8004fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb2:	bf00      	nop
 8004fb4:	08005001 	.word	0x08005001
 8004fb8:	08004fcd 	.word	0x08004fcd
 8004fbc:	08004fe3 	.word	0x08004fe3
 8004fc0:	08005001 	.word	0x08005001
 8004fc4:	08005001 	.word	0x08005001
 8004fc8:	08005001 	.word	0x08005001
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fd0:	3308      	adds	r3, #8
 8004fd2:	2101      	movs	r1, #1
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f000 ff01 	bl	8005ddc <RCCEx_PLL2_Config>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004fe0:	e00f      	b.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004fe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fe6:	3328      	adds	r3, #40	; 0x28
 8004fe8:	2101      	movs	r1, #1
 8004fea:	4618      	mov	r0, r3
 8004fec:	f000 ffa8 	bl	8005f40 <RCCEx_PLL3_Config>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004ff6:	e004      	b.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004ffe:	e000      	b.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8005000:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005002:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005006:	2b00      	cmp	r3, #0
 8005008:	d10b      	bne.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800500a:	4b6c      	ldr	r3, [pc, #432]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800500c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800500e:	f023 0107 	bic.w	r1, r3, #7
 8005012:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800501a:	4a68      	ldr	r2, [pc, #416]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800501c:	430b      	orrs	r3, r1
 800501e:	6593      	str	r3, [r2, #88]	; 0x58
 8005020:	e003      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005022:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005026:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800502a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800502e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005032:	f002 0320 	and.w	r3, r2, #32
 8005036:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800503a:	2300      	movs	r3, #0
 800503c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005040:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005044:	460b      	mov	r3, r1
 8005046:	4313      	orrs	r3, r2
 8005048:	d055      	beq.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800504a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800504e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005052:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005056:	d033      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8005058:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800505c:	d82c      	bhi.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800505e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005062:	d02f      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8005064:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005068:	d826      	bhi.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800506a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800506e:	d02b      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8005070:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005074:	d820      	bhi.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005076:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800507a:	d012      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800507c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005080:	d81a      	bhi.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005082:	2b00      	cmp	r3, #0
 8005084:	d022      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8005086:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800508a:	d115      	bne.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800508c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005090:	3308      	adds	r3, #8
 8005092:	2100      	movs	r1, #0
 8005094:	4618      	mov	r0, r3
 8005096:	f000 fea1 	bl	8005ddc <RCCEx_PLL2_Config>
 800509a:	4603      	mov	r3, r0
 800509c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80050a0:	e015      	b.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80050a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050a6:	3328      	adds	r3, #40	; 0x28
 80050a8:	2102      	movs	r1, #2
 80050aa:	4618      	mov	r0, r3
 80050ac:	f000 ff48 	bl	8005f40 <RCCEx_PLL3_Config>
 80050b0:	4603      	mov	r3, r0
 80050b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80050b6:	e00a      	b.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80050be:	e006      	b.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80050c0:	bf00      	nop
 80050c2:	e004      	b.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80050c4:	bf00      	nop
 80050c6:	e002      	b.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80050c8:	bf00      	nop
 80050ca:	e000      	b.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80050cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050ce:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d10b      	bne.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80050d6:	4b39      	ldr	r3, [pc, #228]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80050d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050da:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80050de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050e6:	4a35      	ldr	r2, [pc, #212]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80050e8:	430b      	orrs	r3, r1
 80050ea:	6553      	str	r3, [r2, #84]	; 0x54
 80050ec:	e003      	b.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050ee:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80050f2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80050f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050fe:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005102:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005106:	2300      	movs	r3, #0
 8005108:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800510c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005110:	460b      	mov	r3, r1
 8005112:	4313      	orrs	r3, r2
 8005114:	d058      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005116:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800511a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800511e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005122:	d033      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8005124:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005128:	d82c      	bhi.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800512a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800512e:	d02f      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005130:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005134:	d826      	bhi.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005136:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800513a:	d02b      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800513c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005140:	d820      	bhi.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005142:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005146:	d012      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8005148:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800514c:	d81a      	bhi.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800514e:	2b00      	cmp	r3, #0
 8005150:	d022      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8005152:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005156:	d115      	bne.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005158:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800515c:	3308      	adds	r3, #8
 800515e:	2100      	movs	r1, #0
 8005160:	4618      	mov	r0, r3
 8005162:	f000 fe3b 	bl	8005ddc <RCCEx_PLL2_Config>
 8005166:	4603      	mov	r3, r0
 8005168:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800516c:	e015      	b.n	800519a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800516e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005172:	3328      	adds	r3, #40	; 0x28
 8005174:	2102      	movs	r1, #2
 8005176:	4618      	mov	r0, r3
 8005178:	f000 fee2 	bl	8005f40 <RCCEx_PLL3_Config>
 800517c:	4603      	mov	r3, r0
 800517e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005182:	e00a      	b.n	800519a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800518a:	e006      	b.n	800519a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800518c:	bf00      	nop
 800518e:	e004      	b.n	800519a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005190:	bf00      	nop
 8005192:	e002      	b.n	800519a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005194:	bf00      	nop
 8005196:	e000      	b.n	800519a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005198:	bf00      	nop
    }

    if (ret == HAL_OK)
 800519a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d10e      	bne.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80051a2:	4b06      	ldr	r3, [pc, #24]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80051a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051a6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80051aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051b2:	4a02      	ldr	r2, [pc, #8]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80051b4:	430b      	orrs	r3, r1
 80051b6:	6593      	str	r3, [r2, #88]	; 0x58
 80051b8:	e006      	b.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80051ba:	bf00      	nop
 80051bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80051c4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80051c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80051d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80051d8:	2300      	movs	r3, #0
 80051da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80051de:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80051e2:	460b      	mov	r3, r1
 80051e4:	4313      	orrs	r3, r2
 80051e6:	d055      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80051e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051f0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80051f4:	d033      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80051f6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80051fa:	d82c      	bhi.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80051fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005200:	d02f      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8005202:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005206:	d826      	bhi.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005208:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800520c:	d02b      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800520e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005212:	d820      	bhi.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005214:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005218:	d012      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800521a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800521e:	d81a      	bhi.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005220:	2b00      	cmp	r3, #0
 8005222:	d022      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005224:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005228:	d115      	bne.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800522a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800522e:	3308      	adds	r3, #8
 8005230:	2100      	movs	r1, #0
 8005232:	4618      	mov	r0, r3
 8005234:	f000 fdd2 	bl	8005ddc <RCCEx_PLL2_Config>
 8005238:	4603      	mov	r3, r0
 800523a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800523e:	e015      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005240:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005244:	3328      	adds	r3, #40	; 0x28
 8005246:	2102      	movs	r1, #2
 8005248:	4618      	mov	r0, r3
 800524a:	f000 fe79 	bl	8005f40 <RCCEx_PLL3_Config>
 800524e:	4603      	mov	r3, r0
 8005250:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005254:	e00a      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800525c:	e006      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800525e:	bf00      	nop
 8005260:	e004      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005262:	bf00      	nop
 8005264:	e002      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005266:	bf00      	nop
 8005268:	e000      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800526a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800526c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005270:	2b00      	cmp	r3, #0
 8005272:	d10b      	bne.n	800528c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005274:	4ba0      	ldr	r3, [pc, #640]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005278:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800527c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005280:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005284:	4a9c      	ldr	r2, [pc, #624]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005286:	430b      	orrs	r3, r1
 8005288:	6593      	str	r3, [r2, #88]	; 0x58
 800528a:	e003      	b.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800528c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005290:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8005294:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800529c:	f002 0308 	and.w	r3, r2, #8
 80052a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80052a4:	2300      	movs	r3, #0
 80052a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80052aa:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80052ae:	460b      	mov	r3, r1
 80052b0:	4313      	orrs	r3, r2
 80052b2:	d01e      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80052b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052c0:	d10c      	bne.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80052c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052c6:	3328      	adds	r3, #40	; 0x28
 80052c8:	2102      	movs	r1, #2
 80052ca:	4618      	mov	r0, r3
 80052cc:	f000 fe38 	bl	8005f40 <RCCEx_PLL3_Config>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d002      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80052dc:	4b86      	ldr	r3, [pc, #536]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80052de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052ec:	4a82      	ldr	r2, [pc, #520]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80052ee:	430b      	orrs	r3, r1
 80052f0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80052f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fa:	f002 0310 	and.w	r3, r2, #16
 80052fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005302:	2300      	movs	r3, #0
 8005304:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005308:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800530c:	460b      	mov	r3, r1
 800530e:	4313      	orrs	r3, r2
 8005310:	d01e      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005312:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005316:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800531a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800531e:	d10c      	bne.n	800533a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005320:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005324:	3328      	adds	r3, #40	; 0x28
 8005326:	2102      	movs	r1, #2
 8005328:	4618      	mov	r0, r3
 800532a:	f000 fe09 	bl	8005f40 <RCCEx_PLL3_Config>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d002      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800533a:	4b6f      	ldr	r3, [pc, #444]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800533c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800533e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005342:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005346:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800534a:	4a6b      	ldr	r2, [pc, #428]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800534c:	430b      	orrs	r3, r1
 800534e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005350:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005358:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800535c:	67bb      	str	r3, [r7, #120]	; 0x78
 800535e:	2300      	movs	r3, #0
 8005360:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005362:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005366:	460b      	mov	r3, r1
 8005368:	4313      	orrs	r3, r2
 800536a:	d03e      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800536c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005370:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005374:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005378:	d022      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800537a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800537e:	d81b      	bhi.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8005380:	2b00      	cmp	r3, #0
 8005382:	d003      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8005384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005388:	d00b      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800538a:	e015      	b.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800538c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005390:	3308      	adds	r3, #8
 8005392:	2100      	movs	r1, #0
 8005394:	4618      	mov	r0, r3
 8005396:	f000 fd21 	bl	8005ddc <RCCEx_PLL2_Config>
 800539a:	4603      	mov	r3, r0
 800539c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80053a0:	e00f      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80053a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053a6:	3328      	adds	r3, #40	; 0x28
 80053a8:	2102      	movs	r1, #2
 80053aa:	4618      	mov	r0, r3
 80053ac:	f000 fdc8 	bl	8005f40 <RCCEx_PLL3_Config>
 80053b0:	4603      	mov	r3, r0
 80053b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80053b6:	e004      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80053be:	e000      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80053c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053c2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d10b      	bne.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80053ca:	4b4b      	ldr	r3, [pc, #300]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80053cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ce:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80053d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80053da:	4a47      	ldr	r2, [pc, #284]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80053dc:	430b      	orrs	r3, r1
 80053de:	6593      	str	r3, [r2, #88]	; 0x58
 80053e0:	e003      	b.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053e2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80053e6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80053ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80053f6:	673b      	str	r3, [r7, #112]	; 0x70
 80053f8:	2300      	movs	r3, #0
 80053fa:	677b      	str	r3, [r7, #116]	; 0x74
 80053fc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005400:	460b      	mov	r3, r1
 8005402:	4313      	orrs	r3, r2
 8005404:	d03b      	beq.n	800547e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005406:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800540a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800540e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005412:	d01f      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8005414:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005418:	d818      	bhi.n	800544c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800541a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800541e:	d003      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8005420:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005424:	d007      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8005426:	e011      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005428:	4b33      	ldr	r3, [pc, #204]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800542a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800542c:	4a32      	ldr	r2, [pc, #200]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800542e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005432:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005434:	e00f      	b.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005436:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800543a:	3328      	adds	r3, #40	; 0x28
 800543c:	2101      	movs	r1, #1
 800543e:	4618      	mov	r0, r3
 8005440:	f000 fd7e 	bl	8005f40 <RCCEx_PLL3_Config>
 8005444:	4603      	mov	r3, r0
 8005446:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800544a:	e004      	b.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005452:	e000      	b.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8005454:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005456:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800545a:	2b00      	cmp	r3, #0
 800545c:	d10b      	bne.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800545e:	4b26      	ldr	r3, [pc, #152]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005462:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005466:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800546a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800546e:	4a22      	ldr	r2, [pc, #136]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005470:	430b      	orrs	r3, r1
 8005472:	6553      	str	r3, [r2, #84]	; 0x54
 8005474:	e003      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005476:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800547a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800547e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005486:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800548a:	66bb      	str	r3, [r7, #104]	; 0x68
 800548c:	2300      	movs	r3, #0
 800548e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005490:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005494:	460b      	mov	r3, r1
 8005496:	4313      	orrs	r3, r2
 8005498:	d034      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800549a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800549e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d003      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80054a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054a8:	d007      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80054aa:	e011      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054ac:	4b12      	ldr	r3, [pc, #72]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80054ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b0:	4a11      	ldr	r2, [pc, #68]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80054b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80054b8:	e00e      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80054ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054be:	3308      	adds	r3, #8
 80054c0:	2102      	movs	r1, #2
 80054c2:	4618      	mov	r0, r3
 80054c4:	f000 fc8a 	bl	8005ddc <RCCEx_PLL2_Config>
 80054c8:	4603      	mov	r3, r0
 80054ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80054ce:	e003      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80054d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d10d      	bne.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80054e0:	4b05      	ldr	r3, [pc, #20]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80054e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80054e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054ee:	4a02      	ldr	r2, [pc, #8]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80054f0:	430b      	orrs	r3, r1
 80054f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80054f4:	e006      	b.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80054f6:	bf00      	nop
 80054f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005500:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005504:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800550c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005510:	663b      	str	r3, [r7, #96]	; 0x60
 8005512:	2300      	movs	r3, #0
 8005514:	667b      	str	r3, [r7, #100]	; 0x64
 8005516:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800551a:	460b      	mov	r3, r1
 800551c:	4313      	orrs	r3, r2
 800551e:	d00c      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005520:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005524:	3328      	adds	r3, #40	; 0x28
 8005526:	2102      	movs	r1, #2
 8005528:	4618      	mov	r0, r3
 800552a:	f000 fd09 	bl	8005f40 <RCCEx_PLL3_Config>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d002      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800553a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800553e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005542:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8005546:	65bb      	str	r3, [r7, #88]	; 0x58
 8005548:	2300      	movs	r3, #0
 800554a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800554c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005550:	460b      	mov	r3, r1
 8005552:	4313      	orrs	r3, r2
 8005554:	d036      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005556:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800555a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800555c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005560:	d018      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8005562:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005566:	d811      	bhi.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005568:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800556c:	d014      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800556e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005572:	d80b      	bhi.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005574:	2b00      	cmp	r3, #0
 8005576:	d011      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005578:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800557c:	d106      	bne.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800557e:	4bb7      	ldr	r3, [pc, #732]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005582:	4ab6      	ldr	r2, [pc, #728]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005588:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800558a:	e008      	b.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005592:	e004      	b.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005594:	bf00      	nop
 8005596:	e002      	b.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005598:	bf00      	nop
 800559a:	e000      	b.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800559c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800559e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d10a      	bne.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80055a6:	4bad      	ldr	r3, [pc, #692]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80055a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80055ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055b4:	4aa9      	ldr	r2, [pc, #676]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80055b6:	430b      	orrs	r3, r1
 80055b8:	6553      	str	r3, [r2, #84]	; 0x54
 80055ba:	e003      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80055c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80055c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055cc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80055d0:	653b      	str	r3, [r7, #80]	; 0x50
 80055d2:	2300      	movs	r3, #0
 80055d4:	657b      	str	r3, [r7, #84]	; 0x54
 80055d6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80055da:	460b      	mov	r3, r1
 80055dc:	4313      	orrs	r3, r2
 80055de:	d009      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80055e0:	4b9e      	ldr	r3, [pc, #632]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80055e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055e4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80055e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ee:	4a9b      	ldr	r2, [pc, #620]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80055f0:	430b      	orrs	r3, r1
 80055f2:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80055f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055fc:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005600:	64bb      	str	r3, [r7, #72]	; 0x48
 8005602:	2300      	movs	r3, #0
 8005604:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005606:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800560a:	460b      	mov	r3, r1
 800560c:	4313      	orrs	r3, r2
 800560e:	d009      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005610:	4b92      	ldr	r3, [pc, #584]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005612:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005614:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8005618:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800561c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800561e:	4a8f      	ldr	r2, [pc, #572]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005620:	430b      	orrs	r3, r1
 8005622:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005624:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800562c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8005630:	643b      	str	r3, [r7, #64]	; 0x40
 8005632:	2300      	movs	r3, #0
 8005634:	647b      	str	r3, [r7, #68]	; 0x44
 8005636:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800563a:	460b      	mov	r3, r1
 800563c:	4313      	orrs	r3, r2
 800563e:	d00e      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005640:	4b86      	ldr	r3, [pc, #536]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	4a85      	ldr	r2, [pc, #532]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005646:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800564a:	6113      	str	r3, [r2, #16]
 800564c:	4b83      	ldr	r3, [pc, #524]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800564e:	6919      	ldr	r1, [r3, #16]
 8005650:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005654:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005658:	4a80      	ldr	r2, [pc, #512]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800565a:	430b      	orrs	r3, r1
 800565c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800565e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005666:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800566a:	63bb      	str	r3, [r7, #56]	; 0x38
 800566c:	2300      	movs	r3, #0
 800566e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005670:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005674:	460b      	mov	r3, r1
 8005676:	4313      	orrs	r3, r2
 8005678:	d009      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800567a:	4b78      	ldr	r3, [pc, #480]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800567c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800567e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005682:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005688:	4a74      	ldr	r2, [pc, #464]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800568a:	430b      	orrs	r3, r1
 800568c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800568e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005696:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800569a:	633b      	str	r3, [r7, #48]	; 0x30
 800569c:	2300      	movs	r3, #0
 800569e:	637b      	str	r3, [r7, #52]	; 0x34
 80056a0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80056a4:	460b      	mov	r3, r1
 80056a6:	4313      	orrs	r3, r2
 80056a8:	d00a      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80056aa:	4b6c      	ldr	r3, [pc, #432]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80056ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ae:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80056b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ba:	4a68      	ldr	r2, [pc, #416]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80056bc:	430b      	orrs	r3, r1
 80056be:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80056c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c8:	2100      	movs	r1, #0
 80056ca:	62b9      	str	r1, [r7, #40]	; 0x28
 80056cc:	f003 0301 	and.w	r3, r3, #1
 80056d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056d2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80056d6:	460b      	mov	r3, r1
 80056d8:	4313      	orrs	r3, r2
 80056da:	d011      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056e0:	3308      	adds	r3, #8
 80056e2:	2100      	movs	r1, #0
 80056e4:	4618      	mov	r0, r3
 80056e6:	f000 fb79 	bl	8005ddc <RCCEx_PLL2_Config>
 80056ea:	4603      	mov	r3, r0
 80056ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80056f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d003      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80056fc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005700:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005708:	2100      	movs	r1, #0
 800570a:	6239      	str	r1, [r7, #32]
 800570c:	f003 0302 	and.w	r3, r3, #2
 8005710:	627b      	str	r3, [r7, #36]	; 0x24
 8005712:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005716:	460b      	mov	r3, r1
 8005718:	4313      	orrs	r3, r2
 800571a:	d011      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800571c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005720:	3308      	adds	r3, #8
 8005722:	2101      	movs	r1, #1
 8005724:	4618      	mov	r0, r3
 8005726:	f000 fb59 	bl	8005ddc <RCCEx_PLL2_Config>
 800572a:	4603      	mov	r3, r0
 800572c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8005730:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005734:	2b00      	cmp	r3, #0
 8005736:	d003      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005738:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800573c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005740:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005748:	2100      	movs	r1, #0
 800574a:	61b9      	str	r1, [r7, #24]
 800574c:	f003 0304 	and.w	r3, r3, #4
 8005750:	61fb      	str	r3, [r7, #28]
 8005752:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005756:	460b      	mov	r3, r1
 8005758:	4313      	orrs	r3, r2
 800575a:	d011      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800575c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005760:	3308      	adds	r3, #8
 8005762:	2102      	movs	r1, #2
 8005764:	4618      	mov	r0, r3
 8005766:	f000 fb39 	bl	8005ddc <RCCEx_PLL2_Config>
 800576a:	4603      	mov	r3, r0
 800576c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8005770:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005774:	2b00      	cmp	r3, #0
 8005776:	d003      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005778:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800577c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005780:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005788:	2100      	movs	r1, #0
 800578a:	6139      	str	r1, [r7, #16]
 800578c:	f003 0308 	and.w	r3, r3, #8
 8005790:	617b      	str	r3, [r7, #20]
 8005792:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005796:	460b      	mov	r3, r1
 8005798:	4313      	orrs	r3, r2
 800579a:	d011      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800579c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057a0:	3328      	adds	r3, #40	; 0x28
 80057a2:	2100      	movs	r1, #0
 80057a4:	4618      	mov	r0, r3
 80057a6:	f000 fbcb 	bl	8005f40 <RCCEx_PLL3_Config>
 80057aa:	4603      	mov	r3, r0
 80057ac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 80057b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d003      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057b8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80057bc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80057c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c8:	2100      	movs	r1, #0
 80057ca:	60b9      	str	r1, [r7, #8]
 80057cc:	f003 0310 	and.w	r3, r3, #16
 80057d0:	60fb      	str	r3, [r7, #12]
 80057d2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80057d6:	460b      	mov	r3, r1
 80057d8:	4313      	orrs	r3, r2
 80057da:	d011      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80057dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057e0:	3328      	adds	r3, #40	; 0x28
 80057e2:	2101      	movs	r1, #1
 80057e4:	4618      	mov	r0, r3
 80057e6:	f000 fbab 	bl	8005f40 <RCCEx_PLL3_Config>
 80057ea:	4603      	mov	r3, r0
 80057ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80057f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d003      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80057fc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005800:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005808:	2100      	movs	r1, #0
 800580a:	6039      	str	r1, [r7, #0]
 800580c:	f003 0320 	and.w	r3, r3, #32
 8005810:	607b      	str	r3, [r7, #4]
 8005812:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005816:	460b      	mov	r3, r1
 8005818:	4313      	orrs	r3, r2
 800581a:	d011      	beq.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800581c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005820:	3328      	adds	r3, #40	; 0x28
 8005822:	2102      	movs	r1, #2
 8005824:	4618      	mov	r0, r3
 8005826:	f000 fb8b 	bl	8005f40 <RCCEx_PLL3_Config>
 800582a:	4603      	mov	r3, r0
 800582c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8005830:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005834:	2b00      	cmp	r3, #0
 8005836:	d003      	beq.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005838:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800583c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8005840:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8005844:	2b00      	cmp	r3, #0
 8005846:	d101      	bne.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8005848:	2300      	movs	r3, #0
 800584a:	e000      	b.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
}
 800584e:	4618      	mov	r0, r3
 8005850:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8005854:	46bd      	mov	sp, r7
 8005856:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800585a:	bf00      	nop
 800585c:	58024400 	.word	0x58024400

08005860 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005864:	f7fe fe00 	bl	8004468 <HAL_RCC_GetHCLKFreq>
 8005868:	4602      	mov	r2, r0
 800586a:	4b06      	ldr	r3, [pc, #24]	; (8005884 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800586c:	6a1b      	ldr	r3, [r3, #32]
 800586e:	091b      	lsrs	r3, r3, #4
 8005870:	f003 0307 	and.w	r3, r3, #7
 8005874:	4904      	ldr	r1, [pc, #16]	; (8005888 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005876:	5ccb      	ldrb	r3, [r1, r3]
 8005878:	f003 031f 	and.w	r3, r3, #31
 800587c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005880:	4618      	mov	r0, r3
 8005882:	bd80      	pop	{r7, pc}
 8005884:	58024400 	.word	0x58024400
 8005888:	0800aa30 	.word	0x0800aa30

0800588c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800588c:	b480      	push	{r7}
 800588e:	b089      	sub	sp, #36	; 0x24
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005894:	4ba1      	ldr	r3, [pc, #644]	; (8005b1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005898:	f003 0303 	and.w	r3, r3, #3
 800589c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800589e:	4b9f      	ldr	r3, [pc, #636]	; (8005b1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a2:	0b1b      	lsrs	r3, r3, #12
 80058a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058a8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80058aa:	4b9c      	ldr	r3, [pc, #624]	; (8005b1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ae:	091b      	lsrs	r3, r3, #4
 80058b0:	f003 0301 	and.w	r3, r3, #1
 80058b4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80058b6:	4b99      	ldr	r3, [pc, #612]	; (8005b1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ba:	08db      	lsrs	r3, r3, #3
 80058bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80058c0:	693a      	ldr	r2, [r7, #16]
 80058c2:	fb02 f303 	mul.w	r3, r2, r3
 80058c6:	ee07 3a90 	vmov	s15, r3
 80058ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	f000 8111 	beq.w	8005afc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	2b02      	cmp	r3, #2
 80058de:	f000 8083 	beq.w	80059e8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	2b02      	cmp	r3, #2
 80058e6:	f200 80a1 	bhi.w	8005a2c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d003      	beq.n	80058f8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d056      	beq.n	80059a4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80058f6:	e099      	b.n	8005a2c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058f8:	4b88      	ldr	r3, [pc, #544]	; (8005b1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0320 	and.w	r3, r3, #32
 8005900:	2b00      	cmp	r3, #0
 8005902:	d02d      	beq.n	8005960 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005904:	4b85      	ldr	r3, [pc, #532]	; (8005b1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	08db      	lsrs	r3, r3, #3
 800590a:	f003 0303 	and.w	r3, r3, #3
 800590e:	4a84      	ldr	r2, [pc, #528]	; (8005b20 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005910:	fa22 f303 	lsr.w	r3, r2, r3
 8005914:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	ee07 3a90 	vmov	s15, r3
 800591c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	ee07 3a90 	vmov	s15, r3
 8005926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800592a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800592e:	4b7b      	ldr	r3, [pc, #492]	; (8005b1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005936:	ee07 3a90 	vmov	s15, r3
 800593a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800593e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005942:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005b24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800594a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800594e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800595a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800595e:	e087      	b.n	8005a70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	ee07 3a90 	vmov	s15, r3
 8005966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800596a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005b28 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800596e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005972:	4b6a      	ldr	r3, [pc, #424]	; (8005b1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800597a:	ee07 3a90 	vmov	s15, r3
 800597e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005982:	ed97 6a03 	vldr	s12, [r7, #12]
 8005986:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005b24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800598a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800598e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005992:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800599a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800599e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80059a2:	e065      	b.n	8005a70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	ee07 3a90 	vmov	s15, r3
 80059aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059ae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005b2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80059b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059b6:	4b59      	ldr	r3, [pc, #356]	; (8005b1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059be:	ee07 3a90 	vmov	s15, r3
 80059c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80059ca:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005b24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80059ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80059e6:	e043      	b.n	8005a70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	ee07 3a90 	vmov	s15, r3
 80059ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059f2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005b30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80059f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059fa:	4b48      	ldr	r3, [pc, #288]	; (8005b1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a02:	ee07 3a90 	vmov	s15, r3
 8005a06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a0e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005b24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a2a:	e021      	b.n	8005a70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	ee07 3a90 	vmov	s15, r3
 8005a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a36:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005b2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005a3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a3e:	4b37      	ldr	r3, [pc, #220]	; (8005b1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a46:	ee07 3a90 	vmov	s15, r3
 8005a4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a52:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005b24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a6e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005a70:	4b2a      	ldr	r3, [pc, #168]	; (8005b1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a74:	0a5b      	lsrs	r3, r3, #9
 8005a76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a7a:	ee07 3a90 	vmov	s15, r3
 8005a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a96:	ee17 2a90 	vmov	r2, s15
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005a9e:	4b1f      	ldr	r3, [pc, #124]	; (8005b1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa2:	0c1b      	lsrs	r3, r3, #16
 8005aa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005aa8:	ee07 3a90 	vmov	s15, r3
 8005aac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ab0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ab4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ab8:	edd7 6a07 	vldr	s13, [r7, #28]
 8005abc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ac0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ac4:	ee17 2a90 	vmov	r2, s15
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005acc:	4b13      	ldr	r3, [pc, #76]	; (8005b1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad0:	0e1b      	lsrs	r3, r3, #24
 8005ad2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ad6:	ee07 3a90 	vmov	s15, r3
 8005ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ade:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ae2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ae6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005aea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005aee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005af2:	ee17 2a90 	vmov	r2, s15
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005afa:	e008      	b.n	8005b0e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	609a      	str	r2, [r3, #8]
}
 8005b0e:	bf00      	nop
 8005b10:	3724      	adds	r7, #36	; 0x24
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop
 8005b1c:	58024400 	.word	0x58024400
 8005b20:	03d09000 	.word	0x03d09000
 8005b24:	46000000 	.word	0x46000000
 8005b28:	4c742400 	.word	0x4c742400
 8005b2c:	4a742400 	.word	0x4a742400
 8005b30:	4af42400 	.word	0x4af42400

08005b34 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b089      	sub	sp, #36	; 0x24
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b3c:	4ba1      	ldr	r3, [pc, #644]	; (8005dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b40:	f003 0303 	and.w	r3, r3, #3
 8005b44:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005b46:	4b9f      	ldr	r3, [pc, #636]	; (8005dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b4a:	0d1b      	lsrs	r3, r3, #20
 8005b4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b50:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005b52:	4b9c      	ldr	r3, [pc, #624]	; (8005dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b56:	0a1b      	lsrs	r3, r3, #8
 8005b58:	f003 0301 	and.w	r3, r3, #1
 8005b5c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005b5e:	4b99      	ldr	r3, [pc, #612]	; (8005dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b62:	08db      	lsrs	r3, r3, #3
 8005b64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b68:	693a      	ldr	r2, [r7, #16]
 8005b6a:	fb02 f303 	mul.w	r3, r2, r3
 8005b6e:	ee07 3a90 	vmov	s15, r3
 8005b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b76:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	f000 8111 	beq.w	8005da4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	2b02      	cmp	r3, #2
 8005b86:	f000 8083 	beq.w	8005c90 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	f200 80a1 	bhi.w	8005cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d003      	beq.n	8005ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d056      	beq.n	8005c4c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005b9e:	e099      	b.n	8005cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ba0:	4b88      	ldr	r3, [pc, #544]	; (8005dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 0320 	and.w	r3, r3, #32
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d02d      	beq.n	8005c08 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005bac:	4b85      	ldr	r3, [pc, #532]	; (8005dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	08db      	lsrs	r3, r3, #3
 8005bb2:	f003 0303 	and.w	r3, r3, #3
 8005bb6:	4a84      	ldr	r2, [pc, #528]	; (8005dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8005bbc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	ee07 3a90 	vmov	s15, r3
 8005bc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	ee07 3a90 	vmov	s15, r3
 8005bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bd6:	4b7b      	ldr	r3, [pc, #492]	; (8005dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bde:	ee07 3a90 	vmov	s15, r3
 8005be2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005be6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bea:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005dcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005bee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c02:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005c06:	e087      	b.n	8005d18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	ee07 3a90 	vmov	s15, r3
 8005c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c12:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005c16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c1a:	4b6a      	ldr	r3, [pc, #424]	; (8005dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c22:	ee07 3a90 	vmov	s15, r3
 8005c26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c2e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005dcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c4a:	e065      	b.n	8005d18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	ee07 3a90 	vmov	s15, r3
 8005c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c56:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005c5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c5e:	4b59      	ldr	r3, [pc, #356]	; (8005dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c66:	ee07 3a90 	vmov	s15, r3
 8005c6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c72:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005dcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c8e:	e043      	b.n	8005d18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	ee07 3a90 	vmov	s15, r3
 8005c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c9a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005c9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ca2:	4b48      	ldr	r3, [pc, #288]	; (8005dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005caa:	ee07 3a90 	vmov	s15, r3
 8005cae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cb6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005dcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005cba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005cd2:	e021      	b.n	8005d18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	ee07 3a90 	vmov	s15, r3
 8005cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cde:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005ce2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ce6:	4b37      	ldr	r3, [pc, #220]	; (8005dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cee:	ee07 3a90 	vmov	s15, r3
 8005cf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cf6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cfa:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005dcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005cfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d16:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005d18:	4b2a      	ldr	r3, [pc, #168]	; (8005dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1c:	0a5b      	lsrs	r3, r3, #9
 8005d1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d22:	ee07 3a90 	vmov	s15, r3
 8005d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d32:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d3e:	ee17 2a90 	vmov	r2, s15
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005d46:	4b1f      	ldr	r3, [pc, #124]	; (8005dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4a:	0c1b      	lsrs	r3, r3, #16
 8005d4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d50:	ee07 3a90 	vmov	s15, r3
 8005d54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d60:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d6c:	ee17 2a90 	vmov	r2, s15
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005d74:	4b13      	ldr	r3, [pc, #76]	; (8005dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d78:	0e1b      	lsrs	r3, r3, #24
 8005d7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d7e:	ee07 3a90 	vmov	s15, r3
 8005d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d9a:	ee17 2a90 	vmov	r2, s15
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005da2:	e008      	b.n	8005db6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	609a      	str	r2, [r3, #8]
}
 8005db6:	bf00      	nop
 8005db8:	3724      	adds	r7, #36	; 0x24
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop
 8005dc4:	58024400 	.word	0x58024400
 8005dc8:	03d09000 	.word	0x03d09000
 8005dcc:	46000000 	.word	0x46000000
 8005dd0:	4c742400 	.word	0x4c742400
 8005dd4:	4a742400 	.word	0x4a742400
 8005dd8:	4af42400 	.word	0x4af42400

08005ddc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005de6:	2300      	movs	r3, #0
 8005de8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005dea:	4b53      	ldr	r3, [pc, #332]	; (8005f38 <RCCEx_PLL2_Config+0x15c>)
 8005dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dee:	f003 0303 	and.w	r3, r3, #3
 8005df2:	2b03      	cmp	r3, #3
 8005df4:	d101      	bne.n	8005dfa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e099      	b.n	8005f2e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005dfa:	4b4f      	ldr	r3, [pc, #316]	; (8005f38 <RCCEx_PLL2_Config+0x15c>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a4e      	ldr	r2, [pc, #312]	; (8005f38 <RCCEx_PLL2_Config+0x15c>)
 8005e00:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005e04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e06:	f7fb ff3d 	bl	8001c84 <HAL_GetTick>
 8005e0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005e0c:	e008      	b.n	8005e20 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005e0e:	f7fb ff39 	bl	8001c84 <HAL_GetTick>
 8005e12:	4602      	mov	r2, r0
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	1ad3      	subs	r3, r2, r3
 8005e18:	2b02      	cmp	r3, #2
 8005e1a:	d901      	bls.n	8005e20 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	e086      	b.n	8005f2e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005e20:	4b45      	ldr	r3, [pc, #276]	; (8005f38 <RCCEx_PLL2_Config+0x15c>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d1f0      	bne.n	8005e0e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005e2c:	4b42      	ldr	r3, [pc, #264]	; (8005f38 <RCCEx_PLL2_Config+0x15c>)
 8005e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e30:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	031b      	lsls	r3, r3, #12
 8005e3a:	493f      	ldr	r1, [pc, #252]	; (8005f38 <RCCEx_PLL2_Config+0x15c>)
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	628b      	str	r3, [r1, #40]	; 0x28
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	3b01      	subs	r3, #1
 8005e46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	025b      	lsls	r3, r3, #9
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	431a      	orrs	r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	041b      	lsls	r3, r3, #16
 8005e5e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005e62:	431a      	orrs	r2, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	3b01      	subs	r3, #1
 8005e6a:	061b      	lsls	r3, r3, #24
 8005e6c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005e70:	4931      	ldr	r1, [pc, #196]	; (8005f38 <RCCEx_PLL2_Config+0x15c>)
 8005e72:	4313      	orrs	r3, r2
 8005e74:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005e76:	4b30      	ldr	r3, [pc, #192]	; (8005f38 <RCCEx_PLL2_Config+0x15c>)
 8005e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e7a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	695b      	ldr	r3, [r3, #20]
 8005e82:	492d      	ldr	r1, [pc, #180]	; (8005f38 <RCCEx_PLL2_Config+0x15c>)
 8005e84:	4313      	orrs	r3, r2
 8005e86:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005e88:	4b2b      	ldr	r3, [pc, #172]	; (8005f38 <RCCEx_PLL2_Config+0x15c>)
 8005e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8c:	f023 0220 	bic.w	r2, r3, #32
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	699b      	ldr	r3, [r3, #24]
 8005e94:	4928      	ldr	r1, [pc, #160]	; (8005f38 <RCCEx_PLL2_Config+0x15c>)
 8005e96:	4313      	orrs	r3, r2
 8005e98:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005e9a:	4b27      	ldr	r3, [pc, #156]	; (8005f38 <RCCEx_PLL2_Config+0x15c>)
 8005e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e9e:	4a26      	ldr	r2, [pc, #152]	; (8005f38 <RCCEx_PLL2_Config+0x15c>)
 8005ea0:	f023 0310 	bic.w	r3, r3, #16
 8005ea4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005ea6:	4b24      	ldr	r3, [pc, #144]	; (8005f38 <RCCEx_PLL2_Config+0x15c>)
 8005ea8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005eaa:	4b24      	ldr	r3, [pc, #144]	; (8005f3c <RCCEx_PLL2_Config+0x160>)
 8005eac:	4013      	ands	r3, r2
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	69d2      	ldr	r2, [r2, #28]
 8005eb2:	00d2      	lsls	r2, r2, #3
 8005eb4:	4920      	ldr	r1, [pc, #128]	; (8005f38 <RCCEx_PLL2_Config+0x15c>)
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005eba:	4b1f      	ldr	r3, [pc, #124]	; (8005f38 <RCCEx_PLL2_Config+0x15c>)
 8005ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ebe:	4a1e      	ldr	r2, [pc, #120]	; (8005f38 <RCCEx_PLL2_Config+0x15c>)
 8005ec0:	f043 0310 	orr.w	r3, r3, #16
 8005ec4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d106      	bne.n	8005eda <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005ecc:	4b1a      	ldr	r3, [pc, #104]	; (8005f38 <RCCEx_PLL2_Config+0x15c>)
 8005ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed0:	4a19      	ldr	r2, [pc, #100]	; (8005f38 <RCCEx_PLL2_Config+0x15c>)
 8005ed2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ed6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ed8:	e00f      	b.n	8005efa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d106      	bne.n	8005eee <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005ee0:	4b15      	ldr	r3, [pc, #84]	; (8005f38 <RCCEx_PLL2_Config+0x15c>)
 8005ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee4:	4a14      	ldr	r2, [pc, #80]	; (8005f38 <RCCEx_PLL2_Config+0x15c>)
 8005ee6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005eea:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005eec:	e005      	b.n	8005efa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005eee:	4b12      	ldr	r3, [pc, #72]	; (8005f38 <RCCEx_PLL2_Config+0x15c>)
 8005ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef2:	4a11      	ldr	r2, [pc, #68]	; (8005f38 <RCCEx_PLL2_Config+0x15c>)
 8005ef4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005ef8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005efa:	4b0f      	ldr	r3, [pc, #60]	; (8005f38 <RCCEx_PLL2_Config+0x15c>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a0e      	ldr	r2, [pc, #56]	; (8005f38 <RCCEx_PLL2_Config+0x15c>)
 8005f00:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005f04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f06:	f7fb febd 	bl	8001c84 <HAL_GetTick>
 8005f0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005f0c:	e008      	b.n	8005f20 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005f0e:	f7fb feb9 	bl	8001c84 <HAL_GetTick>
 8005f12:	4602      	mov	r2, r0
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	2b02      	cmp	r3, #2
 8005f1a:	d901      	bls.n	8005f20 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	e006      	b.n	8005f2e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005f20:	4b05      	ldr	r3, [pc, #20]	; (8005f38 <RCCEx_PLL2_Config+0x15c>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d0f0      	beq.n	8005f0e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3710      	adds	r7, #16
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	58024400 	.word	0x58024400
 8005f3c:	ffff0007 	.word	0xffff0007

08005f40 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005f4e:	4b53      	ldr	r3, [pc, #332]	; (800609c <RCCEx_PLL3_Config+0x15c>)
 8005f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f52:	f003 0303 	and.w	r3, r3, #3
 8005f56:	2b03      	cmp	r3, #3
 8005f58:	d101      	bne.n	8005f5e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e099      	b.n	8006092 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005f5e:	4b4f      	ldr	r3, [pc, #316]	; (800609c <RCCEx_PLL3_Config+0x15c>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a4e      	ldr	r2, [pc, #312]	; (800609c <RCCEx_PLL3_Config+0x15c>)
 8005f64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f6a:	f7fb fe8b 	bl	8001c84 <HAL_GetTick>
 8005f6e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005f70:	e008      	b.n	8005f84 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005f72:	f7fb fe87 	bl	8001c84 <HAL_GetTick>
 8005f76:	4602      	mov	r2, r0
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	2b02      	cmp	r3, #2
 8005f7e:	d901      	bls.n	8005f84 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005f80:	2303      	movs	r3, #3
 8005f82:	e086      	b.n	8006092 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005f84:	4b45      	ldr	r3, [pc, #276]	; (800609c <RCCEx_PLL3_Config+0x15c>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d1f0      	bne.n	8005f72 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005f90:	4b42      	ldr	r3, [pc, #264]	; (800609c <RCCEx_PLL3_Config+0x15c>)
 8005f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f94:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	051b      	lsls	r3, r3, #20
 8005f9e:	493f      	ldr	r1, [pc, #252]	; (800609c <RCCEx_PLL3_Config+0x15c>)
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	628b      	str	r3, [r1, #40]	; 0x28
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	3b01      	subs	r3, #1
 8005faa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	3b01      	subs	r3, #1
 8005fb4:	025b      	lsls	r3, r3, #9
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	431a      	orrs	r2, r3
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	041b      	lsls	r3, r3, #16
 8005fc2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005fc6:	431a      	orrs	r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	3b01      	subs	r3, #1
 8005fce:	061b      	lsls	r3, r3, #24
 8005fd0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005fd4:	4931      	ldr	r1, [pc, #196]	; (800609c <RCCEx_PLL3_Config+0x15c>)
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005fda:	4b30      	ldr	r3, [pc, #192]	; (800609c <RCCEx_PLL3_Config+0x15c>)
 8005fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fde:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	695b      	ldr	r3, [r3, #20]
 8005fe6:	492d      	ldr	r1, [pc, #180]	; (800609c <RCCEx_PLL3_Config+0x15c>)
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005fec:	4b2b      	ldr	r3, [pc, #172]	; (800609c <RCCEx_PLL3_Config+0x15c>)
 8005fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	699b      	ldr	r3, [r3, #24]
 8005ff8:	4928      	ldr	r1, [pc, #160]	; (800609c <RCCEx_PLL3_Config+0x15c>)
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005ffe:	4b27      	ldr	r3, [pc, #156]	; (800609c <RCCEx_PLL3_Config+0x15c>)
 8006000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006002:	4a26      	ldr	r2, [pc, #152]	; (800609c <RCCEx_PLL3_Config+0x15c>)
 8006004:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006008:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800600a:	4b24      	ldr	r3, [pc, #144]	; (800609c <RCCEx_PLL3_Config+0x15c>)
 800600c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800600e:	4b24      	ldr	r3, [pc, #144]	; (80060a0 <RCCEx_PLL3_Config+0x160>)
 8006010:	4013      	ands	r3, r2
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	69d2      	ldr	r2, [r2, #28]
 8006016:	00d2      	lsls	r2, r2, #3
 8006018:	4920      	ldr	r1, [pc, #128]	; (800609c <RCCEx_PLL3_Config+0x15c>)
 800601a:	4313      	orrs	r3, r2
 800601c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800601e:	4b1f      	ldr	r3, [pc, #124]	; (800609c <RCCEx_PLL3_Config+0x15c>)
 8006020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006022:	4a1e      	ldr	r2, [pc, #120]	; (800609c <RCCEx_PLL3_Config+0x15c>)
 8006024:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006028:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d106      	bne.n	800603e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006030:	4b1a      	ldr	r3, [pc, #104]	; (800609c <RCCEx_PLL3_Config+0x15c>)
 8006032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006034:	4a19      	ldr	r2, [pc, #100]	; (800609c <RCCEx_PLL3_Config+0x15c>)
 8006036:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800603a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800603c:	e00f      	b.n	800605e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	2b01      	cmp	r3, #1
 8006042:	d106      	bne.n	8006052 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006044:	4b15      	ldr	r3, [pc, #84]	; (800609c <RCCEx_PLL3_Config+0x15c>)
 8006046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006048:	4a14      	ldr	r2, [pc, #80]	; (800609c <RCCEx_PLL3_Config+0x15c>)
 800604a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800604e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006050:	e005      	b.n	800605e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006052:	4b12      	ldr	r3, [pc, #72]	; (800609c <RCCEx_PLL3_Config+0x15c>)
 8006054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006056:	4a11      	ldr	r2, [pc, #68]	; (800609c <RCCEx_PLL3_Config+0x15c>)
 8006058:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800605c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800605e:	4b0f      	ldr	r3, [pc, #60]	; (800609c <RCCEx_PLL3_Config+0x15c>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a0e      	ldr	r2, [pc, #56]	; (800609c <RCCEx_PLL3_Config+0x15c>)
 8006064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006068:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800606a:	f7fb fe0b 	bl	8001c84 <HAL_GetTick>
 800606e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006070:	e008      	b.n	8006084 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006072:	f7fb fe07 	bl	8001c84 <HAL_GetTick>
 8006076:	4602      	mov	r2, r0
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	2b02      	cmp	r3, #2
 800607e:	d901      	bls.n	8006084 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006080:	2303      	movs	r3, #3
 8006082:	e006      	b.n	8006092 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006084:	4b05      	ldr	r3, [pc, #20]	; (800609c <RCCEx_PLL3_Config+0x15c>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800608c:	2b00      	cmp	r3, #0
 800608e:	d0f0      	beq.n	8006072 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006090:	7bfb      	ldrb	r3, [r7, #15]
}
 8006092:	4618      	mov	r0, r3
 8006094:	3710      	adds	r7, #16
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	58024400 	.word	0x58024400
 80060a0:	ffff0007 	.word	0xffff0007

080060a4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b084      	sub	sp, #16
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d101      	bne.n	80060b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e10f      	b.n	80062d6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a87      	ldr	r2, [pc, #540]	; (80062e0 <HAL_SPI_Init+0x23c>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d00f      	beq.n	80060e6 <HAL_SPI_Init+0x42>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a86      	ldr	r2, [pc, #536]	; (80062e4 <HAL_SPI_Init+0x240>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d00a      	beq.n	80060e6 <HAL_SPI_Init+0x42>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a84      	ldr	r2, [pc, #528]	; (80062e8 <HAL_SPI_Init+0x244>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d005      	beq.n	80060e6 <HAL_SPI_Init+0x42>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	2b0f      	cmp	r3, #15
 80060e0:	d901      	bls.n	80060e6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e0f7      	b.n	80062d6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 fef6 	bl	8006ed8 <SPI_GetPacketSize>
 80060ec:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a7b      	ldr	r2, [pc, #492]	; (80062e0 <HAL_SPI_Init+0x23c>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d00c      	beq.n	8006112 <HAL_SPI_Init+0x6e>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a79      	ldr	r2, [pc, #484]	; (80062e4 <HAL_SPI_Init+0x240>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d007      	beq.n	8006112 <HAL_SPI_Init+0x6e>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a78      	ldr	r2, [pc, #480]	; (80062e8 <HAL_SPI_Init+0x244>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d002      	beq.n	8006112 <HAL_SPI_Init+0x6e>
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2b08      	cmp	r3, #8
 8006110:	d811      	bhi.n	8006136 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006116:	4a72      	ldr	r2, [pc, #456]	; (80062e0 <HAL_SPI_Init+0x23c>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d009      	beq.n	8006130 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a70      	ldr	r2, [pc, #448]	; (80062e4 <HAL_SPI_Init+0x240>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d004      	beq.n	8006130 <HAL_SPI_Init+0x8c>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a6f      	ldr	r2, [pc, #444]	; (80062e8 <HAL_SPI_Init+0x244>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d104      	bne.n	800613a <HAL_SPI_Init+0x96>
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2b10      	cmp	r3, #16
 8006134:	d901      	bls.n	800613a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e0cd      	b.n	80062d6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006140:	b2db      	uxtb	r3, r3
 8006142:	2b00      	cmp	r3, #0
 8006144:	d106      	bne.n	8006154 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f7fb f838 	bl	80011c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2202      	movs	r2, #2
 8006158:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f022 0201 	bic.w	r2, r2, #1
 800616a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8006176:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	699b      	ldr	r3, [r3, #24]
 800617c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006180:	d119      	bne.n	80061b6 <HAL_SPI_Init+0x112>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800618a:	d103      	bne.n	8006194 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006190:	2b00      	cmp	r3, #0
 8006192:	d008      	beq.n	80061a6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006198:	2b00      	cmp	r3, #0
 800619a:	d10c      	bne.n	80061b6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80061a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061a4:	d107      	bne.n	80061b6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80061b4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d00f      	beq.n	80061e2 <HAL_SPI_Init+0x13e>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	2b06      	cmp	r3, #6
 80061c8:	d90b      	bls.n	80061e2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	430a      	orrs	r2, r1
 80061de:	601a      	str	r2, [r3, #0]
 80061e0:	e007      	b.n	80061f2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80061f0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	69da      	ldr	r2, [r3, #28]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061fa:	431a      	orrs	r2, r3
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	431a      	orrs	r2, r3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006204:	ea42 0103 	orr.w	r1, r2, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	68da      	ldr	r2, [r3, #12]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	430a      	orrs	r2, r1
 8006212:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621c:	431a      	orrs	r2, r3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006222:	431a      	orrs	r2, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	699b      	ldr	r3, [r3, #24]
 8006228:	431a      	orrs	r2, r3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	431a      	orrs	r2, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	695b      	ldr	r3, [r3, #20]
 8006234:	431a      	orrs	r2, r3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a1b      	ldr	r3, [r3, #32]
 800623a:	431a      	orrs	r2, r3
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	431a      	orrs	r2, r3
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006246:	431a      	orrs	r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	431a      	orrs	r2, r3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006252:	ea42 0103 	orr.w	r1, r2, r3
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	430a      	orrs	r2, r1
 8006260:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d113      	bne.n	8006292 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800627c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006290:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f022 0201 	bic.w	r2, r2, #1
 80062a0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00a      	beq.n	80062c4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	430a      	orrs	r2, r1
 80062c2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3710      	adds	r7, #16
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	40013000 	.word	0x40013000
 80062e4:	40003800 	.word	0x40003800
 80062e8:	40003c00 	.word	0x40003c00

080062ec <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b088      	sub	sp, #32
 80062f0:	af02      	add	r7, sp, #8
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	60b9      	str	r1, [r7, #8]
 80062f6:	603b      	str	r3, [r7, #0]
 80062f8:	4613      	mov	r3, r2
 80062fa:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	3320      	adds	r3, #32
 8006302:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006304:	f7fb fcbe 	bl	8001c84 <HAL_GetTick>
 8006308:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006310:	b2db      	uxtb	r3, r3
 8006312:	2b01      	cmp	r3, #1
 8006314:	d001      	beq.n	800631a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8006316:	2302      	movs	r3, #2
 8006318:	e1d1      	b.n	80066be <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d002      	beq.n	8006326 <HAL_SPI_Transmit+0x3a>
 8006320:	88fb      	ldrh	r3, [r7, #6]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d101      	bne.n	800632a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e1c9      	b.n	80066be <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006330:	2b01      	cmp	r3, #1
 8006332:	d101      	bne.n	8006338 <HAL_SPI_Transmit+0x4c>
 8006334:	2302      	movs	r3, #2
 8006336:	e1c2      	b.n	80066be <HAL_SPI_Transmit+0x3d2>
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2203      	movs	r2, #3
 8006344:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2200      	movs	r2, #0
 800634c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	68ba      	ldr	r2, [r7, #8]
 8006354:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	88fa      	ldrh	r2, [r7, #6]
 800635a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	88fa      	ldrh	r2, [r7, #6]
 8006362:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2200      	movs	r2, #0
 800636a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2200      	movs	r2, #0
 8006370:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2200      	movs	r2, #0
 8006378:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2200      	movs	r2, #0
 8006380:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2200      	movs	r2, #0
 8006386:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8006390:	d108      	bne.n	80063a4 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063a0:	601a      	str	r2, [r3, #0]
 80063a2:	e009      	b.n	80063b8 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80063b6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	685a      	ldr	r2, [r3, #4]
 80063be:	4b96      	ldr	r3, [pc, #600]	; (8006618 <HAL_SPI_Transmit+0x32c>)
 80063c0:	4013      	ands	r3, r2
 80063c2:	88f9      	ldrh	r1, [r7, #6]
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	6812      	ldr	r2, [r2, #0]
 80063c8:	430b      	orrs	r3, r1
 80063ca:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f042 0201 	orr.w	r2, r2, #1
 80063da:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063e4:	d107      	bne.n	80063f6 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	2b0f      	cmp	r3, #15
 80063fc:	d947      	bls.n	800648e <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80063fe:	e03f      	b.n	8006480 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	695b      	ldr	r3, [r3, #20]
 8006406:	f003 0302 	and.w	r3, r3, #2
 800640a:	2b02      	cmp	r3, #2
 800640c:	d114      	bne.n	8006438 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	6812      	ldr	r2, [r2, #0]
 8006418:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800641e:	1d1a      	adds	r2, r3, #4
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800642a:	b29b      	uxth	r3, r3
 800642c:	3b01      	subs	r3, #1
 800642e:	b29a      	uxth	r2, r3
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006436:	e023      	b.n	8006480 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006438:	f7fb fc24 	bl	8001c84 <HAL_GetTick>
 800643c:	4602      	mov	r2, r0
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	683a      	ldr	r2, [r7, #0]
 8006444:	429a      	cmp	r2, r3
 8006446:	d803      	bhi.n	8006450 <HAL_SPI_Transmit+0x164>
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800644e:	d102      	bne.n	8006456 <HAL_SPI_Transmit+0x16a>
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d114      	bne.n	8006480 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006456:	68f8      	ldr	r0, [r7, #12]
 8006458:	f000 fc70 	bl	8006d3c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006462:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2200      	movs	r2, #0
 8006478:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800647c:	2303      	movs	r3, #3
 800647e:	e11e      	b.n	80066be <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006486:	b29b      	uxth	r3, r3
 8006488:	2b00      	cmp	r3, #0
 800648a:	d1b9      	bne.n	8006400 <HAL_SPI_Transmit+0x114>
 800648c:	e0f1      	b.n	8006672 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	2b07      	cmp	r3, #7
 8006494:	f240 80e6 	bls.w	8006664 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006498:	e05d      	b.n	8006556 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	695b      	ldr	r3, [r3, #20]
 80064a0:	f003 0302 	and.w	r3, r3, #2
 80064a4:	2b02      	cmp	r3, #2
 80064a6:	d132      	bne.n	800650e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d918      	bls.n	80064e6 <HAL_SPI_Transmit+0x1fa>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d014      	beq.n	80064e6 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	6812      	ldr	r2, [r2, #0]
 80064c6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064cc:	1d1a      	adds	r2, r3, #4
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80064d8:	b29b      	uxth	r3, r3
 80064da:	3b02      	subs	r3, #2
 80064dc:	b29a      	uxth	r2, r3
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80064e4:	e037      	b.n	8006556 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064ea:	881a      	ldrh	r2, [r3, #0]
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064f4:	1c9a      	adds	r2, r3, #2
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006500:	b29b      	uxth	r3, r3
 8006502:	3b01      	subs	r3, #1
 8006504:	b29a      	uxth	r2, r3
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800650c:	e023      	b.n	8006556 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800650e:	f7fb fbb9 	bl	8001c84 <HAL_GetTick>
 8006512:	4602      	mov	r2, r0
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	1ad3      	subs	r3, r2, r3
 8006518:	683a      	ldr	r2, [r7, #0]
 800651a:	429a      	cmp	r2, r3
 800651c:	d803      	bhi.n	8006526 <HAL_SPI_Transmit+0x23a>
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006524:	d102      	bne.n	800652c <HAL_SPI_Transmit+0x240>
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d114      	bne.n	8006556 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800652c:	68f8      	ldr	r0, [r7, #12]
 800652e:	f000 fc05 	bl	8006d3c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006538:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2201      	movs	r2, #1
 8006546:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2200      	movs	r2, #0
 800654e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006552:	2303      	movs	r3, #3
 8006554:	e0b3      	b.n	80066be <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800655c:	b29b      	uxth	r3, r3
 800655e:	2b00      	cmp	r3, #0
 8006560:	d19b      	bne.n	800649a <HAL_SPI_Transmit+0x1ae>
 8006562:	e086      	b.n	8006672 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	695b      	ldr	r3, [r3, #20]
 800656a:	f003 0302 	and.w	r3, r3, #2
 800656e:	2b02      	cmp	r3, #2
 8006570:	d154      	bne.n	800661c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006578:	b29b      	uxth	r3, r3
 800657a:	2b03      	cmp	r3, #3
 800657c:	d918      	bls.n	80065b0 <HAL_SPI_Transmit+0x2c4>
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006582:	2b40      	cmp	r3, #64	; 0x40
 8006584:	d914      	bls.n	80065b0 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	6812      	ldr	r2, [r2, #0]
 8006590:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006596:	1d1a      	adds	r2, r3, #4
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	3b04      	subs	r3, #4
 80065a6:	b29a      	uxth	r2, r3
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80065ae:	e059      	b.n	8006664 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d917      	bls.n	80065ec <HAL_SPI_Transmit+0x300>
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d013      	beq.n	80065ec <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065c8:	881a      	ldrh	r2, [r3, #0]
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065d2:	1c9a      	adds	r2, r3, #2
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80065de:	b29b      	uxth	r3, r3
 80065e0:	3b02      	subs	r3, #2
 80065e2:	b29a      	uxth	r2, r3
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80065ea:	e03b      	b.n	8006664 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	3320      	adds	r3, #32
 80065f6:	7812      	ldrb	r2, [r2, #0]
 80065f8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065fe:	1c5a      	adds	r2, r3, #1
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800660a:	b29b      	uxth	r3, r3
 800660c:	3b01      	subs	r3, #1
 800660e:	b29a      	uxth	r2, r3
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006616:	e025      	b.n	8006664 <HAL_SPI_Transmit+0x378>
 8006618:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800661c:	f7fb fb32 	bl	8001c84 <HAL_GetTick>
 8006620:	4602      	mov	r2, r0
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	683a      	ldr	r2, [r7, #0]
 8006628:	429a      	cmp	r2, r3
 800662a:	d803      	bhi.n	8006634 <HAL_SPI_Transmit+0x348>
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006632:	d102      	bne.n	800663a <HAL_SPI_Transmit+0x34e>
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d114      	bne.n	8006664 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800663a:	68f8      	ldr	r0, [r7, #12]
 800663c:	f000 fb7e 	bl	8006d3c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006646:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2200      	movs	r2, #0
 800665c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006660:	2303      	movs	r3, #3
 8006662:	e02c      	b.n	80066be <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800666a:	b29b      	uxth	r3, r3
 800666c:	2b00      	cmp	r3, #0
 800666e:	f47f af79 	bne.w	8006564 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	9300      	str	r3, [sp, #0]
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	2200      	movs	r2, #0
 800667a:	2108      	movs	r1, #8
 800667c:	68f8      	ldr	r0, [r7, #12]
 800667e:	f000 fbfd 	bl	8006e7c <SPI_WaitOnFlagUntilTimeout>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d007      	beq.n	8006698 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800668e:	f043 0220 	orr.w	r2, r3, #32
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006698:	68f8      	ldr	r0, [r7, #12]
 800669a:	f000 fb4f 	bl	8006d3c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2201      	movs	r2, #1
 80066a2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2200      	movs	r2, #0
 80066aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d001      	beq.n	80066bc <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	e000      	b.n	80066be <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 80066bc:	2300      	movs	r3, #0
  }
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3718      	adds	r7, #24
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop

080066c8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b08e      	sub	sp, #56	; 0x38
 80066cc:	af02      	add	r7, sp, #8
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	60b9      	str	r1, [r7, #8]
 80066d2:	607a      	str	r2, [r7, #4]
 80066d4:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	3320      	adds	r3, #32
 80066dc:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	3330      	adds	r3, #48	; 0x30
 80066e4:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066ea:	095b      	lsrs	r3, r3, #5
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	3301      	adds	r3, #1
 80066f0:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80066f2:	f7fb fac7 	bl	8001c84 <HAL_GetTick>
 80066f6:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 80066f8:	887b      	ldrh	r3, [r7, #2]
 80066fa:	857b      	strh	r3, [r7, #42]	; 0x2a
  initial_RxXferCount = Size;
 80066fc:	887b      	ldrh	r3, [r7, #2]
 80066fe:	853b      	strh	r3, [r7, #40]	; 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006706:	b2db      	uxtb	r3, r3
 8006708:	2b01      	cmp	r3, #1
 800670a:	d001      	beq.n	8006710 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800670c:	2302      	movs	r3, #2
 800670e:	e310      	b.n	8006d32 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d005      	beq.n	8006722 <HAL_SPI_TransmitReceive+0x5a>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d002      	beq.n	8006722 <HAL_SPI_TransmitReceive+0x5a>
 800671c:	887b      	ldrh	r3, [r7, #2]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d101      	bne.n	8006726 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e305      	b.n	8006d32 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800672c:	2b01      	cmp	r3, #1
 800672e:	d101      	bne.n	8006734 <HAL_SPI_TransmitReceive+0x6c>
 8006730:	2302      	movs	r3, #2
 8006732:	e2fe      	b.n	8006d32 <HAL_SPI_TransmitReceive+0x66a>
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2205      	movs	r2, #5
 8006740:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2200      	movs	r2, #0
 8006748:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	887a      	ldrh	r2, [r7, #2]
 8006756:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	887a      	ldrh	r2, [r7, #2]
 800675e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	68ba      	ldr	r2, [r7, #8]
 8006766:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	887a      	ldrh	r2, [r7, #2]
 800676c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	887a      	ldrh	r2, [r7, #2]
 8006774:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2200      	movs	r2, #0
 800677c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2200      	movs	r2, #0
 8006782:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	68da      	ldr	r2, [r3, #12]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 8006792:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a70      	ldr	r2, [pc, #448]	; (800695c <HAL_SPI_TransmitReceive+0x294>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d009      	beq.n	80067b2 <HAL_SPI_TransmitReceive+0xea>
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a6f      	ldr	r2, [pc, #444]	; (8006960 <HAL_SPI_TransmitReceive+0x298>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d004      	beq.n	80067b2 <HAL_SPI_TransmitReceive+0xea>
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a6d      	ldr	r2, [pc, #436]	; (8006964 <HAL_SPI_TransmitReceive+0x29c>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d102      	bne.n	80067b8 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 80067b2:	2310      	movs	r3, #16
 80067b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067b6:	e001      	b.n	80067bc <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 80067b8:	2308      	movs	r3, #8
 80067ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	685a      	ldr	r2, [r3, #4]
 80067c2:	4b69      	ldr	r3, [pc, #420]	; (8006968 <HAL_SPI_TransmitReceive+0x2a0>)
 80067c4:	4013      	ands	r3, r2
 80067c6:	8879      	ldrh	r1, [r7, #2]
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	6812      	ldr	r2, [r2, #0]
 80067cc:	430b      	orrs	r3, r1
 80067ce:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f042 0201 	orr.w	r2, r2, #1
 80067de:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067e8:	d107      	bne.n	80067fa <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	2b0f      	cmp	r3, #15
 8006800:	f240 80a2 	bls.w	8006948 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8006804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006806:	089b      	lsrs	r3, r3, #2
 8006808:	62fb      	str	r3, [r7, #44]	; 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800680a:	e094      	b.n	8006936 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	695b      	ldr	r3, [r3, #20]
 8006812:	f003 0302 	and.w	r3, r3, #2
 8006816:	2b02      	cmp	r3, #2
 8006818:	d120      	bne.n	800685c <HAL_SPI_TransmitReceive+0x194>
 800681a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800681c:	2b00      	cmp	r3, #0
 800681e:	d01d      	beq.n	800685c <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8006820:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006822:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8006824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006826:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006828:	429a      	cmp	r2, r3
 800682a:	d217      	bcs.n	800685c <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	6812      	ldr	r2, [r2, #0]
 8006836:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800683c:	1d1a      	adds	r2, r3, #4
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006848:	b29b      	uxth	r3, r3
 800684a:	3b01      	subs	r3, #1
 800684c:	b29a      	uxth	r2, r3
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800685a:	857b      	strh	r3, [r7, #42]	; 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	695b      	ldr	r3, [r3, #20]
 8006862:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8006864:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006866:	2b00      	cmp	r3, #0
 8006868:	d065      	beq.n	8006936 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	695b      	ldr	r3, [r3, #20]
 8006870:	f003 0301 	and.w	r3, r3, #1
 8006874:	2b01      	cmp	r3, #1
 8006876:	d118      	bne.n	80068aa <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006880:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006882:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006888:	1d1a      	adds	r2, r3, #4
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006894:	b29b      	uxth	r3, r3
 8006896:	3b01      	subs	r3, #1
 8006898:	b29a      	uxth	r2, r3
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80068a6:	853b      	strh	r3, [r7, #40]	; 0x28
 80068a8:	e045      	b.n	8006936 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80068aa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80068ac:	8bfb      	ldrh	r3, [r7, #30]
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d21d      	bcs.n	80068ee <HAL_SPI_TransmitReceive+0x226>
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d018      	beq.n	80068ee <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80068c6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068cc:	1d1a      	adds	r2, r3, #4
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80068d8:	b29b      	uxth	r3, r3
 80068da:	3b01      	subs	r3, #1
 80068dc:	b29a      	uxth	r2, r3
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80068ea:	853b      	strh	r3, [r7, #40]	; 0x28
 80068ec:	e023      	b.n	8006936 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068ee:	f7fb f9c9 	bl	8001c84 <HAL_GetTick>
 80068f2:	4602      	mov	r2, r0
 80068f4:	69bb      	ldr	r3, [r7, #24]
 80068f6:	1ad3      	subs	r3, r2, r3
 80068f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d803      	bhi.n	8006906 <HAL_SPI_TransmitReceive+0x23e>
 80068fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006904:	d102      	bne.n	800690c <HAL_SPI_TransmitReceive+0x244>
 8006906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006908:	2b00      	cmp	r3, #0
 800690a:	d114      	bne.n	8006936 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800690c:	68f8      	ldr	r0, [r7, #12]
 800690e:	f000 fa15 	bl	8006d3c <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006918:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2201      	movs	r2, #1
 8006926:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2200      	movs	r2, #0
 800692e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

            return HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	e1fd      	b.n	8006d32 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006936:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006938:	2b00      	cmp	r3, #0
 800693a:	f47f af67 	bne.w	800680c <HAL_SPI_TransmitReceive+0x144>
 800693e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006940:	2b00      	cmp	r3, #0
 8006942:	f47f af63 	bne.w	800680c <HAL_SPI_TransmitReceive+0x144>
 8006946:	e1ce      	b.n	8006ce6 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	2b07      	cmp	r3, #7
 800694e:	f240 81c2 	bls.w	8006cd6 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8006952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006954:	085b      	lsrs	r3, r3, #1
 8006956:	62fb      	str	r3, [r7, #44]	; 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006958:	e0c9      	b.n	8006aee <HAL_SPI_TransmitReceive+0x426>
 800695a:	bf00      	nop
 800695c:	40013000 	.word	0x40013000
 8006960:	40003800 	.word	0x40003800
 8006964:	40003c00 	.word	0x40003c00
 8006968:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	695b      	ldr	r3, [r3, #20]
 8006972:	f003 0302 	and.w	r3, r3, #2
 8006976:	2b02      	cmp	r3, #2
 8006978:	d11f      	bne.n	80069ba <HAL_SPI_TransmitReceive+0x2f2>
 800697a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800697c:	2b00      	cmp	r3, #0
 800697e:	d01c      	beq.n	80069ba <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8006980:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006982:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8006984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006986:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006988:	429a      	cmp	r2, r3
 800698a:	d216      	bcs.n	80069ba <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006990:	881a      	ldrh	r2, [r3, #0]
 8006992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006994:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800699a:	1c9a      	adds	r2, r3, #2
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	3b01      	subs	r3, #1
 80069aa:	b29a      	uxth	r2, r3
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80069b8:	857b      	strh	r3, [r7, #42]	; 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	695b      	ldr	r3, [r3, #20]
 80069c0:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80069c2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	f000 8092 	beq.w	8006aee <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	695b      	ldr	r3, [r3, #20]
 80069d0:	f003 0301 	and.w	r3, r3, #1
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d118      	bne.n	8006a0a <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069dc:	6a3a      	ldr	r2, [r7, #32]
 80069de:	8812      	ldrh	r2, [r2, #0]
 80069e0:	b292      	uxth	r2, r2
 80069e2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069e8:	1c9a      	adds	r2, r3, #2
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	3b01      	subs	r3, #1
 80069f8:	b29a      	uxth	r2, r3
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006a06:	853b      	strh	r3, [r7, #40]	; 0x28
 8006a08:	e071      	b.n	8006aee <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006a0a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006a0c:	8bfb      	ldrh	r3, [r7, #30]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d228      	bcs.n	8006a64 <HAL_SPI_TransmitReceive+0x39c>
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d023      	beq.n	8006a64 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a20:	6a3a      	ldr	r2, [r7, #32]
 8006a22:	8812      	ldrh	r2, [r2, #0]
 8006a24:	b292      	uxth	r2, r2
 8006a26:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a2c:	1c9a      	adds	r2, r3, #2
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a36:	6a3a      	ldr	r2, [r7, #32]
 8006a38:	8812      	ldrh	r2, [r2, #0]
 8006a3a:	b292      	uxth	r2, r2
 8006a3c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a42:	1c9a      	adds	r2, r3, #2
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	3b02      	subs	r3, #2
 8006a52:	b29a      	uxth	r2, r3
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006a60:	853b      	strh	r3, [r7, #40]	; 0x28
 8006a62:	e044      	b.n	8006aee <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8006a64:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d11d      	bne.n	8006aa6 <HAL_SPI_TransmitReceive+0x3de>
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d018      	beq.n	8006aa6 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a78:	6a3a      	ldr	r2, [r7, #32]
 8006a7a:	8812      	ldrh	r2, [r2, #0]
 8006a7c:	b292      	uxth	r2, r2
 8006a7e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a84:	1c9a      	adds	r2, r3, #2
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	3b01      	subs	r3, #1
 8006a94:	b29a      	uxth	r2, r3
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006aa2:	853b      	strh	r3, [r7, #40]	; 0x28
 8006aa4:	e023      	b.n	8006aee <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006aa6:	f7fb f8ed 	bl	8001c84 <HAL_GetTick>
 8006aaa:	4602      	mov	r2, r0
 8006aac:	69bb      	ldr	r3, [r7, #24]
 8006aae:	1ad3      	subs	r3, r2, r3
 8006ab0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d803      	bhi.n	8006abe <HAL_SPI_TransmitReceive+0x3f6>
 8006ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006abc:	d102      	bne.n	8006ac4 <HAL_SPI_TransmitReceive+0x3fc>
 8006abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d114      	bne.n	8006aee <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8006ac4:	68f8      	ldr	r0, [r7, #12]
 8006ac6:	f000 f939 	bl	8006d3c <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ad0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2201      	movs	r2, #1
 8006ade:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

            return HAL_TIMEOUT;
 8006aea:	2303      	movs	r3, #3
 8006aec:	e121      	b.n	8006d32 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006aee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	f47f af3b 	bne.w	800696c <HAL_SPI_TransmitReceive+0x2a4>
 8006af6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	f47f af37 	bne.w	800696c <HAL_SPI_TransmitReceive+0x2a4>
 8006afe:	e0f2      	b.n	8006ce6 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	695b      	ldr	r3, [r3, #20]
 8006b06:	f003 0302 	and.w	r3, r3, #2
 8006b0a:	2b02      	cmp	r3, #2
 8006b0c:	d121      	bne.n	8006b52 <HAL_SPI_TransmitReceive+0x48a>
 8006b0e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d01e      	beq.n	8006b52 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8006b14:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006b16:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8006b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b1a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d218      	bcs.n	8006b52 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	3320      	adds	r3, #32
 8006b2a:	7812      	ldrb	r2, [r2, #0]
 8006b2c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b32:	1c5a      	adds	r2, r3, #1
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	3b01      	subs	r3, #1
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006b50:	857b      	strh	r3, [r7, #42]	; 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	695b      	ldr	r3, [r3, #20]
 8006b58:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8006b5a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	f000 80ba 	beq.w	8006cd6 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	695b      	ldr	r3, [r3, #20]
 8006b68:	f003 0301 	and.w	r3, r3, #1
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d11b      	bne.n	8006ba8 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b7c:	7812      	ldrb	r2, [r2, #0]
 8006b7e:	b2d2      	uxtb	r2, r2
 8006b80:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b86:	1c5a      	adds	r2, r3, #1
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	3b01      	subs	r3, #1
 8006b96:	b29a      	uxth	r2, r3
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006ba4:	853b      	strh	r3, [r7, #40]	; 0x28
 8006ba6:	e096      	b.n	8006cd6 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006ba8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006baa:	8bfb      	ldrh	r3, [r7, #30]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d24a      	bcs.n	8006c46 <HAL_SPI_TransmitReceive+0x57e>
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d045      	beq.n	8006c46 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bc6:	7812      	ldrb	r2, [r2, #0]
 8006bc8:	b2d2      	uxtb	r2, r2
 8006bca:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bd0:	1c5a      	adds	r2, r3, #1
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	665a      	str	r2, [r3, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006be2:	7812      	ldrb	r2, [r2, #0]
 8006be4:	b2d2      	uxtb	r2, r2
 8006be6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bec:	1c5a      	adds	r2, r3, #1
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	665a      	str	r2, [r3, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bfe:	7812      	ldrb	r2, [r2, #0]
 8006c00:	b2d2      	uxtb	r2, r2
 8006c02:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c08:	1c5a      	adds	r2, r3, #1
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	665a      	str	r2, [r3, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c1a:	7812      	ldrb	r2, [r2, #0]
 8006c1c:	b2d2      	uxtb	r2, r2
 8006c1e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c24:	1c5a      	adds	r2, r3, #1
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	3b04      	subs	r3, #4
 8006c34:	b29a      	uxth	r2, r3
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006c42:	853b      	strh	r3, [r7, #40]	; 0x28
 8006c44:	e047      	b.n	8006cd6 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8006c46:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006c48:	2b03      	cmp	r3, #3
 8006c4a:	d820      	bhi.n	8006c8e <HAL_SPI_TransmitReceive+0x5c6>
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d01b      	beq.n	8006c8e <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c62:	7812      	ldrb	r2, [r2, #0]
 8006c64:	b2d2      	uxtb	r2, r2
 8006c66:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c6c:	1c5a      	adds	r2, r3, #1
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	3b01      	subs	r3, #1
 8006c7c:	b29a      	uxth	r2, r3
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006c8a:	853b      	strh	r3, [r7, #40]	; 0x28
 8006c8c:	e023      	b.n	8006cd6 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c8e:	f7fa fff9 	bl	8001c84 <HAL_GetTick>
 8006c92:	4602      	mov	r2, r0
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	1ad3      	subs	r3, r2, r3
 8006c98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d803      	bhi.n	8006ca6 <HAL_SPI_TransmitReceive+0x5de>
 8006c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca4:	d102      	bne.n	8006cac <HAL_SPI_TransmitReceive+0x5e4>
 8006ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d114      	bne.n	8006cd6 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8006cac:	68f8      	ldr	r0, [r7, #12]
 8006cae:	f000 f845 	bl	8006d3c <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cb8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

            return HAL_TIMEOUT;
 8006cd2:	2303      	movs	r3, #3
 8006cd4:	e02d      	b.n	8006d32 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006cd6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	f47f af11 	bne.w	8006b00 <HAL_SPI_TransmitReceive+0x438>
 8006cde:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	f47f af0d 	bne.w	8006b00 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8006ce6:	69bb      	ldr	r3, [r7, #24]
 8006ce8:	9300      	str	r3, [sp, #0]
 8006cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cec:	2200      	movs	r2, #0
 8006cee:	2108      	movs	r1, #8
 8006cf0:	68f8      	ldr	r0, [r7, #12]
 8006cf2:	f000 f8c3 	bl	8006e7c <SPI_WaitOnFlagUntilTimeout>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d007      	beq.n	8006d0c <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d02:	f043 0220 	orr.w	r2, r3, #32
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006d0c:	68f8      	ldr	r0, [r7, #12]
 8006d0e:	f000 f815 	bl	8006d3c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2201      	movs	r2, #1
 8006d16:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d001      	beq.n	8006d30 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	e000      	b.n	8006d32 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8006d30:	2300      	movs	r3, #0
  }
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3730      	adds	r7, #48	; 0x30
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop

08006d3c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b085      	sub	sp, #20
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	695b      	ldr	r3, [r3, #20]
 8006d4a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	699a      	ldr	r2, [r3, #24]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f042 0208 	orr.w	r2, r2, #8
 8006d5a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	699a      	ldr	r2, [r3, #24]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f042 0210 	orr.w	r2, r2, #16
 8006d6a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f022 0201 	bic.w	r2, r2, #1
 8006d7a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	6919      	ldr	r1, [r3, #16]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	4b3c      	ldr	r3, [pc, #240]	; (8006e78 <SPI_CloseTransfer+0x13c>)
 8006d88:	400b      	ands	r3, r1
 8006d8a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	689a      	ldr	r2, [r3, #8]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006d9a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	2b04      	cmp	r3, #4
 8006da6:	d014      	beq.n	8006dd2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f003 0320 	and.w	r3, r3, #32
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d00f      	beq.n	8006dd2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006db8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	699a      	ldr	r2, [r3, #24]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f042 0220 	orr.w	r2, r2, #32
 8006dd0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006dd8:	b2db      	uxtb	r3, r3
 8006dda:	2b03      	cmp	r3, #3
 8006ddc:	d014      	beq.n	8006e08 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d00f      	beq.n	8006e08 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dee:	f043 0204 	orr.w	r2, r3, #4
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	699a      	ldr	r2, [r3, #24]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e06:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00f      	beq.n	8006e32 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e18:	f043 0201 	orr.w	r2, r3, #1
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	699a      	ldr	r2, [r3, #24]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e30:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d00f      	beq.n	8006e5c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e42:	f043 0208 	orr.w	r2, r3, #8
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	699a      	ldr	r2, [r3, #24]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e5a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8006e6c:	bf00      	nop
 8006e6e:	3714      	adds	r7, #20
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr
 8006e78:	fffffc90 	.word	0xfffffc90

08006e7c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b084      	sub	sp, #16
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	60f8      	str	r0, [r7, #12]
 8006e84:	60b9      	str	r1, [r7, #8]
 8006e86:	603b      	str	r3, [r7, #0]
 8006e88:	4613      	mov	r3, r2
 8006e8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006e8c:	e010      	b.n	8006eb0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e8e:	f7fa fef9 	bl	8001c84 <HAL_GetTick>
 8006e92:	4602      	mov	r2, r0
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	1ad3      	subs	r3, r2, r3
 8006e98:	683a      	ldr	r2, [r7, #0]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d803      	bhi.n	8006ea6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ea4:	d102      	bne.n	8006eac <SPI_WaitOnFlagUntilTimeout+0x30>
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d101      	bne.n	8006eb0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006eac:	2303      	movs	r3, #3
 8006eae:	e00f      	b.n	8006ed0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	695a      	ldr	r2, [r3, #20]
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	4013      	ands	r3, r2
 8006eba:	68ba      	ldr	r2, [r7, #8]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	bf0c      	ite	eq
 8006ec0:	2301      	moveq	r3, #1
 8006ec2:	2300      	movne	r3, #0
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	79fb      	ldrb	r3, [r7, #7]
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d0df      	beq.n	8006e8e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006ece:	2300      	movs	r3, #0
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3710      	adds	r7, #16
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b085      	sub	sp, #20
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ee4:	095b      	lsrs	r3, r3, #5
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	3301      	adds	r3, #1
 8006ef0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	3307      	adds	r3, #7
 8006ef6:	08db      	lsrs	r3, r3, #3
 8006ef8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	68fa      	ldr	r2, [r7, #12]
 8006efe:	fb02 f303 	mul.w	r3, r2, r3
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3714      	adds	r7, #20
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr

08006f0e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f0e:	b580      	push	{r7, lr}
 8006f10:	b082      	sub	sp, #8
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d101      	bne.n	8006f20 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	e042      	b.n	8006fa6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d106      	bne.n	8006f38 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f7fa f9d4 	bl	80012e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2224      	movs	r2, #36	; 0x24
 8006f3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f022 0201 	bic.w	r2, r2, #1
 8006f4e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d002      	beq.n	8006f5e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f001 fb49 	bl	80085f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 fcda 	bl	8007918 <UART_SetConfig>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d101      	bne.n	8006f6e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e01b      	b.n	8006fa6 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	685a      	ldr	r2, [r3, #4]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f7c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	689a      	ldr	r2, [r3, #8]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f8c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f042 0201 	orr.w	r2, r2, #1
 8006f9c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f001 fbc8 	bl	8008734 <UART_CheckIdleState>
 8006fa4:	4603      	mov	r3, r0
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3708      	adds	r7, #8
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}

08006fae <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	b08a      	sub	sp, #40	; 0x28
 8006fb2:	af02      	add	r7, sp, #8
 8006fb4:	60f8      	str	r0, [r7, #12]
 8006fb6:	60b9      	str	r1, [r7, #8]
 8006fb8:	603b      	str	r3, [r7, #0]
 8006fba:	4613      	mov	r3, r2
 8006fbc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fc4:	2b20      	cmp	r3, #32
 8006fc6:	d17b      	bne.n	80070c0 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d002      	beq.n	8006fd4 <HAL_UART_Transmit+0x26>
 8006fce:	88fb      	ldrh	r3, [r7, #6]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d101      	bne.n	8006fd8 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	e074      	b.n	80070c2 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2221      	movs	r2, #33	; 0x21
 8006fe4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006fe8:	f7fa fe4c 	bl	8001c84 <HAL_GetTick>
 8006fec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	88fa      	ldrh	r2, [r7, #6]
 8006ff2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	88fa      	ldrh	r2, [r7, #6]
 8006ffa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007006:	d108      	bne.n	800701a <HAL_UART_Transmit+0x6c>
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	691b      	ldr	r3, [r3, #16]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d104      	bne.n	800701a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007010:	2300      	movs	r3, #0
 8007012:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	61bb      	str	r3, [r7, #24]
 8007018:	e003      	b.n	8007022 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800701e:	2300      	movs	r3, #0
 8007020:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007022:	e030      	b.n	8007086 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	9300      	str	r3, [sp, #0]
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	2200      	movs	r2, #0
 800702c:	2180      	movs	r1, #128	; 0x80
 800702e:	68f8      	ldr	r0, [r7, #12]
 8007030:	f001 fc2a 	bl	8008888 <UART_WaitOnFlagUntilTimeout>
 8007034:	4603      	mov	r3, r0
 8007036:	2b00      	cmp	r3, #0
 8007038:	d005      	beq.n	8007046 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2220      	movs	r2, #32
 800703e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8007042:	2303      	movs	r3, #3
 8007044:	e03d      	b.n	80070c2 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d10b      	bne.n	8007064 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	881b      	ldrh	r3, [r3, #0]
 8007050:	461a      	mov	r2, r3
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800705a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800705c:	69bb      	ldr	r3, [r7, #24]
 800705e:	3302      	adds	r3, #2
 8007060:	61bb      	str	r3, [r7, #24]
 8007062:	e007      	b.n	8007074 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	781a      	ldrb	r2, [r3, #0]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800706e:	69fb      	ldr	r3, [r7, #28]
 8007070:	3301      	adds	r3, #1
 8007072:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800707a:	b29b      	uxth	r3, r3
 800707c:	3b01      	subs	r3, #1
 800707e:	b29a      	uxth	r2, r3
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800708c:	b29b      	uxth	r3, r3
 800708e:	2b00      	cmp	r3, #0
 8007090:	d1c8      	bne.n	8007024 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	9300      	str	r3, [sp, #0]
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	2200      	movs	r2, #0
 800709a:	2140      	movs	r1, #64	; 0x40
 800709c:	68f8      	ldr	r0, [r7, #12]
 800709e:	f001 fbf3 	bl	8008888 <UART_WaitOnFlagUntilTimeout>
 80070a2:	4603      	mov	r3, r0
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d005      	beq.n	80070b4 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2220      	movs	r2, #32
 80070ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80070b0:	2303      	movs	r3, #3
 80070b2:	e006      	b.n	80070c2 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2220      	movs	r2, #32
 80070b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80070bc:	2300      	movs	r3, #0
 80070be:	e000      	b.n	80070c2 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80070c0:	2302      	movs	r3, #2
  }
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3720      	adds	r7, #32
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}
	...

080070cc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b08a      	sub	sp, #40	; 0x28
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	60f8      	str	r0, [r7, #12]
 80070d4:	60b9      	str	r1, [r7, #8]
 80070d6:	4613      	mov	r3, r2
 80070d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070e0:	2b20      	cmp	r3, #32
 80070e2:	d137      	bne.n	8007154 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d002      	beq.n	80070f0 <HAL_UART_Receive_IT+0x24>
 80070ea:	88fb      	ldrh	r3, [r7, #6]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d101      	bne.n	80070f4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	e030      	b.n	8007156 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2200      	movs	r2, #0
 80070f8:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a18      	ldr	r2, [pc, #96]	; (8007160 <HAL_UART_Receive_IT+0x94>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d01f      	beq.n	8007144 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800710e:	2b00      	cmp	r3, #0
 8007110:	d018      	beq.n	8007144 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	e853 3f00 	ldrex	r3, [r3]
 800711e:	613b      	str	r3, [r7, #16]
   return(result);
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007126:	627b      	str	r3, [r7, #36]	; 0x24
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	461a      	mov	r2, r3
 800712e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007130:	623b      	str	r3, [r7, #32]
 8007132:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007134:	69f9      	ldr	r1, [r7, #28]
 8007136:	6a3a      	ldr	r2, [r7, #32]
 8007138:	e841 2300 	strex	r3, r2, [r1]
 800713c:	61bb      	str	r3, [r7, #24]
   return(result);
 800713e:	69bb      	ldr	r3, [r7, #24]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d1e6      	bne.n	8007112 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007144:	88fb      	ldrh	r3, [r7, #6]
 8007146:	461a      	mov	r2, r3
 8007148:	68b9      	ldr	r1, [r7, #8]
 800714a:	68f8      	ldr	r0, [r7, #12]
 800714c:	f001 fc0a 	bl	8008964 <UART_Start_Receive_IT>
 8007150:	4603      	mov	r3, r0
 8007152:	e000      	b.n	8007156 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007154:	2302      	movs	r3, #2
  }
}
 8007156:	4618      	mov	r0, r3
 8007158:	3728      	adds	r7, #40	; 0x28
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
 800715e:	bf00      	nop
 8007160:	58000c00 	.word	0x58000c00

08007164 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b0ba      	sub	sp, #232	; 0xe8
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	69db      	ldr	r3, [r3, #28]
 8007172:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800718a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800718e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007192:	4013      	ands	r3, r2
 8007194:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007198:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800719c:	2b00      	cmp	r3, #0
 800719e:	d11b      	bne.n	80071d8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80071a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071a4:	f003 0320 	and.w	r3, r3, #32
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d015      	beq.n	80071d8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80071ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071b0:	f003 0320 	and.w	r3, r3, #32
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d105      	bne.n	80071c4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80071b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d009      	beq.n	80071d8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	f000 8377 	beq.w	80078bc <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	4798      	blx	r3
      }
      return;
 80071d6:	e371      	b.n	80078bc <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80071d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071dc:	2b00      	cmp	r3, #0
 80071de:	f000 8123 	beq.w	8007428 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80071e2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80071e6:	4b8d      	ldr	r3, [pc, #564]	; (800741c <HAL_UART_IRQHandler+0x2b8>)
 80071e8:	4013      	ands	r3, r2
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d106      	bne.n	80071fc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80071ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80071f2:	4b8b      	ldr	r3, [pc, #556]	; (8007420 <HAL_UART_IRQHandler+0x2bc>)
 80071f4:	4013      	ands	r3, r2
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	f000 8116 	beq.w	8007428 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80071fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007200:	f003 0301 	and.w	r3, r3, #1
 8007204:	2b00      	cmp	r3, #0
 8007206:	d011      	beq.n	800722c <HAL_UART_IRQHandler+0xc8>
 8007208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800720c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007210:	2b00      	cmp	r3, #0
 8007212:	d00b      	beq.n	800722c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	2201      	movs	r2, #1
 800721a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007222:	f043 0201 	orr.w	r2, r3, #1
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800722c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007230:	f003 0302 	and.w	r3, r3, #2
 8007234:	2b00      	cmp	r3, #0
 8007236:	d011      	beq.n	800725c <HAL_UART_IRQHandler+0xf8>
 8007238:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800723c:	f003 0301 	and.w	r3, r3, #1
 8007240:	2b00      	cmp	r3, #0
 8007242:	d00b      	beq.n	800725c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2202      	movs	r2, #2
 800724a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007252:	f043 0204 	orr.w	r2, r3, #4
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800725c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007260:	f003 0304 	and.w	r3, r3, #4
 8007264:	2b00      	cmp	r3, #0
 8007266:	d011      	beq.n	800728c <HAL_UART_IRQHandler+0x128>
 8007268:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800726c:	f003 0301 	and.w	r3, r3, #1
 8007270:	2b00      	cmp	r3, #0
 8007272:	d00b      	beq.n	800728c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2204      	movs	r2, #4
 800727a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007282:	f043 0202 	orr.w	r2, r3, #2
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800728c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007290:	f003 0308 	and.w	r3, r3, #8
 8007294:	2b00      	cmp	r3, #0
 8007296:	d017      	beq.n	80072c8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800729c:	f003 0320 	and.w	r3, r3, #32
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d105      	bne.n	80072b0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80072a4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80072a8:	4b5c      	ldr	r3, [pc, #368]	; (800741c <HAL_UART_IRQHandler+0x2b8>)
 80072aa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d00b      	beq.n	80072c8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	2208      	movs	r2, #8
 80072b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072be:	f043 0208 	orr.w	r2, r3, #8
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80072c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d012      	beq.n	80072fa <HAL_UART_IRQHandler+0x196>
 80072d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d00c      	beq.n	80072fa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80072e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072f0:	f043 0220 	orr.w	r2, r3, #32
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007300:	2b00      	cmp	r3, #0
 8007302:	f000 82dd 	beq.w	80078c0 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800730a:	f003 0320 	and.w	r3, r3, #32
 800730e:	2b00      	cmp	r3, #0
 8007310:	d013      	beq.n	800733a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007312:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007316:	f003 0320 	and.w	r3, r3, #32
 800731a:	2b00      	cmp	r3, #0
 800731c:	d105      	bne.n	800732a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800731e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007326:	2b00      	cmp	r3, #0
 8007328:	d007      	beq.n	800733a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800732e:	2b00      	cmp	r3, #0
 8007330:	d003      	beq.n	800733a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007340:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	689b      	ldr	r3, [r3, #8]
 800734a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800734e:	2b40      	cmp	r3, #64	; 0x40
 8007350:	d005      	beq.n	800735e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007352:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007356:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800735a:	2b00      	cmp	r3, #0
 800735c:	d054      	beq.n	8007408 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f001 fc22 	bl	8008ba8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800736e:	2b40      	cmp	r3, #64	; 0x40
 8007370:	d146      	bne.n	8007400 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	3308      	adds	r3, #8
 8007378:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800737c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007380:	e853 3f00 	ldrex	r3, [r3]
 8007384:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007388:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800738c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007390:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	3308      	adds	r3, #8
 800739a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800739e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80073a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80073aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80073ae:	e841 2300 	strex	r3, r2, [r1]
 80073b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80073b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d1d9      	bne.n	8007372 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d017      	beq.n	80073f8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073ce:	4a15      	ldr	r2, [pc, #84]	; (8007424 <HAL_UART_IRQHandler+0x2c0>)
 80073d0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073d8:	4618      	mov	r0, r3
 80073da:	f7fb f8c5 	bl	8002568 <HAL_DMA_Abort_IT>
 80073de:	4603      	mov	r3, r0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d019      	beq.n	8007418 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073ec:	687a      	ldr	r2, [r7, #4]
 80073ee:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80073f2:	4610      	mov	r0, r2
 80073f4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073f6:	e00f      	b.n	8007418 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 fa77 	bl	80078ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073fe:	e00b      	b.n	8007418 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 fa73 	bl	80078ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007406:	e007      	b.n	8007418 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 fa6f 	bl	80078ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8007416:	e253      	b.n	80078c0 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007418:	bf00      	nop
    return;
 800741a:	e251      	b.n	80078c0 <HAL_UART_IRQHandler+0x75c>
 800741c:	10000001 	.word	0x10000001
 8007420:	04000120 	.word	0x04000120
 8007424:	08008c75 	.word	0x08008c75

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800742c:	2b01      	cmp	r3, #1
 800742e:	f040 81e7 	bne.w	8007800 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007436:	f003 0310 	and.w	r3, r3, #16
 800743a:	2b00      	cmp	r3, #0
 800743c:	f000 81e0 	beq.w	8007800 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007444:	f003 0310 	and.w	r3, r3, #16
 8007448:	2b00      	cmp	r3, #0
 800744a:	f000 81d9 	beq.w	8007800 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	2210      	movs	r2, #16
 8007454:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007460:	2b40      	cmp	r3, #64	; 0x40
 8007462:	f040 8151 	bne.w	8007708 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a96      	ldr	r2, [pc, #600]	; (80076c8 <HAL_UART_IRQHandler+0x564>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d068      	beq.n	8007546 <HAL_UART_IRQHandler+0x3e2>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a93      	ldr	r2, [pc, #588]	; (80076cc <HAL_UART_IRQHandler+0x568>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d061      	beq.n	8007546 <HAL_UART_IRQHandler+0x3e2>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a91      	ldr	r2, [pc, #580]	; (80076d0 <HAL_UART_IRQHandler+0x56c>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d05a      	beq.n	8007546 <HAL_UART_IRQHandler+0x3e2>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a8e      	ldr	r2, [pc, #568]	; (80076d4 <HAL_UART_IRQHandler+0x570>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d053      	beq.n	8007546 <HAL_UART_IRQHandler+0x3e2>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a8c      	ldr	r2, [pc, #560]	; (80076d8 <HAL_UART_IRQHandler+0x574>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d04c      	beq.n	8007546 <HAL_UART_IRQHandler+0x3e2>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a89      	ldr	r2, [pc, #548]	; (80076dc <HAL_UART_IRQHandler+0x578>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d045      	beq.n	8007546 <HAL_UART_IRQHandler+0x3e2>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a87      	ldr	r2, [pc, #540]	; (80076e0 <HAL_UART_IRQHandler+0x57c>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d03e      	beq.n	8007546 <HAL_UART_IRQHandler+0x3e2>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a84      	ldr	r2, [pc, #528]	; (80076e4 <HAL_UART_IRQHandler+0x580>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d037      	beq.n	8007546 <HAL_UART_IRQHandler+0x3e2>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a82      	ldr	r2, [pc, #520]	; (80076e8 <HAL_UART_IRQHandler+0x584>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d030      	beq.n	8007546 <HAL_UART_IRQHandler+0x3e2>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a7f      	ldr	r2, [pc, #508]	; (80076ec <HAL_UART_IRQHandler+0x588>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d029      	beq.n	8007546 <HAL_UART_IRQHandler+0x3e2>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a7d      	ldr	r2, [pc, #500]	; (80076f0 <HAL_UART_IRQHandler+0x58c>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d022      	beq.n	8007546 <HAL_UART_IRQHandler+0x3e2>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a7a      	ldr	r2, [pc, #488]	; (80076f4 <HAL_UART_IRQHandler+0x590>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d01b      	beq.n	8007546 <HAL_UART_IRQHandler+0x3e2>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a78      	ldr	r2, [pc, #480]	; (80076f8 <HAL_UART_IRQHandler+0x594>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d014      	beq.n	8007546 <HAL_UART_IRQHandler+0x3e2>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a75      	ldr	r2, [pc, #468]	; (80076fc <HAL_UART_IRQHandler+0x598>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d00d      	beq.n	8007546 <HAL_UART_IRQHandler+0x3e2>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a73      	ldr	r2, [pc, #460]	; (8007700 <HAL_UART_IRQHandler+0x59c>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d006      	beq.n	8007546 <HAL_UART_IRQHandler+0x3e2>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a70      	ldr	r2, [pc, #448]	; (8007704 <HAL_UART_IRQHandler+0x5a0>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d106      	bne.n	8007554 <HAL_UART_IRQHandler+0x3f0>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	b29b      	uxth	r3, r3
 8007552:	e005      	b.n	8007560 <HAL_UART_IRQHandler+0x3fc>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	b29b      	uxth	r3, r3
 8007560:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007564:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007568:	2b00      	cmp	r3, #0
 800756a:	f000 81ab 	beq.w	80078c4 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007574:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007578:	429a      	cmp	r2, r3
 800757a:	f080 81a3 	bcs.w	80078c4 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007584:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800758e:	69db      	ldr	r3, [r3, #28]
 8007590:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007594:	f000 8087 	beq.w	80076a6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80075a4:	e853 3f00 	ldrex	r3, [r3]
 80075a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80075ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80075b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	461a      	mov	r2, r3
 80075be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80075c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80075c6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80075ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80075d2:	e841 2300 	strex	r3, r2, [r1]
 80075d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80075da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d1da      	bne.n	8007598 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	3308      	adds	r3, #8
 80075e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075ec:	e853 3f00 	ldrex	r3, [r3]
 80075f0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80075f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80075f4:	f023 0301 	bic.w	r3, r3, #1
 80075f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	3308      	adds	r3, #8
 8007602:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007606:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800760a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800760e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007612:	e841 2300 	strex	r3, r2, [r1]
 8007616:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007618:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800761a:	2b00      	cmp	r3, #0
 800761c:	d1e1      	bne.n	80075e2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	3308      	adds	r3, #8
 8007624:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007626:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007628:	e853 3f00 	ldrex	r3, [r3]
 800762c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800762e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007630:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007634:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	3308      	adds	r3, #8
 800763e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007642:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007644:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007646:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007648:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800764a:	e841 2300 	strex	r3, r2, [r1]
 800764e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007650:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007652:	2b00      	cmp	r3, #0
 8007654:	d1e3      	bne.n	800761e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2220      	movs	r2, #32
 800765a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800766a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800766c:	e853 3f00 	ldrex	r3, [r3]
 8007670:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007672:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007674:	f023 0310 	bic.w	r3, r3, #16
 8007678:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	461a      	mov	r2, r3
 8007682:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007686:	65bb      	str	r3, [r7, #88]	; 0x58
 8007688:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800768a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800768c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800768e:	e841 2300 	strex	r3, r2, [r1]
 8007692:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007694:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007696:	2b00      	cmp	r3, #0
 8007698:	d1e4      	bne.n	8007664 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076a0:	4618      	mov	r0, r3
 80076a2:	f7fa fc43 	bl	8001f2c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2202      	movs	r2, #2
 80076aa:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	1ad3      	subs	r3, r2, r3
 80076bc:	b29b      	uxth	r3, r3
 80076be:	4619      	mov	r1, r3
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 f91d 	bl	8007900 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80076c6:	e0fd      	b.n	80078c4 <HAL_UART_IRQHandler+0x760>
 80076c8:	40020010 	.word	0x40020010
 80076cc:	40020028 	.word	0x40020028
 80076d0:	40020040 	.word	0x40020040
 80076d4:	40020058 	.word	0x40020058
 80076d8:	40020070 	.word	0x40020070
 80076dc:	40020088 	.word	0x40020088
 80076e0:	400200a0 	.word	0x400200a0
 80076e4:	400200b8 	.word	0x400200b8
 80076e8:	40020410 	.word	0x40020410
 80076ec:	40020428 	.word	0x40020428
 80076f0:	40020440 	.word	0x40020440
 80076f4:	40020458 	.word	0x40020458
 80076f8:	40020470 	.word	0x40020470
 80076fc:	40020488 	.word	0x40020488
 8007700:	400204a0 	.word	0x400204a0
 8007704:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007714:	b29b      	uxth	r3, r3
 8007716:	1ad3      	subs	r3, r2, r3
 8007718:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007722:	b29b      	uxth	r3, r3
 8007724:	2b00      	cmp	r3, #0
 8007726:	f000 80cf 	beq.w	80078c8 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800772a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800772e:	2b00      	cmp	r3, #0
 8007730:	f000 80ca 	beq.w	80078c8 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800773a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800773c:	e853 3f00 	ldrex	r3, [r3]
 8007740:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007744:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007748:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	461a      	mov	r2, r3
 8007752:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007756:	647b      	str	r3, [r7, #68]	; 0x44
 8007758:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800775a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800775c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800775e:	e841 2300 	strex	r3, r2, [r1]
 8007762:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007766:	2b00      	cmp	r3, #0
 8007768:	d1e4      	bne.n	8007734 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	3308      	adds	r3, #8
 8007770:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007774:	e853 3f00 	ldrex	r3, [r3]
 8007778:	623b      	str	r3, [r7, #32]
   return(result);
 800777a:	6a3a      	ldr	r2, [r7, #32]
 800777c:	4b55      	ldr	r3, [pc, #340]	; (80078d4 <HAL_UART_IRQHandler+0x770>)
 800777e:	4013      	ands	r3, r2
 8007780:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	3308      	adds	r3, #8
 800778a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800778e:	633a      	str	r2, [r7, #48]	; 0x30
 8007790:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007792:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007794:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007796:	e841 2300 	strex	r3, r2, [r1]
 800779a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800779c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d1e3      	bne.n	800776a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2220      	movs	r2, #32
 80077a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	e853 3f00 	ldrex	r3, [r3]
 80077c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f023 0310 	bic.w	r3, r3, #16
 80077ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	461a      	mov	r2, r3
 80077d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80077d8:	61fb      	str	r3, [r7, #28]
 80077da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077dc:	69b9      	ldr	r1, [r7, #24]
 80077de:	69fa      	ldr	r2, [r7, #28]
 80077e0:	e841 2300 	strex	r3, r2, [r1]
 80077e4:	617b      	str	r3, [r7, #20]
   return(result);
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d1e4      	bne.n	80077b6 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2202      	movs	r2, #2
 80077f0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80077f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80077f6:	4619      	mov	r1, r3
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 f881 	bl	8007900 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80077fe:	e063      	b.n	80078c8 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007804:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007808:	2b00      	cmp	r3, #0
 800780a:	d00e      	beq.n	800782a <HAL_UART_IRQHandler+0x6c6>
 800780c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007810:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007814:	2b00      	cmp	r3, #0
 8007816:	d008      	beq.n	800782a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007820:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f001 ff84 	bl	8009730 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007828:	e051      	b.n	80078ce <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800782a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800782e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007832:	2b00      	cmp	r3, #0
 8007834:	d014      	beq.n	8007860 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007836:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800783a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800783e:	2b00      	cmp	r3, #0
 8007840:	d105      	bne.n	800784e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007842:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007846:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800784a:	2b00      	cmp	r3, #0
 800784c:	d008      	beq.n	8007860 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007852:	2b00      	cmp	r3, #0
 8007854:	d03a      	beq.n	80078cc <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	4798      	blx	r3
    }
    return;
 800785e:	e035      	b.n	80078cc <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007860:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007868:	2b00      	cmp	r3, #0
 800786a:	d009      	beq.n	8007880 <HAL_UART_IRQHandler+0x71c>
 800786c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007874:	2b00      	cmp	r3, #0
 8007876:	d003      	beq.n	8007880 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f001 fa11 	bl	8008ca0 <UART_EndTransmit_IT>
    return;
 800787e:	e026      	b.n	80078ce <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007880:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007884:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007888:	2b00      	cmp	r3, #0
 800788a:	d009      	beq.n	80078a0 <HAL_UART_IRQHandler+0x73c>
 800788c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007890:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007894:	2b00      	cmp	r3, #0
 8007896:	d003      	beq.n	80078a0 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f001 ff5d 	bl	8009758 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800789e:	e016      	b.n	80078ce <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80078a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d010      	beq.n	80078ce <HAL_UART_IRQHandler+0x76a>
 80078ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	da0c      	bge.n	80078ce <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f001 ff45 	bl	8009744 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80078ba:	e008      	b.n	80078ce <HAL_UART_IRQHandler+0x76a>
      return;
 80078bc:	bf00      	nop
 80078be:	e006      	b.n	80078ce <HAL_UART_IRQHandler+0x76a>
    return;
 80078c0:	bf00      	nop
 80078c2:	e004      	b.n	80078ce <HAL_UART_IRQHandler+0x76a>
      return;
 80078c4:	bf00      	nop
 80078c6:	e002      	b.n	80078ce <HAL_UART_IRQHandler+0x76a>
      return;
 80078c8:	bf00      	nop
 80078ca:	e000      	b.n	80078ce <HAL_UART_IRQHandler+0x76a>
    return;
 80078cc:	bf00      	nop
  }
}
 80078ce:	37e8      	adds	r7, #232	; 0xe8
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	effffffe 	.word	0xeffffffe

080078d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80078e0:	bf00      	nop
 80078e2:	370c      	adds	r7, #12
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80078f4:	bf00      	nop
 80078f6:	370c      	adds	r7, #12
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007900:	b480      	push	{r7}
 8007902:	b083      	sub	sp, #12
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	460b      	mov	r3, r1
 800790a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800790c:	bf00      	nop
 800790e:	370c      	adds	r7, #12
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr

08007918 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800791c:	b092      	sub	sp, #72	; 0x48
 800791e:	af00      	add	r7, sp, #0
 8007920:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007922:	2300      	movs	r3, #0
 8007924:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	689a      	ldr	r2, [r3, #8]
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	691b      	ldr	r3, [r3, #16]
 8007930:	431a      	orrs	r2, r3
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	695b      	ldr	r3, [r3, #20]
 8007936:	431a      	orrs	r2, r3
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	69db      	ldr	r3, [r3, #28]
 800793c:	4313      	orrs	r3, r2
 800793e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	4bbe      	ldr	r3, [pc, #760]	; (8007c40 <UART_SetConfig+0x328>)
 8007948:	4013      	ands	r3, r2
 800794a:	697a      	ldr	r2, [r7, #20]
 800794c:	6812      	ldr	r2, [r2, #0]
 800794e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007950:	430b      	orrs	r3, r1
 8007952:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	68da      	ldr	r2, [r3, #12]
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	430a      	orrs	r2, r1
 8007968:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	699b      	ldr	r3, [r3, #24]
 800796e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4ab3      	ldr	r2, [pc, #716]	; (8007c44 <UART_SetConfig+0x32c>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d004      	beq.n	8007984 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	6a1b      	ldr	r3, [r3, #32]
 800797e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007980:	4313      	orrs	r3, r2
 8007982:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	689a      	ldr	r2, [r3, #8]
 800798a:	4baf      	ldr	r3, [pc, #700]	; (8007c48 <UART_SetConfig+0x330>)
 800798c:	4013      	ands	r3, r2
 800798e:	697a      	ldr	r2, [r7, #20]
 8007990:	6812      	ldr	r2, [r2, #0]
 8007992:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007994:	430b      	orrs	r3, r1
 8007996:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800799e:	f023 010f 	bic.w	r1, r3, #15
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	430a      	orrs	r2, r1
 80079ac:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4aa6      	ldr	r2, [pc, #664]	; (8007c4c <UART_SetConfig+0x334>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d177      	bne.n	8007aa8 <UART_SetConfig+0x190>
 80079b8:	4ba5      	ldr	r3, [pc, #660]	; (8007c50 <UART_SetConfig+0x338>)
 80079ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80079c0:	2b28      	cmp	r3, #40	; 0x28
 80079c2:	d86d      	bhi.n	8007aa0 <UART_SetConfig+0x188>
 80079c4:	a201      	add	r2, pc, #4	; (adr r2, 80079cc <UART_SetConfig+0xb4>)
 80079c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ca:	bf00      	nop
 80079cc:	08007a71 	.word	0x08007a71
 80079d0:	08007aa1 	.word	0x08007aa1
 80079d4:	08007aa1 	.word	0x08007aa1
 80079d8:	08007aa1 	.word	0x08007aa1
 80079dc:	08007aa1 	.word	0x08007aa1
 80079e0:	08007aa1 	.word	0x08007aa1
 80079e4:	08007aa1 	.word	0x08007aa1
 80079e8:	08007aa1 	.word	0x08007aa1
 80079ec:	08007a79 	.word	0x08007a79
 80079f0:	08007aa1 	.word	0x08007aa1
 80079f4:	08007aa1 	.word	0x08007aa1
 80079f8:	08007aa1 	.word	0x08007aa1
 80079fc:	08007aa1 	.word	0x08007aa1
 8007a00:	08007aa1 	.word	0x08007aa1
 8007a04:	08007aa1 	.word	0x08007aa1
 8007a08:	08007aa1 	.word	0x08007aa1
 8007a0c:	08007a81 	.word	0x08007a81
 8007a10:	08007aa1 	.word	0x08007aa1
 8007a14:	08007aa1 	.word	0x08007aa1
 8007a18:	08007aa1 	.word	0x08007aa1
 8007a1c:	08007aa1 	.word	0x08007aa1
 8007a20:	08007aa1 	.word	0x08007aa1
 8007a24:	08007aa1 	.word	0x08007aa1
 8007a28:	08007aa1 	.word	0x08007aa1
 8007a2c:	08007a89 	.word	0x08007a89
 8007a30:	08007aa1 	.word	0x08007aa1
 8007a34:	08007aa1 	.word	0x08007aa1
 8007a38:	08007aa1 	.word	0x08007aa1
 8007a3c:	08007aa1 	.word	0x08007aa1
 8007a40:	08007aa1 	.word	0x08007aa1
 8007a44:	08007aa1 	.word	0x08007aa1
 8007a48:	08007aa1 	.word	0x08007aa1
 8007a4c:	08007a91 	.word	0x08007a91
 8007a50:	08007aa1 	.word	0x08007aa1
 8007a54:	08007aa1 	.word	0x08007aa1
 8007a58:	08007aa1 	.word	0x08007aa1
 8007a5c:	08007aa1 	.word	0x08007aa1
 8007a60:	08007aa1 	.word	0x08007aa1
 8007a64:	08007aa1 	.word	0x08007aa1
 8007a68:	08007aa1 	.word	0x08007aa1
 8007a6c:	08007a99 	.word	0x08007a99
 8007a70:	2301      	movs	r3, #1
 8007a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a76:	e326      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007a78:	2304      	movs	r3, #4
 8007a7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a7e:	e322      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007a80:	2308      	movs	r3, #8
 8007a82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a86:	e31e      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007a88:	2310      	movs	r3, #16
 8007a8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a8e:	e31a      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007a90:	2320      	movs	r3, #32
 8007a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a96:	e316      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007a98:	2340      	movs	r3, #64	; 0x40
 8007a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a9e:	e312      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007aa0:	2380      	movs	r3, #128	; 0x80
 8007aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aa6:	e30e      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a69      	ldr	r2, [pc, #420]	; (8007c54 <UART_SetConfig+0x33c>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d130      	bne.n	8007b14 <UART_SetConfig+0x1fc>
 8007ab2:	4b67      	ldr	r3, [pc, #412]	; (8007c50 <UART_SetConfig+0x338>)
 8007ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ab6:	f003 0307 	and.w	r3, r3, #7
 8007aba:	2b05      	cmp	r3, #5
 8007abc:	d826      	bhi.n	8007b0c <UART_SetConfig+0x1f4>
 8007abe:	a201      	add	r2, pc, #4	; (adr r2, 8007ac4 <UART_SetConfig+0x1ac>)
 8007ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac4:	08007add 	.word	0x08007add
 8007ac8:	08007ae5 	.word	0x08007ae5
 8007acc:	08007aed 	.word	0x08007aed
 8007ad0:	08007af5 	.word	0x08007af5
 8007ad4:	08007afd 	.word	0x08007afd
 8007ad8:	08007b05 	.word	0x08007b05
 8007adc:	2300      	movs	r3, #0
 8007ade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ae2:	e2f0      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007ae4:	2304      	movs	r3, #4
 8007ae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aea:	e2ec      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007aec:	2308      	movs	r3, #8
 8007aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007af2:	e2e8      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007af4:	2310      	movs	r3, #16
 8007af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007afa:	e2e4      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007afc:	2320      	movs	r3, #32
 8007afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b02:	e2e0      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007b04:	2340      	movs	r3, #64	; 0x40
 8007b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b0a:	e2dc      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007b0c:	2380      	movs	r3, #128	; 0x80
 8007b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b12:	e2d8      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a4f      	ldr	r2, [pc, #316]	; (8007c58 <UART_SetConfig+0x340>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d130      	bne.n	8007b80 <UART_SetConfig+0x268>
 8007b1e:	4b4c      	ldr	r3, [pc, #304]	; (8007c50 <UART_SetConfig+0x338>)
 8007b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b22:	f003 0307 	and.w	r3, r3, #7
 8007b26:	2b05      	cmp	r3, #5
 8007b28:	d826      	bhi.n	8007b78 <UART_SetConfig+0x260>
 8007b2a:	a201      	add	r2, pc, #4	; (adr r2, 8007b30 <UART_SetConfig+0x218>)
 8007b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b30:	08007b49 	.word	0x08007b49
 8007b34:	08007b51 	.word	0x08007b51
 8007b38:	08007b59 	.word	0x08007b59
 8007b3c:	08007b61 	.word	0x08007b61
 8007b40:	08007b69 	.word	0x08007b69
 8007b44:	08007b71 	.word	0x08007b71
 8007b48:	2300      	movs	r3, #0
 8007b4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b4e:	e2ba      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007b50:	2304      	movs	r3, #4
 8007b52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b56:	e2b6      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007b58:	2308      	movs	r3, #8
 8007b5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b5e:	e2b2      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007b60:	2310      	movs	r3, #16
 8007b62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b66:	e2ae      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007b68:	2320      	movs	r3, #32
 8007b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b6e:	e2aa      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007b70:	2340      	movs	r3, #64	; 0x40
 8007b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b76:	e2a6      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007b78:	2380      	movs	r3, #128	; 0x80
 8007b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b7e:	e2a2      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a35      	ldr	r2, [pc, #212]	; (8007c5c <UART_SetConfig+0x344>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d130      	bne.n	8007bec <UART_SetConfig+0x2d4>
 8007b8a:	4b31      	ldr	r3, [pc, #196]	; (8007c50 <UART_SetConfig+0x338>)
 8007b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b8e:	f003 0307 	and.w	r3, r3, #7
 8007b92:	2b05      	cmp	r3, #5
 8007b94:	d826      	bhi.n	8007be4 <UART_SetConfig+0x2cc>
 8007b96:	a201      	add	r2, pc, #4	; (adr r2, 8007b9c <UART_SetConfig+0x284>)
 8007b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b9c:	08007bb5 	.word	0x08007bb5
 8007ba0:	08007bbd 	.word	0x08007bbd
 8007ba4:	08007bc5 	.word	0x08007bc5
 8007ba8:	08007bcd 	.word	0x08007bcd
 8007bac:	08007bd5 	.word	0x08007bd5
 8007bb0:	08007bdd 	.word	0x08007bdd
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bba:	e284      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007bbc:	2304      	movs	r3, #4
 8007bbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bc2:	e280      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007bc4:	2308      	movs	r3, #8
 8007bc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bca:	e27c      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007bcc:	2310      	movs	r3, #16
 8007bce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bd2:	e278      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007bd4:	2320      	movs	r3, #32
 8007bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bda:	e274      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007bdc:	2340      	movs	r3, #64	; 0x40
 8007bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007be2:	e270      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007be4:	2380      	movs	r3, #128	; 0x80
 8007be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bea:	e26c      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a1b      	ldr	r2, [pc, #108]	; (8007c60 <UART_SetConfig+0x348>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d142      	bne.n	8007c7c <UART_SetConfig+0x364>
 8007bf6:	4b16      	ldr	r3, [pc, #88]	; (8007c50 <UART_SetConfig+0x338>)
 8007bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bfa:	f003 0307 	and.w	r3, r3, #7
 8007bfe:	2b05      	cmp	r3, #5
 8007c00:	d838      	bhi.n	8007c74 <UART_SetConfig+0x35c>
 8007c02:	a201      	add	r2, pc, #4	; (adr r2, 8007c08 <UART_SetConfig+0x2f0>)
 8007c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c08:	08007c21 	.word	0x08007c21
 8007c0c:	08007c29 	.word	0x08007c29
 8007c10:	08007c31 	.word	0x08007c31
 8007c14:	08007c39 	.word	0x08007c39
 8007c18:	08007c65 	.word	0x08007c65
 8007c1c:	08007c6d 	.word	0x08007c6d
 8007c20:	2300      	movs	r3, #0
 8007c22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c26:	e24e      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007c28:	2304      	movs	r3, #4
 8007c2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c2e:	e24a      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007c30:	2308      	movs	r3, #8
 8007c32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c36:	e246      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007c38:	2310      	movs	r3, #16
 8007c3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c3e:	e242      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007c40:	cfff69f3 	.word	0xcfff69f3
 8007c44:	58000c00 	.word	0x58000c00
 8007c48:	11fff4ff 	.word	0x11fff4ff
 8007c4c:	40011000 	.word	0x40011000
 8007c50:	58024400 	.word	0x58024400
 8007c54:	40004400 	.word	0x40004400
 8007c58:	40004800 	.word	0x40004800
 8007c5c:	40004c00 	.word	0x40004c00
 8007c60:	40005000 	.word	0x40005000
 8007c64:	2320      	movs	r3, #32
 8007c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c6a:	e22c      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007c6c:	2340      	movs	r3, #64	; 0x40
 8007c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c72:	e228      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007c74:	2380      	movs	r3, #128	; 0x80
 8007c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c7a:	e224      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4ab1      	ldr	r2, [pc, #708]	; (8007f48 <UART_SetConfig+0x630>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d176      	bne.n	8007d74 <UART_SetConfig+0x45c>
 8007c86:	4bb1      	ldr	r3, [pc, #708]	; (8007f4c <UART_SetConfig+0x634>)
 8007c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c8e:	2b28      	cmp	r3, #40	; 0x28
 8007c90:	d86c      	bhi.n	8007d6c <UART_SetConfig+0x454>
 8007c92:	a201      	add	r2, pc, #4	; (adr r2, 8007c98 <UART_SetConfig+0x380>)
 8007c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c98:	08007d3d 	.word	0x08007d3d
 8007c9c:	08007d6d 	.word	0x08007d6d
 8007ca0:	08007d6d 	.word	0x08007d6d
 8007ca4:	08007d6d 	.word	0x08007d6d
 8007ca8:	08007d6d 	.word	0x08007d6d
 8007cac:	08007d6d 	.word	0x08007d6d
 8007cb0:	08007d6d 	.word	0x08007d6d
 8007cb4:	08007d6d 	.word	0x08007d6d
 8007cb8:	08007d45 	.word	0x08007d45
 8007cbc:	08007d6d 	.word	0x08007d6d
 8007cc0:	08007d6d 	.word	0x08007d6d
 8007cc4:	08007d6d 	.word	0x08007d6d
 8007cc8:	08007d6d 	.word	0x08007d6d
 8007ccc:	08007d6d 	.word	0x08007d6d
 8007cd0:	08007d6d 	.word	0x08007d6d
 8007cd4:	08007d6d 	.word	0x08007d6d
 8007cd8:	08007d4d 	.word	0x08007d4d
 8007cdc:	08007d6d 	.word	0x08007d6d
 8007ce0:	08007d6d 	.word	0x08007d6d
 8007ce4:	08007d6d 	.word	0x08007d6d
 8007ce8:	08007d6d 	.word	0x08007d6d
 8007cec:	08007d6d 	.word	0x08007d6d
 8007cf0:	08007d6d 	.word	0x08007d6d
 8007cf4:	08007d6d 	.word	0x08007d6d
 8007cf8:	08007d55 	.word	0x08007d55
 8007cfc:	08007d6d 	.word	0x08007d6d
 8007d00:	08007d6d 	.word	0x08007d6d
 8007d04:	08007d6d 	.word	0x08007d6d
 8007d08:	08007d6d 	.word	0x08007d6d
 8007d0c:	08007d6d 	.word	0x08007d6d
 8007d10:	08007d6d 	.word	0x08007d6d
 8007d14:	08007d6d 	.word	0x08007d6d
 8007d18:	08007d5d 	.word	0x08007d5d
 8007d1c:	08007d6d 	.word	0x08007d6d
 8007d20:	08007d6d 	.word	0x08007d6d
 8007d24:	08007d6d 	.word	0x08007d6d
 8007d28:	08007d6d 	.word	0x08007d6d
 8007d2c:	08007d6d 	.word	0x08007d6d
 8007d30:	08007d6d 	.word	0x08007d6d
 8007d34:	08007d6d 	.word	0x08007d6d
 8007d38:	08007d65 	.word	0x08007d65
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d42:	e1c0      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007d44:	2304      	movs	r3, #4
 8007d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d4a:	e1bc      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007d4c:	2308      	movs	r3, #8
 8007d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d52:	e1b8      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007d54:	2310      	movs	r3, #16
 8007d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d5a:	e1b4      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007d5c:	2320      	movs	r3, #32
 8007d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d62:	e1b0      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007d64:	2340      	movs	r3, #64	; 0x40
 8007d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d6a:	e1ac      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007d6c:	2380      	movs	r3, #128	; 0x80
 8007d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d72:	e1a8      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a75      	ldr	r2, [pc, #468]	; (8007f50 <UART_SetConfig+0x638>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d130      	bne.n	8007de0 <UART_SetConfig+0x4c8>
 8007d7e:	4b73      	ldr	r3, [pc, #460]	; (8007f4c <UART_SetConfig+0x634>)
 8007d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d82:	f003 0307 	and.w	r3, r3, #7
 8007d86:	2b05      	cmp	r3, #5
 8007d88:	d826      	bhi.n	8007dd8 <UART_SetConfig+0x4c0>
 8007d8a:	a201      	add	r2, pc, #4	; (adr r2, 8007d90 <UART_SetConfig+0x478>)
 8007d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d90:	08007da9 	.word	0x08007da9
 8007d94:	08007db1 	.word	0x08007db1
 8007d98:	08007db9 	.word	0x08007db9
 8007d9c:	08007dc1 	.word	0x08007dc1
 8007da0:	08007dc9 	.word	0x08007dc9
 8007da4:	08007dd1 	.word	0x08007dd1
 8007da8:	2300      	movs	r3, #0
 8007daa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dae:	e18a      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007db0:	2304      	movs	r3, #4
 8007db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007db6:	e186      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007db8:	2308      	movs	r3, #8
 8007dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dbe:	e182      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007dc0:	2310      	movs	r3, #16
 8007dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dc6:	e17e      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007dc8:	2320      	movs	r3, #32
 8007dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dce:	e17a      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007dd0:	2340      	movs	r3, #64	; 0x40
 8007dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dd6:	e176      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007dd8:	2380      	movs	r3, #128	; 0x80
 8007dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dde:	e172      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a5b      	ldr	r2, [pc, #364]	; (8007f54 <UART_SetConfig+0x63c>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d130      	bne.n	8007e4c <UART_SetConfig+0x534>
 8007dea:	4b58      	ldr	r3, [pc, #352]	; (8007f4c <UART_SetConfig+0x634>)
 8007dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dee:	f003 0307 	and.w	r3, r3, #7
 8007df2:	2b05      	cmp	r3, #5
 8007df4:	d826      	bhi.n	8007e44 <UART_SetConfig+0x52c>
 8007df6:	a201      	add	r2, pc, #4	; (adr r2, 8007dfc <UART_SetConfig+0x4e4>)
 8007df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dfc:	08007e15 	.word	0x08007e15
 8007e00:	08007e1d 	.word	0x08007e1d
 8007e04:	08007e25 	.word	0x08007e25
 8007e08:	08007e2d 	.word	0x08007e2d
 8007e0c:	08007e35 	.word	0x08007e35
 8007e10:	08007e3d 	.word	0x08007e3d
 8007e14:	2300      	movs	r3, #0
 8007e16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e1a:	e154      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007e1c:	2304      	movs	r3, #4
 8007e1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e22:	e150      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007e24:	2308      	movs	r3, #8
 8007e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e2a:	e14c      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007e2c:	2310      	movs	r3, #16
 8007e2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e32:	e148      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007e34:	2320      	movs	r3, #32
 8007e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e3a:	e144      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007e3c:	2340      	movs	r3, #64	; 0x40
 8007e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e42:	e140      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007e44:	2380      	movs	r3, #128	; 0x80
 8007e46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e4a:	e13c      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a41      	ldr	r2, [pc, #260]	; (8007f58 <UART_SetConfig+0x640>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	f040 8082 	bne.w	8007f5c <UART_SetConfig+0x644>
 8007e58:	4b3c      	ldr	r3, [pc, #240]	; (8007f4c <UART_SetConfig+0x634>)
 8007e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e60:	2b28      	cmp	r3, #40	; 0x28
 8007e62:	d86d      	bhi.n	8007f40 <UART_SetConfig+0x628>
 8007e64:	a201      	add	r2, pc, #4	; (adr r2, 8007e6c <UART_SetConfig+0x554>)
 8007e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e6a:	bf00      	nop
 8007e6c:	08007f11 	.word	0x08007f11
 8007e70:	08007f41 	.word	0x08007f41
 8007e74:	08007f41 	.word	0x08007f41
 8007e78:	08007f41 	.word	0x08007f41
 8007e7c:	08007f41 	.word	0x08007f41
 8007e80:	08007f41 	.word	0x08007f41
 8007e84:	08007f41 	.word	0x08007f41
 8007e88:	08007f41 	.word	0x08007f41
 8007e8c:	08007f19 	.word	0x08007f19
 8007e90:	08007f41 	.word	0x08007f41
 8007e94:	08007f41 	.word	0x08007f41
 8007e98:	08007f41 	.word	0x08007f41
 8007e9c:	08007f41 	.word	0x08007f41
 8007ea0:	08007f41 	.word	0x08007f41
 8007ea4:	08007f41 	.word	0x08007f41
 8007ea8:	08007f41 	.word	0x08007f41
 8007eac:	08007f21 	.word	0x08007f21
 8007eb0:	08007f41 	.word	0x08007f41
 8007eb4:	08007f41 	.word	0x08007f41
 8007eb8:	08007f41 	.word	0x08007f41
 8007ebc:	08007f41 	.word	0x08007f41
 8007ec0:	08007f41 	.word	0x08007f41
 8007ec4:	08007f41 	.word	0x08007f41
 8007ec8:	08007f41 	.word	0x08007f41
 8007ecc:	08007f29 	.word	0x08007f29
 8007ed0:	08007f41 	.word	0x08007f41
 8007ed4:	08007f41 	.word	0x08007f41
 8007ed8:	08007f41 	.word	0x08007f41
 8007edc:	08007f41 	.word	0x08007f41
 8007ee0:	08007f41 	.word	0x08007f41
 8007ee4:	08007f41 	.word	0x08007f41
 8007ee8:	08007f41 	.word	0x08007f41
 8007eec:	08007f31 	.word	0x08007f31
 8007ef0:	08007f41 	.word	0x08007f41
 8007ef4:	08007f41 	.word	0x08007f41
 8007ef8:	08007f41 	.word	0x08007f41
 8007efc:	08007f41 	.word	0x08007f41
 8007f00:	08007f41 	.word	0x08007f41
 8007f04:	08007f41 	.word	0x08007f41
 8007f08:	08007f41 	.word	0x08007f41
 8007f0c:	08007f39 	.word	0x08007f39
 8007f10:	2301      	movs	r3, #1
 8007f12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f16:	e0d6      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007f18:	2304      	movs	r3, #4
 8007f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f1e:	e0d2      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007f20:	2308      	movs	r3, #8
 8007f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f26:	e0ce      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007f28:	2310      	movs	r3, #16
 8007f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f2e:	e0ca      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007f30:	2320      	movs	r3, #32
 8007f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f36:	e0c6      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007f38:	2340      	movs	r3, #64	; 0x40
 8007f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f3e:	e0c2      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007f40:	2380      	movs	r3, #128	; 0x80
 8007f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f46:	e0be      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8007f48:	40011400 	.word	0x40011400
 8007f4c:	58024400 	.word	0x58024400
 8007f50:	40007800 	.word	0x40007800
 8007f54:	40007c00 	.word	0x40007c00
 8007f58:	40011800 	.word	0x40011800
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4aad      	ldr	r2, [pc, #692]	; (8008218 <UART_SetConfig+0x900>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d176      	bne.n	8008054 <UART_SetConfig+0x73c>
 8007f66:	4bad      	ldr	r3, [pc, #692]	; (800821c <UART_SetConfig+0x904>)
 8007f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f6e:	2b28      	cmp	r3, #40	; 0x28
 8007f70:	d86c      	bhi.n	800804c <UART_SetConfig+0x734>
 8007f72:	a201      	add	r2, pc, #4	; (adr r2, 8007f78 <UART_SetConfig+0x660>)
 8007f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f78:	0800801d 	.word	0x0800801d
 8007f7c:	0800804d 	.word	0x0800804d
 8007f80:	0800804d 	.word	0x0800804d
 8007f84:	0800804d 	.word	0x0800804d
 8007f88:	0800804d 	.word	0x0800804d
 8007f8c:	0800804d 	.word	0x0800804d
 8007f90:	0800804d 	.word	0x0800804d
 8007f94:	0800804d 	.word	0x0800804d
 8007f98:	08008025 	.word	0x08008025
 8007f9c:	0800804d 	.word	0x0800804d
 8007fa0:	0800804d 	.word	0x0800804d
 8007fa4:	0800804d 	.word	0x0800804d
 8007fa8:	0800804d 	.word	0x0800804d
 8007fac:	0800804d 	.word	0x0800804d
 8007fb0:	0800804d 	.word	0x0800804d
 8007fb4:	0800804d 	.word	0x0800804d
 8007fb8:	0800802d 	.word	0x0800802d
 8007fbc:	0800804d 	.word	0x0800804d
 8007fc0:	0800804d 	.word	0x0800804d
 8007fc4:	0800804d 	.word	0x0800804d
 8007fc8:	0800804d 	.word	0x0800804d
 8007fcc:	0800804d 	.word	0x0800804d
 8007fd0:	0800804d 	.word	0x0800804d
 8007fd4:	0800804d 	.word	0x0800804d
 8007fd8:	08008035 	.word	0x08008035
 8007fdc:	0800804d 	.word	0x0800804d
 8007fe0:	0800804d 	.word	0x0800804d
 8007fe4:	0800804d 	.word	0x0800804d
 8007fe8:	0800804d 	.word	0x0800804d
 8007fec:	0800804d 	.word	0x0800804d
 8007ff0:	0800804d 	.word	0x0800804d
 8007ff4:	0800804d 	.word	0x0800804d
 8007ff8:	0800803d 	.word	0x0800803d
 8007ffc:	0800804d 	.word	0x0800804d
 8008000:	0800804d 	.word	0x0800804d
 8008004:	0800804d 	.word	0x0800804d
 8008008:	0800804d 	.word	0x0800804d
 800800c:	0800804d 	.word	0x0800804d
 8008010:	0800804d 	.word	0x0800804d
 8008014:	0800804d 	.word	0x0800804d
 8008018:	08008045 	.word	0x08008045
 800801c:	2301      	movs	r3, #1
 800801e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008022:	e050      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8008024:	2304      	movs	r3, #4
 8008026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800802a:	e04c      	b.n	80080c6 <UART_SetConfig+0x7ae>
 800802c:	2308      	movs	r3, #8
 800802e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008032:	e048      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8008034:	2310      	movs	r3, #16
 8008036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800803a:	e044      	b.n	80080c6 <UART_SetConfig+0x7ae>
 800803c:	2320      	movs	r3, #32
 800803e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008042:	e040      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8008044:	2340      	movs	r3, #64	; 0x40
 8008046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800804a:	e03c      	b.n	80080c6 <UART_SetConfig+0x7ae>
 800804c:	2380      	movs	r3, #128	; 0x80
 800804e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008052:	e038      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a71      	ldr	r2, [pc, #452]	; (8008220 <UART_SetConfig+0x908>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d130      	bne.n	80080c0 <UART_SetConfig+0x7a8>
 800805e:	4b6f      	ldr	r3, [pc, #444]	; (800821c <UART_SetConfig+0x904>)
 8008060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008062:	f003 0307 	and.w	r3, r3, #7
 8008066:	2b05      	cmp	r3, #5
 8008068:	d826      	bhi.n	80080b8 <UART_SetConfig+0x7a0>
 800806a:	a201      	add	r2, pc, #4	; (adr r2, 8008070 <UART_SetConfig+0x758>)
 800806c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008070:	08008089 	.word	0x08008089
 8008074:	08008091 	.word	0x08008091
 8008078:	08008099 	.word	0x08008099
 800807c:	080080a1 	.word	0x080080a1
 8008080:	080080a9 	.word	0x080080a9
 8008084:	080080b1 	.word	0x080080b1
 8008088:	2302      	movs	r3, #2
 800808a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800808e:	e01a      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8008090:	2304      	movs	r3, #4
 8008092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008096:	e016      	b.n	80080c6 <UART_SetConfig+0x7ae>
 8008098:	2308      	movs	r3, #8
 800809a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800809e:	e012      	b.n	80080c6 <UART_SetConfig+0x7ae>
 80080a0:	2310      	movs	r3, #16
 80080a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080a6:	e00e      	b.n	80080c6 <UART_SetConfig+0x7ae>
 80080a8:	2320      	movs	r3, #32
 80080aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080ae:	e00a      	b.n	80080c6 <UART_SetConfig+0x7ae>
 80080b0:	2340      	movs	r3, #64	; 0x40
 80080b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080b6:	e006      	b.n	80080c6 <UART_SetConfig+0x7ae>
 80080b8:	2380      	movs	r3, #128	; 0x80
 80080ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080be:	e002      	b.n	80080c6 <UART_SetConfig+0x7ae>
 80080c0:	2380      	movs	r3, #128	; 0x80
 80080c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a55      	ldr	r2, [pc, #340]	; (8008220 <UART_SetConfig+0x908>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	f040 80f8 	bne.w	80082c2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80080d2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80080d6:	2b20      	cmp	r3, #32
 80080d8:	dc46      	bgt.n	8008168 <UART_SetConfig+0x850>
 80080da:	2b02      	cmp	r3, #2
 80080dc:	db75      	blt.n	80081ca <UART_SetConfig+0x8b2>
 80080de:	3b02      	subs	r3, #2
 80080e0:	2b1e      	cmp	r3, #30
 80080e2:	d872      	bhi.n	80081ca <UART_SetConfig+0x8b2>
 80080e4:	a201      	add	r2, pc, #4	; (adr r2, 80080ec <UART_SetConfig+0x7d4>)
 80080e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ea:	bf00      	nop
 80080ec:	0800816f 	.word	0x0800816f
 80080f0:	080081cb 	.word	0x080081cb
 80080f4:	08008177 	.word	0x08008177
 80080f8:	080081cb 	.word	0x080081cb
 80080fc:	080081cb 	.word	0x080081cb
 8008100:	080081cb 	.word	0x080081cb
 8008104:	08008187 	.word	0x08008187
 8008108:	080081cb 	.word	0x080081cb
 800810c:	080081cb 	.word	0x080081cb
 8008110:	080081cb 	.word	0x080081cb
 8008114:	080081cb 	.word	0x080081cb
 8008118:	080081cb 	.word	0x080081cb
 800811c:	080081cb 	.word	0x080081cb
 8008120:	080081cb 	.word	0x080081cb
 8008124:	08008197 	.word	0x08008197
 8008128:	080081cb 	.word	0x080081cb
 800812c:	080081cb 	.word	0x080081cb
 8008130:	080081cb 	.word	0x080081cb
 8008134:	080081cb 	.word	0x080081cb
 8008138:	080081cb 	.word	0x080081cb
 800813c:	080081cb 	.word	0x080081cb
 8008140:	080081cb 	.word	0x080081cb
 8008144:	080081cb 	.word	0x080081cb
 8008148:	080081cb 	.word	0x080081cb
 800814c:	080081cb 	.word	0x080081cb
 8008150:	080081cb 	.word	0x080081cb
 8008154:	080081cb 	.word	0x080081cb
 8008158:	080081cb 	.word	0x080081cb
 800815c:	080081cb 	.word	0x080081cb
 8008160:	080081cb 	.word	0x080081cb
 8008164:	080081bd 	.word	0x080081bd
 8008168:	2b40      	cmp	r3, #64	; 0x40
 800816a:	d02a      	beq.n	80081c2 <UART_SetConfig+0x8aa>
 800816c:	e02d      	b.n	80081ca <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800816e:	f7fd fb77 	bl	8005860 <HAL_RCCEx_GetD3PCLK1Freq>
 8008172:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008174:	e02f      	b.n	80081d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008176:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800817a:	4618      	mov	r0, r3
 800817c:	f7fd fb86 	bl	800588c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008182:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008184:	e027      	b.n	80081d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008186:	f107 0318 	add.w	r3, r7, #24
 800818a:	4618      	mov	r0, r3
 800818c:	f7fd fcd2 	bl	8005b34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008190:	69fb      	ldr	r3, [r7, #28]
 8008192:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008194:	e01f      	b.n	80081d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008196:	4b21      	ldr	r3, [pc, #132]	; (800821c <UART_SetConfig+0x904>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f003 0320 	and.w	r3, r3, #32
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d009      	beq.n	80081b6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80081a2:	4b1e      	ldr	r3, [pc, #120]	; (800821c <UART_SetConfig+0x904>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	08db      	lsrs	r3, r3, #3
 80081a8:	f003 0303 	and.w	r3, r3, #3
 80081ac:	4a1d      	ldr	r2, [pc, #116]	; (8008224 <UART_SetConfig+0x90c>)
 80081ae:	fa22 f303 	lsr.w	r3, r2, r3
 80081b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80081b4:	e00f      	b.n	80081d6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80081b6:	4b1b      	ldr	r3, [pc, #108]	; (8008224 <UART_SetConfig+0x90c>)
 80081b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081ba:	e00c      	b.n	80081d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80081bc:	4b1a      	ldr	r3, [pc, #104]	; (8008228 <UART_SetConfig+0x910>)
 80081be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081c0:	e009      	b.n	80081d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081c8:	e005      	b.n	80081d6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80081ca:	2300      	movs	r3, #0
 80081cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80081ce:	2301      	movs	r3, #1
 80081d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80081d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80081d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081d8:	2b00      	cmp	r3, #0
 80081da:	f000 81ee 	beq.w	80085ba <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e2:	4a12      	ldr	r2, [pc, #72]	; (800822c <UART_SetConfig+0x914>)
 80081e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081e8:	461a      	mov	r2, r3
 80081ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80081f0:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	685a      	ldr	r2, [r3, #4]
 80081f6:	4613      	mov	r3, r2
 80081f8:	005b      	lsls	r3, r3, #1
 80081fa:	4413      	add	r3, r2
 80081fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081fe:	429a      	cmp	r2, r3
 8008200:	d305      	bcc.n	800820e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008208:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800820a:	429a      	cmp	r2, r3
 800820c:	d910      	bls.n	8008230 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800820e:	2301      	movs	r3, #1
 8008210:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008214:	e1d1      	b.n	80085ba <UART_SetConfig+0xca2>
 8008216:	bf00      	nop
 8008218:	40011c00 	.word	0x40011c00
 800821c:	58024400 	.word	0x58024400
 8008220:	58000c00 	.word	0x58000c00
 8008224:	03d09000 	.word	0x03d09000
 8008228:	003d0900 	.word	0x003d0900
 800822c:	0800aa40 	.word	0x0800aa40
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008232:	2200      	movs	r2, #0
 8008234:	60bb      	str	r3, [r7, #8]
 8008236:	60fa      	str	r2, [r7, #12]
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800823c:	4ac0      	ldr	r2, [pc, #768]	; (8008540 <UART_SetConfig+0xc28>)
 800823e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008242:	b29b      	uxth	r3, r3
 8008244:	2200      	movs	r2, #0
 8008246:	603b      	str	r3, [r7, #0]
 8008248:	607a      	str	r2, [r7, #4]
 800824a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800824e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008252:	f7f8 f8b5 	bl	80003c0 <__aeabi_uldivmod>
 8008256:	4602      	mov	r2, r0
 8008258:	460b      	mov	r3, r1
 800825a:	4610      	mov	r0, r2
 800825c:	4619      	mov	r1, r3
 800825e:	f04f 0200 	mov.w	r2, #0
 8008262:	f04f 0300 	mov.w	r3, #0
 8008266:	020b      	lsls	r3, r1, #8
 8008268:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800826c:	0202      	lsls	r2, r0, #8
 800826e:	6979      	ldr	r1, [r7, #20]
 8008270:	6849      	ldr	r1, [r1, #4]
 8008272:	0849      	lsrs	r1, r1, #1
 8008274:	2000      	movs	r0, #0
 8008276:	460c      	mov	r4, r1
 8008278:	4605      	mov	r5, r0
 800827a:	eb12 0804 	adds.w	r8, r2, r4
 800827e:	eb43 0905 	adc.w	r9, r3, r5
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	2200      	movs	r2, #0
 8008288:	469a      	mov	sl, r3
 800828a:	4693      	mov	fp, r2
 800828c:	4652      	mov	r2, sl
 800828e:	465b      	mov	r3, fp
 8008290:	4640      	mov	r0, r8
 8008292:	4649      	mov	r1, r9
 8008294:	f7f8 f894 	bl	80003c0 <__aeabi_uldivmod>
 8008298:	4602      	mov	r2, r0
 800829a:	460b      	mov	r3, r1
 800829c:	4613      	mov	r3, r2
 800829e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80082a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80082a6:	d308      	bcc.n	80082ba <UART_SetConfig+0x9a2>
 80082a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082ae:	d204      	bcs.n	80082ba <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082b6:	60da      	str	r2, [r3, #12]
 80082b8:	e17f      	b.n	80085ba <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80082ba:	2301      	movs	r3, #1
 80082bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80082c0:	e17b      	b.n	80085ba <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	69db      	ldr	r3, [r3, #28]
 80082c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082ca:	f040 80bd 	bne.w	8008448 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80082ce:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80082d2:	2b20      	cmp	r3, #32
 80082d4:	dc48      	bgt.n	8008368 <UART_SetConfig+0xa50>
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	db7b      	blt.n	80083d2 <UART_SetConfig+0xaba>
 80082da:	2b20      	cmp	r3, #32
 80082dc:	d879      	bhi.n	80083d2 <UART_SetConfig+0xaba>
 80082de:	a201      	add	r2, pc, #4	; (adr r2, 80082e4 <UART_SetConfig+0x9cc>)
 80082e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082e4:	0800836f 	.word	0x0800836f
 80082e8:	08008377 	.word	0x08008377
 80082ec:	080083d3 	.word	0x080083d3
 80082f0:	080083d3 	.word	0x080083d3
 80082f4:	0800837f 	.word	0x0800837f
 80082f8:	080083d3 	.word	0x080083d3
 80082fc:	080083d3 	.word	0x080083d3
 8008300:	080083d3 	.word	0x080083d3
 8008304:	0800838f 	.word	0x0800838f
 8008308:	080083d3 	.word	0x080083d3
 800830c:	080083d3 	.word	0x080083d3
 8008310:	080083d3 	.word	0x080083d3
 8008314:	080083d3 	.word	0x080083d3
 8008318:	080083d3 	.word	0x080083d3
 800831c:	080083d3 	.word	0x080083d3
 8008320:	080083d3 	.word	0x080083d3
 8008324:	0800839f 	.word	0x0800839f
 8008328:	080083d3 	.word	0x080083d3
 800832c:	080083d3 	.word	0x080083d3
 8008330:	080083d3 	.word	0x080083d3
 8008334:	080083d3 	.word	0x080083d3
 8008338:	080083d3 	.word	0x080083d3
 800833c:	080083d3 	.word	0x080083d3
 8008340:	080083d3 	.word	0x080083d3
 8008344:	080083d3 	.word	0x080083d3
 8008348:	080083d3 	.word	0x080083d3
 800834c:	080083d3 	.word	0x080083d3
 8008350:	080083d3 	.word	0x080083d3
 8008354:	080083d3 	.word	0x080083d3
 8008358:	080083d3 	.word	0x080083d3
 800835c:	080083d3 	.word	0x080083d3
 8008360:	080083d3 	.word	0x080083d3
 8008364:	080083c5 	.word	0x080083c5
 8008368:	2b40      	cmp	r3, #64	; 0x40
 800836a:	d02e      	beq.n	80083ca <UART_SetConfig+0xab2>
 800836c:	e031      	b.n	80083d2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800836e:	f7fc f8ab 	bl	80044c8 <HAL_RCC_GetPCLK1Freq>
 8008372:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008374:	e033      	b.n	80083de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008376:	f7fc f8bd 	bl	80044f4 <HAL_RCC_GetPCLK2Freq>
 800837a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800837c:	e02f      	b.n	80083de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800837e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008382:	4618      	mov	r0, r3
 8008384:	f7fd fa82 	bl	800588c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800838a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800838c:	e027      	b.n	80083de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800838e:	f107 0318 	add.w	r3, r7, #24
 8008392:	4618      	mov	r0, r3
 8008394:	f7fd fbce 	bl	8005b34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008398:	69fb      	ldr	r3, [r7, #28]
 800839a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800839c:	e01f      	b.n	80083de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800839e:	4b69      	ldr	r3, [pc, #420]	; (8008544 <UART_SetConfig+0xc2c>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f003 0320 	and.w	r3, r3, #32
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d009      	beq.n	80083be <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80083aa:	4b66      	ldr	r3, [pc, #408]	; (8008544 <UART_SetConfig+0xc2c>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	08db      	lsrs	r3, r3, #3
 80083b0:	f003 0303 	and.w	r3, r3, #3
 80083b4:	4a64      	ldr	r2, [pc, #400]	; (8008548 <UART_SetConfig+0xc30>)
 80083b6:	fa22 f303 	lsr.w	r3, r2, r3
 80083ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80083bc:	e00f      	b.n	80083de <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80083be:	4b62      	ldr	r3, [pc, #392]	; (8008548 <UART_SetConfig+0xc30>)
 80083c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083c2:	e00c      	b.n	80083de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80083c4:	4b61      	ldr	r3, [pc, #388]	; (800854c <UART_SetConfig+0xc34>)
 80083c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083c8:	e009      	b.n	80083de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083d0:	e005      	b.n	80083de <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80083d2:	2300      	movs	r3, #0
 80083d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80083d6:	2301      	movs	r3, #1
 80083d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80083dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80083de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	f000 80ea 	beq.w	80085ba <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ea:	4a55      	ldr	r2, [pc, #340]	; (8008540 <UART_SetConfig+0xc28>)
 80083ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083f0:	461a      	mov	r2, r3
 80083f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80083f8:	005a      	lsls	r2, r3, #1
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	085b      	lsrs	r3, r3, #1
 8008400:	441a      	add	r2, r3
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	fbb2 f3f3 	udiv	r3, r2, r3
 800840a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800840c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800840e:	2b0f      	cmp	r3, #15
 8008410:	d916      	bls.n	8008440 <UART_SetConfig+0xb28>
 8008412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008418:	d212      	bcs.n	8008440 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800841a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800841c:	b29b      	uxth	r3, r3
 800841e:	f023 030f 	bic.w	r3, r3, #15
 8008422:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008426:	085b      	lsrs	r3, r3, #1
 8008428:	b29b      	uxth	r3, r3
 800842a:	f003 0307 	and.w	r3, r3, #7
 800842e:	b29a      	uxth	r2, r3
 8008430:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008432:	4313      	orrs	r3, r2
 8008434:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800843c:	60da      	str	r2, [r3, #12]
 800843e:	e0bc      	b.n	80085ba <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008440:	2301      	movs	r3, #1
 8008442:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008446:	e0b8      	b.n	80085ba <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008448:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800844c:	2b20      	cmp	r3, #32
 800844e:	dc4b      	bgt.n	80084e8 <UART_SetConfig+0xbd0>
 8008450:	2b00      	cmp	r3, #0
 8008452:	f2c0 8087 	blt.w	8008564 <UART_SetConfig+0xc4c>
 8008456:	2b20      	cmp	r3, #32
 8008458:	f200 8084 	bhi.w	8008564 <UART_SetConfig+0xc4c>
 800845c:	a201      	add	r2, pc, #4	; (adr r2, 8008464 <UART_SetConfig+0xb4c>)
 800845e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008462:	bf00      	nop
 8008464:	080084ef 	.word	0x080084ef
 8008468:	080084f7 	.word	0x080084f7
 800846c:	08008565 	.word	0x08008565
 8008470:	08008565 	.word	0x08008565
 8008474:	080084ff 	.word	0x080084ff
 8008478:	08008565 	.word	0x08008565
 800847c:	08008565 	.word	0x08008565
 8008480:	08008565 	.word	0x08008565
 8008484:	0800850f 	.word	0x0800850f
 8008488:	08008565 	.word	0x08008565
 800848c:	08008565 	.word	0x08008565
 8008490:	08008565 	.word	0x08008565
 8008494:	08008565 	.word	0x08008565
 8008498:	08008565 	.word	0x08008565
 800849c:	08008565 	.word	0x08008565
 80084a0:	08008565 	.word	0x08008565
 80084a4:	0800851f 	.word	0x0800851f
 80084a8:	08008565 	.word	0x08008565
 80084ac:	08008565 	.word	0x08008565
 80084b0:	08008565 	.word	0x08008565
 80084b4:	08008565 	.word	0x08008565
 80084b8:	08008565 	.word	0x08008565
 80084bc:	08008565 	.word	0x08008565
 80084c0:	08008565 	.word	0x08008565
 80084c4:	08008565 	.word	0x08008565
 80084c8:	08008565 	.word	0x08008565
 80084cc:	08008565 	.word	0x08008565
 80084d0:	08008565 	.word	0x08008565
 80084d4:	08008565 	.word	0x08008565
 80084d8:	08008565 	.word	0x08008565
 80084dc:	08008565 	.word	0x08008565
 80084e0:	08008565 	.word	0x08008565
 80084e4:	08008557 	.word	0x08008557
 80084e8:	2b40      	cmp	r3, #64	; 0x40
 80084ea:	d037      	beq.n	800855c <UART_SetConfig+0xc44>
 80084ec:	e03a      	b.n	8008564 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084ee:	f7fb ffeb 	bl	80044c8 <HAL_RCC_GetPCLK1Freq>
 80084f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80084f4:	e03c      	b.n	8008570 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80084f6:	f7fb fffd 	bl	80044f4 <HAL_RCC_GetPCLK2Freq>
 80084fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80084fc:	e038      	b.n	8008570 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008502:	4618      	mov	r0, r3
 8008504:	f7fd f9c2 	bl	800588c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800850a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800850c:	e030      	b.n	8008570 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800850e:	f107 0318 	add.w	r3, r7, #24
 8008512:	4618      	mov	r0, r3
 8008514:	f7fd fb0e 	bl	8005b34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008518:	69fb      	ldr	r3, [r7, #28]
 800851a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800851c:	e028      	b.n	8008570 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800851e:	4b09      	ldr	r3, [pc, #36]	; (8008544 <UART_SetConfig+0xc2c>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f003 0320 	and.w	r3, r3, #32
 8008526:	2b00      	cmp	r3, #0
 8008528:	d012      	beq.n	8008550 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800852a:	4b06      	ldr	r3, [pc, #24]	; (8008544 <UART_SetConfig+0xc2c>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	08db      	lsrs	r3, r3, #3
 8008530:	f003 0303 	and.w	r3, r3, #3
 8008534:	4a04      	ldr	r2, [pc, #16]	; (8008548 <UART_SetConfig+0xc30>)
 8008536:	fa22 f303 	lsr.w	r3, r2, r3
 800853a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800853c:	e018      	b.n	8008570 <UART_SetConfig+0xc58>
 800853e:	bf00      	nop
 8008540:	0800aa40 	.word	0x0800aa40
 8008544:	58024400 	.word	0x58024400
 8008548:	03d09000 	.word	0x03d09000
 800854c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8008550:	4b24      	ldr	r3, [pc, #144]	; (80085e4 <UART_SetConfig+0xccc>)
 8008552:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008554:	e00c      	b.n	8008570 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008556:	4b24      	ldr	r3, [pc, #144]	; (80085e8 <UART_SetConfig+0xcd0>)
 8008558:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800855a:	e009      	b.n	8008570 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800855c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008560:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008562:	e005      	b.n	8008570 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8008564:	2300      	movs	r3, #0
 8008566:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008568:	2301      	movs	r3, #1
 800856a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800856e:	bf00      	nop
    }

    if (pclk != 0U)
 8008570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008572:	2b00      	cmp	r3, #0
 8008574:	d021      	beq.n	80085ba <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800857a:	4a1c      	ldr	r2, [pc, #112]	; (80085ec <UART_SetConfig+0xcd4>)
 800857c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008580:	461a      	mov	r2, r3
 8008582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008584:	fbb3 f2f2 	udiv	r2, r3, r2
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	085b      	lsrs	r3, r3, #1
 800858e:	441a      	add	r2, r3
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	fbb2 f3f3 	udiv	r3, r2, r3
 8008598:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800859a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800859c:	2b0f      	cmp	r3, #15
 800859e:	d909      	bls.n	80085b4 <UART_SetConfig+0xc9c>
 80085a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085a6:	d205      	bcs.n	80085b4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80085a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085aa:	b29a      	uxth	r2, r3
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	60da      	str	r2, [r3, #12]
 80085b2:	e002      	b.n	80085ba <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80085b4:	2301      	movs	r3, #1
 80085b6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	2201      	movs	r2, #1
 80085be:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	2201      	movs	r2, #1
 80085c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	2200      	movs	r2, #0
 80085ce:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	2200      	movs	r2, #0
 80085d4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80085d6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3748      	adds	r7, #72	; 0x48
 80085de:	46bd      	mov	sp, r7
 80085e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80085e4:	03d09000 	.word	0x03d09000
 80085e8:	003d0900 	.word	0x003d0900
 80085ec:	0800aa40 	.word	0x0800aa40

080085f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085fc:	f003 0308 	and.w	r3, r3, #8
 8008600:	2b00      	cmp	r3, #0
 8008602:	d00a      	beq.n	800861a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	430a      	orrs	r2, r1
 8008618:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800861e:	f003 0301 	and.w	r3, r3, #1
 8008622:	2b00      	cmp	r3, #0
 8008624:	d00a      	beq.n	800863c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	430a      	orrs	r2, r1
 800863a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008640:	f003 0302 	and.w	r3, r3, #2
 8008644:	2b00      	cmp	r3, #0
 8008646:	d00a      	beq.n	800865e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	430a      	orrs	r2, r1
 800865c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008662:	f003 0304 	and.w	r3, r3, #4
 8008666:	2b00      	cmp	r3, #0
 8008668:	d00a      	beq.n	8008680 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	430a      	orrs	r2, r1
 800867e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008684:	f003 0310 	and.w	r3, r3, #16
 8008688:	2b00      	cmp	r3, #0
 800868a:	d00a      	beq.n	80086a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	689b      	ldr	r3, [r3, #8]
 8008692:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	430a      	orrs	r2, r1
 80086a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086a6:	f003 0320 	and.w	r3, r3, #32
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d00a      	beq.n	80086c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	689b      	ldr	r3, [r3, #8]
 80086b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	430a      	orrs	r2, r1
 80086c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d01a      	beq.n	8008706 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	430a      	orrs	r2, r1
 80086e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086ee:	d10a      	bne.n	8008706 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	430a      	orrs	r2, r1
 8008704:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800870a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800870e:	2b00      	cmp	r3, #0
 8008710:	d00a      	beq.n	8008728 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	430a      	orrs	r2, r1
 8008726:	605a      	str	r2, [r3, #4]
  }
}
 8008728:	bf00      	nop
 800872a:	370c      	adds	r7, #12
 800872c:	46bd      	mov	sp, r7
 800872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008732:	4770      	bx	lr

08008734 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b098      	sub	sp, #96	; 0x60
 8008738:	af02      	add	r7, sp, #8
 800873a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2200      	movs	r2, #0
 8008740:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008744:	f7f9 fa9e 	bl	8001c84 <HAL_GetTick>
 8008748:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f003 0308 	and.w	r3, r3, #8
 8008754:	2b08      	cmp	r3, #8
 8008756:	d12f      	bne.n	80087b8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008758:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800875c:	9300      	str	r3, [sp, #0]
 800875e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008760:	2200      	movs	r2, #0
 8008762:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 f88e 	bl	8008888 <UART_WaitOnFlagUntilTimeout>
 800876c:	4603      	mov	r3, r0
 800876e:	2b00      	cmp	r3, #0
 8008770:	d022      	beq.n	80087b8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800877a:	e853 3f00 	ldrex	r3, [r3]
 800877e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008782:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008786:	653b      	str	r3, [r7, #80]	; 0x50
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	461a      	mov	r2, r3
 800878e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008790:	647b      	str	r3, [r7, #68]	; 0x44
 8008792:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008794:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008796:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008798:	e841 2300 	strex	r3, r2, [r1]
 800879c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800879e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d1e6      	bne.n	8008772 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2220      	movs	r2, #32
 80087a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2200      	movs	r2, #0
 80087b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087b4:	2303      	movs	r3, #3
 80087b6:	e063      	b.n	8008880 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f003 0304 	and.w	r3, r3, #4
 80087c2:	2b04      	cmp	r3, #4
 80087c4:	d149      	bne.n	800885a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80087ca:	9300      	str	r3, [sp, #0]
 80087cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087ce:	2200      	movs	r2, #0
 80087d0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f000 f857 	bl	8008888 <UART_WaitOnFlagUntilTimeout>
 80087da:	4603      	mov	r3, r0
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d03c      	beq.n	800885a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e8:	e853 3f00 	ldrex	r3, [r3]
 80087ec:	623b      	str	r3, [r7, #32]
   return(result);
 80087ee:	6a3b      	ldr	r3, [r7, #32]
 80087f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80087f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	461a      	mov	r2, r3
 80087fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087fe:	633b      	str	r3, [r7, #48]	; 0x30
 8008800:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008802:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008806:	e841 2300 	strex	r3, r2, [r1]
 800880a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800880c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800880e:	2b00      	cmp	r3, #0
 8008810:	d1e6      	bne.n	80087e0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	3308      	adds	r3, #8
 8008818:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	e853 3f00 	ldrex	r3, [r3]
 8008820:	60fb      	str	r3, [r7, #12]
   return(result);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	f023 0301 	bic.w	r3, r3, #1
 8008828:	64bb      	str	r3, [r7, #72]	; 0x48
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	3308      	adds	r3, #8
 8008830:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008832:	61fa      	str	r2, [r7, #28]
 8008834:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008836:	69b9      	ldr	r1, [r7, #24]
 8008838:	69fa      	ldr	r2, [r7, #28]
 800883a:	e841 2300 	strex	r3, r2, [r1]
 800883e:	617b      	str	r3, [r7, #20]
   return(result);
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d1e5      	bne.n	8008812 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2220      	movs	r2, #32
 800884a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2200      	movs	r2, #0
 8008852:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008856:	2303      	movs	r3, #3
 8008858:	e012      	b.n	8008880 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2220      	movs	r2, #32
 800885e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2220      	movs	r2, #32
 8008866:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2200      	movs	r2, #0
 800886e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2200      	movs	r2, #0
 8008874:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2200      	movs	r2, #0
 800887a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800887e:	2300      	movs	r3, #0
}
 8008880:	4618      	mov	r0, r3
 8008882:	3758      	adds	r7, #88	; 0x58
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b084      	sub	sp, #16
 800888c:	af00      	add	r7, sp, #0
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	60b9      	str	r1, [r7, #8]
 8008892:	603b      	str	r3, [r7, #0]
 8008894:	4613      	mov	r3, r2
 8008896:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008898:	e04f      	b.n	800893a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800889a:	69bb      	ldr	r3, [r7, #24]
 800889c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088a0:	d04b      	beq.n	800893a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088a2:	f7f9 f9ef 	bl	8001c84 <HAL_GetTick>
 80088a6:	4602      	mov	r2, r0
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	1ad3      	subs	r3, r2, r3
 80088ac:	69ba      	ldr	r2, [r7, #24]
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d302      	bcc.n	80088b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80088b2:	69bb      	ldr	r3, [r7, #24]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d101      	bne.n	80088bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80088b8:	2303      	movs	r3, #3
 80088ba:	e04e      	b.n	800895a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f003 0304 	and.w	r3, r3, #4
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d037      	beq.n	800893a <UART_WaitOnFlagUntilTimeout+0xb2>
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	2b80      	cmp	r3, #128	; 0x80
 80088ce:	d034      	beq.n	800893a <UART_WaitOnFlagUntilTimeout+0xb2>
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	2b40      	cmp	r3, #64	; 0x40
 80088d4:	d031      	beq.n	800893a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	69db      	ldr	r3, [r3, #28]
 80088dc:	f003 0308 	and.w	r3, r3, #8
 80088e0:	2b08      	cmp	r3, #8
 80088e2:	d110      	bne.n	8008906 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	2208      	movs	r2, #8
 80088ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80088ec:	68f8      	ldr	r0, [r7, #12]
 80088ee:	f000 f95b 	bl	8008ba8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2208      	movs	r2, #8
 80088f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2200      	movs	r2, #0
 80088fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8008902:	2301      	movs	r3, #1
 8008904:	e029      	b.n	800895a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	69db      	ldr	r3, [r3, #28]
 800890c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008910:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008914:	d111      	bne.n	800893a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800891e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008920:	68f8      	ldr	r0, [r7, #12]
 8008922:	f000 f941 	bl	8008ba8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2220      	movs	r2, #32
 800892a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2200      	movs	r2, #0
 8008932:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008936:	2303      	movs	r3, #3
 8008938:	e00f      	b.n	800895a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	69da      	ldr	r2, [r3, #28]
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	4013      	ands	r3, r2
 8008944:	68ba      	ldr	r2, [r7, #8]
 8008946:	429a      	cmp	r2, r3
 8008948:	bf0c      	ite	eq
 800894a:	2301      	moveq	r3, #1
 800894c:	2300      	movne	r3, #0
 800894e:	b2db      	uxtb	r3, r3
 8008950:	461a      	mov	r2, r3
 8008952:	79fb      	ldrb	r3, [r7, #7]
 8008954:	429a      	cmp	r2, r3
 8008956:	d0a0      	beq.n	800889a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008958:	2300      	movs	r3, #0
}
 800895a:	4618      	mov	r0, r3
 800895c:	3710      	adds	r7, #16
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
	...

08008964 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008964:	b480      	push	{r7}
 8008966:	b0a3      	sub	sp, #140	; 0x8c
 8008968:	af00      	add	r7, sp, #0
 800896a:	60f8      	str	r0, [r7, #12]
 800896c:	60b9      	str	r1, [r7, #8]
 800896e:	4613      	mov	r3, r2
 8008970:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	68ba      	ldr	r2, [r7, #8]
 8008976:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	88fa      	ldrh	r2, [r7, #6]
 800897c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	88fa      	ldrh	r2, [r7, #6]
 8008984:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2200      	movs	r2, #0
 800898c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008996:	d10e      	bne.n	80089b6 <UART_Start_Receive_IT+0x52>
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	691b      	ldr	r3, [r3, #16]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d105      	bne.n	80089ac <UART_Start_Receive_IT+0x48>
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80089a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80089aa:	e02d      	b.n	8008a08 <UART_Start_Receive_IT+0xa4>
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	22ff      	movs	r2, #255	; 0xff
 80089b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80089b4:	e028      	b.n	8008a08 <UART_Start_Receive_IT+0xa4>
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	689b      	ldr	r3, [r3, #8]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d10d      	bne.n	80089da <UART_Start_Receive_IT+0x76>
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	691b      	ldr	r3, [r3, #16]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d104      	bne.n	80089d0 <UART_Start_Receive_IT+0x6c>
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	22ff      	movs	r2, #255	; 0xff
 80089ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80089ce:	e01b      	b.n	8008a08 <UART_Start_Receive_IT+0xa4>
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	227f      	movs	r2, #127	; 0x7f
 80089d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80089d8:	e016      	b.n	8008a08 <UART_Start_Receive_IT+0xa4>
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	689b      	ldr	r3, [r3, #8]
 80089de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80089e2:	d10d      	bne.n	8008a00 <UART_Start_Receive_IT+0x9c>
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	691b      	ldr	r3, [r3, #16]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d104      	bne.n	80089f6 <UART_Start_Receive_IT+0x92>
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	227f      	movs	r2, #127	; 0x7f
 80089f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80089f4:	e008      	b.n	8008a08 <UART_Start_Receive_IT+0xa4>
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	223f      	movs	r2, #63	; 0x3f
 80089fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80089fe:	e003      	b.n	8008a08 <UART_Start_Receive_IT+0xa4>
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2200      	movs	r2, #0
 8008a04:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2222      	movs	r2, #34	; 0x22
 8008a14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	3308      	adds	r3, #8
 8008a1e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a22:	e853 3f00 	ldrex	r3, [r3]
 8008a26:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008a28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a2a:	f043 0301 	orr.w	r3, r3, #1
 8008a2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	3308      	adds	r3, #8
 8008a38:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008a3c:	673a      	str	r2, [r7, #112]	; 0x70
 8008a3e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a40:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008a42:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008a44:	e841 2300 	strex	r3, r2, [r1]
 8008a48:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008a4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d1e3      	bne.n	8008a18 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a58:	d14f      	bne.n	8008afa <UART_Start_Receive_IT+0x196>
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008a60:	88fa      	ldrh	r2, [r7, #6]
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d349      	bcc.n	8008afa <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	689b      	ldr	r3, [r3, #8]
 8008a6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a6e:	d107      	bne.n	8008a80 <UART_Start_Receive_IT+0x11c>
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	691b      	ldr	r3, [r3, #16]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d103      	bne.n	8008a80 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	4a47      	ldr	r2, [pc, #284]	; (8008b98 <UART_Start_Receive_IT+0x234>)
 8008a7c:	675a      	str	r2, [r3, #116]	; 0x74
 8008a7e:	e002      	b.n	8008a86 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	4a46      	ldr	r2, [pc, #280]	; (8008b9c <UART_Start_Receive_IT+0x238>)
 8008a84:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	691b      	ldr	r3, [r3, #16]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d01a      	beq.n	8008ac4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a96:	e853 3f00 	ldrex	r3, [r3]
 8008a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008a9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008aa2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	461a      	mov	r2, r3
 8008aac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008ab0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ab2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ab4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008ab6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008ab8:	e841 2300 	strex	r3, r2, [r1]
 8008abc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008abe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d1e4      	bne.n	8008a8e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	3308      	adds	r3, #8
 8008aca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ace:	e853 3f00 	ldrex	r3, [r3]
 8008ad2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ada:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	3308      	adds	r3, #8
 8008ae2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008ae4:	64ba      	str	r2, [r7, #72]	; 0x48
 8008ae6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008aea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008aec:	e841 2300 	strex	r3, r2, [r1]
 8008af0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008af2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d1e5      	bne.n	8008ac4 <UART_Start_Receive_IT+0x160>
 8008af8:	e046      	b.n	8008b88 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	689b      	ldr	r3, [r3, #8]
 8008afe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b02:	d107      	bne.n	8008b14 <UART_Start_Receive_IT+0x1b0>
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	691b      	ldr	r3, [r3, #16]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d103      	bne.n	8008b14 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	4a24      	ldr	r2, [pc, #144]	; (8008ba0 <UART_Start_Receive_IT+0x23c>)
 8008b10:	675a      	str	r2, [r3, #116]	; 0x74
 8008b12:	e002      	b.n	8008b1a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	4a23      	ldr	r2, [pc, #140]	; (8008ba4 <UART_Start_Receive_IT+0x240>)
 8008b18:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	691b      	ldr	r3, [r3, #16]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d019      	beq.n	8008b56 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b2a:	e853 3f00 	ldrex	r3, [r3]
 8008b2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b32:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008b36:	677b      	str	r3, [r7, #116]	; 0x74
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	461a      	mov	r2, r3
 8008b3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b40:	637b      	str	r3, [r7, #52]	; 0x34
 8008b42:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008b46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b48:	e841 2300 	strex	r3, r2, [r1]
 8008b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d1e6      	bne.n	8008b22 <UART_Start_Receive_IT+0x1be>
 8008b54:	e018      	b.n	8008b88 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	e853 3f00 	ldrex	r3, [r3]
 8008b62:	613b      	str	r3, [r7, #16]
   return(result);
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	f043 0320 	orr.w	r3, r3, #32
 8008b6a:	67bb      	str	r3, [r7, #120]	; 0x78
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	461a      	mov	r2, r3
 8008b72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b74:	623b      	str	r3, [r7, #32]
 8008b76:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b78:	69f9      	ldr	r1, [r7, #28]
 8008b7a:	6a3a      	ldr	r2, [r7, #32]
 8008b7c:	e841 2300 	strex	r3, r2, [r1]
 8008b80:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b82:	69bb      	ldr	r3, [r7, #24]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d1e6      	bne.n	8008b56 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008b88:	2300      	movs	r3, #0
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	378c      	adds	r7, #140	; 0x8c
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b94:	4770      	bx	lr
 8008b96:	bf00      	nop
 8008b98:	080093c9 	.word	0x080093c9
 8008b9c:	08009069 	.word	0x08009069
 8008ba0:	08008eb1 	.word	0x08008eb1
 8008ba4:	08008cf9 	.word	0x08008cf9

08008ba8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b095      	sub	sp, #84	; 0x54
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bb8:	e853 3f00 	ldrex	r3, [r3]
 8008bbc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008bc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	461a      	mov	r2, r3
 8008bcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bce:	643b      	str	r3, [r7, #64]	; 0x40
 8008bd0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008bd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008bd6:	e841 2300 	strex	r3, r2, [r1]
 8008bda:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d1e6      	bne.n	8008bb0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	3308      	adds	r3, #8
 8008be8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bea:	6a3b      	ldr	r3, [r7, #32]
 8008bec:	e853 3f00 	ldrex	r3, [r3]
 8008bf0:	61fb      	str	r3, [r7, #28]
   return(result);
 8008bf2:	69fa      	ldr	r2, [r7, #28]
 8008bf4:	4b1e      	ldr	r3, [pc, #120]	; (8008c70 <UART_EndRxTransfer+0xc8>)
 8008bf6:	4013      	ands	r3, r2
 8008bf8:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	3308      	adds	r3, #8
 8008c00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008c04:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c0a:	e841 2300 	strex	r3, r2, [r1]
 8008c0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d1e5      	bne.n	8008be2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c1a:	2b01      	cmp	r3, #1
 8008c1c:	d118      	bne.n	8008c50 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	e853 3f00 	ldrex	r3, [r3]
 8008c2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	f023 0310 	bic.w	r3, r3, #16
 8008c32:	647b      	str	r3, [r7, #68]	; 0x44
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	461a      	mov	r2, r3
 8008c3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c3c:	61bb      	str	r3, [r7, #24]
 8008c3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c40:	6979      	ldr	r1, [r7, #20]
 8008c42:	69ba      	ldr	r2, [r7, #24]
 8008c44:	e841 2300 	strex	r3, r2, [r1]
 8008c48:	613b      	str	r3, [r7, #16]
   return(result);
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d1e6      	bne.n	8008c1e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2220      	movs	r2, #32
 8008c54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2200      	movs	r2, #0
 8008c62:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008c64:	bf00      	nop
 8008c66:	3754      	adds	r7, #84	; 0x54
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr
 8008c70:	effffffe 	.word	0xeffffffe

08008c74 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b084      	sub	sp, #16
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2200      	movs	r2, #0
 8008c86:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c92:	68f8      	ldr	r0, [r7, #12]
 8008c94:	f7fe fe2a 	bl	80078ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c98:	bf00      	nop
 8008c9a:	3710      	adds	r7, #16
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}

08008ca0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b088      	sub	sp, #32
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	e853 3f00 	ldrex	r3, [r3]
 8008cb4:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cbc:	61fb      	str	r3, [r7, #28]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	69fb      	ldr	r3, [r7, #28]
 8008cc6:	61bb      	str	r3, [r7, #24]
 8008cc8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cca:	6979      	ldr	r1, [r7, #20]
 8008ccc:	69ba      	ldr	r2, [r7, #24]
 8008cce:	e841 2300 	strex	r3, r2, [r1]
 8008cd2:	613b      	str	r3, [r7, #16]
   return(result);
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d1e6      	bne.n	8008ca8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2220      	movs	r2, #32
 8008cde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f7fe fdf5 	bl	80078d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008cee:	bf00      	nop
 8008cf0:	3720      	adds	r7, #32
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}
	...

08008cf8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b09c      	sub	sp, #112	; 0x70
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008d06:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d10:	2b22      	cmp	r3, #34	; 0x22
 8008d12:	f040 80be 	bne.w	8008e92 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d1c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008d20:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008d24:	b2d9      	uxtb	r1, r3
 8008d26:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008d2a:	b2da      	uxtb	r2, r3
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d30:	400a      	ands	r2, r1
 8008d32:	b2d2      	uxtb	r2, r2
 8008d34:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d3a:	1c5a      	adds	r2, r3, #1
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008d46:	b29b      	uxth	r3, r3
 8008d48:	3b01      	subs	r3, #1
 8008d4a:	b29a      	uxth	r2, r3
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008d58:	b29b      	uxth	r3, r3
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	f040 80a1 	bne.w	8008ea2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d68:	e853 3f00 	ldrex	r3, [r3]
 8008d6c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008d6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d74:	66bb      	str	r3, [r7, #104]	; 0x68
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d7e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008d80:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d82:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008d84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008d86:	e841 2300 	strex	r3, r2, [r1]
 8008d8a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008d8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d1e6      	bne.n	8008d60 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	3308      	adds	r3, #8
 8008d98:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d9c:	e853 3f00 	ldrex	r3, [r3]
 8008da0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008da4:	f023 0301 	bic.w	r3, r3, #1
 8008da8:	667b      	str	r3, [r7, #100]	; 0x64
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	3308      	adds	r3, #8
 8008db0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008db2:	647a      	str	r2, [r7, #68]	; 0x44
 8008db4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008db6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008db8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008dba:	e841 2300 	strex	r3, r2, [r1]
 8008dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d1e5      	bne.n	8008d92 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2220      	movs	r2, #32
 8008dca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4a33      	ldr	r2, [pc, #204]	; (8008eac <UART_RxISR_8BIT+0x1b4>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d01f      	beq.n	8008e24 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d018      	beq.n	8008e24 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dfa:	e853 3f00 	ldrex	r3, [r3]
 8008dfe:	623b      	str	r3, [r7, #32]
   return(result);
 8008e00:	6a3b      	ldr	r3, [r7, #32]
 8008e02:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008e06:	663b      	str	r3, [r7, #96]	; 0x60
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	461a      	mov	r2, r3
 8008e0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008e10:	633b      	str	r3, [r7, #48]	; 0x30
 8008e12:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e18:	e841 2300 	strex	r3, r2, [r1]
 8008e1c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d1e6      	bne.n	8008df2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e28:	2b01      	cmp	r3, #1
 8008e2a:	d12e      	bne.n	8008e8a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	e853 3f00 	ldrex	r3, [r3]
 8008e3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	f023 0310 	bic.w	r3, r3, #16
 8008e46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	461a      	mov	r2, r3
 8008e4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e50:	61fb      	str	r3, [r7, #28]
 8008e52:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e54:	69b9      	ldr	r1, [r7, #24]
 8008e56:	69fa      	ldr	r2, [r7, #28]
 8008e58:	e841 2300 	strex	r3, r2, [r1]
 8008e5c:	617b      	str	r3, [r7, #20]
   return(result);
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d1e6      	bne.n	8008e32 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	69db      	ldr	r3, [r3, #28]
 8008e6a:	f003 0310 	and.w	r3, r3, #16
 8008e6e:	2b10      	cmp	r3, #16
 8008e70:	d103      	bne.n	8008e7a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	2210      	movs	r2, #16
 8008e78:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008e80:	4619      	mov	r1, r3
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f7fe fd3c 	bl	8007900 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008e88:	e00b      	b.n	8008ea2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f7f7 fd6c 	bl	8000968 <HAL_UART_RxCpltCallback>
}
 8008e90:	e007      	b.n	8008ea2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	699a      	ldr	r2, [r3, #24]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f042 0208 	orr.w	r2, r2, #8
 8008ea0:	619a      	str	r2, [r3, #24]
}
 8008ea2:	bf00      	nop
 8008ea4:	3770      	adds	r7, #112	; 0x70
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}
 8008eaa:	bf00      	nop
 8008eac:	58000c00 	.word	0x58000c00

08008eb0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b09c      	sub	sp, #112	; 0x70
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008ebe:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ec8:	2b22      	cmp	r3, #34	; 0x22
 8008eca:	f040 80be 	bne.w	800904a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008edc:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008ede:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8008ee2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008ee6:	4013      	ands	r3, r2
 8008ee8:	b29a      	uxth	r2, r3
 8008eea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008eec:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ef2:	1c9a      	adds	r2, r3, #2
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	3b01      	subs	r3, #1
 8008f02:	b29a      	uxth	r2, r3
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f10:	b29b      	uxth	r3, r3
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	f040 80a1 	bne.w	800905a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f20:	e853 3f00 	ldrex	r3, [r3]
 8008f24:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008f26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008f2c:	667b      	str	r3, [r7, #100]	; 0x64
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	461a      	mov	r2, r3
 8008f34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f36:	657b      	str	r3, [r7, #84]	; 0x54
 8008f38:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f3a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008f3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008f3e:	e841 2300 	strex	r3, r2, [r1]
 8008f42:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008f44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d1e6      	bne.n	8008f18 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	3308      	adds	r3, #8
 8008f50:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f54:	e853 3f00 	ldrex	r3, [r3]
 8008f58:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f5c:	f023 0301 	bic.w	r3, r3, #1
 8008f60:	663b      	str	r3, [r7, #96]	; 0x60
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	3308      	adds	r3, #8
 8008f68:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008f6a:	643a      	str	r2, [r7, #64]	; 0x40
 8008f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f6e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008f70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008f72:	e841 2300 	strex	r3, r2, [r1]
 8008f76:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d1e5      	bne.n	8008f4a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2220      	movs	r2, #32
 8008f82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4a33      	ldr	r2, [pc, #204]	; (8009064 <UART_RxISR_16BIT+0x1b4>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d01f      	beq.n	8008fdc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d018      	beq.n	8008fdc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb0:	6a3b      	ldr	r3, [r7, #32]
 8008fb2:	e853 3f00 	ldrex	r3, [r3]
 8008fb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8008fb8:	69fb      	ldr	r3, [r7, #28]
 8008fba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008fbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	461a      	mov	r2, r3
 8008fc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008fca:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fcc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008fce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fd0:	e841 2300 	strex	r3, r2, [r1]
 8008fd4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d1e6      	bne.n	8008faa <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	d12e      	bne.n	8009042 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	e853 3f00 	ldrex	r3, [r3]
 8008ff6:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	f023 0310 	bic.w	r3, r3, #16
 8008ffe:	65bb      	str	r3, [r7, #88]	; 0x58
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	461a      	mov	r2, r3
 8009006:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009008:	61bb      	str	r3, [r7, #24]
 800900a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800900c:	6979      	ldr	r1, [r7, #20]
 800900e:	69ba      	ldr	r2, [r7, #24]
 8009010:	e841 2300 	strex	r3, r2, [r1]
 8009014:	613b      	str	r3, [r7, #16]
   return(result);
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d1e6      	bne.n	8008fea <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	69db      	ldr	r3, [r3, #28]
 8009022:	f003 0310 	and.w	r3, r3, #16
 8009026:	2b10      	cmp	r3, #16
 8009028:	d103      	bne.n	8009032 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	2210      	movs	r2, #16
 8009030:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009038:	4619      	mov	r1, r3
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f7fe fc60 	bl	8007900 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009040:	e00b      	b.n	800905a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f7f7 fc90 	bl	8000968 <HAL_UART_RxCpltCallback>
}
 8009048:	e007      	b.n	800905a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	699a      	ldr	r2, [r3, #24]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f042 0208 	orr.w	r2, r2, #8
 8009058:	619a      	str	r2, [r3, #24]
}
 800905a:	bf00      	nop
 800905c:	3770      	adds	r7, #112	; 0x70
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}
 8009062:	bf00      	nop
 8009064:	58000c00 	.word	0x58000c00

08009068 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b0ac      	sub	sp, #176	; 0xb0
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009076:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	69db      	ldr	r3, [r3, #28]
 8009080:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	689b      	ldr	r3, [r3, #8]
 8009094:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800909e:	2b22      	cmp	r3, #34	; 0x22
 80090a0:	f040 8180 	bne.w	80093a4 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80090aa:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80090ae:	e123      	b.n	80092f8 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090b6:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80090ba:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80090be:	b2d9      	uxtb	r1, r3
 80090c0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80090c4:	b2da      	uxtb	r2, r3
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090ca:	400a      	ands	r2, r1
 80090cc:	b2d2      	uxtb	r2, r2
 80090ce:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090d4:	1c5a      	adds	r2, r3, #1
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80090e0:	b29b      	uxth	r3, r3
 80090e2:	3b01      	subs	r3, #1
 80090e4:	b29a      	uxth	r2, r3
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	69db      	ldr	r3, [r3, #28]
 80090f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80090f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80090fa:	f003 0307 	and.w	r3, r3, #7
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d053      	beq.n	80091aa <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009102:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009106:	f003 0301 	and.w	r3, r3, #1
 800910a:	2b00      	cmp	r3, #0
 800910c:	d011      	beq.n	8009132 <UART_RxISR_8BIT_FIFOEN+0xca>
 800910e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009116:	2b00      	cmp	r3, #0
 8009118:	d00b      	beq.n	8009132 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	2201      	movs	r2, #1
 8009120:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009128:	f043 0201 	orr.w	r2, r3, #1
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009132:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009136:	f003 0302 	and.w	r3, r3, #2
 800913a:	2b00      	cmp	r3, #0
 800913c:	d011      	beq.n	8009162 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800913e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009142:	f003 0301 	and.w	r3, r3, #1
 8009146:	2b00      	cmp	r3, #0
 8009148:	d00b      	beq.n	8009162 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	2202      	movs	r2, #2
 8009150:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009158:	f043 0204 	orr.w	r2, r3, #4
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009162:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009166:	f003 0304 	and.w	r3, r3, #4
 800916a:	2b00      	cmp	r3, #0
 800916c:	d011      	beq.n	8009192 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800916e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009172:	f003 0301 	and.w	r3, r3, #1
 8009176:	2b00      	cmp	r3, #0
 8009178:	d00b      	beq.n	8009192 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	2204      	movs	r2, #4
 8009180:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009188:	f043 0202 	orr.w	r2, r3, #2
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009198:	2b00      	cmp	r3, #0
 800919a:	d006      	beq.n	80091aa <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f7fe fba5 	bl	80078ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2200      	movs	r2, #0
 80091a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	f040 80a0 	bne.w	80092f8 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80091c0:	e853 3f00 	ldrex	r3, [r3]
 80091c4:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80091c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	461a      	mov	r2, r3
 80091d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80091da:	67fb      	str	r3, [r7, #124]	; 0x7c
 80091dc:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091de:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80091e0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80091e2:	e841 2300 	strex	r3, r2, [r1]
 80091e6:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80091e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d1e4      	bne.n	80091b8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	3308      	adds	r3, #8
 80091f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091f8:	e853 3f00 	ldrex	r3, [r3]
 80091fc:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80091fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009200:	4b6e      	ldr	r3, [pc, #440]	; (80093bc <UART_RxISR_8BIT_FIFOEN+0x354>)
 8009202:	4013      	ands	r3, r2
 8009204:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	3308      	adds	r3, #8
 800920e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009212:	66ba      	str	r2, [r7, #104]	; 0x68
 8009214:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009216:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009218:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800921a:	e841 2300 	strex	r3, r2, [r1]
 800921e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009220:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009222:	2b00      	cmp	r3, #0
 8009224:	d1e3      	bne.n	80091ee <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2220      	movs	r2, #32
 800922a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2200      	movs	r2, #0
 8009232:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2200      	movs	r2, #0
 8009238:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4a60      	ldr	r2, [pc, #384]	; (80093c0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8009240:	4293      	cmp	r3, r2
 8009242:	d021      	beq.n	8009288 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800924e:	2b00      	cmp	r3, #0
 8009250:	d01a      	beq.n	8009288 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009258:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800925a:	e853 3f00 	ldrex	r3, [r3]
 800925e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009260:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009262:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009266:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	461a      	mov	r2, r3
 8009270:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009274:	657b      	str	r3, [r7, #84]	; 0x54
 8009276:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009278:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800927a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800927c:	e841 2300 	strex	r3, r2, [r1]
 8009280:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009282:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009284:	2b00      	cmp	r3, #0
 8009286:	d1e4      	bne.n	8009252 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800928c:	2b01      	cmp	r3, #1
 800928e:	d130      	bne.n	80092f2 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2200      	movs	r2, #0
 8009294:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800929c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800929e:	e853 3f00 	ldrex	r3, [r3]
 80092a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80092a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a6:	f023 0310 	bic.w	r3, r3, #16
 80092aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	461a      	mov	r2, r3
 80092b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80092b8:	643b      	str	r3, [r7, #64]	; 0x40
 80092ba:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80092be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80092c0:	e841 2300 	strex	r3, r2, [r1]
 80092c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80092c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d1e4      	bne.n	8009296 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	69db      	ldr	r3, [r3, #28]
 80092d2:	f003 0310 	and.w	r3, r3, #16
 80092d6:	2b10      	cmp	r3, #16
 80092d8:	d103      	bne.n	80092e2 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	2210      	movs	r2, #16
 80092e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80092e8:	4619      	mov	r1, r3
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f7fe fb08 	bl	8007900 <HAL_UARTEx_RxEventCallback>
 80092f0:	e002      	b.n	80092f8 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f7f7 fb38 	bl	8000968 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80092f8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d006      	beq.n	800930e <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8009300:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009304:	f003 0320 	and.w	r3, r3, #32
 8009308:	2b00      	cmp	r3, #0
 800930a:	f47f aed1 	bne.w	80090b0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009314:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009318:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800931c:	2b00      	cmp	r3, #0
 800931e:	d049      	beq.n	80093b4 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009326:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800932a:	429a      	cmp	r2, r3
 800932c:	d242      	bcs.n	80093b4 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	3308      	adds	r3, #8
 8009334:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009336:	6a3b      	ldr	r3, [r7, #32]
 8009338:	e853 3f00 	ldrex	r3, [r3]
 800933c:	61fb      	str	r3, [r7, #28]
   return(result);
 800933e:	69fb      	ldr	r3, [r7, #28]
 8009340:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009344:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	3308      	adds	r3, #8
 800934e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009352:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009354:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009356:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009358:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800935a:	e841 2300 	strex	r3, r2, [r1]
 800935e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009362:	2b00      	cmp	r3, #0
 8009364:	d1e3      	bne.n	800932e <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	4a16      	ldr	r2, [pc, #88]	; (80093c4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800936a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	e853 3f00 	ldrex	r3, [r3]
 8009378:	60bb      	str	r3, [r7, #8]
   return(result);
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	f043 0320 	orr.w	r3, r3, #32
 8009380:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	461a      	mov	r2, r3
 800938a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800938e:	61bb      	str	r3, [r7, #24]
 8009390:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009392:	6979      	ldr	r1, [r7, #20]
 8009394:	69ba      	ldr	r2, [r7, #24]
 8009396:	e841 2300 	strex	r3, r2, [r1]
 800939a:	613b      	str	r3, [r7, #16]
   return(result);
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d1e4      	bne.n	800936c <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80093a2:	e007      	b.n	80093b4 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	699a      	ldr	r2, [r3, #24]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f042 0208 	orr.w	r2, r2, #8
 80093b2:	619a      	str	r2, [r3, #24]
}
 80093b4:	bf00      	nop
 80093b6:	37b0      	adds	r7, #176	; 0xb0
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}
 80093bc:	effffffe 	.word	0xeffffffe
 80093c0:	58000c00 	.word	0x58000c00
 80093c4:	08008cf9 	.word	0x08008cf9

080093c8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b0ae      	sub	sp, #184	; 0xb8
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80093d6:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	69db      	ldr	r3, [r3, #28]
 80093e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	689b      	ldr	r3, [r3, #8]
 80093f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093fe:	2b22      	cmp	r3, #34	; 0x22
 8009400:	f040 8184 	bne.w	800970c <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800940a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800940e:	e127      	b.n	8009660 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009416:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800941e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009422:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8009426:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800942a:	4013      	ands	r3, r2
 800942c:	b29a      	uxth	r2, r3
 800942e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009432:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009438:	1c9a      	adds	r2, r3, #2
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009444:	b29b      	uxth	r3, r3
 8009446:	3b01      	subs	r3, #1
 8009448:	b29a      	uxth	r2, r3
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	69db      	ldr	r3, [r3, #28]
 8009456:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800945a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800945e:	f003 0307 	and.w	r3, r3, #7
 8009462:	2b00      	cmp	r3, #0
 8009464:	d053      	beq.n	800950e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009466:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800946a:	f003 0301 	and.w	r3, r3, #1
 800946e:	2b00      	cmp	r3, #0
 8009470:	d011      	beq.n	8009496 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009472:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800947a:	2b00      	cmp	r3, #0
 800947c:	d00b      	beq.n	8009496 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	2201      	movs	r2, #1
 8009484:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800948c:	f043 0201 	orr.w	r2, r3, #1
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009496:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800949a:	f003 0302 	and.w	r3, r3, #2
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d011      	beq.n	80094c6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80094a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80094a6:	f003 0301 	and.w	r3, r3, #1
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d00b      	beq.n	80094c6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	2202      	movs	r2, #2
 80094b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094bc:	f043 0204 	orr.w	r2, r3, #4
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80094c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80094ca:	f003 0304 	and.w	r3, r3, #4
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d011      	beq.n	80094f6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80094d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80094d6:	f003 0301 	and.w	r3, r3, #1
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d00b      	beq.n	80094f6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	2204      	movs	r2, #4
 80094e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094ec:	f043 0202 	orr.w	r2, r3, #2
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d006      	beq.n	800950e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f7fe f9f3 	bl	80078ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2200      	movs	r2, #0
 800950a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009514:	b29b      	uxth	r3, r3
 8009516:	2b00      	cmp	r3, #0
 8009518:	f040 80a2 	bne.w	8009660 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009522:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009524:	e853 3f00 	ldrex	r3, [r3]
 8009528:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800952a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800952c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009530:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	461a      	mov	r2, r3
 800953a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800953e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009542:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009544:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009546:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800954a:	e841 2300 	strex	r3, r2, [r1]
 800954e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009550:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009552:	2b00      	cmp	r3, #0
 8009554:	d1e2      	bne.n	800951c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	3308      	adds	r3, #8
 800955c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800955e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009560:	e853 3f00 	ldrex	r3, [r3]
 8009564:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009566:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009568:	4b6e      	ldr	r3, [pc, #440]	; (8009724 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800956a:	4013      	ands	r3, r2
 800956c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	3308      	adds	r3, #8
 8009576:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800957a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800957c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800957e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009580:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009582:	e841 2300 	strex	r3, r2, [r1]
 8009586:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009588:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800958a:	2b00      	cmp	r3, #0
 800958c:	d1e3      	bne.n	8009556 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2220      	movs	r2, #32
 8009592:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2200      	movs	r2, #0
 800959a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2200      	movs	r2, #0
 80095a0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	4a60      	ldr	r2, [pc, #384]	; (8009728 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d021      	beq.n	80095f0 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	685b      	ldr	r3, [r3, #4]
 80095b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d01a      	beq.n	80095f0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095c2:	e853 3f00 	ldrex	r3, [r3]
 80095c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80095c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80095ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	461a      	mov	r2, r3
 80095d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80095dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80095de:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80095e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80095e4:	e841 2300 	strex	r3, r2, [r1]
 80095e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80095ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d1e4      	bne.n	80095ba <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095f4:	2b01      	cmp	r3, #1
 80095f6:	d130      	bne.n	800965a <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2200      	movs	r2, #0
 80095fc:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009606:	e853 3f00 	ldrex	r3, [r3]
 800960a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800960c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800960e:	f023 0310 	bic.w	r3, r3, #16
 8009612:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	461a      	mov	r2, r3
 800961c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009620:	647b      	str	r3, [r7, #68]	; 0x44
 8009622:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009624:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009626:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009628:	e841 2300 	strex	r3, r2, [r1]
 800962c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800962e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009630:	2b00      	cmp	r3, #0
 8009632:	d1e4      	bne.n	80095fe <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	69db      	ldr	r3, [r3, #28]
 800963a:	f003 0310 	and.w	r3, r3, #16
 800963e:	2b10      	cmp	r3, #16
 8009640:	d103      	bne.n	800964a <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	2210      	movs	r2, #16
 8009648:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009650:	4619      	mov	r1, r3
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f7fe f954 	bl	8007900 <HAL_UARTEx_RxEventCallback>
 8009658:	e002      	b.n	8009660 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f7f7 f984 	bl	8000968 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009660:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8009664:	2b00      	cmp	r3, #0
 8009666:	d006      	beq.n	8009676 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8009668:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800966c:	f003 0320 	and.w	r3, r3, #32
 8009670:	2b00      	cmp	r3, #0
 8009672:	f47f aecd 	bne.w	8009410 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800967c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009680:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009684:	2b00      	cmp	r3, #0
 8009686:	d049      	beq.n	800971c <UART_RxISR_16BIT_FIFOEN+0x354>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800968e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8009692:	429a      	cmp	r2, r3
 8009694:	d242      	bcs.n	800971c <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	3308      	adds	r3, #8
 800969c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800969e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a0:	e853 3f00 	ldrex	r3, [r3]
 80096a4:	623b      	str	r3, [r7, #32]
   return(result);
 80096a6:	6a3b      	ldr	r3, [r7, #32]
 80096a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80096ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	3308      	adds	r3, #8
 80096b6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80096ba:	633a      	str	r2, [r7, #48]	; 0x30
 80096bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80096c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096c2:	e841 2300 	strex	r3, r2, [r1]
 80096c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80096c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d1e3      	bne.n	8009696 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	4a16      	ldr	r2, [pc, #88]	; (800972c <UART_RxISR_16BIT_FIFOEN+0x364>)
 80096d2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096da:	693b      	ldr	r3, [r7, #16]
 80096dc:	e853 3f00 	ldrex	r3, [r3]
 80096e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	f043 0320 	orr.w	r3, r3, #32
 80096e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	461a      	mov	r2, r3
 80096f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80096f6:	61fb      	str	r3, [r7, #28]
 80096f8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096fa:	69b9      	ldr	r1, [r7, #24]
 80096fc:	69fa      	ldr	r2, [r7, #28]
 80096fe:	e841 2300 	strex	r3, r2, [r1]
 8009702:	617b      	str	r3, [r7, #20]
   return(result);
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d1e4      	bne.n	80096d4 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800970a:	e007      	b.n	800971c <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	699a      	ldr	r2, [r3, #24]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f042 0208 	orr.w	r2, r2, #8
 800971a:	619a      	str	r2, [r3, #24]
}
 800971c:	bf00      	nop
 800971e:	37b8      	adds	r7, #184	; 0xb8
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}
 8009724:	effffffe 	.word	0xeffffffe
 8009728:	58000c00 	.word	0x58000c00
 800972c:	08008eb1 	.word	0x08008eb1

08009730 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009730:	b480      	push	{r7}
 8009732:	b083      	sub	sp, #12
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009738:	bf00      	nop
 800973a:	370c      	adds	r7, #12
 800973c:	46bd      	mov	sp, r7
 800973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009742:	4770      	bx	lr

08009744 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009744:	b480      	push	{r7}
 8009746:	b083      	sub	sp, #12
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800974c:	bf00      	nop
 800974e:	370c      	adds	r7, #12
 8009750:	46bd      	mov	sp, r7
 8009752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009756:	4770      	bx	lr

08009758 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009758:	b480      	push	{r7}
 800975a:	b083      	sub	sp, #12
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009760:	bf00      	nop
 8009762:	370c      	adds	r7, #12
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800976c:	b480      	push	{r7}
 800976e:	b085      	sub	sp, #20
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800977a:	2b01      	cmp	r3, #1
 800977c:	d101      	bne.n	8009782 <HAL_UARTEx_DisableFifoMode+0x16>
 800977e:	2302      	movs	r3, #2
 8009780:	e027      	b.n	80097d2 <HAL_UARTEx_DisableFifoMode+0x66>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2201      	movs	r2, #1
 8009786:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2224      	movs	r2, #36	; 0x24
 800978e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	681a      	ldr	r2, [r3, #0]
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f022 0201 	bic.w	r2, r2, #1
 80097a8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80097b0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2200      	movs	r2, #0
 80097b6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	68fa      	ldr	r2, [r7, #12]
 80097be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2220      	movs	r2, #32
 80097c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2200      	movs	r2, #0
 80097cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80097d0:	2300      	movs	r3, #0
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3714      	adds	r7, #20
 80097d6:	46bd      	mov	sp, r7
 80097d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097dc:	4770      	bx	lr

080097de <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80097de:	b580      	push	{r7, lr}
 80097e0:	b084      	sub	sp, #16
 80097e2:	af00      	add	r7, sp, #0
 80097e4:	6078      	str	r0, [r7, #4]
 80097e6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80097ee:	2b01      	cmp	r3, #1
 80097f0:	d101      	bne.n	80097f6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80097f2:	2302      	movs	r3, #2
 80097f4:	e02d      	b.n	8009852 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2201      	movs	r2, #1
 80097fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2224      	movs	r2, #36	; 0x24
 8009802:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	681a      	ldr	r2, [r3, #0]
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f022 0201 	bic.w	r2, r2, #1
 800981c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	689b      	ldr	r3, [r3, #8]
 8009824:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	683a      	ldr	r2, [r7, #0]
 800982e:	430a      	orrs	r2, r1
 8009830:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f000 f850 	bl	80098d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	68fa      	ldr	r2, [r7, #12]
 800983e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2220      	movs	r2, #32
 8009844:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2200      	movs	r2, #0
 800984c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009850:	2300      	movs	r3, #0
}
 8009852:	4618      	mov	r0, r3
 8009854:	3710      	adds	r7, #16
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}

0800985a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800985a:	b580      	push	{r7, lr}
 800985c:	b084      	sub	sp, #16
 800985e:	af00      	add	r7, sp, #0
 8009860:	6078      	str	r0, [r7, #4]
 8009862:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800986a:	2b01      	cmp	r3, #1
 800986c:	d101      	bne.n	8009872 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800986e:	2302      	movs	r3, #2
 8009870:	e02d      	b.n	80098ce <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2201      	movs	r2, #1
 8009876:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2224      	movs	r2, #36	; 0x24
 800987e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	681a      	ldr	r2, [r3, #0]
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f022 0201 	bic.w	r2, r2, #1
 8009898:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	689b      	ldr	r3, [r3, #8]
 80098a0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	683a      	ldr	r2, [r7, #0]
 80098aa:	430a      	orrs	r2, r1
 80098ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f000 f812 	bl	80098d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	68fa      	ldr	r2, [r7, #12]
 80098ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2220      	movs	r2, #32
 80098c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2200      	movs	r2, #0
 80098c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80098cc:	2300      	movs	r3, #0
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3710      	adds	r7, #16
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}
	...

080098d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80098d8:	b480      	push	{r7}
 80098da:	b085      	sub	sp, #20
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d108      	bne.n	80098fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2201      	movs	r2, #1
 80098ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2201      	movs	r2, #1
 80098f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80098f8:	e031      	b.n	800995e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80098fa:	2310      	movs	r3, #16
 80098fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80098fe:	2310      	movs	r3, #16
 8009900:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	689b      	ldr	r3, [r3, #8]
 8009908:	0e5b      	lsrs	r3, r3, #25
 800990a:	b2db      	uxtb	r3, r3
 800990c:	f003 0307 	and.w	r3, r3, #7
 8009910:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	689b      	ldr	r3, [r3, #8]
 8009918:	0f5b      	lsrs	r3, r3, #29
 800991a:	b2db      	uxtb	r3, r3
 800991c:	f003 0307 	and.w	r3, r3, #7
 8009920:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009922:	7bbb      	ldrb	r3, [r7, #14]
 8009924:	7b3a      	ldrb	r2, [r7, #12]
 8009926:	4911      	ldr	r1, [pc, #68]	; (800996c <UARTEx_SetNbDataToProcess+0x94>)
 8009928:	5c8a      	ldrb	r2, [r1, r2]
 800992a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800992e:	7b3a      	ldrb	r2, [r7, #12]
 8009930:	490f      	ldr	r1, [pc, #60]	; (8009970 <UARTEx_SetNbDataToProcess+0x98>)
 8009932:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009934:	fb93 f3f2 	sdiv	r3, r3, r2
 8009938:	b29a      	uxth	r2, r3
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009940:	7bfb      	ldrb	r3, [r7, #15]
 8009942:	7b7a      	ldrb	r2, [r7, #13]
 8009944:	4909      	ldr	r1, [pc, #36]	; (800996c <UARTEx_SetNbDataToProcess+0x94>)
 8009946:	5c8a      	ldrb	r2, [r1, r2]
 8009948:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800994c:	7b7a      	ldrb	r2, [r7, #13]
 800994e:	4908      	ldr	r1, [pc, #32]	; (8009970 <UARTEx_SetNbDataToProcess+0x98>)
 8009950:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009952:	fb93 f3f2 	sdiv	r3, r3, r2
 8009956:	b29a      	uxth	r2, r3
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800995e:	bf00      	nop
 8009960:	3714      	adds	r7, #20
 8009962:	46bd      	mov	sp, r7
 8009964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009968:	4770      	bx	lr
 800996a:	bf00      	nop
 800996c:	0800aa58 	.word	0x0800aa58
 8009970:	0800aa60 	.word	0x0800aa60

08009974 <std>:
 8009974:	2300      	movs	r3, #0
 8009976:	b510      	push	{r4, lr}
 8009978:	4604      	mov	r4, r0
 800997a:	e9c0 3300 	strd	r3, r3, [r0]
 800997e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009982:	6083      	str	r3, [r0, #8]
 8009984:	8181      	strh	r1, [r0, #12]
 8009986:	6643      	str	r3, [r0, #100]	; 0x64
 8009988:	81c2      	strh	r2, [r0, #14]
 800998a:	6183      	str	r3, [r0, #24]
 800998c:	4619      	mov	r1, r3
 800998e:	2208      	movs	r2, #8
 8009990:	305c      	adds	r0, #92	; 0x5c
 8009992:	f000 f9f7 	bl	8009d84 <memset>
 8009996:	4b0d      	ldr	r3, [pc, #52]	; (80099cc <std+0x58>)
 8009998:	6263      	str	r3, [r4, #36]	; 0x24
 800999a:	4b0d      	ldr	r3, [pc, #52]	; (80099d0 <std+0x5c>)
 800999c:	62a3      	str	r3, [r4, #40]	; 0x28
 800999e:	4b0d      	ldr	r3, [pc, #52]	; (80099d4 <std+0x60>)
 80099a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80099a2:	4b0d      	ldr	r3, [pc, #52]	; (80099d8 <std+0x64>)
 80099a4:	6323      	str	r3, [r4, #48]	; 0x30
 80099a6:	4b0d      	ldr	r3, [pc, #52]	; (80099dc <std+0x68>)
 80099a8:	6224      	str	r4, [r4, #32]
 80099aa:	429c      	cmp	r4, r3
 80099ac:	d006      	beq.n	80099bc <std+0x48>
 80099ae:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80099b2:	4294      	cmp	r4, r2
 80099b4:	d002      	beq.n	80099bc <std+0x48>
 80099b6:	33d0      	adds	r3, #208	; 0xd0
 80099b8:	429c      	cmp	r4, r3
 80099ba:	d105      	bne.n	80099c8 <std+0x54>
 80099bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80099c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099c4:	f000 ba56 	b.w	8009e74 <__retarget_lock_init_recursive>
 80099c8:	bd10      	pop	{r4, pc}
 80099ca:	bf00      	nop
 80099cc:	08009bd5 	.word	0x08009bd5
 80099d0:	08009bf7 	.word	0x08009bf7
 80099d4:	08009c2f 	.word	0x08009c2f
 80099d8:	08009c53 	.word	0x08009c53
 80099dc:	2400042c 	.word	0x2400042c

080099e0 <stdio_exit_handler>:
 80099e0:	4a02      	ldr	r2, [pc, #8]	; (80099ec <stdio_exit_handler+0xc>)
 80099e2:	4903      	ldr	r1, [pc, #12]	; (80099f0 <stdio_exit_handler+0x10>)
 80099e4:	4803      	ldr	r0, [pc, #12]	; (80099f4 <stdio_exit_handler+0x14>)
 80099e6:	f000 b869 	b.w	8009abc <_fwalk_sglue>
 80099ea:	bf00      	nop
 80099ec:	24000010 	.word	0x24000010
 80099f0:	0800a721 	.word	0x0800a721
 80099f4:	2400001c 	.word	0x2400001c

080099f8 <cleanup_stdio>:
 80099f8:	6841      	ldr	r1, [r0, #4]
 80099fa:	4b0c      	ldr	r3, [pc, #48]	; (8009a2c <cleanup_stdio+0x34>)
 80099fc:	4299      	cmp	r1, r3
 80099fe:	b510      	push	{r4, lr}
 8009a00:	4604      	mov	r4, r0
 8009a02:	d001      	beq.n	8009a08 <cleanup_stdio+0x10>
 8009a04:	f000 fe8c 	bl	800a720 <_fflush_r>
 8009a08:	68a1      	ldr	r1, [r4, #8]
 8009a0a:	4b09      	ldr	r3, [pc, #36]	; (8009a30 <cleanup_stdio+0x38>)
 8009a0c:	4299      	cmp	r1, r3
 8009a0e:	d002      	beq.n	8009a16 <cleanup_stdio+0x1e>
 8009a10:	4620      	mov	r0, r4
 8009a12:	f000 fe85 	bl	800a720 <_fflush_r>
 8009a16:	68e1      	ldr	r1, [r4, #12]
 8009a18:	4b06      	ldr	r3, [pc, #24]	; (8009a34 <cleanup_stdio+0x3c>)
 8009a1a:	4299      	cmp	r1, r3
 8009a1c:	d004      	beq.n	8009a28 <cleanup_stdio+0x30>
 8009a1e:	4620      	mov	r0, r4
 8009a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a24:	f000 be7c 	b.w	800a720 <_fflush_r>
 8009a28:	bd10      	pop	{r4, pc}
 8009a2a:	bf00      	nop
 8009a2c:	2400042c 	.word	0x2400042c
 8009a30:	24000494 	.word	0x24000494
 8009a34:	240004fc 	.word	0x240004fc

08009a38 <global_stdio_init.part.0>:
 8009a38:	b510      	push	{r4, lr}
 8009a3a:	4b0b      	ldr	r3, [pc, #44]	; (8009a68 <global_stdio_init.part.0+0x30>)
 8009a3c:	4c0b      	ldr	r4, [pc, #44]	; (8009a6c <global_stdio_init.part.0+0x34>)
 8009a3e:	4a0c      	ldr	r2, [pc, #48]	; (8009a70 <global_stdio_init.part.0+0x38>)
 8009a40:	601a      	str	r2, [r3, #0]
 8009a42:	4620      	mov	r0, r4
 8009a44:	2200      	movs	r2, #0
 8009a46:	2104      	movs	r1, #4
 8009a48:	f7ff ff94 	bl	8009974 <std>
 8009a4c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009a50:	2201      	movs	r2, #1
 8009a52:	2109      	movs	r1, #9
 8009a54:	f7ff ff8e 	bl	8009974 <std>
 8009a58:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009a5c:	2202      	movs	r2, #2
 8009a5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a62:	2112      	movs	r1, #18
 8009a64:	f7ff bf86 	b.w	8009974 <std>
 8009a68:	24000564 	.word	0x24000564
 8009a6c:	2400042c 	.word	0x2400042c
 8009a70:	080099e1 	.word	0x080099e1

08009a74 <__sfp_lock_acquire>:
 8009a74:	4801      	ldr	r0, [pc, #4]	; (8009a7c <__sfp_lock_acquire+0x8>)
 8009a76:	f000 b9fe 	b.w	8009e76 <__retarget_lock_acquire_recursive>
 8009a7a:	bf00      	nop
 8009a7c:	2400056d 	.word	0x2400056d

08009a80 <__sfp_lock_release>:
 8009a80:	4801      	ldr	r0, [pc, #4]	; (8009a88 <__sfp_lock_release+0x8>)
 8009a82:	f000 b9f9 	b.w	8009e78 <__retarget_lock_release_recursive>
 8009a86:	bf00      	nop
 8009a88:	2400056d 	.word	0x2400056d

08009a8c <__sinit>:
 8009a8c:	b510      	push	{r4, lr}
 8009a8e:	4604      	mov	r4, r0
 8009a90:	f7ff fff0 	bl	8009a74 <__sfp_lock_acquire>
 8009a94:	6a23      	ldr	r3, [r4, #32]
 8009a96:	b11b      	cbz	r3, 8009aa0 <__sinit+0x14>
 8009a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a9c:	f7ff bff0 	b.w	8009a80 <__sfp_lock_release>
 8009aa0:	4b04      	ldr	r3, [pc, #16]	; (8009ab4 <__sinit+0x28>)
 8009aa2:	6223      	str	r3, [r4, #32]
 8009aa4:	4b04      	ldr	r3, [pc, #16]	; (8009ab8 <__sinit+0x2c>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d1f5      	bne.n	8009a98 <__sinit+0xc>
 8009aac:	f7ff ffc4 	bl	8009a38 <global_stdio_init.part.0>
 8009ab0:	e7f2      	b.n	8009a98 <__sinit+0xc>
 8009ab2:	bf00      	nop
 8009ab4:	080099f9 	.word	0x080099f9
 8009ab8:	24000564 	.word	0x24000564

08009abc <_fwalk_sglue>:
 8009abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ac0:	4607      	mov	r7, r0
 8009ac2:	4688      	mov	r8, r1
 8009ac4:	4614      	mov	r4, r2
 8009ac6:	2600      	movs	r6, #0
 8009ac8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009acc:	f1b9 0901 	subs.w	r9, r9, #1
 8009ad0:	d505      	bpl.n	8009ade <_fwalk_sglue+0x22>
 8009ad2:	6824      	ldr	r4, [r4, #0]
 8009ad4:	2c00      	cmp	r4, #0
 8009ad6:	d1f7      	bne.n	8009ac8 <_fwalk_sglue+0xc>
 8009ad8:	4630      	mov	r0, r6
 8009ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ade:	89ab      	ldrh	r3, [r5, #12]
 8009ae0:	2b01      	cmp	r3, #1
 8009ae2:	d907      	bls.n	8009af4 <_fwalk_sglue+0x38>
 8009ae4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009ae8:	3301      	adds	r3, #1
 8009aea:	d003      	beq.n	8009af4 <_fwalk_sglue+0x38>
 8009aec:	4629      	mov	r1, r5
 8009aee:	4638      	mov	r0, r7
 8009af0:	47c0      	blx	r8
 8009af2:	4306      	orrs	r6, r0
 8009af4:	3568      	adds	r5, #104	; 0x68
 8009af6:	e7e9      	b.n	8009acc <_fwalk_sglue+0x10>

08009af8 <iprintf>:
 8009af8:	b40f      	push	{r0, r1, r2, r3}
 8009afa:	b507      	push	{r0, r1, r2, lr}
 8009afc:	4906      	ldr	r1, [pc, #24]	; (8009b18 <iprintf+0x20>)
 8009afe:	ab04      	add	r3, sp, #16
 8009b00:	6808      	ldr	r0, [r1, #0]
 8009b02:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b06:	6881      	ldr	r1, [r0, #8]
 8009b08:	9301      	str	r3, [sp, #4]
 8009b0a:	f000 fad9 	bl	800a0c0 <_vfiprintf_r>
 8009b0e:	b003      	add	sp, #12
 8009b10:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b14:	b004      	add	sp, #16
 8009b16:	4770      	bx	lr
 8009b18:	24000068 	.word	0x24000068

08009b1c <_puts_r>:
 8009b1c:	6a03      	ldr	r3, [r0, #32]
 8009b1e:	b570      	push	{r4, r5, r6, lr}
 8009b20:	6884      	ldr	r4, [r0, #8]
 8009b22:	4605      	mov	r5, r0
 8009b24:	460e      	mov	r6, r1
 8009b26:	b90b      	cbnz	r3, 8009b2c <_puts_r+0x10>
 8009b28:	f7ff ffb0 	bl	8009a8c <__sinit>
 8009b2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b2e:	07db      	lsls	r3, r3, #31
 8009b30:	d405      	bmi.n	8009b3e <_puts_r+0x22>
 8009b32:	89a3      	ldrh	r3, [r4, #12]
 8009b34:	0598      	lsls	r0, r3, #22
 8009b36:	d402      	bmi.n	8009b3e <_puts_r+0x22>
 8009b38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b3a:	f000 f99c 	bl	8009e76 <__retarget_lock_acquire_recursive>
 8009b3e:	89a3      	ldrh	r3, [r4, #12]
 8009b40:	0719      	lsls	r1, r3, #28
 8009b42:	d513      	bpl.n	8009b6c <_puts_r+0x50>
 8009b44:	6923      	ldr	r3, [r4, #16]
 8009b46:	b18b      	cbz	r3, 8009b6c <_puts_r+0x50>
 8009b48:	3e01      	subs	r6, #1
 8009b4a:	68a3      	ldr	r3, [r4, #8]
 8009b4c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009b50:	3b01      	subs	r3, #1
 8009b52:	60a3      	str	r3, [r4, #8]
 8009b54:	b9e9      	cbnz	r1, 8009b92 <_puts_r+0x76>
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	da2e      	bge.n	8009bb8 <_puts_r+0x9c>
 8009b5a:	4622      	mov	r2, r4
 8009b5c:	210a      	movs	r1, #10
 8009b5e:	4628      	mov	r0, r5
 8009b60:	f000 f87b 	bl	8009c5a <__swbuf_r>
 8009b64:	3001      	adds	r0, #1
 8009b66:	d007      	beq.n	8009b78 <_puts_r+0x5c>
 8009b68:	250a      	movs	r5, #10
 8009b6a:	e007      	b.n	8009b7c <_puts_r+0x60>
 8009b6c:	4621      	mov	r1, r4
 8009b6e:	4628      	mov	r0, r5
 8009b70:	f000 f8b0 	bl	8009cd4 <__swsetup_r>
 8009b74:	2800      	cmp	r0, #0
 8009b76:	d0e7      	beq.n	8009b48 <_puts_r+0x2c>
 8009b78:	f04f 35ff 	mov.w	r5, #4294967295
 8009b7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b7e:	07da      	lsls	r2, r3, #31
 8009b80:	d405      	bmi.n	8009b8e <_puts_r+0x72>
 8009b82:	89a3      	ldrh	r3, [r4, #12]
 8009b84:	059b      	lsls	r3, r3, #22
 8009b86:	d402      	bmi.n	8009b8e <_puts_r+0x72>
 8009b88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b8a:	f000 f975 	bl	8009e78 <__retarget_lock_release_recursive>
 8009b8e:	4628      	mov	r0, r5
 8009b90:	bd70      	pop	{r4, r5, r6, pc}
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	da04      	bge.n	8009ba0 <_puts_r+0x84>
 8009b96:	69a2      	ldr	r2, [r4, #24]
 8009b98:	429a      	cmp	r2, r3
 8009b9a:	dc06      	bgt.n	8009baa <_puts_r+0x8e>
 8009b9c:	290a      	cmp	r1, #10
 8009b9e:	d004      	beq.n	8009baa <_puts_r+0x8e>
 8009ba0:	6823      	ldr	r3, [r4, #0]
 8009ba2:	1c5a      	adds	r2, r3, #1
 8009ba4:	6022      	str	r2, [r4, #0]
 8009ba6:	7019      	strb	r1, [r3, #0]
 8009ba8:	e7cf      	b.n	8009b4a <_puts_r+0x2e>
 8009baa:	4622      	mov	r2, r4
 8009bac:	4628      	mov	r0, r5
 8009bae:	f000 f854 	bl	8009c5a <__swbuf_r>
 8009bb2:	3001      	adds	r0, #1
 8009bb4:	d1c9      	bne.n	8009b4a <_puts_r+0x2e>
 8009bb6:	e7df      	b.n	8009b78 <_puts_r+0x5c>
 8009bb8:	6823      	ldr	r3, [r4, #0]
 8009bba:	250a      	movs	r5, #10
 8009bbc:	1c5a      	adds	r2, r3, #1
 8009bbe:	6022      	str	r2, [r4, #0]
 8009bc0:	701d      	strb	r5, [r3, #0]
 8009bc2:	e7db      	b.n	8009b7c <_puts_r+0x60>

08009bc4 <puts>:
 8009bc4:	4b02      	ldr	r3, [pc, #8]	; (8009bd0 <puts+0xc>)
 8009bc6:	4601      	mov	r1, r0
 8009bc8:	6818      	ldr	r0, [r3, #0]
 8009bca:	f7ff bfa7 	b.w	8009b1c <_puts_r>
 8009bce:	bf00      	nop
 8009bd0:	24000068 	.word	0x24000068

08009bd4 <__sread>:
 8009bd4:	b510      	push	{r4, lr}
 8009bd6:	460c      	mov	r4, r1
 8009bd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bdc:	f000 f8fc 	bl	8009dd8 <_read_r>
 8009be0:	2800      	cmp	r0, #0
 8009be2:	bfab      	itete	ge
 8009be4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009be6:	89a3      	ldrhlt	r3, [r4, #12]
 8009be8:	181b      	addge	r3, r3, r0
 8009bea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009bee:	bfac      	ite	ge
 8009bf0:	6563      	strge	r3, [r4, #84]	; 0x54
 8009bf2:	81a3      	strhlt	r3, [r4, #12]
 8009bf4:	bd10      	pop	{r4, pc}

08009bf6 <__swrite>:
 8009bf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bfa:	461f      	mov	r7, r3
 8009bfc:	898b      	ldrh	r3, [r1, #12]
 8009bfe:	05db      	lsls	r3, r3, #23
 8009c00:	4605      	mov	r5, r0
 8009c02:	460c      	mov	r4, r1
 8009c04:	4616      	mov	r6, r2
 8009c06:	d505      	bpl.n	8009c14 <__swrite+0x1e>
 8009c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c0c:	2302      	movs	r3, #2
 8009c0e:	2200      	movs	r2, #0
 8009c10:	f000 f8d0 	bl	8009db4 <_lseek_r>
 8009c14:	89a3      	ldrh	r3, [r4, #12]
 8009c16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c1e:	81a3      	strh	r3, [r4, #12]
 8009c20:	4632      	mov	r2, r6
 8009c22:	463b      	mov	r3, r7
 8009c24:	4628      	mov	r0, r5
 8009c26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c2a:	f000 b8e7 	b.w	8009dfc <_write_r>

08009c2e <__sseek>:
 8009c2e:	b510      	push	{r4, lr}
 8009c30:	460c      	mov	r4, r1
 8009c32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c36:	f000 f8bd 	bl	8009db4 <_lseek_r>
 8009c3a:	1c43      	adds	r3, r0, #1
 8009c3c:	89a3      	ldrh	r3, [r4, #12]
 8009c3e:	bf15      	itete	ne
 8009c40:	6560      	strne	r0, [r4, #84]	; 0x54
 8009c42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009c46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009c4a:	81a3      	strheq	r3, [r4, #12]
 8009c4c:	bf18      	it	ne
 8009c4e:	81a3      	strhne	r3, [r4, #12]
 8009c50:	bd10      	pop	{r4, pc}

08009c52 <__sclose>:
 8009c52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c56:	f000 b89d 	b.w	8009d94 <_close_r>

08009c5a <__swbuf_r>:
 8009c5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c5c:	460e      	mov	r6, r1
 8009c5e:	4614      	mov	r4, r2
 8009c60:	4605      	mov	r5, r0
 8009c62:	b118      	cbz	r0, 8009c6c <__swbuf_r+0x12>
 8009c64:	6a03      	ldr	r3, [r0, #32]
 8009c66:	b90b      	cbnz	r3, 8009c6c <__swbuf_r+0x12>
 8009c68:	f7ff ff10 	bl	8009a8c <__sinit>
 8009c6c:	69a3      	ldr	r3, [r4, #24]
 8009c6e:	60a3      	str	r3, [r4, #8]
 8009c70:	89a3      	ldrh	r3, [r4, #12]
 8009c72:	071a      	lsls	r2, r3, #28
 8009c74:	d525      	bpl.n	8009cc2 <__swbuf_r+0x68>
 8009c76:	6923      	ldr	r3, [r4, #16]
 8009c78:	b31b      	cbz	r3, 8009cc2 <__swbuf_r+0x68>
 8009c7a:	6823      	ldr	r3, [r4, #0]
 8009c7c:	6922      	ldr	r2, [r4, #16]
 8009c7e:	1a98      	subs	r0, r3, r2
 8009c80:	6963      	ldr	r3, [r4, #20]
 8009c82:	b2f6      	uxtb	r6, r6
 8009c84:	4283      	cmp	r3, r0
 8009c86:	4637      	mov	r7, r6
 8009c88:	dc04      	bgt.n	8009c94 <__swbuf_r+0x3a>
 8009c8a:	4621      	mov	r1, r4
 8009c8c:	4628      	mov	r0, r5
 8009c8e:	f000 fd47 	bl	800a720 <_fflush_r>
 8009c92:	b9e0      	cbnz	r0, 8009cce <__swbuf_r+0x74>
 8009c94:	68a3      	ldr	r3, [r4, #8]
 8009c96:	3b01      	subs	r3, #1
 8009c98:	60a3      	str	r3, [r4, #8]
 8009c9a:	6823      	ldr	r3, [r4, #0]
 8009c9c:	1c5a      	adds	r2, r3, #1
 8009c9e:	6022      	str	r2, [r4, #0]
 8009ca0:	701e      	strb	r6, [r3, #0]
 8009ca2:	6962      	ldr	r2, [r4, #20]
 8009ca4:	1c43      	adds	r3, r0, #1
 8009ca6:	429a      	cmp	r2, r3
 8009ca8:	d004      	beq.n	8009cb4 <__swbuf_r+0x5a>
 8009caa:	89a3      	ldrh	r3, [r4, #12]
 8009cac:	07db      	lsls	r3, r3, #31
 8009cae:	d506      	bpl.n	8009cbe <__swbuf_r+0x64>
 8009cb0:	2e0a      	cmp	r6, #10
 8009cb2:	d104      	bne.n	8009cbe <__swbuf_r+0x64>
 8009cb4:	4621      	mov	r1, r4
 8009cb6:	4628      	mov	r0, r5
 8009cb8:	f000 fd32 	bl	800a720 <_fflush_r>
 8009cbc:	b938      	cbnz	r0, 8009cce <__swbuf_r+0x74>
 8009cbe:	4638      	mov	r0, r7
 8009cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cc2:	4621      	mov	r1, r4
 8009cc4:	4628      	mov	r0, r5
 8009cc6:	f000 f805 	bl	8009cd4 <__swsetup_r>
 8009cca:	2800      	cmp	r0, #0
 8009ccc:	d0d5      	beq.n	8009c7a <__swbuf_r+0x20>
 8009cce:	f04f 37ff 	mov.w	r7, #4294967295
 8009cd2:	e7f4      	b.n	8009cbe <__swbuf_r+0x64>

08009cd4 <__swsetup_r>:
 8009cd4:	b538      	push	{r3, r4, r5, lr}
 8009cd6:	4b2a      	ldr	r3, [pc, #168]	; (8009d80 <__swsetup_r+0xac>)
 8009cd8:	4605      	mov	r5, r0
 8009cda:	6818      	ldr	r0, [r3, #0]
 8009cdc:	460c      	mov	r4, r1
 8009cde:	b118      	cbz	r0, 8009ce8 <__swsetup_r+0x14>
 8009ce0:	6a03      	ldr	r3, [r0, #32]
 8009ce2:	b90b      	cbnz	r3, 8009ce8 <__swsetup_r+0x14>
 8009ce4:	f7ff fed2 	bl	8009a8c <__sinit>
 8009ce8:	89a3      	ldrh	r3, [r4, #12]
 8009cea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009cee:	0718      	lsls	r0, r3, #28
 8009cf0:	d422      	bmi.n	8009d38 <__swsetup_r+0x64>
 8009cf2:	06d9      	lsls	r1, r3, #27
 8009cf4:	d407      	bmi.n	8009d06 <__swsetup_r+0x32>
 8009cf6:	2309      	movs	r3, #9
 8009cf8:	602b      	str	r3, [r5, #0]
 8009cfa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009cfe:	81a3      	strh	r3, [r4, #12]
 8009d00:	f04f 30ff 	mov.w	r0, #4294967295
 8009d04:	e034      	b.n	8009d70 <__swsetup_r+0x9c>
 8009d06:	0758      	lsls	r0, r3, #29
 8009d08:	d512      	bpl.n	8009d30 <__swsetup_r+0x5c>
 8009d0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d0c:	b141      	cbz	r1, 8009d20 <__swsetup_r+0x4c>
 8009d0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d12:	4299      	cmp	r1, r3
 8009d14:	d002      	beq.n	8009d1c <__swsetup_r+0x48>
 8009d16:	4628      	mov	r0, r5
 8009d18:	f000 f8b0 	bl	8009e7c <_free_r>
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	6363      	str	r3, [r4, #52]	; 0x34
 8009d20:	89a3      	ldrh	r3, [r4, #12]
 8009d22:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009d26:	81a3      	strh	r3, [r4, #12]
 8009d28:	2300      	movs	r3, #0
 8009d2a:	6063      	str	r3, [r4, #4]
 8009d2c:	6923      	ldr	r3, [r4, #16]
 8009d2e:	6023      	str	r3, [r4, #0]
 8009d30:	89a3      	ldrh	r3, [r4, #12]
 8009d32:	f043 0308 	orr.w	r3, r3, #8
 8009d36:	81a3      	strh	r3, [r4, #12]
 8009d38:	6923      	ldr	r3, [r4, #16]
 8009d3a:	b94b      	cbnz	r3, 8009d50 <__swsetup_r+0x7c>
 8009d3c:	89a3      	ldrh	r3, [r4, #12]
 8009d3e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009d42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d46:	d003      	beq.n	8009d50 <__swsetup_r+0x7c>
 8009d48:	4621      	mov	r1, r4
 8009d4a:	4628      	mov	r0, r5
 8009d4c:	f000 fd36 	bl	800a7bc <__smakebuf_r>
 8009d50:	89a0      	ldrh	r0, [r4, #12]
 8009d52:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d56:	f010 0301 	ands.w	r3, r0, #1
 8009d5a:	d00a      	beq.n	8009d72 <__swsetup_r+0x9e>
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	60a3      	str	r3, [r4, #8]
 8009d60:	6963      	ldr	r3, [r4, #20]
 8009d62:	425b      	negs	r3, r3
 8009d64:	61a3      	str	r3, [r4, #24]
 8009d66:	6923      	ldr	r3, [r4, #16]
 8009d68:	b943      	cbnz	r3, 8009d7c <__swsetup_r+0xa8>
 8009d6a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009d6e:	d1c4      	bne.n	8009cfa <__swsetup_r+0x26>
 8009d70:	bd38      	pop	{r3, r4, r5, pc}
 8009d72:	0781      	lsls	r1, r0, #30
 8009d74:	bf58      	it	pl
 8009d76:	6963      	ldrpl	r3, [r4, #20]
 8009d78:	60a3      	str	r3, [r4, #8]
 8009d7a:	e7f4      	b.n	8009d66 <__swsetup_r+0x92>
 8009d7c:	2000      	movs	r0, #0
 8009d7e:	e7f7      	b.n	8009d70 <__swsetup_r+0x9c>
 8009d80:	24000068 	.word	0x24000068

08009d84 <memset>:
 8009d84:	4402      	add	r2, r0
 8009d86:	4603      	mov	r3, r0
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d100      	bne.n	8009d8e <memset+0xa>
 8009d8c:	4770      	bx	lr
 8009d8e:	f803 1b01 	strb.w	r1, [r3], #1
 8009d92:	e7f9      	b.n	8009d88 <memset+0x4>

08009d94 <_close_r>:
 8009d94:	b538      	push	{r3, r4, r5, lr}
 8009d96:	4d06      	ldr	r5, [pc, #24]	; (8009db0 <_close_r+0x1c>)
 8009d98:	2300      	movs	r3, #0
 8009d9a:	4604      	mov	r4, r0
 8009d9c:	4608      	mov	r0, r1
 8009d9e:	602b      	str	r3, [r5, #0]
 8009da0:	f7f7 fb61 	bl	8001466 <_close>
 8009da4:	1c43      	adds	r3, r0, #1
 8009da6:	d102      	bne.n	8009dae <_close_r+0x1a>
 8009da8:	682b      	ldr	r3, [r5, #0]
 8009daa:	b103      	cbz	r3, 8009dae <_close_r+0x1a>
 8009dac:	6023      	str	r3, [r4, #0]
 8009dae:	bd38      	pop	{r3, r4, r5, pc}
 8009db0:	24000568 	.word	0x24000568

08009db4 <_lseek_r>:
 8009db4:	b538      	push	{r3, r4, r5, lr}
 8009db6:	4d07      	ldr	r5, [pc, #28]	; (8009dd4 <_lseek_r+0x20>)
 8009db8:	4604      	mov	r4, r0
 8009dba:	4608      	mov	r0, r1
 8009dbc:	4611      	mov	r1, r2
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	602a      	str	r2, [r5, #0]
 8009dc2:	461a      	mov	r2, r3
 8009dc4:	f7f7 fb76 	bl	80014b4 <_lseek>
 8009dc8:	1c43      	adds	r3, r0, #1
 8009dca:	d102      	bne.n	8009dd2 <_lseek_r+0x1e>
 8009dcc:	682b      	ldr	r3, [r5, #0]
 8009dce:	b103      	cbz	r3, 8009dd2 <_lseek_r+0x1e>
 8009dd0:	6023      	str	r3, [r4, #0]
 8009dd2:	bd38      	pop	{r3, r4, r5, pc}
 8009dd4:	24000568 	.word	0x24000568

08009dd8 <_read_r>:
 8009dd8:	b538      	push	{r3, r4, r5, lr}
 8009dda:	4d07      	ldr	r5, [pc, #28]	; (8009df8 <_read_r+0x20>)
 8009ddc:	4604      	mov	r4, r0
 8009dde:	4608      	mov	r0, r1
 8009de0:	4611      	mov	r1, r2
 8009de2:	2200      	movs	r2, #0
 8009de4:	602a      	str	r2, [r5, #0]
 8009de6:	461a      	mov	r2, r3
 8009de8:	f7f7 fb20 	bl	800142c <_read>
 8009dec:	1c43      	adds	r3, r0, #1
 8009dee:	d102      	bne.n	8009df6 <_read_r+0x1e>
 8009df0:	682b      	ldr	r3, [r5, #0]
 8009df2:	b103      	cbz	r3, 8009df6 <_read_r+0x1e>
 8009df4:	6023      	str	r3, [r4, #0]
 8009df6:	bd38      	pop	{r3, r4, r5, pc}
 8009df8:	24000568 	.word	0x24000568

08009dfc <_write_r>:
 8009dfc:	b538      	push	{r3, r4, r5, lr}
 8009dfe:	4d07      	ldr	r5, [pc, #28]	; (8009e1c <_write_r+0x20>)
 8009e00:	4604      	mov	r4, r0
 8009e02:	4608      	mov	r0, r1
 8009e04:	4611      	mov	r1, r2
 8009e06:	2200      	movs	r2, #0
 8009e08:	602a      	str	r2, [r5, #0]
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	f7f6 fc56 	bl	80006bc <_write>
 8009e10:	1c43      	adds	r3, r0, #1
 8009e12:	d102      	bne.n	8009e1a <_write_r+0x1e>
 8009e14:	682b      	ldr	r3, [r5, #0]
 8009e16:	b103      	cbz	r3, 8009e1a <_write_r+0x1e>
 8009e18:	6023      	str	r3, [r4, #0]
 8009e1a:	bd38      	pop	{r3, r4, r5, pc}
 8009e1c:	24000568 	.word	0x24000568

08009e20 <__errno>:
 8009e20:	4b01      	ldr	r3, [pc, #4]	; (8009e28 <__errno+0x8>)
 8009e22:	6818      	ldr	r0, [r3, #0]
 8009e24:	4770      	bx	lr
 8009e26:	bf00      	nop
 8009e28:	24000068 	.word	0x24000068

08009e2c <__libc_init_array>:
 8009e2c:	b570      	push	{r4, r5, r6, lr}
 8009e2e:	4d0d      	ldr	r5, [pc, #52]	; (8009e64 <__libc_init_array+0x38>)
 8009e30:	4c0d      	ldr	r4, [pc, #52]	; (8009e68 <__libc_init_array+0x3c>)
 8009e32:	1b64      	subs	r4, r4, r5
 8009e34:	10a4      	asrs	r4, r4, #2
 8009e36:	2600      	movs	r6, #0
 8009e38:	42a6      	cmp	r6, r4
 8009e3a:	d109      	bne.n	8009e50 <__libc_init_array+0x24>
 8009e3c:	4d0b      	ldr	r5, [pc, #44]	; (8009e6c <__libc_init_array+0x40>)
 8009e3e:	4c0c      	ldr	r4, [pc, #48]	; (8009e70 <__libc_init_array+0x44>)
 8009e40:	f000 fd2a 	bl	800a898 <_init>
 8009e44:	1b64      	subs	r4, r4, r5
 8009e46:	10a4      	asrs	r4, r4, #2
 8009e48:	2600      	movs	r6, #0
 8009e4a:	42a6      	cmp	r6, r4
 8009e4c:	d105      	bne.n	8009e5a <__libc_init_array+0x2e>
 8009e4e:	bd70      	pop	{r4, r5, r6, pc}
 8009e50:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e54:	4798      	blx	r3
 8009e56:	3601      	adds	r6, #1
 8009e58:	e7ee      	b.n	8009e38 <__libc_init_array+0xc>
 8009e5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e5e:	4798      	blx	r3
 8009e60:	3601      	adds	r6, #1
 8009e62:	e7f2      	b.n	8009e4a <__libc_init_array+0x1e>
 8009e64:	0800aaa4 	.word	0x0800aaa4
 8009e68:	0800aaa4 	.word	0x0800aaa4
 8009e6c:	0800aaa4 	.word	0x0800aaa4
 8009e70:	0800aaa8 	.word	0x0800aaa8

08009e74 <__retarget_lock_init_recursive>:
 8009e74:	4770      	bx	lr

08009e76 <__retarget_lock_acquire_recursive>:
 8009e76:	4770      	bx	lr

08009e78 <__retarget_lock_release_recursive>:
 8009e78:	4770      	bx	lr
	...

08009e7c <_free_r>:
 8009e7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e7e:	2900      	cmp	r1, #0
 8009e80:	d044      	beq.n	8009f0c <_free_r+0x90>
 8009e82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e86:	9001      	str	r0, [sp, #4]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	f1a1 0404 	sub.w	r4, r1, #4
 8009e8e:	bfb8      	it	lt
 8009e90:	18e4      	addlt	r4, r4, r3
 8009e92:	f000 f8df 	bl	800a054 <__malloc_lock>
 8009e96:	4a1e      	ldr	r2, [pc, #120]	; (8009f10 <_free_r+0x94>)
 8009e98:	9801      	ldr	r0, [sp, #4]
 8009e9a:	6813      	ldr	r3, [r2, #0]
 8009e9c:	b933      	cbnz	r3, 8009eac <_free_r+0x30>
 8009e9e:	6063      	str	r3, [r4, #4]
 8009ea0:	6014      	str	r4, [r2, #0]
 8009ea2:	b003      	add	sp, #12
 8009ea4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ea8:	f000 b8da 	b.w	800a060 <__malloc_unlock>
 8009eac:	42a3      	cmp	r3, r4
 8009eae:	d908      	bls.n	8009ec2 <_free_r+0x46>
 8009eb0:	6825      	ldr	r5, [r4, #0]
 8009eb2:	1961      	adds	r1, r4, r5
 8009eb4:	428b      	cmp	r3, r1
 8009eb6:	bf01      	itttt	eq
 8009eb8:	6819      	ldreq	r1, [r3, #0]
 8009eba:	685b      	ldreq	r3, [r3, #4]
 8009ebc:	1949      	addeq	r1, r1, r5
 8009ebe:	6021      	streq	r1, [r4, #0]
 8009ec0:	e7ed      	b.n	8009e9e <_free_r+0x22>
 8009ec2:	461a      	mov	r2, r3
 8009ec4:	685b      	ldr	r3, [r3, #4]
 8009ec6:	b10b      	cbz	r3, 8009ecc <_free_r+0x50>
 8009ec8:	42a3      	cmp	r3, r4
 8009eca:	d9fa      	bls.n	8009ec2 <_free_r+0x46>
 8009ecc:	6811      	ldr	r1, [r2, #0]
 8009ece:	1855      	adds	r5, r2, r1
 8009ed0:	42a5      	cmp	r5, r4
 8009ed2:	d10b      	bne.n	8009eec <_free_r+0x70>
 8009ed4:	6824      	ldr	r4, [r4, #0]
 8009ed6:	4421      	add	r1, r4
 8009ed8:	1854      	adds	r4, r2, r1
 8009eda:	42a3      	cmp	r3, r4
 8009edc:	6011      	str	r1, [r2, #0]
 8009ede:	d1e0      	bne.n	8009ea2 <_free_r+0x26>
 8009ee0:	681c      	ldr	r4, [r3, #0]
 8009ee2:	685b      	ldr	r3, [r3, #4]
 8009ee4:	6053      	str	r3, [r2, #4]
 8009ee6:	440c      	add	r4, r1
 8009ee8:	6014      	str	r4, [r2, #0]
 8009eea:	e7da      	b.n	8009ea2 <_free_r+0x26>
 8009eec:	d902      	bls.n	8009ef4 <_free_r+0x78>
 8009eee:	230c      	movs	r3, #12
 8009ef0:	6003      	str	r3, [r0, #0]
 8009ef2:	e7d6      	b.n	8009ea2 <_free_r+0x26>
 8009ef4:	6825      	ldr	r5, [r4, #0]
 8009ef6:	1961      	adds	r1, r4, r5
 8009ef8:	428b      	cmp	r3, r1
 8009efa:	bf04      	itt	eq
 8009efc:	6819      	ldreq	r1, [r3, #0]
 8009efe:	685b      	ldreq	r3, [r3, #4]
 8009f00:	6063      	str	r3, [r4, #4]
 8009f02:	bf04      	itt	eq
 8009f04:	1949      	addeq	r1, r1, r5
 8009f06:	6021      	streq	r1, [r4, #0]
 8009f08:	6054      	str	r4, [r2, #4]
 8009f0a:	e7ca      	b.n	8009ea2 <_free_r+0x26>
 8009f0c:	b003      	add	sp, #12
 8009f0e:	bd30      	pop	{r4, r5, pc}
 8009f10:	24000570 	.word	0x24000570

08009f14 <sbrk_aligned>:
 8009f14:	b570      	push	{r4, r5, r6, lr}
 8009f16:	4e0e      	ldr	r6, [pc, #56]	; (8009f50 <sbrk_aligned+0x3c>)
 8009f18:	460c      	mov	r4, r1
 8009f1a:	6831      	ldr	r1, [r6, #0]
 8009f1c:	4605      	mov	r5, r0
 8009f1e:	b911      	cbnz	r1, 8009f26 <sbrk_aligned+0x12>
 8009f20:	f000 fcaa 	bl	800a878 <_sbrk_r>
 8009f24:	6030      	str	r0, [r6, #0]
 8009f26:	4621      	mov	r1, r4
 8009f28:	4628      	mov	r0, r5
 8009f2a:	f000 fca5 	bl	800a878 <_sbrk_r>
 8009f2e:	1c43      	adds	r3, r0, #1
 8009f30:	d00a      	beq.n	8009f48 <sbrk_aligned+0x34>
 8009f32:	1cc4      	adds	r4, r0, #3
 8009f34:	f024 0403 	bic.w	r4, r4, #3
 8009f38:	42a0      	cmp	r0, r4
 8009f3a:	d007      	beq.n	8009f4c <sbrk_aligned+0x38>
 8009f3c:	1a21      	subs	r1, r4, r0
 8009f3e:	4628      	mov	r0, r5
 8009f40:	f000 fc9a 	bl	800a878 <_sbrk_r>
 8009f44:	3001      	adds	r0, #1
 8009f46:	d101      	bne.n	8009f4c <sbrk_aligned+0x38>
 8009f48:	f04f 34ff 	mov.w	r4, #4294967295
 8009f4c:	4620      	mov	r0, r4
 8009f4e:	bd70      	pop	{r4, r5, r6, pc}
 8009f50:	24000574 	.word	0x24000574

08009f54 <_malloc_r>:
 8009f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f58:	1ccd      	adds	r5, r1, #3
 8009f5a:	f025 0503 	bic.w	r5, r5, #3
 8009f5e:	3508      	adds	r5, #8
 8009f60:	2d0c      	cmp	r5, #12
 8009f62:	bf38      	it	cc
 8009f64:	250c      	movcc	r5, #12
 8009f66:	2d00      	cmp	r5, #0
 8009f68:	4607      	mov	r7, r0
 8009f6a:	db01      	blt.n	8009f70 <_malloc_r+0x1c>
 8009f6c:	42a9      	cmp	r1, r5
 8009f6e:	d905      	bls.n	8009f7c <_malloc_r+0x28>
 8009f70:	230c      	movs	r3, #12
 8009f72:	603b      	str	r3, [r7, #0]
 8009f74:	2600      	movs	r6, #0
 8009f76:	4630      	mov	r0, r6
 8009f78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f7c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a050 <_malloc_r+0xfc>
 8009f80:	f000 f868 	bl	800a054 <__malloc_lock>
 8009f84:	f8d8 3000 	ldr.w	r3, [r8]
 8009f88:	461c      	mov	r4, r3
 8009f8a:	bb5c      	cbnz	r4, 8009fe4 <_malloc_r+0x90>
 8009f8c:	4629      	mov	r1, r5
 8009f8e:	4638      	mov	r0, r7
 8009f90:	f7ff ffc0 	bl	8009f14 <sbrk_aligned>
 8009f94:	1c43      	adds	r3, r0, #1
 8009f96:	4604      	mov	r4, r0
 8009f98:	d155      	bne.n	800a046 <_malloc_r+0xf2>
 8009f9a:	f8d8 4000 	ldr.w	r4, [r8]
 8009f9e:	4626      	mov	r6, r4
 8009fa0:	2e00      	cmp	r6, #0
 8009fa2:	d145      	bne.n	800a030 <_malloc_r+0xdc>
 8009fa4:	2c00      	cmp	r4, #0
 8009fa6:	d048      	beq.n	800a03a <_malloc_r+0xe6>
 8009fa8:	6823      	ldr	r3, [r4, #0]
 8009faa:	4631      	mov	r1, r6
 8009fac:	4638      	mov	r0, r7
 8009fae:	eb04 0903 	add.w	r9, r4, r3
 8009fb2:	f000 fc61 	bl	800a878 <_sbrk_r>
 8009fb6:	4581      	cmp	r9, r0
 8009fb8:	d13f      	bne.n	800a03a <_malloc_r+0xe6>
 8009fba:	6821      	ldr	r1, [r4, #0]
 8009fbc:	1a6d      	subs	r5, r5, r1
 8009fbe:	4629      	mov	r1, r5
 8009fc0:	4638      	mov	r0, r7
 8009fc2:	f7ff ffa7 	bl	8009f14 <sbrk_aligned>
 8009fc6:	3001      	adds	r0, #1
 8009fc8:	d037      	beq.n	800a03a <_malloc_r+0xe6>
 8009fca:	6823      	ldr	r3, [r4, #0]
 8009fcc:	442b      	add	r3, r5
 8009fce:	6023      	str	r3, [r4, #0]
 8009fd0:	f8d8 3000 	ldr.w	r3, [r8]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d038      	beq.n	800a04a <_malloc_r+0xf6>
 8009fd8:	685a      	ldr	r2, [r3, #4]
 8009fda:	42a2      	cmp	r2, r4
 8009fdc:	d12b      	bne.n	800a036 <_malloc_r+0xe2>
 8009fde:	2200      	movs	r2, #0
 8009fe0:	605a      	str	r2, [r3, #4]
 8009fe2:	e00f      	b.n	800a004 <_malloc_r+0xb0>
 8009fe4:	6822      	ldr	r2, [r4, #0]
 8009fe6:	1b52      	subs	r2, r2, r5
 8009fe8:	d41f      	bmi.n	800a02a <_malloc_r+0xd6>
 8009fea:	2a0b      	cmp	r2, #11
 8009fec:	d917      	bls.n	800a01e <_malloc_r+0xca>
 8009fee:	1961      	adds	r1, r4, r5
 8009ff0:	42a3      	cmp	r3, r4
 8009ff2:	6025      	str	r5, [r4, #0]
 8009ff4:	bf18      	it	ne
 8009ff6:	6059      	strne	r1, [r3, #4]
 8009ff8:	6863      	ldr	r3, [r4, #4]
 8009ffa:	bf08      	it	eq
 8009ffc:	f8c8 1000 	streq.w	r1, [r8]
 800a000:	5162      	str	r2, [r4, r5]
 800a002:	604b      	str	r3, [r1, #4]
 800a004:	4638      	mov	r0, r7
 800a006:	f104 060b 	add.w	r6, r4, #11
 800a00a:	f000 f829 	bl	800a060 <__malloc_unlock>
 800a00e:	f026 0607 	bic.w	r6, r6, #7
 800a012:	1d23      	adds	r3, r4, #4
 800a014:	1af2      	subs	r2, r6, r3
 800a016:	d0ae      	beq.n	8009f76 <_malloc_r+0x22>
 800a018:	1b9b      	subs	r3, r3, r6
 800a01a:	50a3      	str	r3, [r4, r2]
 800a01c:	e7ab      	b.n	8009f76 <_malloc_r+0x22>
 800a01e:	42a3      	cmp	r3, r4
 800a020:	6862      	ldr	r2, [r4, #4]
 800a022:	d1dd      	bne.n	8009fe0 <_malloc_r+0x8c>
 800a024:	f8c8 2000 	str.w	r2, [r8]
 800a028:	e7ec      	b.n	800a004 <_malloc_r+0xb0>
 800a02a:	4623      	mov	r3, r4
 800a02c:	6864      	ldr	r4, [r4, #4]
 800a02e:	e7ac      	b.n	8009f8a <_malloc_r+0x36>
 800a030:	4634      	mov	r4, r6
 800a032:	6876      	ldr	r6, [r6, #4]
 800a034:	e7b4      	b.n	8009fa0 <_malloc_r+0x4c>
 800a036:	4613      	mov	r3, r2
 800a038:	e7cc      	b.n	8009fd4 <_malloc_r+0x80>
 800a03a:	230c      	movs	r3, #12
 800a03c:	603b      	str	r3, [r7, #0]
 800a03e:	4638      	mov	r0, r7
 800a040:	f000 f80e 	bl	800a060 <__malloc_unlock>
 800a044:	e797      	b.n	8009f76 <_malloc_r+0x22>
 800a046:	6025      	str	r5, [r4, #0]
 800a048:	e7dc      	b.n	800a004 <_malloc_r+0xb0>
 800a04a:	605b      	str	r3, [r3, #4]
 800a04c:	deff      	udf	#255	; 0xff
 800a04e:	bf00      	nop
 800a050:	24000570 	.word	0x24000570

0800a054 <__malloc_lock>:
 800a054:	4801      	ldr	r0, [pc, #4]	; (800a05c <__malloc_lock+0x8>)
 800a056:	f7ff bf0e 	b.w	8009e76 <__retarget_lock_acquire_recursive>
 800a05a:	bf00      	nop
 800a05c:	2400056c 	.word	0x2400056c

0800a060 <__malloc_unlock>:
 800a060:	4801      	ldr	r0, [pc, #4]	; (800a068 <__malloc_unlock+0x8>)
 800a062:	f7ff bf09 	b.w	8009e78 <__retarget_lock_release_recursive>
 800a066:	bf00      	nop
 800a068:	2400056c 	.word	0x2400056c

0800a06c <__sfputc_r>:
 800a06c:	6893      	ldr	r3, [r2, #8]
 800a06e:	3b01      	subs	r3, #1
 800a070:	2b00      	cmp	r3, #0
 800a072:	b410      	push	{r4}
 800a074:	6093      	str	r3, [r2, #8]
 800a076:	da08      	bge.n	800a08a <__sfputc_r+0x1e>
 800a078:	6994      	ldr	r4, [r2, #24]
 800a07a:	42a3      	cmp	r3, r4
 800a07c:	db01      	blt.n	800a082 <__sfputc_r+0x16>
 800a07e:	290a      	cmp	r1, #10
 800a080:	d103      	bne.n	800a08a <__sfputc_r+0x1e>
 800a082:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a086:	f7ff bde8 	b.w	8009c5a <__swbuf_r>
 800a08a:	6813      	ldr	r3, [r2, #0]
 800a08c:	1c58      	adds	r0, r3, #1
 800a08e:	6010      	str	r0, [r2, #0]
 800a090:	7019      	strb	r1, [r3, #0]
 800a092:	4608      	mov	r0, r1
 800a094:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a098:	4770      	bx	lr

0800a09a <__sfputs_r>:
 800a09a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a09c:	4606      	mov	r6, r0
 800a09e:	460f      	mov	r7, r1
 800a0a0:	4614      	mov	r4, r2
 800a0a2:	18d5      	adds	r5, r2, r3
 800a0a4:	42ac      	cmp	r4, r5
 800a0a6:	d101      	bne.n	800a0ac <__sfputs_r+0x12>
 800a0a8:	2000      	movs	r0, #0
 800a0aa:	e007      	b.n	800a0bc <__sfputs_r+0x22>
 800a0ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0b0:	463a      	mov	r2, r7
 800a0b2:	4630      	mov	r0, r6
 800a0b4:	f7ff ffda 	bl	800a06c <__sfputc_r>
 800a0b8:	1c43      	adds	r3, r0, #1
 800a0ba:	d1f3      	bne.n	800a0a4 <__sfputs_r+0xa>
 800a0bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a0c0 <_vfiprintf_r>:
 800a0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0c4:	460d      	mov	r5, r1
 800a0c6:	b09d      	sub	sp, #116	; 0x74
 800a0c8:	4614      	mov	r4, r2
 800a0ca:	4698      	mov	r8, r3
 800a0cc:	4606      	mov	r6, r0
 800a0ce:	b118      	cbz	r0, 800a0d8 <_vfiprintf_r+0x18>
 800a0d0:	6a03      	ldr	r3, [r0, #32]
 800a0d2:	b90b      	cbnz	r3, 800a0d8 <_vfiprintf_r+0x18>
 800a0d4:	f7ff fcda 	bl	8009a8c <__sinit>
 800a0d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0da:	07d9      	lsls	r1, r3, #31
 800a0dc:	d405      	bmi.n	800a0ea <_vfiprintf_r+0x2a>
 800a0de:	89ab      	ldrh	r3, [r5, #12]
 800a0e0:	059a      	lsls	r2, r3, #22
 800a0e2:	d402      	bmi.n	800a0ea <_vfiprintf_r+0x2a>
 800a0e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0e6:	f7ff fec6 	bl	8009e76 <__retarget_lock_acquire_recursive>
 800a0ea:	89ab      	ldrh	r3, [r5, #12]
 800a0ec:	071b      	lsls	r3, r3, #28
 800a0ee:	d501      	bpl.n	800a0f4 <_vfiprintf_r+0x34>
 800a0f0:	692b      	ldr	r3, [r5, #16]
 800a0f2:	b99b      	cbnz	r3, 800a11c <_vfiprintf_r+0x5c>
 800a0f4:	4629      	mov	r1, r5
 800a0f6:	4630      	mov	r0, r6
 800a0f8:	f7ff fdec 	bl	8009cd4 <__swsetup_r>
 800a0fc:	b170      	cbz	r0, 800a11c <_vfiprintf_r+0x5c>
 800a0fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a100:	07dc      	lsls	r4, r3, #31
 800a102:	d504      	bpl.n	800a10e <_vfiprintf_r+0x4e>
 800a104:	f04f 30ff 	mov.w	r0, #4294967295
 800a108:	b01d      	add	sp, #116	; 0x74
 800a10a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a10e:	89ab      	ldrh	r3, [r5, #12]
 800a110:	0598      	lsls	r0, r3, #22
 800a112:	d4f7      	bmi.n	800a104 <_vfiprintf_r+0x44>
 800a114:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a116:	f7ff feaf 	bl	8009e78 <__retarget_lock_release_recursive>
 800a11a:	e7f3      	b.n	800a104 <_vfiprintf_r+0x44>
 800a11c:	2300      	movs	r3, #0
 800a11e:	9309      	str	r3, [sp, #36]	; 0x24
 800a120:	2320      	movs	r3, #32
 800a122:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a126:	f8cd 800c 	str.w	r8, [sp, #12]
 800a12a:	2330      	movs	r3, #48	; 0x30
 800a12c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a2e0 <_vfiprintf_r+0x220>
 800a130:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a134:	f04f 0901 	mov.w	r9, #1
 800a138:	4623      	mov	r3, r4
 800a13a:	469a      	mov	sl, r3
 800a13c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a140:	b10a      	cbz	r2, 800a146 <_vfiprintf_r+0x86>
 800a142:	2a25      	cmp	r2, #37	; 0x25
 800a144:	d1f9      	bne.n	800a13a <_vfiprintf_r+0x7a>
 800a146:	ebba 0b04 	subs.w	fp, sl, r4
 800a14a:	d00b      	beq.n	800a164 <_vfiprintf_r+0xa4>
 800a14c:	465b      	mov	r3, fp
 800a14e:	4622      	mov	r2, r4
 800a150:	4629      	mov	r1, r5
 800a152:	4630      	mov	r0, r6
 800a154:	f7ff ffa1 	bl	800a09a <__sfputs_r>
 800a158:	3001      	adds	r0, #1
 800a15a:	f000 80a9 	beq.w	800a2b0 <_vfiprintf_r+0x1f0>
 800a15e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a160:	445a      	add	r2, fp
 800a162:	9209      	str	r2, [sp, #36]	; 0x24
 800a164:	f89a 3000 	ldrb.w	r3, [sl]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	f000 80a1 	beq.w	800a2b0 <_vfiprintf_r+0x1f0>
 800a16e:	2300      	movs	r3, #0
 800a170:	f04f 32ff 	mov.w	r2, #4294967295
 800a174:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a178:	f10a 0a01 	add.w	sl, sl, #1
 800a17c:	9304      	str	r3, [sp, #16]
 800a17e:	9307      	str	r3, [sp, #28]
 800a180:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a184:	931a      	str	r3, [sp, #104]	; 0x68
 800a186:	4654      	mov	r4, sl
 800a188:	2205      	movs	r2, #5
 800a18a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a18e:	4854      	ldr	r0, [pc, #336]	; (800a2e0 <_vfiprintf_r+0x220>)
 800a190:	f7f6 f8c6 	bl	8000320 <memchr>
 800a194:	9a04      	ldr	r2, [sp, #16]
 800a196:	b9d8      	cbnz	r0, 800a1d0 <_vfiprintf_r+0x110>
 800a198:	06d1      	lsls	r1, r2, #27
 800a19a:	bf44      	itt	mi
 800a19c:	2320      	movmi	r3, #32
 800a19e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1a2:	0713      	lsls	r3, r2, #28
 800a1a4:	bf44      	itt	mi
 800a1a6:	232b      	movmi	r3, #43	; 0x2b
 800a1a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1ac:	f89a 3000 	ldrb.w	r3, [sl]
 800a1b0:	2b2a      	cmp	r3, #42	; 0x2a
 800a1b2:	d015      	beq.n	800a1e0 <_vfiprintf_r+0x120>
 800a1b4:	9a07      	ldr	r2, [sp, #28]
 800a1b6:	4654      	mov	r4, sl
 800a1b8:	2000      	movs	r0, #0
 800a1ba:	f04f 0c0a 	mov.w	ip, #10
 800a1be:	4621      	mov	r1, r4
 800a1c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1c4:	3b30      	subs	r3, #48	; 0x30
 800a1c6:	2b09      	cmp	r3, #9
 800a1c8:	d94d      	bls.n	800a266 <_vfiprintf_r+0x1a6>
 800a1ca:	b1b0      	cbz	r0, 800a1fa <_vfiprintf_r+0x13a>
 800a1cc:	9207      	str	r2, [sp, #28]
 800a1ce:	e014      	b.n	800a1fa <_vfiprintf_r+0x13a>
 800a1d0:	eba0 0308 	sub.w	r3, r0, r8
 800a1d4:	fa09 f303 	lsl.w	r3, r9, r3
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	9304      	str	r3, [sp, #16]
 800a1dc:	46a2      	mov	sl, r4
 800a1de:	e7d2      	b.n	800a186 <_vfiprintf_r+0xc6>
 800a1e0:	9b03      	ldr	r3, [sp, #12]
 800a1e2:	1d19      	adds	r1, r3, #4
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	9103      	str	r1, [sp, #12]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	bfbb      	ittet	lt
 800a1ec:	425b      	neglt	r3, r3
 800a1ee:	f042 0202 	orrlt.w	r2, r2, #2
 800a1f2:	9307      	strge	r3, [sp, #28]
 800a1f4:	9307      	strlt	r3, [sp, #28]
 800a1f6:	bfb8      	it	lt
 800a1f8:	9204      	strlt	r2, [sp, #16]
 800a1fa:	7823      	ldrb	r3, [r4, #0]
 800a1fc:	2b2e      	cmp	r3, #46	; 0x2e
 800a1fe:	d10c      	bne.n	800a21a <_vfiprintf_r+0x15a>
 800a200:	7863      	ldrb	r3, [r4, #1]
 800a202:	2b2a      	cmp	r3, #42	; 0x2a
 800a204:	d134      	bne.n	800a270 <_vfiprintf_r+0x1b0>
 800a206:	9b03      	ldr	r3, [sp, #12]
 800a208:	1d1a      	adds	r2, r3, #4
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	9203      	str	r2, [sp, #12]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	bfb8      	it	lt
 800a212:	f04f 33ff 	movlt.w	r3, #4294967295
 800a216:	3402      	adds	r4, #2
 800a218:	9305      	str	r3, [sp, #20]
 800a21a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a2f0 <_vfiprintf_r+0x230>
 800a21e:	7821      	ldrb	r1, [r4, #0]
 800a220:	2203      	movs	r2, #3
 800a222:	4650      	mov	r0, sl
 800a224:	f7f6 f87c 	bl	8000320 <memchr>
 800a228:	b138      	cbz	r0, 800a23a <_vfiprintf_r+0x17a>
 800a22a:	9b04      	ldr	r3, [sp, #16]
 800a22c:	eba0 000a 	sub.w	r0, r0, sl
 800a230:	2240      	movs	r2, #64	; 0x40
 800a232:	4082      	lsls	r2, r0
 800a234:	4313      	orrs	r3, r2
 800a236:	3401      	adds	r4, #1
 800a238:	9304      	str	r3, [sp, #16]
 800a23a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a23e:	4829      	ldr	r0, [pc, #164]	; (800a2e4 <_vfiprintf_r+0x224>)
 800a240:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a244:	2206      	movs	r2, #6
 800a246:	f7f6 f86b 	bl	8000320 <memchr>
 800a24a:	2800      	cmp	r0, #0
 800a24c:	d03f      	beq.n	800a2ce <_vfiprintf_r+0x20e>
 800a24e:	4b26      	ldr	r3, [pc, #152]	; (800a2e8 <_vfiprintf_r+0x228>)
 800a250:	bb1b      	cbnz	r3, 800a29a <_vfiprintf_r+0x1da>
 800a252:	9b03      	ldr	r3, [sp, #12]
 800a254:	3307      	adds	r3, #7
 800a256:	f023 0307 	bic.w	r3, r3, #7
 800a25a:	3308      	adds	r3, #8
 800a25c:	9303      	str	r3, [sp, #12]
 800a25e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a260:	443b      	add	r3, r7
 800a262:	9309      	str	r3, [sp, #36]	; 0x24
 800a264:	e768      	b.n	800a138 <_vfiprintf_r+0x78>
 800a266:	fb0c 3202 	mla	r2, ip, r2, r3
 800a26a:	460c      	mov	r4, r1
 800a26c:	2001      	movs	r0, #1
 800a26e:	e7a6      	b.n	800a1be <_vfiprintf_r+0xfe>
 800a270:	2300      	movs	r3, #0
 800a272:	3401      	adds	r4, #1
 800a274:	9305      	str	r3, [sp, #20]
 800a276:	4619      	mov	r1, r3
 800a278:	f04f 0c0a 	mov.w	ip, #10
 800a27c:	4620      	mov	r0, r4
 800a27e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a282:	3a30      	subs	r2, #48	; 0x30
 800a284:	2a09      	cmp	r2, #9
 800a286:	d903      	bls.n	800a290 <_vfiprintf_r+0x1d0>
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d0c6      	beq.n	800a21a <_vfiprintf_r+0x15a>
 800a28c:	9105      	str	r1, [sp, #20]
 800a28e:	e7c4      	b.n	800a21a <_vfiprintf_r+0x15a>
 800a290:	fb0c 2101 	mla	r1, ip, r1, r2
 800a294:	4604      	mov	r4, r0
 800a296:	2301      	movs	r3, #1
 800a298:	e7f0      	b.n	800a27c <_vfiprintf_r+0x1bc>
 800a29a:	ab03      	add	r3, sp, #12
 800a29c:	9300      	str	r3, [sp, #0]
 800a29e:	462a      	mov	r2, r5
 800a2a0:	4b12      	ldr	r3, [pc, #72]	; (800a2ec <_vfiprintf_r+0x22c>)
 800a2a2:	a904      	add	r1, sp, #16
 800a2a4:	4630      	mov	r0, r6
 800a2a6:	f3af 8000 	nop.w
 800a2aa:	4607      	mov	r7, r0
 800a2ac:	1c78      	adds	r0, r7, #1
 800a2ae:	d1d6      	bne.n	800a25e <_vfiprintf_r+0x19e>
 800a2b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2b2:	07d9      	lsls	r1, r3, #31
 800a2b4:	d405      	bmi.n	800a2c2 <_vfiprintf_r+0x202>
 800a2b6:	89ab      	ldrh	r3, [r5, #12]
 800a2b8:	059a      	lsls	r2, r3, #22
 800a2ba:	d402      	bmi.n	800a2c2 <_vfiprintf_r+0x202>
 800a2bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2be:	f7ff fddb 	bl	8009e78 <__retarget_lock_release_recursive>
 800a2c2:	89ab      	ldrh	r3, [r5, #12]
 800a2c4:	065b      	lsls	r3, r3, #25
 800a2c6:	f53f af1d 	bmi.w	800a104 <_vfiprintf_r+0x44>
 800a2ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2cc:	e71c      	b.n	800a108 <_vfiprintf_r+0x48>
 800a2ce:	ab03      	add	r3, sp, #12
 800a2d0:	9300      	str	r3, [sp, #0]
 800a2d2:	462a      	mov	r2, r5
 800a2d4:	4b05      	ldr	r3, [pc, #20]	; (800a2ec <_vfiprintf_r+0x22c>)
 800a2d6:	a904      	add	r1, sp, #16
 800a2d8:	4630      	mov	r0, r6
 800a2da:	f000 f879 	bl	800a3d0 <_printf_i>
 800a2de:	e7e4      	b.n	800a2aa <_vfiprintf_r+0x1ea>
 800a2e0:	0800aa68 	.word	0x0800aa68
 800a2e4:	0800aa72 	.word	0x0800aa72
 800a2e8:	00000000 	.word	0x00000000
 800a2ec:	0800a09b 	.word	0x0800a09b
 800a2f0:	0800aa6e 	.word	0x0800aa6e

0800a2f4 <_printf_common>:
 800a2f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2f8:	4616      	mov	r6, r2
 800a2fa:	4699      	mov	r9, r3
 800a2fc:	688a      	ldr	r2, [r1, #8]
 800a2fe:	690b      	ldr	r3, [r1, #16]
 800a300:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a304:	4293      	cmp	r3, r2
 800a306:	bfb8      	it	lt
 800a308:	4613      	movlt	r3, r2
 800a30a:	6033      	str	r3, [r6, #0]
 800a30c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a310:	4607      	mov	r7, r0
 800a312:	460c      	mov	r4, r1
 800a314:	b10a      	cbz	r2, 800a31a <_printf_common+0x26>
 800a316:	3301      	adds	r3, #1
 800a318:	6033      	str	r3, [r6, #0]
 800a31a:	6823      	ldr	r3, [r4, #0]
 800a31c:	0699      	lsls	r1, r3, #26
 800a31e:	bf42      	ittt	mi
 800a320:	6833      	ldrmi	r3, [r6, #0]
 800a322:	3302      	addmi	r3, #2
 800a324:	6033      	strmi	r3, [r6, #0]
 800a326:	6825      	ldr	r5, [r4, #0]
 800a328:	f015 0506 	ands.w	r5, r5, #6
 800a32c:	d106      	bne.n	800a33c <_printf_common+0x48>
 800a32e:	f104 0a19 	add.w	sl, r4, #25
 800a332:	68e3      	ldr	r3, [r4, #12]
 800a334:	6832      	ldr	r2, [r6, #0]
 800a336:	1a9b      	subs	r3, r3, r2
 800a338:	42ab      	cmp	r3, r5
 800a33a:	dc26      	bgt.n	800a38a <_printf_common+0x96>
 800a33c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a340:	1e13      	subs	r3, r2, #0
 800a342:	6822      	ldr	r2, [r4, #0]
 800a344:	bf18      	it	ne
 800a346:	2301      	movne	r3, #1
 800a348:	0692      	lsls	r2, r2, #26
 800a34a:	d42b      	bmi.n	800a3a4 <_printf_common+0xb0>
 800a34c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a350:	4649      	mov	r1, r9
 800a352:	4638      	mov	r0, r7
 800a354:	47c0      	blx	r8
 800a356:	3001      	adds	r0, #1
 800a358:	d01e      	beq.n	800a398 <_printf_common+0xa4>
 800a35a:	6823      	ldr	r3, [r4, #0]
 800a35c:	6922      	ldr	r2, [r4, #16]
 800a35e:	f003 0306 	and.w	r3, r3, #6
 800a362:	2b04      	cmp	r3, #4
 800a364:	bf02      	ittt	eq
 800a366:	68e5      	ldreq	r5, [r4, #12]
 800a368:	6833      	ldreq	r3, [r6, #0]
 800a36a:	1aed      	subeq	r5, r5, r3
 800a36c:	68a3      	ldr	r3, [r4, #8]
 800a36e:	bf0c      	ite	eq
 800a370:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a374:	2500      	movne	r5, #0
 800a376:	4293      	cmp	r3, r2
 800a378:	bfc4      	itt	gt
 800a37a:	1a9b      	subgt	r3, r3, r2
 800a37c:	18ed      	addgt	r5, r5, r3
 800a37e:	2600      	movs	r6, #0
 800a380:	341a      	adds	r4, #26
 800a382:	42b5      	cmp	r5, r6
 800a384:	d11a      	bne.n	800a3bc <_printf_common+0xc8>
 800a386:	2000      	movs	r0, #0
 800a388:	e008      	b.n	800a39c <_printf_common+0xa8>
 800a38a:	2301      	movs	r3, #1
 800a38c:	4652      	mov	r2, sl
 800a38e:	4649      	mov	r1, r9
 800a390:	4638      	mov	r0, r7
 800a392:	47c0      	blx	r8
 800a394:	3001      	adds	r0, #1
 800a396:	d103      	bne.n	800a3a0 <_printf_common+0xac>
 800a398:	f04f 30ff 	mov.w	r0, #4294967295
 800a39c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3a0:	3501      	adds	r5, #1
 800a3a2:	e7c6      	b.n	800a332 <_printf_common+0x3e>
 800a3a4:	18e1      	adds	r1, r4, r3
 800a3a6:	1c5a      	adds	r2, r3, #1
 800a3a8:	2030      	movs	r0, #48	; 0x30
 800a3aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a3ae:	4422      	add	r2, r4
 800a3b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a3b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a3b8:	3302      	adds	r3, #2
 800a3ba:	e7c7      	b.n	800a34c <_printf_common+0x58>
 800a3bc:	2301      	movs	r3, #1
 800a3be:	4622      	mov	r2, r4
 800a3c0:	4649      	mov	r1, r9
 800a3c2:	4638      	mov	r0, r7
 800a3c4:	47c0      	blx	r8
 800a3c6:	3001      	adds	r0, #1
 800a3c8:	d0e6      	beq.n	800a398 <_printf_common+0xa4>
 800a3ca:	3601      	adds	r6, #1
 800a3cc:	e7d9      	b.n	800a382 <_printf_common+0x8e>
	...

0800a3d0 <_printf_i>:
 800a3d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a3d4:	7e0f      	ldrb	r7, [r1, #24]
 800a3d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a3d8:	2f78      	cmp	r7, #120	; 0x78
 800a3da:	4691      	mov	r9, r2
 800a3dc:	4680      	mov	r8, r0
 800a3de:	460c      	mov	r4, r1
 800a3e0:	469a      	mov	sl, r3
 800a3e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a3e6:	d807      	bhi.n	800a3f8 <_printf_i+0x28>
 800a3e8:	2f62      	cmp	r7, #98	; 0x62
 800a3ea:	d80a      	bhi.n	800a402 <_printf_i+0x32>
 800a3ec:	2f00      	cmp	r7, #0
 800a3ee:	f000 80d4 	beq.w	800a59a <_printf_i+0x1ca>
 800a3f2:	2f58      	cmp	r7, #88	; 0x58
 800a3f4:	f000 80c0 	beq.w	800a578 <_printf_i+0x1a8>
 800a3f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a3fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a400:	e03a      	b.n	800a478 <_printf_i+0xa8>
 800a402:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a406:	2b15      	cmp	r3, #21
 800a408:	d8f6      	bhi.n	800a3f8 <_printf_i+0x28>
 800a40a:	a101      	add	r1, pc, #4	; (adr r1, 800a410 <_printf_i+0x40>)
 800a40c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a410:	0800a469 	.word	0x0800a469
 800a414:	0800a47d 	.word	0x0800a47d
 800a418:	0800a3f9 	.word	0x0800a3f9
 800a41c:	0800a3f9 	.word	0x0800a3f9
 800a420:	0800a3f9 	.word	0x0800a3f9
 800a424:	0800a3f9 	.word	0x0800a3f9
 800a428:	0800a47d 	.word	0x0800a47d
 800a42c:	0800a3f9 	.word	0x0800a3f9
 800a430:	0800a3f9 	.word	0x0800a3f9
 800a434:	0800a3f9 	.word	0x0800a3f9
 800a438:	0800a3f9 	.word	0x0800a3f9
 800a43c:	0800a581 	.word	0x0800a581
 800a440:	0800a4a9 	.word	0x0800a4a9
 800a444:	0800a53b 	.word	0x0800a53b
 800a448:	0800a3f9 	.word	0x0800a3f9
 800a44c:	0800a3f9 	.word	0x0800a3f9
 800a450:	0800a5a3 	.word	0x0800a5a3
 800a454:	0800a3f9 	.word	0x0800a3f9
 800a458:	0800a4a9 	.word	0x0800a4a9
 800a45c:	0800a3f9 	.word	0x0800a3f9
 800a460:	0800a3f9 	.word	0x0800a3f9
 800a464:	0800a543 	.word	0x0800a543
 800a468:	682b      	ldr	r3, [r5, #0]
 800a46a:	1d1a      	adds	r2, r3, #4
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	602a      	str	r2, [r5, #0]
 800a470:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a474:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a478:	2301      	movs	r3, #1
 800a47a:	e09f      	b.n	800a5bc <_printf_i+0x1ec>
 800a47c:	6820      	ldr	r0, [r4, #0]
 800a47e:	682b      	ldr	r3, [r5, #0]
 800a480:	0607      	lsls	r7, r0, #24
 800a482:	f103 0104 	add.w	r1, r3, #4
 800a486:	6029      	str	r1, [r5, #0]
 800a488:	d501      	bpl.n	800a48e <_printf_i+0xbe>
 800a48a:	681e      	ldr	r6, [r3, #0]
 800a48c:	e003      	b.n	800a496 <_printf_i+0xc6>
 800a48e:	0646      	lsls	r6, r0, #25
 800a490:	d5fb      	bpl.n	800a48a <_printf_i+0xba>
 800a492:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a496:	2e00      	cmp	r6, #0
 800a498:	da03      	bge.n	800a4a2 <_printf_i+0xd2>
 800a49a:	232d      	movs	r3, #45	; 0x2d
 800a49c:	4276      	negs	r6, r6
 800a49e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4a2:	485a      	ldr	r0, [pc, #360]	; (800a60c <_printf_i+0x23c>)
 800a4a4:	230a      	movs	r3, #10
 800a4a6:	e012      	b.n	800a4ce <_printf_i+0xfe>
 800a4a8:	682b      	ldr	r3, [r5, #0]
 800a4aa:	6820      	ldr	r0, [r4, #0]
 800a4ac:	1d19      	adds	r1, r3, #4
 800a4ae:	6029      	str	r1, [r5, #0]
 800a4b0:	0605      	lsls	r5, r0, #24
 800a4b2:	d501      	bpl.n	800a4b8 <_printf_i+0xe8>
 800a4b4:	681e      	ldr	r6, [r3, #0]
 800a4b6:	e002      	b.n	800a4be <_printf_i+0xee>
 800a4b8:	0641      	lsls	r1, r0, #25
 800a4ba:	d5fb      	bpl.n	800a4b4 <_printf_i+0xe4>
 800a4bc:	881e      	ldrh	r6, [r3, #0]
 800a4be:	4853      	ldr	r0, [pc, #332]	; (800a60c <_printf_i+0x23c>)
 800a4c0:	2f6f      	cmp	r7, #111	; 0x6f
 800a4c2:	bf0c      	ite	eq
 800a4c4:	2308      	moveq	r3, #8
 800a4c6:	230a      	movne	r3, #10
 800a4c8:	2100      	movs	r1, #0
 800a4ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a4ce:	6865      	ldr	r5, [r4, #4]
 800a4d0:	60a5      	str	r5, [r4, #8]
 800a4d2:	2d00      	cmp	r5, #0
 800a4d4:	bfa2      	ittt	ge
 800a4d6:	6821      	ldrge	r1, [r4, #0]
 800a4d8:	f021 0104 	bicge.w	r1, r1, #4
 800a4dc:	6021      	strge	r1, [r4, #0]
 800a4de:	b90e      	cbnz	r6, 800a4e4 <_printf_i+0x114>
 800a4e0:	2d00      	cmp	r5, #0
 800a4e2:	d04b      	beq.n	800a57c <_printf_i+0x1ac>
 800a4e4:	4615      	mov	r5, r2
 800a4e6:	fbb6 f1f3 	udiv	r1, r6, r3
 800a4ea:	fb03 6711 	mls	r7, r3, r1, r6
 800a4ee:	5dc7      	ldrb	r7, [r0, r7]
 800a4f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a4f4:	4637      	mov	r7, r6
 800a4f6:	42bb      	cmp	r3, r7
 800a4f8:	460e      	mov	r6, r1
 800a4fa:	d9f4      	bls.n	800a4e6 <_printf_i+0x116>
 800a4fc:	2b08      	cmp	r3, #8
 800a4fe:	d10b      	bne.n	800a518 <_printf_i+0x148>
 800a500:	6823      	ldr	r3, [r4, #0]
 800a502:	07de      	lsls	r6, r3, #31
 800a504:	d508      	bpl.n	800a518 <_printf_i+0x148>
 800a506:	6923      	ldr	r3, [r4, #16]
 800a508:	6861      	ldr	r1, [r4, #4]
 800a50a:	4299      	cmp	r1, r3
 800a50c:	bfde      	ittt	le
 800a50e:	2330      	movle	r3, #48	; 0x30
 800a510:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a514:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a518:	1b52      	subs	r2, r2, r5
 800a51a:	6122      	str	r2, [r4, #16]
 800a51c:	f8cd a000 	str.w	sl, [sp]
 800a520:	464b      	mov	r3, r9
 800a522:	aa03      	add	r2, sp, #12
 800a524:	4621      	mov	r1, r4
 800a526:	4640      	mov	r0, r8
 800a528:	f7ff fee4 	bl	800a2f4 <_printf_common>
 800a52c:	3001      	adds	r0, #1
 800a52e:	d14a      	bne.n	800a5c6 <_printf_i+0x1f6>
 800a530:	f04f 30ff 	mov.w	r0, #4294967295
 800a534:	b004      	add	sp, #16
 800a536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a53a:	6823      	ldr	r3, [r4, #0]
 800a53c:	f043 0320 	orr.w	r3, r3, #32
 800a540:	6023      	str	r3, [r4, #0]
 800a542:	4833      	ldr	r0, [pc, #204]	; (800a610 <_printf_i+0x240>)
 800a544:	2778      	movs	r7, #120	; 0x78
 800a546:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a54a:	6823      	ldr	r3, [r4, #0]
 800a54c:	6829      	ldr	r1, [r5, #0]
 800a54e:	061f      	lsls	r7, r3, #24
 800a550:	f851 6b04 	ldr.w	r6, [r1], #4
 800a554:	d402      	bmi.n	800a55c <_printf_i+0x18c>
 800a556:	065f      	lsls	r7, r3, #25
 800a558:	bf48      	it	mi
 800a55a:	b2b6      	uxthmi	r6, r6
 800a55c:	07df      	lsls	r7, r3, #31
 800a55e:	bf48      	it	mi
 800a560:	f043 0320 	orrmi.w	r3, r3, #32
 800a564:	6029      	str	r1, [r5, #0]
 800a566:	bf48      	it	mi
 800a568:	6023      	strmi	r3, [r4, #0]
 800a56a:	b91e      	cbnz	r6, 800a574 <_printf_i+0x1a4>
 800a56c:	6823      	ldr	r3, [r4, #0]
 800a56e:	f023 0320 	bic.w	r3, r3, #32
 800a572:	6023      	str	r3, [r4, #0]
 800a574:	2310      	movs	r3, #16
 800a576:	e7a7      	b.n	800a4c8 <_printf_i+0xf8>
 800a578:	4824      	ldr	r0, [pc, #144]	; (800a60c <_printf_i+0x23c>)
 800a57a:	e7e4      	b.n	800a546 <_printf_i+0x176>
 800a57c:	4615      	mov	r5, r2
 800a57e:	e7bd      	b.n	800a4fc <_printf_i+0x12c>
 800a580:	682b      	ldr	r3, [r5, #0]
 800a582:	6826      	ldr	r6, [r4, #0]
 800a584:	6961      	ldr	r1, [r4, #20]
 800a586:	1d18      	adds	r0, r3, #4
 800a588:	6028      	str	r0, [r5, #0]
 800a58a:	0635      	lsls	r5, r6, #24
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	d501      	bpl.n	800a594 <_printf_i+0x1c4>
 800a590:	6019      	str	r1, [r3, #0]
 800a592:	e002      	b.n	800a59a <_printf_i+0x1ca>
 800a594:	0670      	lsls	r0, r6, #25
 800a596:	d5fb      	bpl.n	800a590 <_printf_i+0x1c0>
 800a598:	8019      	strh	r1, [r3, #0]
 800a59a:	2300      	movs	r3, #0
 800a59c:	6123      	str	r3, [r4, #16]
 800a59e:	4615      	mov	r5, r2
 800a5a0:	e7bc      	b.n	800a51c <_printf_i+0x14c>
 800a5a2:	682b      	ldr	r3, [r5, #0]
 800a5a4:	1d1a      	adds	r2, r3, #4
 800a5a6:	602a      	str	r2, [r5, #0]
 800a5a8:	681d      	ldr	r5, [r3, #0]
 800a5aa:	6862      	ldr	r2, [r4, #4]
 800a5ac:	2100      	movs	r1, #0
 800a5ae:	4628      	mov	r0, r5
 800a5b0:	f7f5 feb6 	bl	8000320 <memchr>
 800a5b4:	b108      	cbz	r0, 800a5ba <_printf_i+0x1ea>
 800a5b6:	1b40      	subs	r0, r0, r5
 800a5b8:	6060      	str	r0, [r4, #4]
 800a5ba:	6863      	ldr	r3, [r4, #4]
 800a5bc:	6123      	str	r3, [r4, #16]
 800a5be:	2300      	movs	r3, #0
 800a5c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a5c4:	e7aa      	b.n	800a51c <_printf_i+0x14c>
 800a5c6:	6923      	ldr	r3, [r4, #16]
 800a5c8:	462a      	mov	r2, r5
 800a5ca:	4649      	mov	r1, r9
 800a5cc:	4640      	mov	r0, r8
 800a5ce:	47d0      	blx	sl
 800a5d0:	3001      	adds	r0, #1
 800a5d2:	d0ad      	beq.n	800a530 <_printf_i+0x160>
 800a5d4:	6823      	ldr	r3, [r4, #0]
 800a5d6:	079b      	lsls	r3, r3, #30
 800a5d8:	d413      	bmi.n	800a602 <_printf_i+0x232>
 800a5da:	68e0      	ldr	r0, [r4, #12]
 800a5dc:	9b03      	ldr	r3, [sp, #12]
 800a5de:	4298      	cmp	r0, r3
 800a5e0:	bfb8      	it	lt
 800a5e2:	4618      	movlt	r0, r3
 800a5e4:	e7a6      	b.n	800a534 <_printf_i+0x164>
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	4632      	mov	r2, r6
 800a5ea:	4649      	mov	r1, r9
 800a5ec:	4640      	mov	r0, r8
 800a5ee:	47d0      	blx	sl
 800a5f0:	3001      	adds	r0, #1
 800a5f2:	d09d      	beq.n	800a530 <_printf_i+0x160>
 800a5f4:	3501      	adds	r5, #1
 800a5f6:	68e3      	ldr	r3, [r4, #12]
 800a5f8:	9903      	ldr	r1, [sp, #12]
 800a5fa:	1a5b      	subs	r3, r3, r1
 800a5fc:	42ab      	cmp	r3, r5
 800a5fe:	dcf2      	bgt.n	800a5e6 <_printf_i+0x216>
 800a600:	e7eb      	b.n	800a5da <_printf_i+0x20a>
 800a602:	2500      	movs	r5, #0
 800a604:	f104 0619 	add.w	r6, r4, #25
 800a608:	e7f5      	b.n	800a5f6 <_printf_i+0x226>
 800a60a:	bf00      	nop
 800a60c:	0800aa79 	.word	0x0800aa79
 800a610:	0800aa8a 	.word	0x0800aa8a

0800a614 <__sflush_r>:
 800a614:	898a      	ldrh	r2, [r1, #12]
 800a616:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a61a:	4605      	mov	r5, r0
 800a61c:	0710      	lsls	r0, r2, #28
 800a61e:	460c      	mov	r4, r1
 800a620:	d458      	bmi.n	800a6d4 <__sflush_r+0xc0>
 800a622:	684b      	ldr	r3, [r1, #4]
 800a624:	2b00      	cmp	r3, #0
 800a626:	dc05      	bgt.n	800a634 <__sflush_r+0x20>
 800a628:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	dc02      	bgt.n	800a634 <__sflush_r+0x20>
 800a62e:	2000      	movs	r0, #0
 800a630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a634:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a636:	2e00      	cmp	r6, #0
 800a638:	d0f9      	beq.n	800a62e <__sflush_r+0x1a>
 800a63a:	2300      	movs	r3, #0
 800a63c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a640:	682f      	ldr	r7, [r5, #0]
 800a642:	6a21      	ldr	r1, [r4, #32]
 800a644:	602b      	str	r3, [r5, #0]
 800a646:	d032      	beq.n	800a6ae <__sflush_r+0x9a>
 800a648:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a64a:	89a3      	ldrh	r3, [r4, #12]
 800a64c:	075a      	lsls	r2, r3, #29
 800a64e:	d505      	bpl.n	800a65c <__sflush_r+0x48>
 800a650:	6863      	ldr	r3, [r4, #4]
 800a652:	1ac0      	subs	r0, r0, r3
 800a654:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a656:	b10b      	cbz	r3, 800a65c <__sflush_r+0x48>
 800a658:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a65a:	1ac0      	subs	r0, r0, r3
 800a65c:	2300      	movs	r3, #0
 800a65e:	4602      	mov	r2, r0
 800a660:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a662:	6a21      	ldr	r1, [r4, #32]
 800a664:	4628      	mov	r0, r5
 800a666:	47b0      	blx	r6
 800a668:	1c43      	adds	r3, r0, #1
 800a66a:	89a3      	ldrh	r3, [r4, #12]
 800a66c:	d106      	bne.n	800a67c <__sflush_r+0x68>
 800a66e:	6829      	ldr	r1, [r5, #0]
 800a670:	291d      	cmp	r1, #29
 800a672:	d82b      	bhi.n	800a6cc <__sflush_r+0xb8>
 800a674:	4a29      	ldr	r2, [pc, #164]	; (800a71c <__sflush_r+0x108>)
 800a676:	410a      	asrs	r2, r1
 800a678:	07d6      	lsls	r6, r2, #31
 800a67a:	d427      	bmi.n	800a6cc <__sflush_r+0xb8>
 800a67c:	2200      	movs	r2, #0
 800a67e:	6062      	str	r2, [r4, #4]
 800a680:	04d9      	lsls	r1, r3, #19
 800a682:	6922      	ldr	r2, [r4, #16]
 800a684:	6022      	str	r2, [r4, #0]
 800a686:	d504      	bpl.n	800a692 <__sflush_r+0x7e>
 800a688:	1c42      	adds	r2, r0, #1
 800a68a:	d101      	bne.n	800a690 <__sflush_r+0x7c>
 800a68c:	682b      	ldr	r3, [r5, #0]
 800a68e:	b903      	cbnz	r3, 800a692 <__sflush_r+0x7e>
 800a690:	6560      	str	r0, [r4, #84]	; 0x54
 800a692:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a694:	602f      	str	r7, [r5, #0]
 800a696:	2900      	cmp	r1, #0
 800a698:	d0c9      	beq.n	800a62e <__sflush_r+0x1a>
 800a69a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a69e:	4299      	cmp	r1, r3
 800a6a0:	d002      	beq.n	800a6a8 <__sflush_r+0x94>
 800a6a2:	4628      	mov	r0, r5
 800a6a4:	f7ff fbea 	bl	8009e7c <_free_r>
 800a6a8:	2000      	movs	r0, #0
 800a6aa:	6360      	str	r0, [r4, #52]	; 0x34
 800a6ac:	e7c0      	b.n	800a630 <__sflush_r+0x1c>
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	4628      	mov	r0, r5
 800a6b2:	47b0      	blx	r6
 800a6b4:	1c41      	adds	r1, r0, #1
 800a6b6:	d1c8      	bne.n	800a64a <__sflush_r+0x36>
 800a6b8:	682b      	ldr	r3, [r5, #0]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d0c5      	beq.n	800a64a <__sflush_r+0x36>
 800a6be:	2b1d      	cmp	r3, #29
 800a6c0:	d001      	beq.n	800a6c6 <__sflush_r+0xb2>
 800a6c2:	2b16      	cmp	r3, #22
 800a6c4:	d101      	bne.n	800a6ca <__sflush_r+0xb6>
 800a6c6:	602f      	str	r7, [r5, #0]
 800a6c8:	e7b1      	b.n	800a62e <__sflush_r+0x1a>
 800a6ca:	89a3      	ldrh	r3, [r4, #12]
 800a6cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6d0:	81a3      	strh	r3, [r4, #12]
 800a6d2:	e7ad      	b.n	800a630 <__sflush_r+0x1c>
 800a6d4:	690f      	ldr	r7, [r1, #16]
 800a6d6:	2f00      	cmp	r7, #0
 800a6d8:	d0a9      	beq.n	800a62e <__sflush_r+0x1a>
 800a6da:	0793      	lsls	r3, r2, #30
 800a6dc:	680e      	ldr	r6, [r1, #0]
 800a6de:	bf08      	it	eq
 800a6e0:	694b      	ldreq	r3, [r1, #20]
 800a6e2:	600f      	str	r7, [r1, #0]
 800a6e4:	bf18      	it	ne
 800a6e6:	2300      	movne	r3, #0
 800a6e8:	eba6 0807 	sub.w	r8, r6, r7
 800a6ec:	608b      	str	r3, [r1, #8]
 800a6ee:	f1b8 0f00 	cmp.w	r8, #0
 800a6f2:	dd9c      	ble.n	800a62e <__sflush_r+0x1a>
 800a6f4:	6a21      	ldr	r1, [r4, #32]
 800a6f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a6f8:	4643      	mov	r3, r8
 800a6fa:	463a      	mov	r2, r7
 800a6fc:	4628      	mov	r0, r5
 800a6fe:	47b0      	blx	r6
 800a700:	2800      	cmp	r0, #0
 800a702:	dc06      	bgt.n	800a712 <__sflush_r+0xfe>
 800a704:	89a3      	ldrh	r3, [r4, #12]
 800a706:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a70a:	81a3      	strh	r3, [r4, #12]
 800a70c:	f04f 30ff 	mov.w	r0, #4294967295
 800a710:	e78e      	b.n	800a630 <__sflush_r+0x1c>
 800a712:	4407      	add	r7, r0
 800a714:	eba8 0800 	sub.w	r8, r8, r0
 800a718:	e7e9      	b.n	800a6ee <__sflush_r+0xda>
 800a71a:	bf00      	nop
 800a71c:	dfbffffe 	.word	0xdfbffffe

0800a720 <_fflush_r>:
 800a720:	b538      	push	{r3, r4, r5, lr}
 800a722:	690b      	ldr	r3, [r1, #16]
 800a724:	4605      	mov	r5, r0
 800a726:	460c      	mov	r4, r1
 800a728:	b913      	cbnz	r3, 800a730 <_fflush_r+0x10>
 800a72a:	2500      	movs	r5, #0
 800a72c:	4628      	mov	r0, r5
 800a72e:	bd38      	pop	{r3, r4, r5, pc}
 800a730:	b118      	cbz	r0, 800a73a <_fflush_r+0x1a>
 800a732:	6a03      	ldr	r3, [r0, #32]
 800a734:	b90b      	cbnz	r3, 800a73a <_fflush_r+0x1a>
 800a736:	f7ff f9a9 	bl	8009a8c <__sinit>
 800a73a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d0f3      	beq.n	800a72a <_fflush_r+0xa>
 800a742:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a744:	07d0      	lsls	r0, r2, #31
 800a746:	d404      	bmi.n	800a752 <_fflush_r+0x32>
 800a748:	0599      	lsls	r1, r3, #22
 800a74a:	d402      	bmi.n	800a752 <_fflush_r+0x32>
 800a74c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a74e:	f7ff fb92 	bl	8009e76 <__retarget_lock_acquire_recursive>
 800a752:	4628      	mov	r0, r5
 800a754:	4621      	mov	r1, r4
 800a756:	f7ff ff5d 	bl	800a614 <__sflush_r>
 800a75a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a75c:	07da      	lsls	r2, r3, #31
 800a75e:	4605      	mov	r5, r0
 800a760:	d4e4      	bmi.n	800a72c <_fflush_r+0xc>
 800a762:	89a3      	ldrh	r3, [r4, #12]
 800a764:	059b      	lsls	r3, r3, #22
 800a766:	d4e1      	bmi.n	800a72c <_fflush_r+0xc>
 800a768:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a76a:	f7ff fb85 	bl	8009e78 <__retarget_lock_release_recursive>
 800a76e:	e7dd      	b.n	800a72c <_fflush_r+0xc>

0800a770 <__swhatbuf_r>:
 800a770:	b570      	push	{r4, r5, r6, lr}
 800a772:	460c      	mov	r4, r1
 800a774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a778:	2900      	cmp	r1, #0
 800a77a:	b096      	sub	sp, #88	; 0x58
 800a77c:	4615      	mov	r5, r2
 800a77e:	461e      	mov	r6, r3
 800a780:	da0d      	bge.n	800a79e <__swhatbuf_r+0x2e>
 800a782:	89a3      	ldrh	r3, [r4, #12]
 800a784:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a788:	f04f 0100 	mov.w	r1, #0
 800a78c:	bf0c      	ite	eq
 800a78e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a792:	2340      	movne	r3, #64	; 0x40
 800a794:	2000      	movs	r0, #0
 800a796:	6031      	str	r1, [r6, #0]
 800a798:	602b      	str	r3, [r5, #0]
 800a79a:	b016      	add	sp, #88	; 0x58
 800a79c:	bd70      	pop	{r4, r5, r6, pc}
 800a79e:	466a      	mov	r2, sp
 800a7a0:	f000 f848 	bl	800a834 <_fstat_r>
 800a7a4:	2800      	cmp	r0, #0
 800a7a6:	dbec      	blt.n	800a782 <__swhatbuf_r+0x12>
 800a7a8:	9901      	ldr	r1, [sp, #4]
 800a7aa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a7ae:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a7b2:	4259      	negs	r1, r3
 800a7b4:	4159      	adcs	r1, r3
 800a7b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7ba:	e7eb      	b.n	800a794 <__swhatbuf_r+0x24>

0800a7bc <__smakebuf_r>:
 800a7bc:	898b      	ldrh	r3, [r1, #12]
 800a7be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a7c0:	079d      	lsls	r5, r3, #30
 800a7c2:	4606      	mov	r6, r0
 800a7c4:	460c      	mov	r4, r1
 800a7c6:	d507      	bpl.n	800a7d8 <__smakebuf_r+0x1c>
 800a7c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a7cc:	6023      	str	r3, [r4, #0]
 800a7ce:	6123      	str	r3, [r4, #16]
 800a7d0:	2301      	movs	r3, #1
 800a7d2:	6163      	str	r3, [r4, #20]
 800a7d4:	b002      	add	sp, #8
 800a7d6:	bd70      	pop	{r4, r5, r6, pc}
 800a7d8:	ab01      	add	r3, sp, #4
 800a7da:	466a      	mov	r2, sp
 800a7dc:	f7ff ffc8 	bl	800a770 <__swhatbuf_r>
 800a7e0:	9900      	ldr	r1, [sp, #0]
 800a7e2:	4605      	mov	r5, r0
 800a7e4:	4630      	mov	r0, r6
 800a7e6:	f7ff fbb5 	bl	8009f54 <_malloc_r>
 800a7ea:	b948      	cbnz	r0, 800a800 <__smakebuf_r+0x44>
 800a7ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7f0:	059a      	lsls	r2, r3, #22
 800a7f2:	d4ef      	bmi.n	800a7d4 <__smakebuf_r+0x18>
 800a7f4:	f023 0303 	bic.w	r3, r3, #3
 800a7f8:	f043 0302 	orr.w	r3, r3, #2
 800a7fc:	81a3      	strh	r3, [r4, #12]
 800a7fe:	e7e3      	b.n	800a7c8 <__smakebuf_r+0xc>
 800a800:	89a3      	ldrh	r3, [r4, #12]
 800a802:	6020      	str	r0, [r4, #0]
 800a804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a808:	81a3      	strh	r3, [r4, #12]
 800a80a:	9b00      	ldr	r3, [sp, #0]
 800a80c:	6163      	str	r3, [r4, #20]
 800a80e:	9b01      	ldr	r3, [sp, #4]
 800a810:	6120      	str	r0, [r4, #16]
 800a812:	b15b      	cbz	r3, 800a82c <__smakebuf_r+0x70>
 800a814:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a818:	4630      	mov	r0, r6
 800a81a:	f000 f81d 	bl	800a858 <_isatty_r>
 800a81e:	b128      	cbz	r0, 800a82c <__smakebuf_r+0x70>
 800a820:	89a3      	ldrh	r3, [r4, #12]
 800a822:	f023 0303 	bic.w	r3, r3, #3
 800a826:	f043 0301 	orr.w	r3, r3, #1
 800a82a:	81a3      	strh	r3, [r4, #12]
 800a82c:	89a3      	ldrh	r3, [r4, #12]
 800a82e:	431d      	orrs	r5, r3
 800a830:	81a5      	strh	r5, [r4, #12]
 800a832:	e7cf      	b.n	800a7d4 <__smakebuf_r+0x18>

0800a834 <_fstat_r>:
 800a834:	b538      	push	{r3, r4, r5, lr}
 800a836:	4d07      	ldr	r5, [pc, #28]	; (800a854 <_fstat_r+0x20>)
 800a838:	2300      	movs	r3, #0
 800a83a:	4604      	mov	r4, r0
 800a83c:	4608      	mov	r0, r1
 800a83e:	4611      	mov	r1, r2
 800a840:	602b      	str	r3, [r5, #0]
 800a842:	f7f6 fe1c 	bl	800147e <_fstat>
 800a846:	1c43      	adds	r3, r0, #1
 800a848:	d102      	bne.n	800a850 <_fstat_r+0x1c>
 800a84a:	682b      	ldr	r3, [r5, #0]
 800a84c:	b103      	cbz	r3, 800a850 <_fstat_r+0x1c>
 800a84e:	6023      	str	r3, [r4, #0]
 800a850:	bd38      	pop	{r3, r4, r5, pc}
 800a852:	bf00      	nop
 800a854:	24000568 	.word	0x24000568

0800a858 <_isatty_r>:
 800a858:	b538      	push	{r3, r4, r5, lr}
 800a85a:	4d06      	ldr	r5, [pc, #24]	; (800a874 <_isatty_r+0x1c>)
 800a85c:	2300      	movs	r3, #0
 800a85e:	4604      	mov	r4, r0
 800a860:	4608      	mov	r0, r1
 800a862:	602b      	str	r3, [r5, #0]
 800a864:	f7f6 fe1b 	bl	800149e <_isatty>
 800a868:	1c43      	adds	r3, r0, #1
 800a86a:	d102      	bne.n	800a872 <_isatty_r+0x1a>
 800a86c:	682b      	ldr	r3, [r5, #0]
 800a86e:	b103      	cbz	r3, 800a872 <_isatty_r+0x1a>
 800a870:	6023      	str	r3, [r4, #0]
 800a872:	bd38      	pop	{r3, r4, r5, pc}
 800a874:	24000568 	.word	0x24000568

0800a878 <_sbrk_r>:
 800a878:	b538      	push	{r3, r4, r5, lr}
 800a87a:	4d06      	ldr	r5, [pc, #24]	; (800a894 <_sbrk_r+0x1c>)
 800a87c:	2300      	movs	r3, #0
 800a87e:	4604      	mov	r4, r0
 800a880:	4608      	mov	r0, r1
 800a882:	602b      	str	r3, [r5, #0]
 800a884:	f7f6 fe24 	bl	80014d0 <_sbrk>
 800a888:	1c43      	adds	r3, r0, #1
 800a88a:	d102      	bne.n	800a892 <_sbrk_r+0x1a>
 800a88c:	682b      	ldr	r3, [r5, #0]
 800a88e:	b103      	cbz	r3, 800a892 <_sbrk_r+0x1a>
 800a890:	6023      	str	r3, [r4, #0]
 800a892:	bd38      	pop	{r3, r4, r5, pc}
 800a894:	24000568 	.word	0x24000568

0800a898 <_init>:
 800a898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a89a:	bf00      	nop
 800a89c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a89e:	bc08      	pop	{r3}
 800a8a0:	469e      	mov	lr, r3
 800a8a2:	4770      	bx	lr

0800a8a4 <_fini>:
 800a8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8a6:	bf00      	nop
 800a8a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8aa:	bc08      	pop	{r3}
 800a8ac:	469e      	mov	lr, r3
 800a8ae:	4770      	bx	lr
