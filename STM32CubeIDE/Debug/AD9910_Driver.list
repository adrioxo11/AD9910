
AD9910_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5d8  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  0800a8a8  0800a8a8  0001a8a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800aa80  0800aa80  0001aa80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800aa88  0800aa88  0001aa88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800aa8c  0800aa8c  0001aa8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  0800aa90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  2400006c  0800aafc  0002006c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000cc  0800ab5c  000200cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000448  24000130  0800abbc  00020130  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  24000578  0800abbc  00020578  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002015a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017b4f  00000000  00000000  0002019d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b67  00000000  00000000  00037cec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fc8  00000000  00000000  0003a858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c2a  00000000  00000000  0003b820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003444a  00000000  00000000  0003c44a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016d80  00000000  00000000  00070894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0014ccb9  00000000  00000000  00087614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000049f0  00000000  00000000  001d42d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008e  00000000  00000000  001d8cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000130 	.word	0x24000130
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800a890 	.word	0x0800a890

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000134 	.word	0x24000134
 800030c:	0800a890 	.word	0x0800a890

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b970 	b.w	80006b8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9e08      	ldr	r6, [sp, #32]
 80003f6:	460d      	mov	r5, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	460f      	mov	r7, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4694      	mov	ip, r2
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0xe2>
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	b143      	cbz	r3, 800041e <__udivmoddi4+0x2e>
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	f1c3 0220 	rsb	r2, r3, #32
 8000414:	409f      	lsls	r7, r3
 8000416:	fa20 f202 	lsr.w	r2, r0, r2
 800041a:	4317      	orrs	r7, r2
 800041c:	409c      	lsls	r4, r3
 800041e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000422:	fa1f f58c 	uxth.w	r5, ip
 8000426:	fbb7 f1fe 	udiv	r1, r7, lr
 800042a:	0c22      	lsrs	r2, r4, #16
 800042c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000430:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000434:	fb01 f005 	mul.w	r0, r1, r5
 8000438:	4290      	cmp	r0, r2
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x62>
 800043c:	eb1c 0202 	adds.w	r2, ip, r2
 8000440:	f101 37ff 	add.w	r7, r1, #4294967295
 8000444:	f080 811c 	bcs.w	8000680 <__udivmoddi4+0x290>
 8000448:	4290      	cmp	r0, r2
 800044a:	f240 8119 	bls.w	8000680 <__udivmoddi4+0x290>
 800044e:	3902      	subs	r1, #2
 8000450:	4462      	add	r2, ip
 8000452:	1a12      	subs	r2, r2, r0
 8000454:	b2a4      	uxth	r4, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000462:	fb00 f505 	mul.w	r5, r0, r5
 8000466:	42a5      	cmp	r5, r4
 8000468:	d90a      	bls.n	8000480 <__udivmoddi4+0x90>
 800046a:	eb1c 0404 	adds.w	r4, ip, r4
 800046e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000472:	f080 8107 	bcs.w	8000684 <__udivmoddi4+0x294>
 8000476:	42a5      	cmp	r5, r4
 8000478:	f240 8104 	bls.w	8000684 <__udivmoddi4+0x294>
 800047c:	4464      	add	r4, ip
 800047e:	3802      	subs	r0, #2
 8000480:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000484:	1b64      	subs	r4, r4, r5
 8000486:	2100      	movs	r1, #0
 8000488:	b11e      	cbz	r6, 8000492 <__udivmoddi4+0xa2>
 800048a:	40dc      	lsrs	r4, r3
 800048c:	2300      	movs	r3, #0
 800048e:	e9c6 4300 	strd	r4, r3, [r6]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0xbc>
 800049a:	2e00      	cmp	r6, #0
 800049c:	f000 80ed 	beq.w	800067a <__udivmoddi4+0x28a>
 80004a0:	2100      	movs	r1, #0
 80004a2:	e9c6 0500 	strd	r0, r5, [r6]
 80004a6:	4608      	mov	r0, r1
 80004a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ac:	fab3 f183 	clz	r1, r3
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d149      	bne.n	8000548 <__udivmoddi4+0x158>
 80004b4:	42ab      	cmp	r3, r5
 80004b6:	d302      	bcc.n	80004be <__udivmoddi4+0xce>
 80004b8:	4282      	cmp	r2, r0
 80004ba:	f200 80f8 	bhi.w	80006ae <__udivmoddi4+0x2be>
 80004be:	1a84      	subs	r4, r0, r2
 80004c0:	eb65 0203 	sbc.w	r2, r5, r3
 80004c4:	2001      	movs	r0, #1
 80004c6:	4617      	mov	r7, r2
 80004c8:	2e00      	cmp	r6, #0
 80004ca:	d0e2      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	e9c6 4700 	strd	r4, r7, [r6]
 80004d0:	e7df      	b.n	8000492 <__udivmoddi4+0xa2>
 80004d2:	b902      	cbnz	r2, 80004d6 <__udivmoddi4+0xe6>
 80004d4:	deff      	udf	#255	; 0xff
 80004d6:	fab2 f382 	clz	r3, r2
 80004da:	2b00      	cmp	r3, #0
 80004dc:	f040 8090 	bne.w	8000600 <__udivmoddi4+0x210>
 80004e0:	1a8a      	subs	r2, r1, r2
 80004e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e6:	fa1f fe8c 	uxth.w	lr, ip
 80004ea:	2101      	movs	r1, #1
 80004ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80004f0:	fb07 2015 	mls	r0, r7, r5, r2
 80004f4:	0c22      	lsrs	r2, r4, #16
 80004f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004fa:	fb0e f005 	mul.w	r0, lr, r5
 80004fe:	4290      	cmp	r0, r2
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x124>
 8000502:	eb1c 0202 	adds.w	r2, ip, r2
 8000506:	f105 38ff 	add.w	r8, r5, #4294967295
 800050a:	d202      	bcs.n	8000512 <__udivmoddi4+0x122>
 800050c:	4290      	cmp	r0, r2
 800050e:	f200 80cb 	bhi.w	80006a8 <__udivmoddi4+0x2b8>
 8000512:	4645      	mov	r5, r8
 8000514:	1a12      	subs	r2, r2, r0
 8000516:	b2a4      	uxth	r4, r4
 8000518:	fbb2 f0f7 	udiv	r0, r2, r7
 800051c:	fb07 2210 	mls	r2, r7, r0, r2
 8000520:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000524:	fb0e fe00 	mul.w	lr, lr, r0
 8000528:	45a6      	cmp	lr, r4
 800052a:	d908      	bls.n	800053e <__udivmoddi4+0x14e>
 800052c:	eb1c 0404 	adds.w	r4, ip, r4
 8000530:	f100 32ff 	add.w	r2, r0, #4294967295
 8000534:	d202      	bcs.n	800053c <__udivmoddi4+0x14c>
 8000536:	45a6      	cmp	lr, r4
 8000538:	f200 80bb 	bhi.w	80006b2 <__udivmoddi4+0x2c2>
 800053c:	4610      	mov	r0, r2
 800053e:	eba4 040e 	sub.w	r4, r4, lr
 8000542:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000546:	e79f      	b.n	8000488 <__udivmoddi4+0x98>
 8000548:	f1c1 0720 	rsb	r7, r1, #32
 800054c:	408b      	lsls	r3, r1
 800054e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000552:	ea4c 0c03 	orr.w	ip, ip, r3
 8000556:	fa05 f401 	lsl.w	r4, r5, r1
 800055a:	fa20 f307 	lsr.w	r3, r0, r7
 800055e:	40fd      	lsrs	r5, r7
 8000560:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000564:	4323      	orrs	r3, r4
 8000566:	fbb5 f8f9 	udiv	r8, r5, r9
 800056a:	fa1f fe8c 	uxth.w	lr, ip
 800056e:	fb09 5518 	mls	r5, r9, r8, r5
 8000572:	0c1c      	lsrs	r4, r3, #16
 8000574:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000578:	fb08 f50e 	mul.w	r5, r8, lr
 800057c:	42a5      	cmp	r5, r4
 800057e:	fa02 f201 	lsl.w	r2, r2, r1
 8000582:	fa00 f001 	lsl.w	r0, r0, r1
 8000586:	d90b      	bls.n	80005a0 <__udivmoddi4+0x1b0>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000590:	f080 8088 	bcs.w	80006a4 <__udivmoddi4+0x2b4>
 8000594:	42a5      	cmp	r5, r4
 8000596:	f240 8085 	bls.w	80006a4 <__udivmoddi4+0x2b4>
 800059a:	f1a8 0802 	sub.w	r8, r8, #2
 800059e:	4464      	add	r4, ip
 80005a0:	1b64      	subs	r4, r4, r5
 80005a2:	b29d      	uxth	r5, r3
 80005a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80005a8:	fb09 4413 	mls	r4, r9, r3, r4
 80005ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005b4:	45a6      	cmp	lr, r4
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x1da>
 80005b8:	eb1c 0404 	adds.w	r4, ip, r4
 80005bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80005c0:	d26c      	bcs.n	800069c <__udivmoddi4+0x2ac>
 80005c2:	45a6      	cmp	lr, r4
 80005c4:	d96a      	bls.n	800069c <__udivmoddi4+0x2ac>
 80005c6:	3b02      	subs	r3, #2
 80005c8:	4464      	add	r4, ip
 80005ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005ce:	fba3 9502 	umull	r9, r5, r3, r2
 80005d2:	eba4 040e 	sub.w	r4, r4, lr
 80005d6:	42ac      	cmp	r4, r5
 80005d8:	46c8      	mov	r8, r9
 80005da:	46ae      	mov	lr, r5
 80005dc:	d356      	bcc.n	800068c <__udivmoddi4+0x29c>
 80005de:	d053      	beq.n	8000688 <__udivmoddi4+0x298>
 80005e0:	b156      	cbz	r6, 80005f8 <__udivmoddi4+0x208>
 80005e2:	ebb0 0208 	subs.w	r2, r0, r8
 80005e6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ea:	fa04 f707 	lsl.w	r7, r4, r7
 80005ee:	40ca      	lsrs	r2, r1
 80005f0:	40cc      	lsrs	r4, r1
 80005f2:	4317      	orrs	r7, r2
 80005f4:	e9c6 7400 	strd	r7, r4, [r6]
 80005f8:	4618      	mov	r0, r3
 80005fa:	2100      	movs	r1, #0
 80005fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000600:	f1c3 0120 	rsb	r1, r3, #32
 8000604:	fa02 fc03 	lsl.w	ip, r2, r3
 8000608:	fa20 f201 	lsr.w	r2, r0, r1
 800060c:	fa25 f101 	lsr.w	r1, r5, r1
 8000610:	409d      	lsls	r5, r3
 8000612:	432a      	orrs	r2, r5
 8000614:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000618:	fa1f fe8c 	uxth.w	lr, ip
 800061c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000620:	fb07 1510 	mls	r5, r7, r0, r1
 8000624:	0c11      	lsrs	r1, r2, #16
 8000626:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800062a:	fb00 f50e 	mul.w	r5, r0, lr
 800062e:	428d      	cmp	r5, r1
 8000630:	fa04 f403 	lsl.w	r4, r4, r3
 8000634:	d908      	bls.n	8000648 <__udivmoddi4+0x258>
 8000636:	eb1c 0101 	adds.w	r1, ip, r1
 800063a:	f100 38ff 	add.w	r8, r0, #4294967295
 800063e:	d22f      	bcs.n	80006a0 <__udivmoddi4+0x2b0>
 8000640:	428d      	cmp	r5, r1
 8000642:	d92d      	bls.n	80006a0 <__udivmoddi4+0x2b0>
 8000644:	3802      	subs	r0, #2
 8000646:	4461      	add	r1, ip
 8000648:	1b49      	subs	r1, r1, r5
 800064a:	b292      	uxth	r2, r2
 800064c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000650:	fb07 1115 	mls	r1, r7, r5, r1
 8000654:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000658:	fb05 f10e 	mul.w	r1, r5, lr
 800065c:	4291      	cmp	r1, r2
 800065e:	d908      	bls.n	8000672 <__udivmoddi4+0x282>
 8000660:	eb1c 0202 	adds.w	r2, ip, r2
 8000664:	f105 38ff 	add.w	r8, r5, #4294967295
 8000668:	d216      	bcs.n	8000698 <__udivmoddi4+0x2a8>
 800066a:	4291      	cmp	r1, r2
 800066c:	d914      	bls.n	8000698 <__udivmoddi4+0x2a8>
 800066e:	3d02      	subs	r5, #2
 8000670:	4462      	add	r2, ip
 8000672:	1a52      	subs	r2, r2, r1
 8000674:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000678:	e738      	b.n	80004ec <__udivmoddi4+0xfc>
 800067a:	4631      	mov	r1, r6
 800067c:	4630      	mov	r0, r6
 800067e:	e708      	b.n	8000492 <__udivmoddi4+0xa2>
 8000680:	4639      	mov	r1, r7
 8000682:	e6e6      	b.n	8000452 <__udivmoddi4+0x62>
 8000684:	4610      	mov	r0, r2
 8000686:	e6fb      	b.n	8000480 <__udivmoddi4+0x90>
 8000688:	4548      	cmp	r0, r9
 800068a:	d2a9      	bcs.n	80005e0 <__udivmoddi4+0x1f0>
 800068c:	ebb9 0802 	subs.w	r8, r9, r2
 8000690:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000694:	3b01      	subs	r3, #1
 8000696:	e7a3      	b.n	80005e0 <__udivmoddi4+0x1f0>
 8000698:	4645      	mov	r5, r8
 800069a:	e7ea      	b.n	8000672 <__udivmoddi4+0x282>
 800069c:	462b      	mov	r3, r5
 800069e:	e794      	b.n	80005ca <__udivmoddi4+0x1da>
 80006a0:	4640      	mov	r0, r8
 80006a2:	e7d1      	b.n	8000648 <__udivmoddi4+0x258>
 80006a4:	46d0      	mov	r8, sl
 80006a6:	e77b      	b.n	80005a0 <__udivmoddi4+0x1b0>
 80006a8:	3d02      	subs	r5, #2
 80006aa:	4462      	add	r2, ip
 80006ac:	e732      	b.n	8000514 <__udivmoddi4+0x124>
 80006ae:	4608      	mov	r0, r1
 80006b0:	e70a      	b.n	80004c8 <__udivmoddi4+0xd8>
 80006b2:	4464      	add	r4, ip
 80006b4:	3802      	subs	r0, #2
 80006b6:	e742      	b.n	800053e <__udivmoddi4+0x14e>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <_write>:
static void MX_ETH_Init(void);
static void MX_SPI1_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_USB_OTG_HS_USB_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	60b9      	str	r1, [r7, #8]
 80006c6:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	b29a      	uxth	r2, r3
 80006cc:	f04f 33ff 	mov.w	r3, #4294967295
 80006d0:	68b9      	ldr	r1, [r7, #8]
 80006d2:	4804      	ldr	r0, [pc, #16]	; (80006e4 <_write+0x28>)
 80006d4:	f006 fc67 	bl	8006fa6 <HAL_UART_Transmit>
    return len;
 80006d8:	687b      	ldr	r3, [r7, #4]
}
 80006da:	4618      	mov	r0, r3
 80006dc:	3710      	adds	r7, #16
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	240002bc 	.word	0x240002bc

080006e8 <DDS_Test>:

void UART_SendString(char *message);

void processCommand(void);

void DDS_Test() {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
    uint64_t read_value = 0x000000000000;
 80006ee:	f04f 0200 	mov.w	r2, #0
 80006f2:	f04f 0300 	mov.w	r3, #0
 80006f6:	e9c7 2300 	strd	r2, r3, [r7]

    // Écriture dans un registre (par exemple 0x04 pour la fréquence de base)
    if (AD9910_WriteRegister(0x0E, 0x3FFF00000016E360) == HAL_OK) {
 80006fa:	a319      	add	r3, pc, #100	; (adr r3, 8000760 <DDS_Test+0x78>)
 80006fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000700:	200e      	movs	r0, #14
 8000702:	f000 ff7f 	bl	8001604 <AD9910_WriteRegister>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d103      	bne.n	8000714 <DDS_Test+0x2c>
        printf("Registre écrit avec succès.\n");
 800070c:	4810      	ldr	r0, [pc, #64]	; (8000750 <DDS_Test+0x68>)
 800070e:	f009 fa55 	bl	8009bbc <puts>
 8000712:	e002      	b.n	800071a <DDS_Test+0x32>
    } else {
        printf("Erreur d'écriture dans le registre.\n");
 8000714:	480f      	ldr	r0, [pc, #60]	; (8000754 <DDS_Test+0x6c>)
 8000716:	f009 fa51 	bl	8009bbc <puts>
    }
    AD9910_IOUpdate();
 800071a:	f000 ff5d 	bl	80015d8 <AD9910_IOUpdate>
    HAL_Delay(10);
 800071e:	200a      	movs	r0, #10
 8000720:	f001 fab8 	bl	8001c94 <HAL_Delay>

    // Lecture dans un registre (par exemple 0x04 pour la fréquence de base)
    if (AD9910_ReadRegister(0x0E, &read_value) == HAL_OK) {
 8000724:	463b      	mov	r3, r7
 8000726:	4619      	mov	r1, r3
 8000728:	200e      	movs	r0, #14
 800072a:	f000 ffdb 	bl	80016e4 <AD9910_ReadRegister>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d105      	bne.n	8000740 <DDS_Test+0x58>
        printf("Valeur lue du registre 0x0E : 0x%016lX\n", read_value);
 8000734:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000738:	4807      	ldr	r0, [pc, #28]	; (8000758 <DDS_Test+0x70>)
 800073a:	f009 f9d9 	bl	8009af0 <iprintf>
    } else {
        printf("Erreur de lecture dans le registre.");
    }
}
 800073e:	e002      	b.n	8000746 <DDS_Test+0x5e>
        printf("Erreur de lecture dans le registre.");
 8000740:	4806      	ldr	r0, [pc, #24]	; (800075c <DDS_Test+0x74>)
 8000742:	f009 f9d5 	bl	8009af0 <iprintf>
}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	0800a8a8 	.word	0x0800a8a8
 8000754:	0800a8c8 	.word	0x0800a8c8
 8000758:	0800a8f0 	.word	0x0800a8f0
 800075c:	0800a918 	.word	0x0800a918
 8000760:	0016e360 	.word	0x0016e360
 8000764:	3fff0000 	.word	0x3fff0000

08000768 <DDS_Reg_Update>:
void DDS_Reg_Update() {
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
	uint64_t readback = 0;
 800076e:	f04f 0200 	mov.w	r2, #0
 8000772:	f04f 0300 	mov.w	r3, #0
 8000776:	e9c7 2300 	strd	r2, r3, [r7]

	ad9910_regs[0] 		= 0x00800302;
 800077a:	4971      	ldr	r1, [pc, #452]	; (8000940 <DDS_Reg_Update+0x1d8>)
 800077c:	4a71      	ldr	r2, [pc, #452]	; (8000944 <DDS_Reg_Update+0x1dc>)
 800077e:	f04f 0300 	mov.w	r3, #0
 8000782:	e9c1 2300 	strd	r2, r3, [r1]
	ad9910_regs[1] 		= 0x01000820;
 8000786:	496e      	ldr	r1, [pc, #440]	; (8000940 <DDS_Reg_Update+0x1d8>)
 8000788:	4a6f      	ldr	r2, [pc, #444]	; (8000948 <DDS_Reg_Update+0x1e0>)
 800078a:	f04f 0300 	mov.w	r3, #0
 800078e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	ad9910_regs[2] 		= 0x01204118; //PLL ON, VCO1, N=12
 8000792:	496b      	ldr	r1, [pc, #428]	; (8000940 <DDS_Reg_Update+0x1d8>)
 8000794:	a366      	add	r3, pc, #408	; (adr r3, 8000930 <DDS_Reg_Update+0x1c8>)
 8000796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800079a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	ad9910_regs[3] 		= 0x0000007F;
 800079e:	4968      	ldr	r1, [pc, #416]	; (8000940 <DDS_Reg_Update+0x1d8>)
 80007a0:	f04f 027f 	mov.w	r2, #127	; 0x7f
 80007a4:	f04f 0300 	mov.w	r3, #0
 80007a8:	e9c1 2306 	strd	r2, r3, [r1, #24]
	ad9910_regs[4] 		= 0xFFFFFFFF;
 80007ac:	4964      	ldr	r1, [pc, #400]	; (8000940 <DDS_Reg_Update+0x1d8>)
 80007ae:	f04f 32ff 	mov.w	r2, #4294967295
 80007b2:	f04f 0300 	mov.w	r3, #0
 80007b6:	e9c1 2308 	strd	r2, r3, [r1, #32]
	ad9910_regs[5] 		= 0x000000000000;
 80007ba:	4961      	ldr	r1, [pc, #388]	; (8000940 <DDS_Reg_Update+0x1d8>)
 80007bc:	f04f 0200 	mov.w	r2, #0
 80007c0:	f04f 0300 	mov.w	r3, #0
 80007c4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	ad9910_regs[6] 		= 0x000000000000;
 80007c8:	495d      	ldr	r1, [pc, #372]	; (8000940 <DDS_Reg_Update+0x1d8>)
 80007ca:	f04f 0200 	mov.w	r2, #0
 80007ce:	f04f 0300 	mov.w	r3, #0
 80007d2:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	ad9910_regs[7] 		= 0x00000000; //FTW 100MHz
 80007d6:	495a      	ldr	r1, [pc, #360]	; (8000940 <DDS_Reg_Update+0x1d8>)
 80007d8:	f04f 0200 	mov.w	r2, #0
 80007dc:	f04f 0300 	mov.w	r3, #0
 80007e0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	ad9910_regs[8] 		= 0x0000; //POW
 80007e4:	4956      	ldr	r1, [pc, #344]	; (8000940 <DDS_Reg_Update+0x1d8>)
 80007e6:	f04f 0200 	mov.w	r2, #0
 80007ea:	f04f 0300 	mov.w	r3, #0
 80007ee:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	ad9910_regs[9] 		= 0x0001FFFC; //ASF full scale
 80007f2:	4953      	ldr	r1, [pc, #332]	; (8000940 <DDS_Reg_Update+0x1d8>)
 80007f4:	4a55      	ldr	r2, [pc, #340]	; (800094c <DDS_Reg_Update+0x1e4>)
 80007f6:	f04f 0300 	mov.w	r3, #0
 80007fa:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	ad9910_regs[0x0A] 	= 0x00000000;
 80007fe:	4950      	ldr	r1, [pc, #320]	; (8000940 <DDS_Reg_Update+0x1d8>)
 8000800:	f04f 0200 	mov.w	r2, #0
 8000804:	f04f 0300 	mov.w	r3, #0
 8000808:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	ad9910_regs[0x0B] 	= 0x0000000000000000;
 800080c:	494c      	ldr	r1, [pc, #304]	; (8000940 <DDS_Reg_Update+0x1d8>)
 800080e:	f04f 0200 	mov.w	r2, #0
 8000812:	f04f 0300 	mov.w	r3, #0
 8000816:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	ad9910_regs[0x0C] 	= 0x0000000000000000;
 800081a:	4949      	ldr	r1, [pc, #292]	; (8000940 <DDS_Reg_Update+0x1d8>)
 800081c:	f04f 0200 	mov.w	r2, #0
 8000820:	f04f 0300 	mov.w	r3, #0
 8000824:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	ad9910_regs[0x0D] 	= 0x00000000;
 8000828:	4945      	ldr	r1, [pc, #276]	; (8000940 <DDS_Reg_Update+0x1d8>)
 800082a:	f04f 0200 	mov.w	r2, #0
 800082e:	f04f 0300 	mov.w	r3, #0
 8000832:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	ad9910_regs[0x0E] 	= 0x3FFF000000000000;
 8000836:	4942      	ldr	r1, [pc, #264]	; (8000940 <DDS_Reg_Update+0x1d8>)
 8000838:	f04f 0200 	mov.w	r2, #0
 800083c:	4b44      	ldr	r3, [pc, #272]	; (8000950 <DDS_Reg_Update+0x1e8>)
 800083e:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	ad9910_regs[0x0F] 	= 0x3FFF000000000000;
 8000842:	493f      	ldr	r1, [pc, #252]	; (8000940 <DDS_Reg_Update+0x1d8>)
 8000844:	f04f 0200 	mov.w	r2, #0
 8000848:	4b41      	ldr	r3, [pc, #260]	; (8000950 <DDS_Reg_Update+0x1e8>)
 800084a:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	ad9910_regs[0x10] 	= 0x3FFF000000000000;
 800084e:	493c      	ldr	r1, [pc, #240]	; (8000940 <DDS_Reg_Update+0x1d8>)
 8000850:	f04f 0200 	mov.w	r2, #0
 8000854:	4b3e      	ldr	r3, [pc, #248]	; (8000950 <DDS_Reg_Update+0x1e8>)
 8000856:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
	ad9910_regs[0x11] 	= 0x3FFF000000000000;
 800085a:	4939      	ldr	r1, [pc, #228]	; (8000940 <DDS_Reg_Update+0x1d8>)
 800085c:	f04f 0200 	mov.w	r2, #0
 8000860:	4b3b      	ldr	r3, [pc, #236]	; (8000950 <DDS_Reg_Update+0x1e8>)
 8000862:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	ad9910_regs[0x12] 	= 0x3FFF000000000000;
 8000866:	4936      	ldr	r1, [pc, #216]	; (8000940 <DDS_Reg_Update+0x1d8>)
 8000868:	f04f 0200 	mov.w	r2, #0
 800086c:	4b38      	ldr	r3, [pc, #224]	; (8000950 <DDS_Reg_Update+0x1e8>)
 800086e:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
	ad9910_regs[0x13] 	= 0x3FFF000000000000;
 8000872:	4933      	ldr	r1, [pc, #204]	; (8000940 <DDS_Reg_Update+0x1d8>)
 8000874:	f04f 0200 	mov.w	r2, #0
 8000878:	4b35      	ldr	r3, [pc, #212]	; (8000950 <DDS_Reg_Update+0x1e8>)
 800087a:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
	ad9910_regs[0x14] 	= 0x3FFF000000000000;
 800087e:	4930      	ldr	r1, [pc, #192]	; (8000940 <DDS_Reg_Update+0x1d8>)
 8000880:	f04f 0200 	mov.w	r2, #0
 8000884:	4b32      	ldr	r3, [pc, #200]	; (8000950 <DDS_Reg_Update+0x1e8>)
 8000886:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
	ad9910_regs[0x15] 	= 0x3FFF0000574D1F00;
 800088a:	492d      	ldr	r1, [pc, #180]	; (8000940 <DDS_Reg_Update+0x1d8>)
 800088c:	a32a      	add	r3, pc, #168	; (adr r3, 8000938 <DDS_Reg_Update+0x1d0>)
 800088e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000892:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
	ad9910_regs[0x16] 	= 0x00000000;
 8000896:	492a      	ldr	r1, [pc, #168]	; (8000940 <DDS_Reg_Update+0x1d8>)
 8000898:	f04f 0200 	mov.w	r2, #0
 800089c:	f04f 0300 	mov.w	r3, #0
 80008a0:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0
	printf("Ecriture des registres.\n");
 80008a4:	482b      	ldr	r0, [pc, #172]	; (8000954 <DDS_Reg_Update+0x1ec>)
 80008a6:	f009 f989 	bl	8009bbc <puts>

	for (uint8_t i = 0; i < 23; i++) {
 80008aa:	2300      	movs	r3, #0
 80008ac:	73fb      	strb	r3, [r7, #15]
 80008ae:	e00c      	b.n	80008ca <DDS_Reg_Update+0x162>
			AD9910_WriteRegister(i,ad9910_regs[i]);
 80008b0:	7bfb      	ldrb	r3, [r7, #15]
 80008b2:	4a23      	ldr	r2, [pc, #140]	; (8000940 <DDS_Reg_Update+0x1d8>)
 80008b4:	00db      	lsls	r3, r3, #3
 80008b6:	4413      	add	r3, r2
 80008b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008bc:	7bf9      	ldrb	r1, [r7, #15]
 80008be:	4608      	mov	r0, r1
 80008c0:	f000 fea0 	bl	8001604 <AD9910_WriteRegister>
	for (uint8_t i = 0; i < 23; i++) {
 80008c4:	7bfb      	ldrb	r3, [r7, #15]
 80008c6:	3301      	adds	r3, #1
 80008c8:	73fb      	strb	r3, [r7, #15]
 80008ca:	7bfb      	ldrb	r3, [r7, #15]
 80008cc:	2b16      	cmp	r3, #22
 80008ce:	d9ef      	bls.n	80008b0 <DDS_Reg_Update+0x148>
	    }
	printf("IO Update.\n");
 80008d0:	4821      	ldr	r0, [pc, #132]	; (8000958 <DDS_Reg_Update+0x1f0>)
 80008d2:	f009 f973 	bl	8009bbc <puts>
	AD9910_IOUpdate();
 80008d6:	f000 fe7f 	bl	80015d8 <AD9910_IOUpdate>
	HAL_Delay(10);
 80008da:	200a      	movs	r0, #10
 80008dc:	f001 f9da 	bl	8001c94 <HAL_Delay>
	for (int i = 0; i < 23; i++) {
 80008e0:	2300      	movs	r3, #0
 80008e2:	60bb      	str	r3, [r7, #8]
 80008e4:	e01a      	b.n	800091c <DDS_Reg_Update+0x1b4>
		 AD9910_ReadRegister(i,&readback);
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	463a      	mov	r2, r7
 80008ec:	4611      	mov	r1, r2
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 fef8 	bl	80016e4 <AD9910_ReadRegister>
		 printf("Valeur du registre 0x%X = 0x%08lX%08lX\n", i, (uint32_t)(readback >> 32), (uint32_t)(readback));
 80008f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80008f8:	f04f 0200 	mov.w	r2, #0
 80008fc:	f04f 0300 	mov.w	r3, #0
 8000900:	000a      	movs	r2, r1
 8000902:	2300      	movs	r3, #0
 8000904:	4611      	mov	r1, r2
 8000906:	e9d7 2300 	ldrd	r2, r3, [r7]
 800090a:	4613      	mov	r3, r2
 800090c:	460a      	mov	r2, r1
 800090e:	68b9      	ldr	r1, [r7, #8]
 8000910:	4812      	ldr	r0, [pc, #72]	; (800095c <DDS_Reg_Update+0x1f4>)
 8000912:	f009 f8ed 	bl	8009af0 <iprintf>
	for (int i = 0; i < 23; i++) {
 8000916:	68bb      	ldr	r3, [r7, #8]
 8000918:	3301      	adds	r3, #1
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	2b16      	cmp	r3, #22
 8000920:	dde1      	ble.n	80008e6 <DDS_Reg_Update+0x17e>
	    }
}
 8000922:	bf00      	nop
 8000924:	bf00      	nop
 8000926:	3710      	adds	r7, #16
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	f3af 8000 	nop.w
 8000930:	01204118 	.word	0x01204118
 8000934:	00000000 	.word	0x00000000
 8000938:	574d1f00 	.word	0x574d1f00
 800093c:	3fff0000 	.word	0x3fff0000
 8000940:	24000360 	.word	0x24000360
 8000944:	00800302 	.word	0x00800302
 8000948:	01000820 	.word	0x01000820
 800094c:	0001fffc 	.word	0x0001fffc
 8000950:	3fff0000 	.word	0x3fff0000
 8000954:	0800a93c 	.word	0x0800a93c
 8000958:	0800a954 	.word	0x0800a954
 800095c:	0800a960 	.word	0x0800a960

08000960 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
    static uint8_t index = 0;

    if (huart->Instance == USART3) {
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a17      	ldr	r2, [pc, #92]	; (80009cc <HAL_UART_RxCpltCallback+0x6c>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d128      	bne.n	80009c4 <HAL_UART_RxCpltCallback+0x64>
        if (rx_buffer[0] == '\n' || rx_buffer[0] == '\r') {  // Fin de commande
 8000972:	4b17      	ldr	r3, [pc, #92]	; (80009d0 <HAL_UART_RxCpltCallback+0x70>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	2b0a      	cmp	r3, #10
 8000978:	d003      	beq.n	8000982 <HAL_UART_RxCpltCallback+0x22>
 800097a:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <HAL_UART_RxCpltCallback+0x70>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	2b0d      	cmp	r3, #13
 8000980:	d10c      	bne.n	800099c <HAL_UART_RxCpltCallback+0x3c>
            command_buffer[index] = '\0';
 8000982:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <HAL_UART_RxCpltCallback+0x74>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	461a      	mov	r2, r3
 8000988:	4b13      	ldr	r3, [pc, #76]	; (80009d8 <HAL_UART_RxCpltCallback+0x78>)
 800098a:	2100      	movs	r1, #0
 800098c:	5499      	strb	r1, [r3, r2]
            index = 0;
 800098e:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <HAL_UART_RxCpltCallback+0x74>)
 8000990:	2200      	movs	r2, #0
 8000992:	701a      	strb	r2, [r3, #0]
            command_ready = 1;
 8000994:	4b11      	ldr	r3, [pc, #68]	; (80009dc <HAL_UART_RxCpltCallback+0x7c>)
 8000996:	2201      	movs	r2, #1
 8000998:	701a      	strb	r2, [r3, #0]
 800099a:	e00e      	b.n	80009ba <HAL_UART_RxCpltCallback+0x5a>
        } else if (index < sizeof(command_buffer) - 1) {
 800099c:	4b0d      	ldr	r3, [pc, #52]	; (80009d4 <HAL_UART_RxCpltCallback+0x74>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	2b08      	cmp	r3, #8
 80009a2:	d80a      	bhi.n	80009ba <HAL_UART_RxCpltCallback+0x5a>
            command_buffer[index++] = rx_buffer[0];
 80009a4:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <HAL_UART_RxCpltCallback+0x74>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	1c5a      	adds	r2, r3, #1
 80009aa:	b2d1      	uxtb	r1, r2
 80009ac:	4a09      	ldr	r2, [pc, #36]	; (80009d4 <HAL_UART_RxCpltCallback+0x74>)
 80009ae:	7011      	strb	r1, [r2, #0]
 80009b0:	461a      	mov	r2, r3
 80009b2:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <HAL_UART_RxCpltCallback+0x70>)
 80009b4:	7819      	ldrb	r1, [r3, #0]
 80009b6:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <HAL_UART_RxCpltCallback+0x78>)
 80009b8:	5499      	strb	r1, [r3, r2]
        }

        // Relance la réception
        HAL_UART_Receive_IT(&huart3, (uint8_t *)rx_buffer, 1);
 80009ba:	2201      	movs	r2, #1
 80009bc:	4904      	ldr	r1, [pc, #16]	; (80009d0 <HAL_UART_RxCpltCallback+0x70>)
 80009be:	4808      	ldr	r0, [pc, #32]	; (80009e0 <HAL_UART_RxCpltCallback+0x80>)
 80009c0:	f006 fb80 	bl	80070c4 <HAL_UART_Receive_IT>
    }
}
 80009c4:	bf00      	nop
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40004800 	.word	0x40004800
 80009d0:	24000350 	.word	0x24000350
 80009d4:	24000418 	.word	0x24000418
 80009d8:	24000354 	.word	0x24000354
 80009dc:	2400035e 	.word	0x2400035e
 80009e0:	240002bc 	.word	0x240002bc

080009e4 <UART_SendString>:

void UART_SendString(char *message) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 80009ec:	6878      	ldr	r0, [r7, #4]
 80009ee:	f7ff fc8f 	bl	8000310 <strlen>
 80009f2:	4603      	mov	r3, r0
 80009f4:	b29a      	uxth	r2, r3
 80009f6:	f04f 33ff 	mov.w	r3, #4294967295
 80009fa:	6879      	ldr	r1, [r7, #4]
 80009fc:	4803      	ldr	r0, [pc, #12]	; (8000a0c <UART_SendString+0x28>)
 80009fe:	f006 fad2 	bl	8006fa6 <HAL_UART_Transmit>
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	240002bc 	.word	0x240002bc

08000a10 <processCommand>:

void processCommand(void) {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0

	if (command_buffer[0] == '1' || command_buffer[0] == '2' || command_buffer[0] == '3'){
 8000a14:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <processCommand+0x58>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	2b31      	cmp	r3, #49	; 0x31
 8000a1a:	d007      	beq.n	8000a2c <processCommand+0x1c>
 8000a1c:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <processCommand+0x58>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	2b32      	cmp	r3, #50	; 0x32
 8000a22:	d003      	beq.n	8000a2c <processCommand+0x1c>
 8000a24:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <processCommand+0x58>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b33      	cmp	r3, #51	; 0x33
 8000a2a:	d118      	bne.n	8000a5e <processCommand+0x4e>
        // Effectuer l'action correspondante
        switch (command_buffer[0]) {
 8000a2c:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <processCommand+0x58>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b33      	cmp	r3, #51	; 0x33
 8000a32:	d00c      	beq.n	8000a4e <processCommand+0x3e>
 8000a34:	2b33      	cmp	r3, #51	; 0x33
 8000a36:	dc0d      	bgt.n	8000a54 <processCommand+0x44>
 8000a38:	2b31      	cmp	r3, #49	; 0x31
 8000a3a:	d002      	beq.n	8000a42 <processCommand+0x32>
 8000a3c:	2b32      	cmp	r3, #50	; 0x32
 8000a3e:	d003      	beq.n	8000a48 <processCommand+0x38>
 8000a40:	e008      	b.n	8000a54 <processCommand+0x44>
            case '1': AD9910_Reset(); break;
 8000a42:	f000 fdb5 	bl	80015b0 <AD9910_Reset>
 8000a46:	e009      	b.n	8000a5c <processCommand+0x4c>
            case '2': DDS_Test(); break;
 8000a48:	f7ff fe4e 	bl	80006e8 <DDS_Test>
 8000a4c:	e006      	b.n	8000a5c <processCommand+0x4c>
            case '3': DDS_Reg_Update();break;
 8000a4e:	f7ff fe8b 	bl	8000768 <DDS_Reg_Update>
 8000a52:	e003      	b.n	8000a5c <processCommand+0x4c>
            default:
                UART_SendString("IO invalide\r\n");
 8000a54:	4805      	ldr	r0, [pc, #20]	; (8000a6c <processCommand+0x5c>)
 8000a56:	f7ff ffc5 	bl	80009e4 <UART_SendString>
                return;
 8000a5a:	e004      	b.n	8000a66 <processCommand+0x56>
        switch (command_buffer[0]) {
 8000a5c:	e003      	b.n	8000a66 <processCommand+0x56>
        }
	} else
        {
        	printf("Commande invalide\r\n");
 8000a5e:	4804      	ldr	r0, [pc, #16]	; (8000a70 <processCommand+0x60>)
 8000a60:	f009 f8ac 	bl	8009bbc <puts>
        	return;
 8000a64:	bf00      	nop
        }

        // Confirmation après exécution

}
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	24000354 	.word	0x24000354
 8000a6c:	0800a988 	.word	0x0800a988
 8000a70:	0800a998 	.word	0x0800a998

08000a74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a78:	f001 f87a 	bl	8001b70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a7c:	f000 f828 	bl	8000ad0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a80:	f000 f98c 	bl	8000d9c <MX_GPIO_Init>
  MX_ETH_Init();
 8000a84:	f000 f894 	bl	8000bb0 <MX_ETH_Init>
  MX_SPI1_Init();
 8000a88:	f000 f8de 	bl	8000c48 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8000a8c:	f000 f932 	bl	8000cf4 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000a90:	f000 f97c 	bl	8000d8c <MX_USB_OTG_HS_USB_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, (uint8_t *)rx_buffer, 1);
 8000a94:	2201      	movs	r2, #1
 8000a96:	490a      	ldr	r1, [pc, #40]	; (8000ac0 <main+0x4c>)
 8000a98:	480a      	ldr	r0, [pc, #40]	; (8000ac4 <main+0x50>)
 8000a9a:	f006 fb13 	bl	80070c4 <HAL_UART_Receive_IT>
  AD9910_Reset();
 8000a9e:	f000 fd87 	bl	80015b0 <AD9910_Reset>
  UART_SendString("Programme de test. Entrez une commande.\r\n");
 8000aa2:	4809      	ldr	r0, [pc, #36]	; (8000ac8 <main+0x54>)
 8000aa4:	f7ff ff9e 	bl	80009e4 <UART_SendString>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (command_ready) {
 8000aa8:	4b08      	ldr	r3, [pc, #32]	; (8000acc <main+0x58>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d0fa      	beq.n	8000aa8 <main+0x34>
	             command_ready = 0;
 8000ab2:	4b06      	ldr	r3, [pc, #24]	; (8000acc <main+0x58>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	701a      	strb	r2, [r3, #0]
	             processCommand();
 8000ab8:	f7ff ffaa 	bl	8000a10 <processCommand>
	  if (command_ready) {
 8000abc:	e7f4      	b.n	8000aa8 <main+0x34>
 8000abe:	bf00      	nop
 8000ac0:	24000350 	.word	0x24000350
 8000ac4:	240002bc 	.word	0x240002bc
 8000ac8:	0800a9ac 	.word	0x0800a9ac
 8000acc:	2400035e 	.word	0x2400035e

08000ad0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b09c      	sub	sp, #112	; 0x70
 8000ad4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ad6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ada:	224c      	movs	r2, #76	; 0x4c
 8000adc:	2100      	movs	r1, #0
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f009 f94c 	bl	8009d7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	2220      	movs	r2, #32
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4618      	mov	r0, r3
 8000aec:	f009 f946 	bl	8009d7c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000af0:	2002      	movs	r0, #2
 8000af2:	f002 fd71 	bl	80035d8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000af6:	2300      	movs	r3, #0
 8000af8:	603b      	str	r3, [r7, #0]
 8000afa:	4b2c      	ldr	r3, [pc, #176]	; (8000bac <SystemClock_Config+0xdc>)
 8000afc:	699b      	ldr	r3, [r3, #24]
 8000afe:	4a2b      	ldr	r2, [pc, #172]	; (8000bac <SystemClock_Config+0xdc>)
 8000b00:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b04:	6193      	str	r3, [r2, #24]
 8000b06:	4b29      	ldr	r3, [pc, #164]	; (8000bac <SystemClock_Config+0xdc>)
 8000b08:	699b      	ldr	r3, [r3, #24]
 8000b0a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b12:	bf00      	nop
 8000b14:	4b25      	ldr	r3, [pc, #148]	; (8000bac <SystemClock_Config+0xdc>)
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b20:	d1f8      	bne.n	8000b14 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000b22:	2321      	movs	r3, #33	; 0x21
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b26:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b2a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b30:	2302      	movs	r3, #2
 8000b32:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b34:	2302      	movs	r3, #2
 8000b36:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b38:	2304      	movs	r3, #4
 8000b3a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000b3c:	f240 1313 	movw	r3, #275	; 0x113
 8000b40:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000b42:	2301      	movs	r3, #1
 8000b44:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b46:	2304      	movs	r3, #4
 8000b48:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000b4e:	2304      	movs	r3, #4
 8000b50:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b52:	2300      	movs	r3, #0
 8000b54:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f002 fd74 	bl	800364c <HAL_RCC_OscConfig>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000b6a:	f000 fa39 	bl	8000fe0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b6e:	233f      	movs	r3, #63	; 0x3f
 8000b70:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b72:	2303      	movs	r3, #3
 8000b74:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b76:	2300      	movs	r3, #0
 8000b78:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b7a:	2308      	movs	r3, #8
 8000b7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b7e:	2340      	movs	r3, #64	; 0x40
 8000b80:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b82:	2340      	movs	r3, #64	; 0x40
 8000b84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b8a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b8c:	2340      	movs	r3, #64	; 0x40
 8000b8e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b90:	1d3b      	adds	r3, r7, #4
 8000b92:	2103      	movs	r1, #3
 8000b94:	4618      	mov	r0, r3
 8000b96:	f003 f933 	bl	8003e00 <HAL_RCC_ClockConfig>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000ba0:	f000 fa1e 	bl	8000fe0 <Error_Handler>
  }
}
 8000ba4:	bf00      	nop
 8000ba6:	3770      	adds	r7, #112	; 0x70
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	58024800 	.word	0x58024800

08000bb0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000bb4:	4b1e      	ldr	r3, [pc, #120]	; (8000c30 <MX_ETH_Init+0x80>)
 8000bb6:	4a1f      	ldr	r2, [pc, #124]	; (8000c34 <MX_ETH_Init+0x84>)
 8000bb8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000bba:	4b1f      	ldr	r3, [pc, #124]	; (8000c38 <MX_ETH_Init+0x88>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000bc0:	4b1d      	ldr	r3, [pc, #116]	; (8000c38 <MX_ETH_Init+0x88>)
 8000bc2:	2280      	movs	r2, #128	; 0x80
 8000bc4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000bc6:	4b1c      	ldr	r3, [pc, #112]	; (8000c38 <MX_ETH_Init+0x88>)
 8000bc8:	22e1      	movs	r2, #225	; 0xe1
 8000bca:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000bcc:	4b1a      	ldr	r3, [pc, #104]	; (8000c38 <MX_ETH_Init+0x88>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000bd2:	4b19      	ldr	r3, [pc, #100]	; (8000c38 <MX_ETH_Init+0x88>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000bd8:	4b17      	ldr	r3, [pc, #92]	; (8000c38 <MX_ETH_Init+0x88>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000bde:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <MX_ETH_Init+0x80>)
 8000be0:	4a15      	ldr	r2, [pc, #84]	; (8000c38 <MX_ETH_Init+0x88>)
 8000be2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000be4:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <MX_ETH_Init+0x80>)
 8000be6:	2201      	movs	r2, #1
 8000be8:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000bea:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <MX_ETH_Init+0x80>)
 8000bec:	4a13      	ldr	r2, [pc, #76]	; (8000c3c <MX_ETH_Init+0x8c>)
 8000bee:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000bf0:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <MX_ETH_Init+0x80>)
 8000bf2:	4a13      	ldr	r2, [pc, #76]	; (8000c40 <MX_ETH_Init+0x90>)
 8000bf4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <MX_ETH_Init+0x80>)
 8000bf8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000bfc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000bfe:	480c      	ldr	r0, [pc, #48]	; (8000c30 <MX_ETH_Init+0x80>)
 8000c00:	f001 fef4 	bl	80029ec <HAL_ETH_Init>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000c0a:	f000 f9e9 	bl	8000fe0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000c0e:	2238      	movs	r2, #56	; 0x38
 8000c10:	2100      	movs	r1, #0
 8000c12:	480c      	ldr	r0, [pc, #48]	; (8000c44 <MX_ETH_Init+0x94>)
 8000c14:	f009 f8b2 	bl	8009d7c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000c18:	4b0a      	ldr	r3, [pc, #40]	; (8000c44 <MX_ETH_Init+0x94>)
 8000c1a:	2221      	movs	r2, #33	; 0x21
 8000c1c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000c1e:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <MX_ETH_Init+0x94>)
 8000c20:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000c24:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000c26:	4b07      	ldr	r3, [pc, #28]	; (8000c44 <MX_ETH_Init+0x94>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000c2c:	bf00      	nop
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	24000184 	.word	0x24000184
 8000c34:	40028000 	.word	0x40028000
 8000c38:	2400041c 	.word	0x2400041c
 8000c3c:	240000cc 	.word	0x240000cc
 8000c40:	2400006c 	.word	0x2400006c
 8000c44:	2400014c 	.word	0x2400014c

08000c48 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c4c:	4b27      	ldr	r3, [pc, #156]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000c4e:	4a28      	ldr	r2, [pc, #160]	; (8000cf0 <MX_SPI1_Init+0xa8>)
 8000c50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c52:	4b26      	ldr	r3, [pc, #152]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000c54:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000c58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c5a:	4b24      	ldr	r3, [pc, #144]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c60:	4b22      	ldr	r3, [pc, #136]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000c62:	2207      	movs	r2, #7
 8000c64:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c66:	4b21      	ldr	r3, [pc, #132]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c6c:	4b1f      	ldr	r3, [pc, #124]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c72:	4b1e      	ldr	r3, [pc, #120]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000c74:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000c78:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000c7a:	4b1c      	ldr	r3, [pc, #112]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000c7c:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8000c80:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c82:	4b1a      	ldr	r3, [pc, #104]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c88:	4b18      	ldr	r3, [pc, #96]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c8e:	4b17      	ldr	r3, [pc, #92]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000c94:	4b15      	ldr	r3, [pc, #84]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c9a:	4b14      	ldr	r3, [pc, #80]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000c9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ca0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000ca2:	4b12      	ldr	r3, [pc, #72]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000ca8:	4b10      	ldr	r3, [pc, #64]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000cae:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000cb4:	4b0d      	ldr	r3, [pc, #52]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000cc0:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000cc6:	4b09      	ldr	r3, [pc, #36]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000ccc:	4b07      	ldr	r3, [pc, #28]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000cd2:	4b06      	ldr	r3, [pc, #24]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cd8:	4804      	ldr	r0, [pc, #16]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000cda:	f005 f9df 	bl	800609c <HAL_SPI_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000ce4:	f000 f97c 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ce8:	bf00      	nop
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	24000234 	.word	0x24000234
 8000cf0:	40013000 	.word	0x40013000

08000cf4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cf8:	4b22      	ldr	r3, [pc, #136]	; (8000d84 <MX_USART3_UART_Init+0x90>)
 8000cfa:	4a23      	ldr	r2, [pc, #140]	; (8000d88 <MX_USART3_UART_Init+0x94>)
 8000cfc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cfe:	4b21      	ldr	r3, [pc, #132]	; (8000d84 <MX_USART3_UART_Init+0x90>)
 8000d00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d04:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d06:	4b1f      	ldr	r3, [pc, #124]	; (8000d84 <MX_USART3_UART_Init+0x90>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d0c:	4b1d      	ldr	r3, [pc, #116]	; (8000d84 <MX_USART3_UART_Init+0x90>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d12:	4b1c      	ldr	r3, [pc, #112]	; (8000d84 <MX_USART3_UART_Init+0x90>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d18:	4b1a      	ldr	r3, [pc, #104]	; (8000d84 <MX_USART3_UART_Init+0x90>)
 8000d1a:	220c      	movs	r2, #12
 8000d1c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d1e:	4b19      	ldr	r3, [pc, #100]	; (8000d84 <MX_USART3_UART_Init+0x90>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d24:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <MX_USART3_UART_Init+0x90>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d2a:	4b16      	ldr	r3, [pc, #88]	; (8000d84 <MX_USART3_UART_Init+0x90>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d30:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <MX_USART3_UART_Init+0x90>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d36:	4b13      	ldr	r3, [pc, #76]	; (8000d84 <MX_USART3_UART_Init+0x90>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d3c:	4811      	ldr	r0, [pc, #68]	; (8000d84 <MX_USART3_UART_Init+0x90>)
 8000d3e:	f006 f8e2 	bl	8006f06 <HAL_UART_Init>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d48:	f000 f94a 	bl	8000fe0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	480d      	ldr	r0, [pc, #52]	; (8000d84 <MX_USART3_UART_Init+0x90>)
 8000d50:	f008 fd41 	bl	80097d6 <HAL_UARTEx_SetTxFifoThreshold>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d5a:	f000 f941 	bl	8000fe0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4808      	ldr	r0, [pc, #32]	; (8000d84 <MX_USART3_UART_Init+0x90>)
 8000d62:	f008 fd76 	bl	8009852 <HAL_UARTEx_SetRxFifoThreshold>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d6c:	f000 f938 	bl	8000fe0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d70:	4804      	ldr	r0, [pc, #16]	; (8000d84 <MX_USART3_UART_Init+0x90>)
 8000d72:	f008 fcf7 	bl	8009764 <HAL_UARTEx_DisableFifoMode>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d7c:	f000 f930 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	240002bc 	.word	0x240002bc
 8000d88:	40004800 	.word	0x40004800

08000d8c <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
	...

08000d9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08e      	sub	sp, #56	; 0x38
 8000da0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
 8000dae:	60da      	str	r2, [r3, #12]
 8000db0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db2:	4b83      	ldr	r3, [pc, #524]	; (8000fc0 <MX_GPIO_Init+0x224>)
 8000db4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db8:	4a81      	ldr	r2, [pc, #516]	; (8000fc0 <MX_GPIO_Init+0x224>)
 8000dba:	f043 0304 	orr.w	r3, r3, #4
 8000dbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dc2:	4b7f      	ldr	r3, [pc, #508]	; (8000fc0 <MX_GPIO_Init+0x224>)
 8000dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc8:	f003 0304 	and.w	r3, r3, #4
 8000dcc:	623b      	str	r3, [r7, #32]
 8000dce:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dd0:	4b7b      	ldr	r3, [pc, #492]	; (8000fc0 <MX_GPIO_Init+0x224>)
 8000dd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd6:	4a7a      	ldr	r2, [pc, #488]	; (8000fc0 <MX_GPIO_Init+0x224>)
 8000dd8:	f043 0320 	orr.w	r3, r3, #32
 8000ddc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000de0:	4b77      	ldr	r3, [pc, #476]	; (8000fc0 <MX_GPIO_Init+0x224>)
 8000de2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de6:	f003 0320 	and.w	r3, r3, #32
 8000dea:	61fb      	str	r3, [r7, #28]
 8000dec:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dee:	4b74      	ldr	r3, [pc, #464]	; (8000fc0 <MX_GPIO_Init+0x224>)
 8000df0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df4:	4a72      	ldr	r2, [pc, #456]	; (8000fc0 <MX_GPIO_Init+0x224>)
 8000df6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dfa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dfe:	4b70      	ldr	r3, [pc, #448]	; (8000fc0 <MX_GPIO_Init+0x224>)
 8000e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e08:	61bb      	str	r3, [r7, #24]
 8000e0a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0c:	4b6c      	ldr	r3, [pc, #432]	; (8000fc0 <MX_GPIO_Init+0x224>)
 8000e0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e12:	4a6b      	ldr	r2, [pc, #428]	; (8000fc0 <MX_GPIO_Init+0x224>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e1c:	4b68      	ldr	r3, [pc, #416]	; (8000fc0 <MX_GPIO_Init+0x224>)
 8000e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	617b      	str	r3, [r7, #20]
 8000e28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2a:	4b65      	ldr	r3, [pc, #404]	; (8000fc0 <MX_GPIO_Init+0x224>)
 8000e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e30:	4a63      	ldr	r2, [pc, #396]	; (8000fc0 <MX_GPIO_Init+0x224>)
 8000e32:	f043 0302 	orr.w	r3, r3, #2
 8000e36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e3a:	4b61      	ldr	r3, [pc, #388]	; (8000fc0 <MX_GPIO_Init+0x224>)
 8000e3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e40:	f003 0302 	and.w	r3, r3, #2
 8000e44:	613b      	str	r3, [r7, #16]
 8000e46:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e48:	4b5d      	ldr	r3, [pc, #372]	; (8000fc0 <MX_GPIO_Init+0x224>)
 8000e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e4e:	4a5c      	ldr	r2, [pc, #368]	; (8000fc0 <MX_GPIO_Init+0x224>)
 8000e50:	f043 0308 	orr.w	r3, r3, #8
 8000e54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e58:	4b59      	ldr	r3, [pc, #356]	; (8000fc0 <MX_GPIO_Init+0x224>)
 8000e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e5e:	f003 0308 	and.w	r3, r3, #8
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e66:	4b56      	ldr	r3, [pc, #344]	; (8000fc0 <MX_GPIO_Init+0x224>)
 8000e68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e6c:	4a54      	ldr	r2, [pc, #336]	; (8000fc0 <MX_GPIO_Init+0x224>)
 8000e6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e76:	4b52      	ldr	r3, [pc, #328]	; (8000fc0 <MX_GPIO_Init+0x224>)
 8000e78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e84:	4b4e      	ldr	r3, [pc, #312]	; (8000fc0 <MX_GPIO_Init+0x224>)
 8000e86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e8a:	4a4d      	ldr	r2, [pc, #308]	; (8000fc0 <MX_GPIO_Init+0x224>)
 8000e8c:	f043 0310 	orr.w	r3, r3, #16
 8000e90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e94:	4b4a      	ldr	r3, [pc, #296]	; (8000fc0 <MX_GPIO_Init+0x224>)
 8000e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e9a:	f003 0310 	and.w	r3, r3, #16
 8000e9e:	607b      	str	r3, [r7, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DDS_IO_Update_GPIO_Port, DDS_IO_Update_Pin, GPIO_PIN_RESET);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ea8:	4846      	ldr	r0, [pc, #280]	; (8000fc4 <MX_GPIO_Init+0x228>)
 8000eaa:	f002 fb7b 	bl	80035a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|DDS_CSn_Pin|DDS_Reset_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f244 0107 	movw	r1, #16391	; 0x4007
 8000eb4:	4844      	ldr	r0, [pc, #272]	; (8000fc8 <MX_GPIO_Init+0x22c>)
 8000eb6:	f002 fb75 	bl	80035a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ec0:	4842      	ldr	r0, [pc, #264]	; (8000fcc <MX_GPIO_Init+0x230>)
 8000ec2:	f002 fb6f 	bl	80035a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2102      	movs	r1, #2
 8000eca:	4841      	ldr	r0, [pc, #260]	; (8000fd0 <MX_GPIO_Init+0x234>)
 8000ecc:	f002 fb6a 	bl	80035a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ed0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ed4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ede:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	483b      	ldr	r0, [pc, #236]	; (8000fd4 <MX_GPIO_Init+0x238>)
 8000ee6:	f002 f9b5 	bl	8003254 <HAL_GPIO_Init>

  /*Configure GPIO pin : DDS_IO_Update_Pin */
  GPIO_InitStruct.Pin = DDS_IO_Update_Pin;
 8000eea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DDS_IO_Update_GPIO_Port, &GPIO_InitStruct);
 8000efc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f00:	4619      	mov	r1, r3
 8000f02:	4830      	ldr	r0, [pc, #192]	; (8000fc4 <MX_GPIO_Init+0x228>)
 8000f04:	f002 f9a6 	bl	8003254 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin DDS_CSn_Pin DDS_Reset_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|DDS_CSn_Pin|DDS_Reset_Pin|LED_RED_Pin;
 8000f08:	f244 0307 	movw	r3, #16391	; 0x4007
 8000f0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f16:	2300      	movs	r3, #0
 8000f18:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4829      	ldr	r0, [pc, #164]	; (8000fc8 <MX_GPIO_Init+0x22c>)
 8000f22:	f002 f997 	bl	8003254 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000f26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f34:	2300      	movs	r3, #0
 8000f36:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000f38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4823      	ldr	r0, [pc, #140]	; (8000fcc <MX_GPIO_Init+0x230>)
 8000f40:	f002 f988 	bl	8003254 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000f44:	2380      	movs	r3, #128	; 0x80
 8000f46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f48:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000f52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f56:	4619      	mov	r1, r3
 8000f58:	481f      	ldr	r0, [pc, #124]	; (8000fd8 <MX_GPIO_Init+0x23c>)
 8000f5a:	f002 f97b 	bl	8003254 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000f5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f64:	2300      	movs	r3, #0
 8000f66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f70:	4619      	mov	r1, r3
 8000f72:	481a      	ldr	r0, [pc, #104]	; (8000fdc <MX_GPIO_Init+0x240>)
 8000f74:	f002 f96e 	bl	8003254 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000f78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f86:	2300      	movs	r3, #0
 8000f88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000f8a:	230a      	movs	r3, #10
 8000f8c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000f8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f92:	4619      	mov	r1, r3
 8000f94:	4811      	ldr	r0, [pc, #68]	; (8000fdc <MX_GPIO_Init+0x240>)
 8000f96:	f002 f95d 	bl	8003254 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000faa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4807      	ldr	r0, [pc, #28]	; (8000fd0 <MX_GPIO_Init+0x234>)
 8000fb2:	f002 f94f 	bl	8003254 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fb6:	bf00      	nop
 8000fb8:	3738      	adds	r7, #56	; 0x38
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	58024400 	.word	0x58024400
 8000fc4:	58021400 	.word	0x58021400
 8000fc8:	58020400 	.word	0x58020400
 8000fcc:	58020c00 	.word	0x58020c00
 8000fd0:	58021000 	.word	0x58021000
 8000fd4:	58020800 	.word	0x58020800
 8000fd8:	58021800 	.word	0x58021800
 8000fdc:	58020000 	.word	0x58020000

08000fe0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe4:	b672      	cpsid	i
}
 8000fe6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <Error_Handler+0x8>
	...

08000fec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff2:	4b0a      	ldr	r3, [pc, #40]	; (800101c <HAL_MspInit+0x30>)
 8000ff4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ff8:	4a08      	ldr	r2, [pc, #32]	; (800101c <HAL_MspInit+0x30>)
 8000ffa:	f043 0302 	orr.w	r3, r3, #2
 8000ffe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001002:	4b06      	ldr	r3, [pc, #24]	; (800101c <HAL_MspInit+0x30>)
 8001004:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001008:	f003 0302 	and.w	r3, r3, #2
 800100c:	607b      	str	r3, [r7, #4]
 800100e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	58024400 	.word	0x58024400

08001020 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08e      	sub	sp, #56	; 0x38
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a59      	ldr	r2, [pc, #356]	; (80011a4 <HAL_ETH_MspInit+0x184>)
 800103e:	4293      	cmp	r3, r2
 8001040:	f040 80ab 	bne.w	800119a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001044:	4b58      	ldr	r3, [pc, #352]	; (80011a8 <HAL_ETH_MspInit+0x188>)
 8001046:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800104a:	4a57      	ldr	r2, [pc, #348]	; (80011a8 <HAL_ETH_MspInit+0x188>)
 800104c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001050:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001054:	4b54      	ldr	r3, [pc, #336]	; (80011a8 <HAL_ETH_MspInit+0x188>)
 8001056:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800105a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800105e:	623b      	str	r3, [r7, #32]
 8001060:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001062:	4b51      	ldr	r3, [pc, #324]	; (80011a8 <HAL_ETH_MspInit+0x188>)
 8001064:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001068:	4a4f      	ldr	r2, [pc, #316]	; (80011a8 <HAL_ETH_MspInit+0x188>)
 800106a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800106e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001072:	4b4d      	ldr	r3, [pc, #308]	; (80011a8 <HAL_ETH_MspInit+0x188>)
 8001074:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001078:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800107c:	61fb      	str	r3, [r7, #28]
 800107e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001080:	4b49      	ldr	r3, [pc, #292]	; (80011a8 <HAL_ETH_MspInit+0x188>)
 8001082:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001086:	4a48      	ldr	r2, [pc, #288]	; (80011a8 <HAL_ETH_MspInit+0x188>)
 8001088:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800108c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001090:	4b45      	ldr	r3, [pc, #276]	; (80011a8 <HAL_ETH_MspInit+0x188>)
 8001092:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109a:	61bb      	str	r3, [r7, #24]
 800109c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800109e:	4b42      	ldr	r3, [pc, #264]	; (80011a8 <HAL_ETH_MspInit+0x188>)
 80010a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a4:	4a40      	ldr	r2, [pc, #256]	; (80011a8 <HAL_ETH_MspInit+0x188>)
 80010a6:	f043 0304 	orr.w	r3, r3, #4
 80010aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010ae:	4b3e      	ldr	r3, [pc, #248]	; (80011a8 <HAL_ETH_MspInit+0x188>)
 80010b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b4:	f003 0304 	and.w	r3, r3, #4
 80010b8:	617b      	str	r3, [r7, #20]
 80010ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010bc:	4b3a      	ldr	r3, [pc, #232]	; (80011a8 <HAL_ETH_MspInit+0x188>)
 80010be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010c2:	4a39      	ldr	r2, [pc, #228]	; (80011a8 <HAL_ETH_MspInit+0x188>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010cc:	4b36      	ldr	r3, [pc, #216]	; (80011a8 <HAL_ETH_MspInit+0x188>)
 80010ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010da:	4b33      	ldr	r3, [pc, #204]	; (80011a8 <HAL_ETH_MspInit+0x188>)
 80010dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e0:	4a31      	ldr	r2, [pc, #196]	; (80011a8 <HAL_ETH_MspInit+0x188>)
 80010e2:	f043 0302 	orr.w	r3, r3, #2
 80010e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010ea:	4b2f      	ldr	r3, [pc, #188]	; (80011a8 <HAL_ETH_MspInit+0x188>)
 80010ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f0:	f003 0302 	and.w	r3, r3, #2
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80010f8:	4b2b      	ldr	r3, [pc, #172]	; (80011a8 <HAL_ETH_MspInit+0x188>)
 80010fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010fe:	4a2a      	ldr	r2, [pc, #168]	; (80011a8 <HAL_ETH_MspInit+0x188>)
 8001100:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001104:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001108:	4b27      	ldr	r3, [pc, #156]	; (80011a8 <HAL_ETH_MspInit+0x188>)
 800110a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800110e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001112:	60bb      	str	r3, [r7, #8]
 8001114:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001116:	2332      	movs	r3, #50	; 0x32
 8001118:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111a:	2302      	movs	r3, #2
 800111c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001122:	2300      	movs	r3, #0
 8001124:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001126:	230b      	movs	r3, #11
 8001128:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800112a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800112e:	4619      	mov	r1, r3
 8001130:	481e      	ldr	r0, [pc, #120]	; (80011ac <HAL_ETH_MspInit+0x18c>)
 8001132:	f002 f88f 	bl	8003254 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001136:	2386      	movs	r3, #134	; 0x86
 8001138:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113a:	2302      	movs	r3, #2
 800113c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001142:	2300      	movs	r3, #0
 8001144:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001146:	230b      	movs	r3, #11
 8001148:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800114e:	4619      	mov	r1, r3
 8001150:	4817      	ldr	r0, [pc, #92]	; (80011b0 <HAL_ETH_MspInit+0x190>)
 8001152:	f002 f87f 	bl	8003254 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001156:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800115a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115c:	2302      	movs	r3, #2
 800115e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001164:	2300      	movs	r3, #0
 8001166:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001168:	230b      	movs	r3, #11
 800116a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800116c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001170:	4619      	mov	r1, r3
 8001172:	4810      	ldr	r0, [pc, #64]	; (80011b4 <HAL_ETH_MspInit+0x194>)
 8001174:	f002 f86e 	bl	8003254 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001178:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117e:	2302      	movs	r3, #2
 8001180:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001186:	2300      	movs	r3, #0
 8001188:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800118a:	230b      	movs	r3, #11
 800118c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800118e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001192:	4619      	mov	r1, r3
 8001194:	4808      	ldr	r0, [pc, #32]	; (80011b8 <HAL_ETH_MspInit+0x198>)
 8001196:	f002 f85d 	bl	8003254 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800119a:	bf00      	nop
 800119c:	3738      	adds	r7, #56	; 0x38
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40028000 	.word	0x40028000
 80011a8:	58024400 	.word	0x58024400
 80011ac:	58020800 	.word	0x58020800
 80011b0:	58020000 	.word	0x58020000
 80011b4:	58020400 	.word	0x58020400
 80011b8:	58021800 	.word	0x58021800

080011bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b0ba      	sub	sp, #232	; 0xe8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011d4:	f107 0318 	add.w	r3, r7, #24
 80011d8:	22b8      	movs	r2, #184	; 0xb8
 80011da:	2100      	movs	r1, #0
 80011dc:	4618      	mov	r0, r3
 80011de:	f008 fdcd 	bl	8009d7c <memset>
  if(hspi->Instance==SPI1)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a38      	ldr	r2, [pc, #224]	; (80012c8 <HAL_SPI_MspInit+0x10c>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d168      	bne.n	80012be <HAL_SPI_MspInit+0x102>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80011ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011f0:	f04f 0300 	mov.w	r3, #0
 80011f4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011fc:	f107 0318 	add.w	r3, r7, #24
 8001200:	4618      	mov	r0, r3
 8001202:	f003 f989 	bl	8004518 <HAL_RCCEx_PeriphCLKConfig>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 800120c:	f7ff fee8 	bl	8000fe0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001210:	4b2e      	ldr	r3, [pc, #184]	; (80012cc <HAL_SPI_MspInit+0x110>)
 8001212:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001216:	4a2d      	ldr	r2, [pc, #180]	; (80012cc <HAL_SPI_MspInit+0x110>)
 8001218:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800121c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001220:	4b2a      	ldr	r3, [pc, #168]	; (80012cc <HAL_SPI_MspInit+0x110>)
 8001222:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001226:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800122a:	617b      	str	r3, [r7, #20]
 800122c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800122e:	4b27      	ldr	r3, [pc, #156]	; (80012cc <HAL_SPI_MspInit+0x110>)
 8001230:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001234:	4a25      	ldr	r2, [pc, #148]	; (80012cc <HAL_SPI_MspInit+0x110>)
 8001236:	f043 0301 	orr.w	r3, r3, #1
 800123a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800123e:	4b23      	ldr	r3, [pc, #140]	; (80012cc <HAL_SPI_MspInit+0x110>)
 8001240:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001244:	f003 0301 	and.w	r3, r3, #1
 8001248:	613b      	str	r3, [r7, #16]
 800124a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800124c:	4b1f      	ldr	r3, [pc, #124]	; (80012cc <HAL_SPI_MspInit+0x110>)
 800124e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001252:	4a1e      	ldr	r2, [pc, #120]	; (80012cc <HAL_SPI_MspInit+0x110>)
 8001254:	f043 0308 	orr.w	r3, r3, #8
 8001258:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800125c:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <HAL_SPI_MspInit+0x110>)
 800125e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001262:	f003 0308 	and.w	r3, r3, #8
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800126a:	2360      	movs	r3, #96	; 0x60
 800126c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001270:	2302      	movs	r3, #2
 8001272:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127c:	2300      	movs	r3, #0
 800127e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001282:	2305      	movs	r3, #5
 8001284:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001288:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800128c:	4619      	mov	r1, r3
 800128e:	4810      	ldr	r0, [pc, #64]	; (80012d0 <HAL_SPI_MspInit+0x114>)
 8001290:	f001 ffe0 	bl	8003254 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001294:	2380      	movs	r3, #128	; 0x80
 8001296:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129a:	2302      	movs	r3, #2
 800129c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a6:	2300      	movs	r3, #0
 80012a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012ac:	2305      	movs	r3, #5
 80012ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012b2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012b6:	4619      	mov	r1, r3
 80012b8:	4806      	ldr	r0, [pc, #24]	; (80012d4 <HAL_SPI_MspInit+0x118>)
 80012ba:	f001 ffcb 	bl	8003254 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80012be:	bf00      	nop
 80012c0:	37e8      	adds	r7, #232	; 0xe8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40013000 	.word	0x40013000
 80012cc:	58024400 	.word	0x58024400
 80012d0:	58020000 	.word	0x58020000
 80012d4:	58020c00 	.word	0x58020c00

080012d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b0b8      	sub	sp, #224	; 0xe0
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012f0:	f107 0310 	add.w	r3, r7, #16
 80012f4:	22b8      	movs	r2, #184	; 0xb8
 80012f6:	2100      	movs	r1, #0
 80012f8:	4618      	mov	r0, r3
 80012fa:	f008 fd3f 	bl	8009d7c <memset>
  if(huart->Instance==USART3)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a2b      	ldr	r2, [pc, #172]	; (80013b0 <HAL_UART_MspInit+0xd8>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d14e      	bne.n	80013a6 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001308:	f04f 0202 	mov.w	r2, #2
 800130c:	f04f 0300 	mov.w	r3, #0
 8001310:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001314:	2300      	movs	r3, #0
 8001316:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800131a:	f107 0310 	add.w	r3, r7, #16
 800131e:	4618      	mov	r0, r3
 8001320:	f003 f8fa 	bl	8004518 <HAL_RCCEx_PeriphCLKConfig>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800132a:	f7ff fe59 	bl	8000fe0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800132e:	4b21      	ldr	r3, [pc, #132]	; (80013b4 <HAL_UART_MspInit+0xdc>)
 8001330:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001334:	4a1f      	ldr	r2, [pc, #124]	; (80013b4 <HAL_UART_MspInit+0xdc>)
 8001336:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800133a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800133e:	4b1d      	ldr	r3, [pc, #116]	; (80013b4 <HAL_UART_MspInit+0xdc>)
 8001340:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001344:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800134c:	4b19      	ldr	r3, [pc, #100]	; (80013b4 <HAL_UART_MspInit+0xdc>)
 800134e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001352:	4a18      	ldr	r2, [pc, #96]	; (80013b4 <HAL_UART_MspInit+0xdc>)
 8001354:	f043 0308 	orr.w	r3, r3, #8
 8001358:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800135c:	4b15      	ldr	r3, [pc, #84]	; (80013b4 <HAL_UART_MspInit+0xdc>)
 800135e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001362:	f003 0308 	and.w	r3, r3, #8
 8001366:	60bb      	str	r3, [r7, #8]
 8001368:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 800136a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800136e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001372:	2302      	movs	r3, #2
 8001374:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137e:	2300      	movs	r3, #0
 8001380:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001384:	2307      	movs	r3, #7
 8001386:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800138a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800138e:	4619      	mov	r1, r3
 8001390:	4809      	ldr	r0, [pc, #36]	; (80013b8 <HAL_UART_MspInit+0xe0>)
 8001392:	f001 ff5f 	bl	8003254 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001396:	2200      	movs	r2, #0
 8001398:	2100      	movs	r1, #0
 800139a:	2027      	movs	r0, #39	; 0x27
 800139c:	f000 fd8d 	bl	8001eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80013a0:	2027      	movs	r0, #39	; 0x27
 80013a2:	f000 fda4 	bl	8001eee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013a6:	bf00      	nop
 80013a8:	37e0      	adds	r7, #224	; 0xe0
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40004800 	.word	0x40004800
 80013b4:	58024400 	.word	0x58024400
 80013b8:	58020c00 	.word	0x58020c00

080013bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013c0:	e7fe      	b.n	80013c0 <NMI_Handler+0x4>

080013c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013c6:	e7fe      	b.n	80013c6 <HardFault_Handler+0x4>

080013c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013cc:	e7fe      	b.n	80013cc <MemManage_Handler+0x4>

080013ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013d2:	e7fe      	b.n	80013d2 <BusFault_Handler+0x4>

080013d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d8:	e7fe      	b.n	80013d8 <UsageFault_Handler+0x4>

080013da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001408:	f000 fc24 	bl	8001c54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}

08001410 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001414:	4802      	ldr	r0, [pc, #8]	; (8001420 <USART3_IRQHandler+0x10>)
 8001416:	f005 fea1 	bl	800715c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	240002bc 	.word	0x240002bc

08001424 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]
 8001434:	e00a      	b.n	800144c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001436:	f3af 8000 	nop.w
 800143a:	4601      	mov	r1, r0
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	1c5a      	adds	r2, r3, #1
 8001440:	60ba      	str	r2, [r7, #8]
 8001442:	b2ca      	uxtb	r2, r1
 8001444:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	3301      	adds	r3, #1
 800144a:	617b      	str	r3, [r7, #20]
 800144c:	697a      	ldr	r2, [r7, #20]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	429a      	cmp	r2, r3
 8001452:	dbf0      	blt.n	8001436 <_read+0x12>
  }

  return len;
 8001454:	687b      	ldr	r3, [r7, #4]
}
 8001456:	4618      	mov	r0, r3
 8001458:	3718      	adds	r7, #24
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <_close>:
  }
  return len;
}

int _close(int file)
{
 800145e:	b480      	push	{r7}
 8001460:	b083      	sub	sp, #12
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001466:	f04f 33ff 	mov.w	r3, #4294967295
}
 800146a:	4618      	mov	r0, r3
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr

08001476 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001476:	b480      	push	{r7}
 8001478:	b083      	sub	sp, #12
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
 800147e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001486:	605a      	str	r2, [r3, #4]
  return 0;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <_isatty>:

int _isatty(int file)
{
 8001496:	b480      	push	{r7}
 8001498:	b083      	sub	sp, #12
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800149e:	2301      	movs	r3, #1
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3714      	adds	r7, #20
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
	...

080014c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014d0:	4a14      	ldr	r2, [pc, #80]	; (8001524 <_sbrk+0x5c>)
 80014d2:	4b15      	ldr	r3, [pc, #84]	; (8001528 <_sbrk+0x60>)
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014dc:	4b13      	ldr	r3, [pc, #76]	; (800152c <_sbrk+0x64>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d102      	bne.n	80014ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014e4:	4b11      	ldr	r3, [pc, #68]	; (800152c <_sbrk+0x64>)
 80014e6:	4a12      	ldr	r2, [pc, #72]	; (8001530 <_sbrk+0x68>)
 80014e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ea:	4b10      	ldr	r3, [pc, #64]	; (800152c <_sbrk+0x64>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4413      	add	r3, r2
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d207      	bcs.n	8001508 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014f8:	f008 fc8e 	bl	8009e18 <__errno>
 80014fc:	4603      	mov	r3, r0
 80014fe:	220c      	movs	r2, #12
 8001500:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001502:	f04f 33ff 	mov.w	r3, #4294967295
 8001506:	e009      	b.n	800151c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001508:	4b08      	ldr	r3, [pc, #32]	; (800152c <_sbrk+0x64>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800150e:	4b07      	ldr	r3, [pc, #28]	; (800152c <_sbrk+0x64>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4413      	add	r3, r2
 8001516:	4a05      	ldr	r2, [pc, #20]	; (800152c <_sbrk+0x64>)
 8001518:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800151a:	68fb      	ldr	r3, [r7, #12]
}
 800151c:	4618      	mov	r0, r3
 800151e:	3718      	adds	r7, #24
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	24050000 	.word	0x24050000
 8001528:	00000400 	.word	0x00000400
 800152c:	24000424 	.word	0x24000424
 8001530:	24000578 	.word	0x24000578

08001534 <AD9910_GetRegSize>:
    // Reset DDS
    AD9910_Reset();
}


uint8_t AD9910_GetRegSize(uint8_t reg_id) {
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	71fb      	strb	r3, [r7, #7]
    // Renvoit la taille du buffer
	switch(reg_id)
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	2b16      	cmp	r3, #22
 8001542:	bf8c      	ite	hi
 8001544:	2201      	movhi	r2, #1
 8001546:	2200      	movls	r2, #0
 8001548:	b2d2      	uxtb	r2, r2
 800154a:	2a00      	cmp	r2, #0
 800154c:	d123      	bne.n	8001596 <AD9910_GetRegSize+0x62>
 800154e:	2201      	movs	r2, #1
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	4a14      	ldr	r2, [pc, #80]	; (80015a8 <AD9910_GetRegSize+0x74>)
 8001556:	401a      	ands	r2, r3
 8001558:	2a00      	cmp	r2, #0
 800155a:	bf14      	ite	ne
 800155c:	2201      	movne	r2, #1
 800155e:	2200      	moveq	r2, #0
 8001560:	b2d2      	uxtb	r2, r2
 8001562:	2a00      	cmp	r2, #0
 8001564:	d115      	bne.n	8001592 <AD9910_GetRegSize+0x5e>
 8001566:	4a11      	ldr	r2, [pc, #68]	; (80015ac <AD9910_GetRegSize+0x78>)
 8001568:	401a      	ands	r2, r3
 800156a:	2a00      	cmp	r2, #0
 800156c:	bf14      	ite	ne
 800156e:	2201      	movne	r2, #1
 8001570:	2200      	moveq	r2, #0
 8001572:	b2d2      	uxtb	r2, r2
 8001574:	2a00      	cmp	r2, #0
 8001576:	d10a      	bne.n	800158e <AD9910_GetRegSize+0x5a>
 8001578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800157c:	2b00      	cmp	r3, #0
 800157e:	bf14      	ite	ne
 8001580:	2301      	movne	r3, #1
 8001582:	2300      	moveq	r3, #0
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b00      	cmp	r3, #0
 8001588:	d005      	beq.n	8001596 <AD9910_GetRegSize+0x62>
		{
			case 8:
				return 2;
 800158a:	2302      	movs	r3, #2
 800158c:	e005      	b.n	800159a <AD9910_GetRegSize+0x66>
			case 7:
			case 9:
			case 0x0A:
			case 0x0D:
			case 0x16:
				return 4;
 800158e:	2304      	movs	r3, #4
 8001590:	e003      	b.n	800159a <AD9910_GetRegSize+0x66>
			case 0x11:
			case 0x12:
			case 0x13:
			case 0x14:
			case 0x15:
				return 8;
 8001592:	2308      	movs	r3, #8
 8001594:	e001      	b.n	800159a <AD9910_GetRegSize+0x66>

			default :
	            break;
 8001596:	bf00      	nop
		}

		return 0; // other registers
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	003fd800 	.word	0x003fd800
 80015ac:	0040269f 	.word	0x0040269f

080015b0 <AD9910_Reset>:

// Fonction de réinitialisation
void AD9910_Reset(void) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(AD9910_RESET_PORT, AD9910_RESET_PIN, GPIO_PIN_SET);
 80015b4:	2201      	movs	r2, #1
 80015b6:	2104      	movs	r1, #4
 80015b8:	4806      	ldr	r0, [pc, #24]	; (80015d4 <AD9910_Reset+0x24>)
 80015ba:	f001 fff3 	bl	80035a4 <HAL_GPIO_WritePin>
    HAL_Delay(10); // 10 ms de délai
 80015be:	200a      	movs	r0, #10
 80015c0:	f000 fb68 	bl	8001c94 <HAL_Delay>
    HAL_GPIO_WritePin(AD9910_RESET_PORT, AD9910_RESET_PIN, GPIO_PIN_RESET);
 80015c4:	2200      	movs	r2, #0
 80015c6:	2104      	movs	r1, #4
 80015c8:	4802      	ldr	r0, [pc, #8]	; (80015d4 <AD9910_Reset+0x24>)
 80015ca:	f001 ffeb 	bl	80035a4 <HAL_GPIO_WritePin>
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	58020400 	.word	0x58020400

080015d8 <AD9910_IOUpdate>:

// Mise à jour des registres
void AD9910_IOUpdate(void) {
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(AD9910_IO_UPDATE_PORT, AD9910_IO_UPDATE_PIN, GPIO_PIN_SET);
 80015dc:	2201      	movs	r2, #1
 80015de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015e2:	4807      	ldr	r0, [pc, #28]	; (8001600 <AD9910_IOUpdate+0x28>)
 80015e4:	f001 ffde 	bl	80035a4 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80015e8:	200a      	movs	r0, #10
 80015ea:	f000 fb53 	bl	8001c94 <HAL_Delay>
    HAL_GPIO_WritePin(AD9910_IO_UPDATE_PORT, AD9910_IO_UPDATE_PIN, GPIO_PIN_RESET);
 80015ee:	2200      	movs	r2, #0
 80015f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015f4:	4802      	ldr	r0, [pc, #8]	; (8001600 <AD9910_IOUpdate+0x28>)
 80015f6:	f001 ffd5 	bl	80035a4 <HAL_GPIO_WritePin>
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	58021400 	.word	0x58021400

08001604 <AD9910_WriteRegister>:

// Écriture dans un registre de l'AD9910
HAL_StatusTypeDef AD9910_WriteRegister(uint8_t reg_addr, uint64_t data) {
 8001604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001606:	b08b      	sub	sp, #44	; 0x2c
 8001608:	af00      	add	r7, sp, #0
 800160a:	4601      	mov	r1, r0
 800160c:	e9c7 2300 	strd	r2, r3, [r7]
 8001610:	460b      	mov	r3, r1
 8001612:	73fb      	strb	r3, [r7, #15]
    uint8_t write_buffer[9] = {0};
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]
 8001618:	f107 0318 	add.w	r3, r7, #24
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	711a      	strb	r2, [r3, #4]
    uint8_t reg_size = AD9910_GetRegSize(reg_addr);
 8001622:	7bfb      	ldrb	r3, [r7, #15]
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff ff85 	bl	8001534 <AD9910_GetRegSize>
 800162a:	4603      	mov	r3, r0
 800162c:	77fb      	strb	r3, [r7, #31]

    //write_buffer[0] = reg_addr & 0x7F; // MSB à 0 pour écrire

    write_buffer[0] = 0 | reg_addr;	//Write + Register ID
 800162e:	7bfb      	ldrb	r3, [r7, #15]
 8001630:	753b      	strb	r3, [r7, #20]

	int8_t shift = (int8_t)((reg_size-1) * 8);
 8001632:	7ffb      	ldrb	r3, [r7, #31]
 8001634:	3b01      	subs	r3, #1
 8001636:	b2db      	uxtb	r3, r3
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	b2db      	uxtb	r3, r3
 800163c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for(int i = 1; shift >= 0 ; i++)
 8001640:	2301      	movs	r3, #1
 8001642:	623b      	str	r3, [r7, #32]
 8001644:	e028      	b.n	8001698 <AD9910_WriteRegister+0x94>
	{
		if(i < sizeof(write_buffer))
 8001646:	6a3b      	ldr	r3, [r7, #32]
 8001648:	2b08      	cmp	r3, #8
 800164a:	d819      	bhi.n	8001680 <AD9910_WriteRegister+0x7c>
		{
			write_buffer[i] = (uint8_t)(data >> shift);
 800164c:	f997 1027 	ldrsb.w	r1, [r7, #39]	; 0x27
 8001650:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001654:	f1c1 0620 	rsb	r6, r1, #32
 8001658:	f1a1 0020 	sub.w	r0, r1, #32
 800165c:	fa22 f401 	lsr.w	r4, r2, r1
 8001660:	fa03 f606 	lsl.w	r6, r3, r6
 8001664:	4334      	orrs	r4, r6
 8001666:	fa23 f000 	lsr.w	r0, r3, r0
 800166a:	4304      	orrs	r4, r0
 800166c:	fa23 f501 	lsr.w	r5, r3, r1
 8001670:	b2e1      	uxtb	r1, r4
 8001672:	f107 0214 	add.w	r2, r7, #20
 8001676:	6a3b      	ldr	r3, [r7, #32]
 8001678:	4413      	add	r3, r2
 800167a:	460a      	mov	r2, r1
 800167c:	701a      	strb	r2, [r3, #0]
 800167e:	e002      	b.n	8001686 <AD9910_WriteRegister+0x82>
		}else{
			printf("update_ad9910_reg overflow !");
 8001680:	4815      	ldr	r0, [pc, #84]	; (80016d8 <AD9910_WriteRegister+0xd4>)
 8001682:	f008 fa35 	bl	8009af0 <iprintf>
		}
		shift -= 8;
 8001686:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800168a:	3b08      	subs	r3, #8
 800168c:	b2db      	uxtb	r3, r3
 800168e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for(int i = 1; shift >= 0 ; i++)
 8001692:	6a3b      	ldr	r3, [r7, #32]
 8001694:	3301      	adds	r3, #1
 8001696:	623b      	str	r3, [r7, #32]
 8001698:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800169c:	2b00      	cmp	r3, #0
 800169e:	dad2      	bge.n	8001646 <AD9910_WriteRegister+0x42>
	}

    HAL_GPIO_WritePin(AD9910_CS_PORT, AD9910_CS_PIN, GPIO_PIN_RESET); // Sélection du périphérique
 80016a0:	2200      	movs	r2, #0
 80016a2:	2102      	movs	r1, #2
 80016a4:	480d      	ldr	r0, [pc, #52]	; (80016dc <AD9910_WriteRegister+0xd8>)
 80016a6:	f001 ff7d 	bl	80035a4 <HAL_GPIO_WritePin>
    HAL_StatusTypeDef status = HAL_SPI_Transmit(&AD9910_SPI_PORT, write_buffer, (reg_size+1), HAL_MAX_DELAY);
 80016aa:	7ffb      	ldrb	r3, [r7, #31]
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	3301      	adds	r3, #1
 80016b0:	b29a      	uxth	r2, r3
 80016b2:	f107 0114 	add.w	r1, r7, #20
 80016b6:	f04f 33ff 	mov.w	r3, #4294967295
 80016ba:	4809      	ldr	r0, [pc, #36]	; (80016e0 <AD9910_WriteRegister+0xdc>)
 80016bc:	f004 fe12 	bl	80062e4 <HAL_SPI_Transmit>
 80016c0:	4603      	mov	r3, r0
 80016c2:	77bb      	strb	r3, [r7, #30]
    HAL_GPIO_WritePin(AD9910_CS_PORT, AD9910_CS_PIN, GPIO_PIN_SET); // Désélection du périphérique
 80016c4:	2201      	movs	r2, #1
 80016c6:	2102      	movs	r1, #2
 80016c8:	4804      	ldr	r0, [pc, #16]	; (80016dc <AD9910_WriteRegister+0xd8>)
 80016ca:	f001 ff6b 	bl	80035a4 <HAL_GPIO_WritePin>
    return status;
 80016ce:	7fbb      	ldrb	r3, [r7, #30]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	372c      	adds	r7, #44	; 0x2c
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016d8:	0800a9d8 	.word	0x0800a9d8
 80016dc:	58020400 	.word	0x58020400
 80016e0:	24000234 	.word	0x24000234

080016e4 <AD9910_ReadRegister>:

// Lecture dans un registre de l'AD9910
HAL_StatusTypeDef AD9910_ReadRegister(uint8_t reg_addr, uint64_t *data) {
 80016e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016e8:	b0ba      	sub	sp, #232	; 0xe8
 80016ea:	af02      	add	r7, sp, #8
 80016ec:	4603      	mov	r3, r0
 80016ee:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80016f2:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
    uint8_t write_buffer[9] = {0};
 80016f6:	2300      	movs	r3, #0
 80016f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80016fc:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8001700:	2300      	movs	r3, #0
 8001702:	6013      	str	r3, [r2, #0]
 8001704:	7113      	strb	r3, [r2, #4]
    uint8_t read_buffer[9] = {0};
 8001706:	2300      	movs	r3, #0
 8001708:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800170c:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8001710:	2300      	movs	r3, #0
 8001712:	6013      	str	r3, [r2, #0]
 8001714:	7113      	strb	r3, [r2, #4]
    uint8_t reg_size = AD9910_GetRegSize(reg_addr);
 8001716:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff ff0a 	bl	8001534 <AD9910_GetRegSize>
 8001720:	4603      	mov	r3, r0
 8001722:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf

    write_buffer[0] = reg_addr | 0x80; // MSB à 1 pour lire
 8001726:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 800172a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800172e:	b2db      	uxtb	r3, r3
 8001730:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4

    HAL_GPIO_WritePin(AD9910_CS_PORT, AD9910_CS_PIN, GPIO_PIN_RESET); // Sélection du périphérique
 8001734:	2200      	movs	r2, #0
 8001736:	2102      	movs	r1, #2
 8001738:	48b9      	ldr	r0, [pc, #740]	; (8001a20 <AD9910_ReadRegister+0x33c>)
 800173a:	f001 ff33 	bl	80035a4 <HAL_GPIO_WritePin>

    HAL_SPI_TransmitReceive(&AD9910_SPI_PORT, write_buffer, read_buffer,(reg_size+1), HAL_MAX_DELAY);
 800173e:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8001742:	b29b      	uxth	r3, r3
 8001744:	3301      	adds	r3, #1
 8001746:	b298      	uxth	r0, r3
 8001748:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 800174c:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 8001750:	f04f 33ff 	mov.w	r3, #4294967295
 8001754:	9300      	str	r3, [sp, #0]
 8001756:	4603      	mov	r3, r0
 8001758:	48b2      	ldr	r0, [pc, #712]	; (8001a24 <AD9910_ReadRegister+0x340>)
 800175a:	f004 ffb1 	bl	80066c0 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(AD9910_CS_PORT, AD9910_CS_PIN, GPIO_PIN_SET); // Désélection du périphérique
 800175e:	2201      	movs	r2, #1
 8001760:	2102      	movs	r1, #2
 8001762:	48af      	ldr	r0, [pc, #700]	; (8001a20 <AD9910_ReadRegister+0x33c>)
 8001764:	f001 ff1e 	bl	80035a4 <HAL_GPIO_WritePin>

    *data = 0;  // Initialise la data à 0
 8001768:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800176c:	f04f 0200 	mov.w	r2, #0
 8001770:	f04f 0300 	mov.w	r3, #0
 8001774:	e9c1 2300 	strd	r2, r3, [r1]

       /*for (int i = 0; i < 8; i++) {
           *data |= ((uint64_t)read_buffer[i] << (i * 8));  // Reconstruction en Little Endian
       }*/

    switch (reg_size) {
 8001778:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 800177c:	2b08      	cmp	r3, #8
 800177e:	f000 8092 	beq.w	80018a6 <AD9910_ReadRegister+0x1c2>
 8001782:	2b08      	cmp	r3, #8
 8001784:	f300 8141 	bgt.w	8001a0a <AD9910_ReadRegister+0x326>
 8001788:	2b02      	cmp	r3, #2
 800178a:	d002      	beq.n	8001792 <AD9910_ReadRegister+0xae>
 800178c:	2b04      	cmp	r3, #4
 800178e:	d027      	beq.n	80017e0 <AD9910_ReadRegister+0xfc>
 8001790:	e13b      	b.n	8001a0a <AD9910_ReadRegister+0x326>
                case 2: *data = ((uint64_t)read_buffer[1] << 8) | ((uint64_t)read_buffer[2]); break;
 8001792:	f897 30c9 	ldrb.w	r3, [r7, #201]	; 0xc9
 8001796:	b2db      	uxtb	r3, r3
 8001798:	2200      	movs	r2, #0
 800179a:	461c      	mov	r4, r3
 800179c:	4615      	mov	r5, r2
 800179e:	f04f 0200 	mov.w	r2, #0
 80017a2:	f04f 0300 	mov.w	r3, #0
 80017a6:	022b      	lsls	r3, r5, #8
 80017a8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80017ac:	0222      	lsls	r2, r4, #8
 80017ae:	f897 10ca 	ldrb.w	r1, [r7, #202]	; 0xca
 80017b2:	b2c9      	uxtb	r1, r1
 80017b4:	2000      	movs	r0, #0
 80017b6:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 80017ba:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
 80017be:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 80017c2:	4621      	mov	r1, r4
 80017c4:	4311      	orrs	r1, r2
 80017c6:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 80017ca:	4629      	mov	r1, r5
 80017cc:	4319      	orrs	r1, r3
 80017ce:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 80017d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80017d6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80017da:	e9c3 1200 	strd	r1, r2, [r3]
 80017de:	e119      	b.n	8001a14 <AD9910_ReadRegister+0x330>
                case 4: *data = ((uint64_t)read_buffer[1] << 24) | ((uint64_t)read_buffer[2] << 16) | ((uint64_t)read_buffer[3] << 8) | (uint64_t)read_buffer[4]; break;
 80017e0:	f897 30c9 	ldrb.w	r3, [r7, #201]	; 0xc9
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	2200      	movs	r2, #0
 80017e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80017ec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80017f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80017f4:	460b      	mov	r3, r1
 80017f6:	0a1b      	lsrs	r3, r3, #8
 80017f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80017fc:	460b      	mov	r3, r1
 80017fe:	061b      	lsls	r3, r3, #24
 8001800:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001804:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2200      	movs	r2, #0
 800180c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001810:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001814:	f04f 0200 	mov.w	r2, #0
 8001818:	f04f 0300 	mov.w	r3, #0
 800181c:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8001820:	4629      	mov	r1, r5
 8001822:	040b      	lsls	r3, r1, #16
 8001824:	4621      	mov	r1, r4
 8001826:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 800182a:	4621      	mov	r1, r4
 800182c:	040a      	lsls	r2, r1, #16
 800182e:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 8001832:	4621      	mov	r1, r4
 8001834:	ea41 0a02 	orr.w	sl, r1, r2
 8001838:	4629      	mov	r1, r5
 800183a:	ea41 0b03 	orr.w	fp, r1, r3
 800183e:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8001842:	b2db      	uxtb	r3, r3
 8001844:	2200      	movs	r2, #0
 8001846:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800184a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800184e:	f04f 0200 	mov.w	r2, #0
 8001852:	f04f 0300 	mov.w	r3, #0
 8001856:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800185a:	4629      	mov	r1, r5
 800185c:	020b      	lsls	r3, r1, #8
 800185e:	4621      	mov	r1, r4
 8001860:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8001864:	4621      	mov	r1, r4
 8001866:	020a      	lsls	r2, r1, #8
 8001868:	ea4a 0802 	orr.w	r8, sl, r2
 800186c:	ea4b 0903 	orr.w	r9, fp, r3
 8001870:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 8001874:	b2db      	uxtb	r3, r3
 8001876:	2200      	movs	r2, #0
 8001878:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800187c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001880:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8001884:	460b      	mov	r3, r1
 8001886:	ea48 0303 	orr.w	r3, r8, r3
 800188a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800188e:	4613      	mov	r3, r2
 8001890:	ea49 0303 	orr.w	r3, r9, r3
 8001894:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001898:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800189c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80018a0:	e9c3 1200 	strd	r1, r2, [r3]
 80018a4:	e0b6      	b.n	8001a14 <AD9910_ReadRegister+0x330>
                case 8: *data = ((uint64_t)read_buffer[1] << 56) | ((uint64_t)read_buffer[2] << 48) | ((uint64_t)read_buffer[3] << 40) | ((uint64_t)read_buffer[4] << 32) | ((uint64_t)read_buffer[5] << 24) | ((uint64_t)read_buffer[6] << 16) | ((uint64_t)read_buffer[7] << 8) | (uint64_t)read_buffer[8]; break;
 80018a6:	f897 30c9 	ldrb.w	r3, [r7, #201]	; 0xc9
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	2200      	movs	r2, #0
 80018ae:	67bb      	str	r3, [r7, #120]	; 0x78
 80018b0:	67fa      	str	r2, [r7, #124]	; 0x7c
 80018b2:	f04f 0000 	mov.w	r0, #0
 80018b6:	f04f 0100 	mov.w	r1, #0
 80018ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80018bc:	0619      	lsls	r1, r3, #24
 80018be:	2000      	movs	r0, #0
 80018c0:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	2200      	movs	r2, #0
 80018c8:	673b      	str	r3, [r7, #112]	; 0x70
 80018ca:	677a      	str	r2, [r7, #116]	; 0x74
 80018cc:	f04f 0200 	mov.w	r2, #0
 80018d0:	f04f 0300 	mov.w	r3, #0
 80018d4:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 80018d6:	0423      	lsls	r3, r4, #16
 80018d8:	2200      	movs	r2, #0
 80018da:	ea40 0402 	orr.w	r4, r0, r2
 80018de:	66bc      	str	r4, [r7, #104]	; 0x68
 80018e0:	430b      	orrs	r3, r1
 80018e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80018e4:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2200      	movs	r2, #0
 80018ec:	663b      	str	r3, [r7, #96]	; 0x60
 80018ee:	667a      	str	r2, [r7, #100]	; 0x64
 80018f0:	f04f 0200 	mov.w	r2, #0
 80018f4:	f04f 0300 	mov.w	r3, #0
 80018f8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80018fa:	020b      	lsls	r3, r1, #8
 80018fc:	2200      	movs	r2, #0
 80018fe:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001902:	4621      	mov	r1, r4
 8001904:	4311      	orrs	r1, r2
 8001906:	65b9      	str	r1, [r7, #88]	; 0x58
 8001908:	4629      	mov	r1, r5
 800190a:	4319      	orrs	r1, r3
 800190c:	65f9      	str	r1, [r7, #92]	; 0x5c
 800190e:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 8001912:	b2db      	uxtb	r3, r3
 8001914:	2200      	movs	r2, #0
 8001916:	653b      	str	r3, [r7, #80]	; 0x50
 8001918:	657a      	str	r2, [r7, #84]	; 0x54
 800191a:	f04f 0200 	mov.w	r2, #0
 800191e:	f04f 0300 	mov.w	r3, #0
 8001922:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001924:	000b      	movs	r3, r1
 8001926:	2200      	movs	r2, #0
 8001928:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800192c:	4621      	mov	r1, r4
 800192e:	4311      	orrs	r1, r2
 8001930:	64b9      	str	r1, [r7, #72]	; 0x48
 8001932:	4629      	mov	r1, r5
 8001934:	4319      	orrs	r1, r3
 8001936:	64f9      	str	r1, [r7, #76]	; 0x4c
 8001938:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2200      	movs	r2, #0
 8001940:	643b      	str	r3, [r7, #64]	; 0x40
 8001942:	647a      	str	r2, [r7, #68]	; 0x44
 8001944:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8001948:	460b      	mov	r3, r1
 800194a:	0a1b      	lsrs	r3, r3, #8
 800194c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800194e:	460b      	mov	r3, r1
 8001950:	061b      	lsls	r3, r3, #24
 8001952:	63bb      	str	r3, [r7, #56]	; 0x38
 8001954:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001958:	4623      	mov	r3, r4
 800195a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800195e:	4602      	mov	r2, r0
 8001960:	4313      	orrs	r3, r2
 8001962:	633b      	str	r3, [r7, #48]	; 0x30
 8001964:	462b      	mov	r3, r5
 8001966:	460a      	mov	r2, r1
 8001968:	4313      	orrs	r3, r2
 800196a:	637b      	str	r3, [r7, #52]	; 0x34
 800196c:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2200      	movs	r2, #0
 8001974:	62bb      	str	r3, [r7, #40]	; 0x28
 8001976:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001978:	f04f 0200 	mov.w	r2, #0
 800197c:	f04f 0300 	mov.w	r3, #0
 8001980:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001984:	4629      	mov	r1, r5
 8001986:	040b      	lsls	r3, r1, #16
 8001988:	4621      	mov	r1, r4
 800198a:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 800198e:	4621      	mov	r1, r4
 8001990:	040a      	lsls	r2, r1, #16
 8001992:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001996:	4621      	mov	r1, r4
 8001998:	4311      	orrs	r1, r2
 800199a:	6239      	str	r1, [r7, #32]
 800199c:	4629      	mov	r1, r5
 800199e:	4319      	orrs	r1, r3
 80019a0:	6279      	str	r1, [r7, #36]	; 0x24
 80019a2:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	2200      	movs	r2, #0
 80019aa:	61bb      	str	r3, [r7, #24]
 80019ac:	61fa      	str	r2, [r7, #28]
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	f04f 0300 	mov.w	r3, #0
 80019b6:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80019ba:	4629      	mov	r1, r5
 80019bc:	020b      	lsls	r3, r1, #8
 80019be:	4621      	mov	r1, r4
 80019c0:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 80019c4:	4621      	mov	r1, r4
 80019c6:	020a      	lsls	r2, r1, #8
 80019c8:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80019cc:	4621      	mov	r1, r4
 80019ce:	4311      	orrs	r1, r2
 80019d0:	6139      	str	r1, [r7, #16]
 80019d2:	4629      	mov	r1, r5
 80019d4:	4319      	orrs	r1, r3
 80019d6:	6179      	str	r1, [r7, #20]
 80019d8:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2200      	movs	r2, #0
 80019e0:	60bb      	str	r3, [r7, #8]
 80019e2:	60fa      	str	r2, [r7, #12]
 80019e4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80019e8:	4623      	mov	r3, r4
 80019ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019ee:	4602      	mov	r2, r0
 80019f0:	4313      	orrs	r3, r2
 80019f2:	603b      	str	r3, [r7, #0]
 80019f4:	462b      	mov	r3, r5
 80019f6:	460a      	mov	r2, r1
 80019f8:	4313      	orrs	r3, r2
 80019fa:	607b      	str	r3, [r7, #4]
 80019fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a00:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001a04:	e9c3 1200 	strd	r1, r2, [r3]
 8001a08:	e004      	b.n	8001a14 <AD9910_ReadRegister+0x330>
                default:
                    UART_SendString("Erreur de size sur regsize");
 8001a0a:	4807      	ldr	r0, [pc, #28]	; (8001a28 <AD9910_ReadRegister+0x344>)
 8001a0c:	f7fe ffea 	bl	80009e4 <UART_SendString>
                    return;
 8001a10:	bf00      	nop
 8001a12:	e000      	b.n	8001a16 <AD9910_ReadRegister+0x332>
            }


    return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	37e0      	adds	r7, #224	; 0xe0
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a20:	58020400 	.word	0x58020400
 8001a24:	24000234 	.word	0x24000234
 8001a28:	0800a9f8 	.word	0x0800a9f8

08001a2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001a2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a64 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a30:	f000 f826 	bl	8001a80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a34:	480c      	ldr	r0, [pc, #48]	; (8001a68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a36:	490d      	ldr	r1, [pc, #52]	; (8001a6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a38:	4a0d      	ldr	r2, [pc, #52]	; (8001a70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a3c:	e002      	b.n	8001a44 <LoopCopyDataInit>

08001a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a42:	3304      	adds	r3, #4

08001a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a48:	d3f9      	bcc.n	8001a3e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a4a:	4a0a      	ldr	r2, [pc, #40]	; (8001a74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a4c:	4c0a      	ldr	r4, [pc, #40]	; (8001a78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a50:	e001      	b.n	8001a56 <LoopFillZerobss>

08001a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a54:	3204      	adds	r2, #4

08001a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a58:	d3fb      	bcc.n	8001a52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a5a:	f008 f9e3 	bl	8009e24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a5e:	f7ff f809 	bl	8000a74 <main>
  bx  lr
 8001a62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a64:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001a68:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001a6c:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8001a70:	0800aa90 	.word	0x0800aa90
  ldr r2, =_sbss
 8001a74:	24000130 	.word	0x24000130
  ldr r4, =_ebss
 8001a78:	24000578 	.word	0x24000578

08001a7c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a7c:	e7fe      	b.n	8001a7c <ADC3_IRQHandler>
	...

08001a80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a84:	4b32      	ldr	r3, [pc, #200]	; (8001b50 <SystemInit+0xd0>)
 8001a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a8a:	4a31      	ldr	r2, [pc, #196]	; (8001b50 <SystemInit+0xd0>)
 8001a8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a94:	4b2f      	ldr	r3, [pc, #188]	; (8001b54 <SystemInit+0xd4>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 030f 	and.w	r3, r3, #15
 8001a9c:	2b06      	cmp	r3, #6
 8001a9e:	d807      	bhi.n	8001ab0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001aa0:	4b2c      	ldr	r3, [pc, #176]	; (8001b54 <SystemInit+0xd4>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f023 030f 	bic.w	r3, r3, #15
 8001aa8:	4a2a      	ldr	r2, [pc, #168]	; (8001b54 <SystemInit+0xd4>)
 8001aaa:	f043 0307 	orr.w	r3, r3, #7
 8001aae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001ab0:	4b29      	ldr	r3, [pc, #164]	; (8001b58 <SystemInit+0xd8>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a28      	ldr	r2, [pc, #160]	; (8001b58 <SystemInit+0xd8>)
 8001ab6:	f043 0301 	orr.w	r3, r3, #1
 8001aba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001abc:	4b26      	ldr	r3, [pc, #152]	; (8001b58 <SystemInit+0xd8>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001ac2:	4b25      	ldr	r3, [pc, #148]	; (8001b58 <SystemInit+0xd8>)
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	4924      	ldr	r1, [pc, #144]	; (8001b58 <SystemInit+0xd8>)
 8001ac8:	4b24      	ldr	r3, [pc, #144]	; (8001b5c <SystemInit+0xdc>)
 8001aca:	4013      	ands	r3, r2
 8001acc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ace:	4b21      	ldr	r3, [pc, #132]	; (8001b54 <SystemInit+0xd4>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0308 	and.w	r3, r3, #8
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d007      	beq.n	8001aea <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001ada:	4b1e      	ldr	r3, [pc, #120]	; (8001b54 <SystemInit+0xd4>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f023 030f 	bic.w	r3, r3, #15
 8001ae2:	4a1c      	ldr	r2, [pc, #112]	; (8001b54 <SystemInit+0xd4>)
 8001ae4:	f043 0307 	orr.w	r3, r3, #7
 8001ae8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001aea:	4b1b      	ldr	r3, [pc, #108]	; (8001b58 <SystemInit+0xd8>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001af0:	4b19      	ldr	r3, [pc, #100]	; (8001b58 <SystemInit+0xd8>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001af6:	4b18      	ldr	r3, [pc, #96]	; (8001b58 <SystemInit+0xd8>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001afc:	4b16      	ldr	r3, [pc, #88]	; (8001b58 <SystemInit+0xd8>)
 8001afe:	4a18      	ldr	r2, [pc, #96]	; (8001b60 <SystemInit+0xe0>)
 8001b00:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001b02:	4b15      	ldr	r3, [pc, #84]	; (8001b58 <SystemInit+0xd8>)
 8001b04:	4a17      	ldr	r2, [pc, #92]	; (8001b64 <SystemInit+0xe4>)
 8001b06:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001b08:	4b13      	ldr	r3, [pc, #76]	; (8001b58 <SystemInit+0xd8>)
 8001b0a:	4a17      	ldr	r2, [pc, #92]	; (8001b68 <SystemInit+0xe8>)
 8001b0c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001b0e:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <SystemInit+0xd8>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001b14:	4b10      	ldr	r3, [pc, #64]	; (8001b58 <SystemInit+0xd8>)
 8001b16:	4a14      	ldr	r2, [pc, #80]	; (8001b68 <SystemInit+0xe8>)
 8001b18:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001b1a:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <SystemInit+0xd8>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001b20:	4b0d      	ldr	r3, [pc, #52]	; (8001b58 <SystemInit+0xd8>)
 8001b22:	4a11      	ldr	r2, [pc, #68]	; (8001b68 <SystemInit+0xe8>)
 8001b24:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001b26:	4b0c      	ldr	r3, [pc, #48]	; (8001b58 <SystemInit+0xd8>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b2c:	4b0a      	ldr	r3, [pc, #40]	; (8001b58 <SystemInit+0xd8>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a09      	ldr	r2, [pc, #36]	; (8001b58 <SystemInit+0xd8>)
 8001b32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b36:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001b38:	4b07      	ldr	r3, [pc, #28]	; (8001b58 <SystemInit+0xd8>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001b3e:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <SystemInit+0xec>)
 8001b40:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001b44:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001b46:	bf00      	nop
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	e000ed00 	.word	0xe000ed00
 8001b54:	52002000 	.word	0x52002000
 8001b58:	58024400 	.word	0x58024400
 8001b5c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001b60:	02020200 	.word	0x02020200
 8001b64:	01ff0000 	.word	0x01ff0000
 8001b68:	01010280 	.word	0x01010280
 8001b6c:	52004000 	.word	0x52004000

08001b70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b76:	2003      	movs	r0, #3
 8001b78:	f000 f994 	bl	8001ea4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001b7c:	f002 faf6 	bl	800416c <HAL_RCC_GetSysClockFreq>
 8001b80:	4602      	mov	r2, r0
 8001b82:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <HAL_Init+0x68>)
 8001b84:	699b      	ldr	r3, [r3, #24]
 8001b86:	0a1b      	lsrs	r3, r3, #8
 8001b88:	f003 030f 	and.w	r3, r3, #15
 8001b8c:	4913      	ldr	r1, [pc, #76]	; (8001bdc <HAL_Init+0x6c>)
 8001b8e:	5ccb      	ldrb	r3, [r1, r3]
 8001b90:	f003 031f 	and.w	r3, r3, #31
 8001b94:	fa22 f303 	lsr.w	r3, r2, r3
 8001b98:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b9a:	4b0f      	ldr	r3, [pc, #60]	; (8001bd8 <HAL_Init+0x68>)
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	f003 030f 	and.w	r3, r3, #15
 8001ba2:	4a0e      	ldr	r2, [pc, #56]	; (8001bdc <HAL_Init+0x6c>)
 8001ba4:	5cd3      	ldrb	r3, [r2, r3]
 8001ba6:	f003 031f 	and.w	r3, r3, #31
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb0:	4a0b      	ldr	r2, [pc, #44]	; (8001be0 <HAL_Init+0x70>)
 8001bb2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001bb4:	4a0b      	ldr	r2, [pc, #44]	; (8001be4 <HAL_Init+0x74>)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bba:	2000      	movs	r0, #0
 8001bbc:	f000 f814 	bl	8001be8 <HAL_InitTick>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e002      	b.n	8001bd0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001bca:	f7ff fa0f 	bl	8000fec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	58024400 	.word	0x58024400
 8001bdc:	0800aa14 	.word	0x0800aa14
 8001be0:	24000004 	.word	0x24000004
 8001be4:	24000000 	.word	0x24000000

08001be8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001bf0:	4b15      	ldr	r3, [pc, #84]	; (8001c48 <HAL_InitTick+0x60>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d101      	bne.n	8001bfc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e021      	b.n	8001c40 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001bfc:	4b13      	ldr	r3, [pc, #76]	; (8001c4c <HAL_InitTick+0x64>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	4b11      	ldr	r3, [pc, #68]	; (8001c48 <HAL_InitTick+0x60>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	4619      	mov	r1, r3
 8001c06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c12:	4618      	mov	r0, r3
 8001c14:	f000 f979 	bl	8001f0a <HAL_SYSTICK_Config>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e00e      	b.n	8001c40 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2b0f      	cmp	r3, #15
 8001c26:	d80a      	bhi.n	8001c3e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c28:	2200      	movs	r2, #0
 8001c2a:	6879      	ldr	r1, [r7, #4]
 8001c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c30:	f000 f943 	bl	8001eba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c34:	4a06      	ldr	r2, [pc, #24]	; (8001c50 <HAL_InitTick+0x68>)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	e000      	b.n	8001c40 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	2400000c 	.word	0x2400000c
 8001c4c:	24000000 	.word	0x24000000
 8001c50:	24000008 	.word	0x24000008

08001c54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c58:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <HAL_IncTick+0x20>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <HAL_IncTick+0x24>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4413      	add	r3, r2
 8001c64:	4a04      	ldr	r2, [pc, #16]	; (8001c78 <HAL_IncTick+0x24>)
 8001c66:	6013      	str	r3, [r2, #0]
}
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	2400000c 	.word	0x2400000c
 8001c78:	24000428 	.word	0x24000428

08001c7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c80:	4b03      	ldr	r3, [pc, #12]	; (8001c90 <HAL_GetTick+0x14>)
 8001c82:	681b      	ldr	r3, [r3, #0]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	24000428 	.word	0x24000428

08001c94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c9c:	f7ff ffee 	bl	8001c7c <HAL_GetTick>
 8001ca0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cac:	d005      	beq.n	8001cba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cae:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <HAL_Delay+0x44>)
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cba:	bf00      	nop
 8001cbc:	f7ff ffde 	bl	8001c7c <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d8f7      	bhi.n	8001cbc <HAL_Delay+0x28>
  {
  }
}
 8001ccc:	bf00      	nop
 8001cce:	bf00      	nop
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	2400000c 	.word	0x2400000c

08001cdc <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001ce4:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001cec:	4904      	ldr	r1, [pc, #16]	; (8001d00 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	604b      	str	r3, [r1, #4]
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	58000400 	.word	0x58000400

08001d04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d14:	4b0b      	ldr	r3, [pc, #44]	; (8001d44 <__NVIC_SetPriorityGrouping+0x40>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d1a:	68ba      	ldr	r2, [r7, #8]
 8001d1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d20:	4013      	ands	r3, r2
 8001d22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d2c:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <__NVIC_SetPriorityGrouping+0x44>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d32:	4a04      	ldr	r2, [pc, #16]	; (8001d44 <__NVIC_SetPriorityGrouping+0x40>)
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	60d3      	str	r3, [r2, #12]
}
 8001d38:	bf00      	nop
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	e000ed00 	.word	0xe000ed00
 8001d48:	05fa0000 	.word	0x05fa0000

08001d4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d50:	4b04      	ldr	r3, [pc, #16]	; (8001d64 <__NVIC_GetPriorityGrouping+0x18>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	0a1b      	lsrs	r3, r3, #8
 8001d56:	f003 0307 	and.w	r3, r3, #7
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	db0b      	blt.n	8001d92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d7a:	88fb      	ldrh	r3, [r7, #6]
 8001d7c:	f003 021f 	and.w	r2, r3, #31
 8001d80:	4907      	ldr	r1, [pc, #28]	; (8001da0 <__NVIC_EnableIRQ+0x38>)
 8001d82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d86:	095b      	lsrs	r3, r3, #5
 8001d88:	2001      	movs	r0, #1
 8001d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	e000e100 	.word	0xe000e100

08001da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	6039      	str	r1, [r7, #0]
 8001dae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001db0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	db0a      	blt.n	8001dce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	490c      	ldr	r1, [pc, #48]	; (8001df0 <__NVIC_SetPriority+0x4c>)
 8001dbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dc2:	0112      	lsls	r2, r2, #4
 8001dc4:	b2d2      	uxtb	r2, r2
 8001dc6:	440b      	add	r3, r1
 8001dc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dcc:	e00a      	b.n	8001de4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	4908      	ldr	r1, [pc, #32]	; (8001df4 <__NVIC_SetPriority+0x50>)
 8001dd4:	88fb      	ldrh	r3, [r7, #6]
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	3b04      	subs	r3, #4
 8001ddc:	0112      	lsls	r2, r2, #4
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	440b      	add	r3, r1
 8001de2:	761a      	strb	r2, [r3, #24]
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	e000e100 	.word	0xe000e100
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b089      	sub	sp, #36	; 0x24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	f1c3 0307 	rsb	r3, r3, #7
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	bf28      	it	cs
 8001e16:	2304      	movcs	r3, #4
 8001e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	2b06      	cmp	r3, #6
 8001e20:	d902      	bls.n	8001e28 <NVIC_EncodePriority+0x30>
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	3b03      	subs	r3, #3
 8001e26:	e000      	b.n	8001e2a <NVIC_EncodePriority+0x32>
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	43da      	mvns	r2, r3
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	401a      	ands	r2, r3
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e40:	f04f 31ff 	mov.w	r1, #4294967295
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4a:	43d9      	mvns	r1, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e50:	4313      	orrs	r3, r2
         );
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3724      	adds	r7, #36	; 0x24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
	...

08001e60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e70:	d301      	bcc.n	8001e76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e72:	2301      	movs	r3, #1
 8001e74:	e00f      	b.n	8001e96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e76:	4a0a      	ldr	r2, [pc, #40]	; (8001ea0 <SysTick_Config+0x40>)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e7e:	210f      	movs	r1, #15
 8001e80:	f04f 30ff 	mov.w	r0, #4294967295
 8001e84:	f7ff ff8e 	bl	8001da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e88:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <SysTick_Config+0x40>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e8e:	4b04      	ldr	r3, [pc, #16]	; (8001ea0 <SysTick_Config+0x40>)
 8001e90:	2207      	movs	r2, #7
 8001e92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	e000e010 	.word	0xe000e010

08001ea4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7ff ff29 	bl	8001d04 <__NVIC_SetPriorityGrouping>
}
 8001eb2:	bf00      	nop
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b086      	sub	sp, #24
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	60b9      	str	r1, [r7, #8]
 8001ec4:	607a      	str	r2, [r7, #4]
 8001ec6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ec8:	f7ff ff40 	bl	8001d4c <__NVIC_GetPriorityGrouping>
 8001ecc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	68b9      	ldr	r1, [r7, #8]
 8001ed2:	6978      	ldr	r0, [r7, #20]
 8001ed4:	f7ff ff90 	bl	8001df8 <NVIC_EncodePriority>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ede:	4611      	mov	r1, r2
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff ff5f 	bl	8001da4 <__NVIC_SetPriority>
}
 8001ee6:	bf00      	nop
 8001ee8:	3718      	adds	r7, #24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b082      	sub	sp, #8
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ef8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff ff33 	bl	8001d68 <__NVIC_EnableIRQ>
}
 8001f02:	bf00      	nop
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b082      	sub	sp, #8
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f7ff ffa4 	bl	8001e60 <SysTick_Config>
 8001f18:	4603      	mov	r3, r0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
	...

08001f24 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001f2c:	f7ff fea6 	bl	8001c7c <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d101      	bne.n	8001f3c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e2dc      	b.n	80024f6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d008      	beq.n	8001f5a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2280      	movs	r2, #128	; 0x80
 8001f4c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e2cd      	b.n	80024f6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a76      	ldr	r2, [pc, #472]	; (8002138 <HAL_DMA_Abort+0x214>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d04a      	beq.n	8001ffa <HAL_DMA_Abort+0xd6>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a74      	ldr	r2, [pc, #464]	; (800213c <HAL_DMA_Abort+0x218>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d045      	beq.n	8001ffa <HAL_DMA_Abort+0xd6>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a73      	ldr	r2, [pc, #460]	; (8002140 <HAL_DMA_Abort+0x21c>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d040      	beq.n	8001ffa <HAL_DMA_Abort+0xd6>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a71      	ldr	r2, [pc, #452]	; (8002144 <HAL_DMA_Abort+0x220>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d03b      	beq.n	8001ffa <HAL_DMA_Abort+0xd6>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a70      	ldr	r2, [pc, #448]	; (8002148 <HAL_DMA_Abort+0x224>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d036      	beq.n	8001ffa <HAL_DMA_Abort+0xd6>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a6e      	ldr	r2, [pc, #440]	; (800214c <HAL_DMA_Abort+0x228>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d031      	beq.n	8001ffa <HAL_DMA_Abort+0xd6>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a6d      	ldr	r2, [pc, #436]	; (8002150 <HAL_DMA_Abort+0x22c>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d02c      	beq.n	8001ffa <HAL_DMA_Abort+0xd6>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a6b      	ldr	r2, [pc, #428]	; (8002154 <HAL_DMA_Abort+0x230>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d027      	beq.n	8001ffa <HAL_DMA_Abort+0xd6>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a6a      	ldr	r2, [pc, #424]	; (8002158 <HAL_DMA_Abort+0x234>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d022      	beq.n	8001ffa <HAL_DMA_Abort+0xd6>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a68      	ldr	r2, [pc, #416]	; (800215c <HAL_DMA_Abort+0x238>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d01d      	beq.n	8001ffa <HAL_DMA_Abort+0xd6>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a67      	ldr	r2, [pc, #412]	; (8002160 <HAL_DMA_Abort+0x23c>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d018      	beq.n	8001ffa <HAL_DMA_Abort+0xd6>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a65      	ldr	r2, [pc, #404]	; (8002164 <HAL_DMA_Abort+0x240>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d013      	beq.n	8001ffa <HAL_DMA_Abort+0xd6>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a64      	ldr	r2, [pc, #400]	; (8002168 <HAL_DMA_Abort+0x244>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d00e      	beq.n	8001ffa <HAL_DMA_Abort+0xd6>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a62      	ldr	r2, [pc, #392]	; (800216c <HAL_DMA_Abort+0x248>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d009      	beq.n	8001ffa <HAL_DMA_Abort+0xd6>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a61      	ldr	r2, [pc, #388]	; (8002170 <HAL_DMA_Abort+0x24c>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d004      	beq.n	8001ffa <HAL_DMA_Abort+0xd6>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a5f      	ldr	r2, [pc, #380]	; (8002174 <HAL_DMA_Abort+0x250>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d101      	bne.n	8001ffe <HAL_DMA_Abort+0xda>
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e000      	b.n	8002000 <HAL_DMA_Abort+0xdc>
 8001ffe:	2300      	movs	r3, #0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d013      	beq.n	800202c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f022 021e 	bic.w	r2, r2, #30
 8002012:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	695a      	ldr	r2, [r3, #20]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002022:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	e00a      	b.n	8002042 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f022 020e 	bic.w	r2, r2, #14
 800203a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a3c      	ldr	r2, [pc, #240]	; (8002138 <HAL_DMA_Abort+0x214>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d072      	beq.n	8002132 <HAL_DMA_Abort+0x20e>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a3a      	ldr	r2, [pc, #232]	; (800213c <HAL_DMA_Abort+0x218>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d06d      	beq.n	8002132 <HAL_DMA_Abort+0x20e>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a39      	ldr	r2, [pc, #228]	; (8002140 <HAL_DMA_Abort+0x21c>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d068      	beq.n	8002132 <HAL_DMA_Abort+0x20e>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a37      	ldr	r2, [pc, #220]	; (8002144 <HAL_DMA_Abort+0x220>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d063      	beq.n	8002132 <HAL_DMA_Abort+0x20e>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a36      	ldr	r2, [pc, #216]	; (8002148 <HAL_DMA_Abort+0x224>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d05e      	beq.n	8002132 <HAL_DMA_Abort+0x20e>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a34      	ldr	r2, [pc, #208]	; (800214c <HAL_DMA_Abort+0x228>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d059      	beq.n	8002132 <HAL_DMA_Abort+0x20e>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a33      	ldr	r2, [pc, #204]	; (8002150 <HAL_DMA_Abort+0x22c>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d054      	beq.n	8002132 <HAL_DMA_Abort+0x20e>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a31      	ldr	r2, [pc, #196]	; (8002154 <HAL_DMA_Abort+0x230>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d04f      	beq.n	8002132 <HAL_DMA_Abort+0x20e>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a30      	ldr	r2, [pc, #192]	; (8002158 <HAL_DMA_Abort+0x234>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d04a      	beq.n	8002132 <HAL_DMA_Abort+0x20e>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a2e      	ldr	r2, [pc, #184]	; (800215c <HAL_DMA_Abort+0x238>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d045      	beq.n	8002132 <HAL_DMA_Abort+0x20e>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a2d      	ldr	r2, [pc, #180]	; (8002160 <HAL_DMA_Abort+0x23c>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d040      	beq.n	8002132 <HAL_DMA_Abort+0x20e>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a2b      	ldr	r2, [pc, #172]	; (8002164 <HAL_DMA_Abort+0x240>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d03b      	beq.n	8002132 <HAL_DMA_Abort+0x20e>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a2a      	ldr	r2, [pc, #168]	; (8002168 <HAL_DMA_Abort+0x244>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d036      	beq.n	8002132 <HAL_DMA_Abort+0x20e>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a28      	ldr	r2, [pc, #160]	; (800216c <HAL_DMA_Abort+0x248>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d031      	beq.n	8002132 <HAL_DMA_Abort+0x20e>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a27      	ldr	r2, [pc, #156]	; (8002170 <HAL_DMA_Abort+0x24c>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d02c      	beq.n	8002132 <HAL_DMA_Abort+0x20e>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a25      	ldr	r2, [pc, #148]	; (8002174 <HAL_DMA_Abort+0x250>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d027      	beq.n	8002132 <HAL_DMA_Abort+0x20e>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a24      	ldr	r2, [pc, #144]	; (8002178 <HAL_DMA_Abort+0x254>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d022      	beq.n	8002132 <HAL_DMA_Abort+0x20e>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a22      	ldr	r2, [pc, #136]	; (800217c <HAL_DMA_Abort+0x258>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d01d      	beq.n	8002132 <HAL_DMA_Abort+0x20e>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a21      	ldr	r2, [pc, #132]	; (8002180 <HAL_DMA_Abort+0x25c>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d018      	beq.n	8002132 <HAL_DMA_Abort+0x20e>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a1f      	ldr	r2, [pc, #124]	; (8002184 <HAL_DMA_Abort+0x260>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d013      	beq.n	8002132 <HAL_DMA_Abort+0x20e>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a1e      	ldr	r2, [pc, #120]	; (8002188 <HAL_DMA_Abort+0x264>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d00e      	beq.n	8002132 <HAL_DMA_Abort+0x20e>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a1c      	ldr	r2, [pc, #112]	; (800218c <HAL_DMA_Abort+0x268>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d009      	beq.n	8002132 <HAL_DMA_Abort+0x20e>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a1b      	ldr	r2, [pc, #108]	; (8002190 <HAL_DMA_Abort+0x26c>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d004      	beq.n	8002132 <HAL_DMA_Abort+0x20e>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a19      	ldr	r2, [pc, #100]	; (8002194 <HAL_DMA_Abort+0x270>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d132      	bne.n	8002198 <HAL_DMA_Abort+0x274>
 8002132:	2301      	movs	r3, #1
 8002134:	e031      	b.n	800219a <HAL_DMA_Abort+0x276>
 8002136:	bf00      	nop
 8002138:	40020010 	.word	0x40020010
 800213c:	40020028 	.word	0x40020028
 8002140:	40020040 	.word	0x40020040
 8002144:	40020058 	.word	0x40020058
 8002148:	40020070 	.word	0x40020070
 800214c:	40020088 	.word	0x40020088
 8002150:	400200a0 	.word	0x400200a0
 8002154:	400200b8 	.word	0x400200b8
 8002158:	40020410 	.word	0x40020410
 800215c:	40020428 	.word	0x40020428
 8002160:	40020440 	.word	0x40020440
 8002164:	40020458 	.word	0x40020458
 8002168:	40020470 	.word	0x40020470
 800216c:	40020488 	.word	0x40020488
 8002170:	400204a0 	.word	0x400204a0
 8002174:	400204b8 	.word	0x400204b8
 8002178:	58025408 	.word	0x58025408
 800217c:	5802541c 	.word	0x5802541c
 8002180:	58025430 	.word	0x58025430
 8002184:	58025444 	.word	0x58025444
 8002188:	58025458 	.word	0x58025458
 800218c:	5802546c 	.word	0x5802546c
 8002190:	58025480 	.word	0x58025480
 8002194:	58025494 	.word	0x58025494
 8002198:	2300      	movs	r3, #0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d007      	beq.n	80021ae <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a6d      	ldr	r2, [pc, #436]	; (8002368 <HAL_DMA_Abort+0x444>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d04a      	beq.n	800224e <HAL_DMA_Abort+0x32a>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a6b      	ldr	r2, [pc, #428]	; (800236c <HAL_DMA_Abort+0x448>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d045      	beq.n	800224e <HAL_DMA_Abort+0x32a>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a6a      	ldr	r2, [pc, #424]	; (8002370 <HAL_DMA_Abort+0x44c>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d040      	beq.n	800224e <HAL_DMA_Abort+0x32a>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a68      	ldr	r2, [pc, #416]	; (8002374 <HAL_DMA_Abort+0x450>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d03b      	beq.n	800224e <HAL_DMA_Abort+0x32a>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a67      	ldr	r2, [pc, #412]	; (8002378 <HAL_DMA_Abort+0x454>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d036      	beq.n	800224e <HAL_DMA_Abort+0x32a>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a65      	ldr	r2, [pc, #404]	; (800237c <HAL_DMA_Abort+0x458>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d031      	beq.n	800224e <HAL_DMA_Abort+0x32a>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a64      	ldr	r2, [pc, #400]	; (8002380 <HAL_DMA_Abort+0x45c>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d02c      	beq.n	800224e <HAL_DMA_Abort+0x32a>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a62      	ldr	r2, [pc, #392]	; (8002384 <HAL_DMA_Abort+0x460>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d027      	beq.n	800224e <HAL_DMA_Abort+0x32a>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a61      	ldr	r2, [pc, #388]	; (8002388 <HAL_DMA_Abort+0x464>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d022      	beq.n	800224e <HAL_DMA_Abort+0x32a>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a5f      	ldr	r2, [pc, #380]	; (800238c <HAL_DMA_Abort+0x468>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d01d      	beq.n	800224e <HAL_DMA_Abort+0x32a>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a5e      	ldr	r2, [pc, #376]	; (8002390 <HAL_DMA_Abort+0x46c>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d018      	beq.n	800224e <HAL_DMA_Abort+0x32a>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a5c      	ldr	r2, [pc, #368]	; (8002394 <HAL_DMA_Abort+0x470>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d013      	beq.n	800224e <HAL_DMA_Abort+0x32a>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a5b      	ldr	r2, [pc, #364]	; (8002398 <HAL_DMA_Abort+0x474>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d00e      	beq.n	800224e <HAL_DMA_Abort+0x32a>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a59      	ldr	r2, [pc, #356]	; (800239c <HAL_DMA_Abort+0x478>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d009      	beq.n	800224e <HAL_DMA_Abort+0x32a>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a58      	ldr	r2, [pc, #352]	; (80023a0 <HAL_DMA_Abort+0x47c>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d004      	beq.n	800224e <HAL_DMA_Abort+0x32a>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a56      	ldr	r2, [pc, #344]	; (80023a4 <HAL_DMA_Abort+0x480>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d108      	bne.n	8002260 <HAL_DMA_Abort+0x33c>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f022 0201 	bic.w	r2, r2, #1
 800225c:	601a      	str	r2, [r3, #0]
 800225e:	e007      	b.n	8002270 <HAL_DMA_Abort+0x34c>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 0201 	bic.w	r2, r2, #1
 800226e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002270:	e013      	b.n	800229a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002272:	f7ff fd03 	bl	8001c7c <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b05      	cmp	r3, #5
 800227e:	d90c      	bls.n	800229a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2220      	movs	r2, #32
 8002284:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2203      	movs	r2, #3
 800228a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e12d      	b.n	80024f6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1e5      	bne.n	8002272 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a2f      	ldr	r2, [pc, #188]	; (8002368 <HAL_DMA_Abort+0x444>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d04a      	beq.n	8002346 <HAL_DMA_Abort+0x422>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a2d      	ldr	r2, [pc, #180]	; (800236c <HAL_DMA_Abort+0x448>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d045      	beq.n	8002346 <HAL_DMA_Abort+0x422>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a2c      	ldr	r2, [pc, #176]	; (8002370 <HAL_DMA_Abort+0x44c>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d040      	beq.n	8002346 <HAL_DMA_Abort+0x422>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a2a      	ldr	r2, [pc, #168]	; (8002374 <HAL_DMA_Abort+0x450>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d03b      	beq.n	8002346 <HAL_DMA_Abort+0x422>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a29      	ldr	r2, [pc, #164]	; (8002378 <HAL_DMA_Abort+0x454>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d036      	beq.n	8002346 <HAL_DMA_Abort+0x422>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a27      	ldr	r2, [pc, #156]	; (800237c <HAL_DMA_Abort+0x458>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d031      	beq.n	8002346 <HAL_DMA_Abort+0x422>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a26      	ldr	r2, [pc, #152]	; (8002380 <HAL_DMA_Abort+0x45c>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d02c      	beq.n	8002346 <HAL_DMA_Abort+0x422>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a24      	ldr	r2, [pc, #144]	; (8002384 <HAL_DMA_Abort+0x460>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d027      	beq.n	8002346 <HAL_DMA_Abort+0x422>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a23      	ldr	r2, [pc, #140]	; (8002388 <HAL_DMA_Abort+0x464>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d022      	beq.n	8002346 <HAL_DMA_Abort+0x422>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a21      	ldr	r2, [pc, #132]	; (800238c <HAL_DMA_Abort+0x468>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d01d      	beq.n	8002346 <HAL_DMA_Abort+0x422>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a20      	ldr	r2, [pc, #128]	; (8002390 <HAL_DMA_Abort+0x46c>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d018      	beq.n	8002346 <HAL_DMA_Abort+0x422>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a1e      	ldr	r2, [pc, #120]	; (8002394 <HAL_DMA_Abort+0x470>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d013      	beq.n	8002346 <HAL_DMA_Abort+0x422>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a1d      	ldr	r2, [pc, #116]	; (8002398 <HAL_DMA_Abort+0x474>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d00e      	beq.n	8002346 <HAL_DMA_Abort+0x422>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a1b      	ldr	r2, [pc, #108]	; (800239c <HAL_DMA_Abort+0x478>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d009      	beq.n	8002346 <HAL_DMA_Abort+0x422>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a1a      	ldr	r2, [pc, #104]	; (80023a0 <HAL_DMA_Abort+0x47c>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d004      	beq.n	8002346 <HAL_DMA_Abort+0x422>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a18      	ldr	r2, [pc, #96]	; (80023a4 <HAL_DMA_Abort+0x480>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d101      	bne.n	800234a <HAL_DMA_Abort+0x426>
 8002346:	2301      	movs	r3, #1
 8002348:	e000      	b.n	800234c <HAL_DMA_Abort+0x428>
 800234a:	2300      	movs	r3, #0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d02b      	beq.n	80023a8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002354:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800235a:	f003 031f 	and.w	r3, r3, #31
 800235e:	223f      	movs	r2, #63	; 0x3f
 8002360:	409a      	lsls	r2, r3
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	609a      	str	r2, [r3, #8]
 8002366:	e02a      	b.n	80023be <HAL_DMA_Abort+0x49a>
 8002368:	40020010 	.word	0x40020010
 800236c:	40020028 	.word	0x40020028
 8002370:	40020040 	.word	0x40020040
 8002374:	40020058 	.word	0x40020058
 8002378:	40020070 	.word	0x40020070
 800237c:	40020088 	.word	0x40020088
 8002380:	400200a0 	.word	0x400200a0
 8002384:	400200b8 	.word	0x400200b8
 8002388:	40020410 	.word	0x40020410
 800238c:	40020428 	.word	0x40020428
 8002390:	40020440 	.word	0x40020440
 8002394:	40020458 	.word	0x40020458
 8002398:	40020470 	.word	0x40020470
 800239c:	40020488 	.word	0x40020488
 80023a0:	400204a0 	.word	0x400204a0
 80023a4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ac:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b2:	f003 031f 	and.w	r3, r3, #31
 80023b6:	2201      	movs	r2, #1
 80023b8:	409a      	lsls	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a4f      	ldr	r2, [pc, #316]	; (8002500 <HAL_DMA_Abort+0x5dc>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d072      	beq.n	80024ae <HAL_DMA_Abort+0x58a>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a4d      	ldr	r2, [pc, #308]	; (8002504 <HAL_DMA_Abort+0x5e0>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d06d      	beq.n	80024ae <HAL_DMA_Abort+0x58a>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a4c      	ldr	r2, [pc, #304]	; (8002508 <HAL_DMA_Abort+0x5e4>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d068      	beq.n	80024ae <HAL_DMA_Abort+0x58a>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a4a      	ldr	r2, [pc, #296]	; (800250c <HAL_DMA_Abort+0x5e8>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d063      	beq.n	80024ae <HAL_DMA_Abort+0x58a>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a49      	ldr	r2, [pc, #292]	; (8002510 <HAL_DMA_Abort+0x5ec>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d05e      	beq.n	80024ae <HAL_DMA_Abort+0x58a>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a47      	ldr	r2, [pc, #284]	; (8002514 <HAL_DMA_Abort+0x5f0>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d059      	beq.n	80024ae <HAL_DMA_Abort+0x58a>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a46      	ldr	r2, [pc, #280]	; (8002518 <HAL_DMA_Abort+0x5f4>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d054      	beq.n	80024ae <HAL_DMA_Abort+0x58a>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a44      	ldr	r2, [pc, #272]	; (800251c <HAL_DMA_Abort+0x5f8>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d04f      	beq.n	80024ae <HAL_DMA_Abort+0x58a>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a43      	ldr	r2, [pc, #268]	; (8002520 <HAL_DMA_Abort+0x5fc>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d04a      	beq.n	80024ae <HAL_DMA_Abort+0x58a>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a41      	ldr	r2, [pc, #260]	; (8002524 <HAL_DMA_Abort+0x600>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d045      	beq.n	80024ae <HAL_DMA_Abort+0x58a>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a40      	ldr	r2, [pc, #256]	; (8002528 <HAL_DMA_Abort+0x604>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d040      	beq.n	80024ae <HAL_DMA_Abort+0x58a>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a3e      	ldr	r2, [pc, #248]	; (800252c <HAL_DMA_Abort+0x608>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d03b      	beq.n	80024ae <HAL_DMA_Abort+0x58a>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a3d      	ldr	r2, [pc, #244]	; (8002530 <HAL_DMA_Abort+0x60c>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d036      	beq.n	80024ae <HAL_DMA_Abort+0x58a>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a3b      	ldr	r2, [pc, #236]	; (8002534 <HAL_DMA_Abort+0x610>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d031      	beq.n	80024ae <HAL_DMA_Abort+0x58a>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a3a      	ldr	r2, [pc, #232]	; (8002538 <HAL_DMA_Abort+0x614>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d02c      	beq.n	80024ae <HAL_DMA_Abort+0x58a>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a38      	ldr	r2, [pc, #224]	; (800253c <HAL_DMA_Abort+0x618>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d027      	beq.n	80024ae <HAL_DMA_Abort+0x58a>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a37      	ldr	r2, [pc, #220]	; (8002540 <HAL_DMA_Abort+0x61c>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d022      	beq.n	80024ae <HAL_DMA_Abort+0x58a>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a35      	ldr	r2, [pc, #212]	; (8002544 <HAL_DMA_Abort+0x620>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d01d      	beq.n	80024ae <HAL_DMA_Abort+0x58a>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a34      	ldr	r2, [pc, #208]	; (8002548 <HAL_DMA_Abort+0x624>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d018      	beq.n	80024ae <HAL_DMA_Abort+0x58a>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a32      	ldr	r2, [pc, #200]	; (800254c <HAL_DMA_Abort+0x628>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d013      	beq.n	80024ae <HAL_DMA_Abort+0x58a>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a31      	ldr	r2, [pc, #196]	; (8002550 <HAL_DMA_Abort+0x62c>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d00e      	beq.n	80024ae <HAL_DMA_Abort+0x58a>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a2f      	ldr	r2, [pc, #188]	; (8002554 <HAL_DMA_Abort+0x630>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d009      	beq.n	80024ae <HAL_DMA_Abort+0x58a>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a2e      	ldr	r2, [pc, #184]	; (8002558 <HAL_DMA_Abort+0x634>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d004      	beq.n	80024ae <HAL_DMA_Abort+0x58a>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a2c      	ldr	r2, [pc, #176]	; (800255c <HAL_DMA_Abort+0x638>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d101      	bne.n	80024b2 <HAL_DMA_Abort+0x58e>
 80024ae:	2301      	movs	r3, #1
 80024b0:	e000      	b.n	80024b4 <HAL_DMA_Abort+0x590>
 80024b2:	2300      	movs	r3, #0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d015      	beq.n	80024e4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80024c0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00c      	beq.n	80024e4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024d8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80024e2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3718      	adds	r7, #24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40020010 	.word	0x40020010
 8002504:	40020028 	.word	0x40020028
 8002508:	40020040 	.word	0x40020040
 800250c:	40020058 	.word	0x40020058
 8002510:	40020070 	.word	0x40020070
 8002514:	40020088 	.word	0x40020088
 8002518:	400200a0 	.word	0x400200a0
 800251c:	400200b8 	.word	0x400200b8
 8002520:	40020410 	.word	0x40020410
 8002524:	40020428 	.word	0x40020428
 8002528:	40020440 	.word	0x40020440
 800252c:	40020458 	.word	0x40020458
 8002530:	40020470 	.word	0x40020470
 8002534:	40020488 	.word	0x40020488
 8002538:	400204a0 	.word	0x400204a0
 800253c:	400204b8 	.word	0x400204b8
 8002540:	58025408 	.word	0x58025408
 8002544:	5802541c 	.word	0x5802541c
 8002548:	58025430 	.word	0x58025430
 800254c:	58025444 	.word	0x58025444
 8002550:	58025458 	.word	0x58025458
 8002554:	5802546c 	.word	0x5802546c
 8002558:	58025480 	.word	0x58025480
 800255c:	58025494 	.word	0x58025494

08002560 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e237      	b.n	80029e2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b02      	cmp	r3, #2
 800257c:	d004      	beq.n	8002588 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2280      	movs	r2, #128	; 0x80
 8002582:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e22c      	b.n	80029e2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a5c      	ldr	r2, [pc, #368]	; (8002700 <HAL_DMA_Abort_IT+0x1a0>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d04a      	beq.n	8002628 <HAL_DMA_Abort_IT+0xc8>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a5b      	ldr	r2, [pc, #364]	; (8002704 <HAL_DMA_Abort_IT+0x1a4>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d045      	beq.n	8002628 <HAL_DMA_Abort_IT+0xc8>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a59      	ldr	r2, [pc, #356]	; (8002708 <HAL_DMA_Abort_IT+0x1a8>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d040      	beq.n	8002628 <HAL_DMA_Abort_IT+0xc8>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a58      	ldr	r2, [pc, #352]	; (800270c <HAL_DMA_Abort_IT+0x1ac>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d03b      	beq.n	8002628 <HAL_DMA_Abort_IT+0xc8>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a56      	ldr	r2, [pc, #344]	; (8002710 <HAL_DMA_Abort_IT+0x1b0>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d036      	beq.n	8002628 <HAL_DMA_Abort_IT+0xc8>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a55      	ldr	r2, [pc, #340]	; (8002714 <HAL_DMA_Abort_IT+0x1b4>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d031      	beq.n	8002628 <HAL_DMA_Abort_IT+0xc8>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a53      	ldr	r2, [pc, #332]	; (8002718 <HAL_DMA_Abort_IT+0x1b8>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d02c      	beq.n	8002628 <HAL_DMA_Abort_IT+0xc8>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a52      	ldr	r2, [pc, #328]	; (800271c <HAL_DMA_Abort_IT+0x1bc>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d027      	beq.n	8002628 <HAL_DMA_Abort_IT+0xc8>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a50      	ldr	r2, [pc, #320]	; (8002720 <HAL_DMA_Abort_IT+0x1c0>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d022      	beq.n	8002628 <HAL_DMA_Abort_IT+0xc8>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a4f      	ldr	r2, [pc, #316]	; (8002724 <HAL_DMA_Abort_IT+0x1c4>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d01d      	beq.n	8002628 <HAL_DMA_Abort_IT+0xc8>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a4d      	ldr	r2, [pc, #308]	; (8002728 <HAL_DMA_Abort_IT+0x1c8>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d018      	beq.n	8002628 <HAL_DMA_Abort_IT+0xc8>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a4c      	ldr	r2, [pc, #304]	; (800272c <HAL_DMA_Abort_IT+0x1cc>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d013      	beq.n	8002628 <HAL_DMA_Abort_IT+0xc8>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a4a      	ldr	r2, [pc, #296]	; (8002730 <HAL_DMA_Abort_IT+0x1d0>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d00e      	beq.n	8002628 <HAL_DMA_Abort_IT+0xc8>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a49      	ldr	r2, [pc, #292]	; (8002734 <HAL_DMA_Abort_IT+0x1d4>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d009      	beq.n	8002628 <HAL_DMA_Abort_IT+0xc8>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a47      	ldr	r2, [pc, #284]	; (8002738 <HAL_DMA_Abort_IT+0x1d8>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d004      	beq.n	8002628 <HAL_DMA_Abort_IT+0xc8>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a46      	ldr	r2, [pc, #280]	; (800273c <HAL_DMA_Abort_IT+0x1dc>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d101      	bne.n	800262c <HAL_DMA_Abort_IT+0xcc>
 8002628:	2301      	movs	r3, #1
 800262a:	e000      	b.n	800262e <HAL_DMA_Abort_IT+0xce>
 800262c:	2300      	movs	r3, #0
 800262e:	2b00      	cmp	r3, #0
 8002630:	f000 8086 	beq.w	8002740 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2204      	movs	r2, #4
 8002638:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a2f      	ldr	r2, [pc, #188]	; (8002700 <HAL_DMA_Abort_IT+0x1a0>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d04a      	beq.n	80026dc <HAL_DMA_Abort_IT+0x17c>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a2e      	ldr	r2, [pc, #184]	; (8002704 <HAL_DMA_Abort_IT+0x1a4>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d045      	beq.n	80026dc <HAL_DMA_Abort_IT+0x17c>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a2c      	ldr	r2, [pc, #176]	; (8002708 <HAL_DMA_Abort_IT+0x1a8>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d040      	beq.n	80026dc <HAL_DMA_Abort_IT+0x17c>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a2b      	ldr	r2, [pc, #172]	; (800270c <HAL_DMA_Abort_IT+0x1ac>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d03b      	beq.n	80026dc <HAL_DMA_Abort_IT+0x17c>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a29      	ldr	r2, [pc, #164]	; (8002710 <HAL_DMA_Abort_IT+0x1b0>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d036      	beq.n	80026dc <HAL_DMA_Abort_IT+0x17c>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a28      	ldr	r2, [pc, #160]	; (8002714 <HAL_DMA_Abort_IT+0x1b4>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d031      	beq.n	80026dc <HAL_DMA_Abort_IT+0x17c>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a26      	ldr	r2, [pc, #152]	; (8002718 <HAL_DMA_Abort_IT+0x1b8>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d02c      	beq.n	80026dc <HAL_DMA_Abort_IT+0x17c>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a25      	ldr	r2, [pc, #148]	; (800271c <HAL_DMA_Abort_IT+0x1bc>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d027      	beq.n	80026dc <HAL_DMA_Abort_IT+0x17c>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a23      	ldr	r2, [pc, #140]	; (8002720 <HAL_DMA_Abort_IT+0x1c0>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d022      	beq.n	80026dc <HAL_DMA_Abort_IT+0x17c>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a22      	ldr	r2, [pc, #136]	; (8002724 <HAL_DMA_Abort_IT+0x1c4>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d01d      	beq.n	80026dc <HAL_DMA_Abort_IT+0x17c>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a20      	ldr	r2, [pc, #128]	; (8002728 <HAL_DMA_Abort_IT+0x1c8>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d018      	beq.n	80026dc <HAL_DMA_Abort_IT+0x17c>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a1f      	ldr	r2, [pc, #124]	; (800272c <HAL_DMA_Abort_IT+0x1cc>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d013      	beq.n	80026dc <HAL_DMA_Abort_IT+0x17c>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a1d      	ldr	r2, [pc, #116]	; (8002730 <HAL_DMA_Abort_IT+0x1d0>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d00e      	beq.n	80026dc <HAL_DMA_Abort_IT+0x17c>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a1c      	ldr	r2, [pc, #112]	; (8002734 <HAL_DMA_Abort_IT+0x1d4>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d009      	beq.n	80026dc <HAL_DMA_Abort_IT+0x17c>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a1a      	ldr	r2, [pc, #104]	; (8002738 <HAL_DMA_Abort_IT+0x1d8>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d004      	beq.n	80026dc <HAL_DMA_Abort_IT+0x17c>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a19      	ldr	r2, [pc, #100]	; (800273c <HAL_DMA_Abort_IT+0x1dc>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d108      	bne.n	80026ee <HAL_DMA_Abort_IT+0x18e>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0201 	bic.w	r2, r2, #1
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	e178      	b.n	80029e0 <HAL_DMA_Abort_IT+0x480>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f022 0201 	bic.w	r2, r2, #1
 80026fc:	601a      	str	r2, [r3, #0]
 80026fe:	e16f      	b.n	80029e0 <HAL_DMA_Abort_IT+0x480>
 8002700:	40020010 	.word	0x40020010
 8002704:	40020028 	.word	0x40020028
 8002708:	40020040 	.word	0x40020040
 800270c:	40020058 	.word	0x40020058
 8002710:	40020070 	.word	0x40020070
 8002714:	40020088 	.word	0x40020088
 8002718:	400200a0 	.word	0x400200a0
 800271c:	400200b8 	.word	0x400200b8
 8002720:	40020410 	.word	0x40020410
 8002724:	40020428 	.word	0x40020428
 8002728:	40020440 	.word	0x40020440
 800272c:	40020458 	.word	0x40020458
 8002730:	40020470 	.word	0x40020470
 8002734:	40020488 	.word	0x40020488
 8002738:	400204a0 	.word	0x400204a0
 800273c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 020e 	bic.w	r2, r2, #14
 800274e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a6c      	ldr	r2, [pc, #432]	; (8002908 <HAL_DMA_Abort_IT+0x3a8>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d04a      	beq.n	80027f0 <HAL_DMA_Abort_IT+0x290>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a6b      	ldr	r2, [pc, #428]	; (800290c <HAL_DMA_Abort_IT+0x3ac>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d045      	beq.n	80027f0 <HAL_DMA_Abort_IT+0x290>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a69      	ldr	r2, [pc, #420]	; (8002910 <HAL_DMA_Abort_IT+0x3b0>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d040      	beq.n	80027f0 <HAL_DMA_Abort_IT+0x290>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a68      	ldr	r2, [pc, #416]	; (8002914 <HAL_DMA_Abort_IT+0x3b4>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d03b      	beq.n	80027f0 <HAL_DMA_Abort_IT+0x290>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a66      	ldr	r2, [pc, #408]	; (8002918 <HAL_DMA_Abort_IT+0x3b8>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d036      	beq.n	80027f0 <HAL_DMA_Abort_IT+0x290>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a65      	ldr	r2, [pc, #404]	; (800291c <HAL_DMA_Abort_IT+0x3bc>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d031      	beq.n	80027f0 <HAL_DMA_Abort_IT+0x290>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a63      	ldr	r2, [pc, #396]	; (8002920 <HAL_DMA_Abort_IT+0x3c0>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d02c      	beq.n	80027f0 <HAL_DMA_Abort_IT+0x290>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a62      	ldr	r2, [pc, #392]	; (8002924 <HAL_DMA_Abort_IT+0x3c4>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d027      	beq.n	80027f0 <HAL_DMA_Abort_IT+0x290>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a60      	ldr	r2, [pc, #384]	; (8002928 <HAL_DMA_Abort_IT+0x3c8>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d022      	beq.n	80027f0 <HAL_DMA_Abort_IT+0x290>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a5f      	ldr	r2, [pc, #380]	; (800292c <HAL_DMA_Abort_IT+0x3cc>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d01d      	beq.n	80027f0 <HAL_DMA_Abort_IT+0x290>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a5d      	ldr	r2, [pc, #372]	; (8002930 <HAL_DMA_Abort_IT+0x3d0>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d018      	beq.n	80027f0 <HAL_DMA_Abort_IT+0x290>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a5c      	ldr	r2, [pc, #368]	; (8002934 <HAL_DMA_Abort_IT+0x3d4>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d013      	beq.n	80027f0 <HAL_DMA_Abort_IT+0x290>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a5a      	ldr	r2, [pc, #360]	; (8002938 <HAL_DMA_Abort_IT+0x3d8>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d00e      	beq.n	80027f0 <HAL_DMA_Abort_IT+0x290>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a59      	ldr	r2, [pc, #356]	; (800293c <HAL_DMA_Abort_IT+0x3dc>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d009      	beq.n	80027f0 <HAL_DMA_Abort_IT+0x290>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a57      	ldr	r2, [pc, #348]	; (8002940 <HAL_DMA_Abort_IT+0x3e0>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d004      	beq.n	80027f0 <HAL_DMA_Abort_IT+0x290>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a56      	ldr	r2, [pc, #344]	; (8002944 <HAL_DMA_Abort_IT+0x3e4>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d108      	bne.n	8002802 <HAL_DMA_Abort_IT+0x2a2>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f022 0201 	bic.w	r2, r2, #1
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	e007      	b.n	8002812 <HAL_DMA_Abort_IT+0x2b2>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 0201 	bic.w	r2, r2, #1
 8002810:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a3c      	ldr	r2, [pc, #240]	; (8002908 <HAL_DMA_Abort_IT+0x3a8>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d072      	beq.n	8002902 <HAL_DMA_Abort_IT+0x3a2>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a3a      	ldr	r2, [pc, #232]	; (800290c <HAL_DMA_Abort_IT+0x3ac>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d06d      	beq.n	8002902 <HAL_DMA_Abort_IT+0x3a2>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a39      	ldr	r2, [pc, #228]	; (8002910 <HAL_DMA_Abort_IT+0x3b0>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d068      	beq.n	8002902 <HAL_DMA_Abort_IT+0x3a2>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a37      	ldr	r2, [pc, #220]	; (8002914 <HAL_DMA_Abort_IT+0x3b4>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d063      	beq.n	8002902 <HAL_DMA_Abort_IT+0x3a2>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a36      	ldr	r2, [pc, #216]	; (8002918 <HAL_DMA_Abort_IT+0x3b8>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d05e      	beq.n	8002902 <HAL_DMA_Abort_IT+0x3a2>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a34      	ldr	r2, [pc, #208]	; (800291c <HAL_DMA_Abort_IT+0x3bc>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d059      	beq.n	8002902 <HAL_DMA_Abort_IT+0x3a2>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a33      	ldr	r2, [pc, #204]	; (8002920 <HAL_DMA_Abort_IT+0x3c0>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d054      	beq.n	8002902 <HAL_DMA_Abort_IT+0x3a2>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a31      	ldr	r2, [pc, #196]	; (8002924 <HAL_DMA_Abort_IT+0x3c4>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d04f      	beq.n	8002902 <HAL_DMA_Abort_IT+0x3a2>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a30      	ldr	r2, [pc, #192]	; (8002928 <HAL_DMA_Abort_IT+0x3c8>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d04a      	beq.n	8002902 <HAL_DMA_Abort_IT+0x3a2>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a2e      	ldr	r2, [pc, #184]	; (800292c <HAL_DMA_Abort_IT+0x3cc>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d045      	beq.n	8002902 <HAL_DMA_Abort_IT+0x3a2>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a2d      	ldr	r2, [pc, #180]	; (8002930 <HAL_DMA_Abort_IT+0x3d0>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d040      	beq.n	8002902 <HAL_DMA_Abort_IT+0x3a2>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a2b      	ldr	r2, [pc, #172]	; (8002934 <HAL_DMA_Abort_IT+0x3d4>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d03b      	beq.n	8002902 <HAL_DMA_Abort_IT+0x3a2>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a2a      	ldr	r2, [pc, #168]	; (8002938 <HAL_DMA_Abort_IT+0x3d8>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d036      	beq.n	8002902 <HAL_DMA_Abort_IT+0x3a2>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a28      	ldr	r2, [pc, #160]	; (800293c <HAL_DMA_Abort_IT+0x3dc>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d031      	beq.n	8002902 <HAL_DMA_Abort_IT+0x3a2>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a27      	ldr	r2, [pc, #156]	; (8002940 <HAL_DMA_Abort_IT+0x3e0>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d02c      	beq.n	8002902 <HAL_DMA_Abort_IT+0x3a2>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a25      	ldr	r2, [pc, #148]	; (8002944 <HAL_DMA_Abort_IT+0x3e4>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d027      	beq.n	8002902 <HAL_DMA_Abort_IT+0x3a2>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a24      	ldr	r2, [pc, #144]	; (8002948 <HAL_DMA_Abort_IT+0x3e8>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d022      	beq.n	8002902 <HAL_DMA_Abort_IT+0x3a2>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a22      	ldr	r2, [pc, #136]	; (800294c <HAL_DMA_Abort_IT+0x3ec>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d01d      	beq.n	8002902 <HAL_DMA_Abort_IT+0x3a2>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a21      	ldr	r2, [pc, #132]	; (8002950 <HAL_DMA_Abort_IT+0x3f0>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d018      	beq.n	8002902 <HAL_DMA_Abort_IT+0x3a2>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a1f      	ldr	r2, [pc, #124]	; (8002954 <HAL_DMA_Abort_IT+0x3f4>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d013      	beq.n	8002902 <HAL_DMA_Abort_IT+0x3a2>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a1e      	ldr	r2, [pc, #120]	; (8002958 <HAL_DMA_Abort_IT+0x3f8>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d00e      	beq.n	8002902 <HAL_DMA_Abort_IT+0x3a2>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a1c      	ldr	r2, [pc, #112]	; (800295c <HAL_DMA_Abort_IT+0x3fc>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d009      	beq.n	8002902 <HAL_DMA_Abort_IT+0x3a2>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a1b      	ldr	r2, [pc, #108]	; (8002960 <HAL_DMA_Abort_IT+0x400>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d004      	beq.n	8002902 <HAL_DMA_Abort_IT+0x3a2>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a19      	ldr	r2, [pc, #100]	; (8002964 <HAL_DMA_Abort_IT+0x404>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d132      	bne.n	8002968 <HAL_DMA_Abort_IT+0x408>
 8002902:	2301      	movs	r3, #1
 8002904:	e031      	b.n	800296a <HAL_DMA_Abort_IT+0x40a>
 8002906:	bf00      	nop
 8002908:	40020010 	.word	0x40020010
 800290c:	40020028 	.word	0x40020028
 8002910:	40020040 	.word	0x40020040
 8002914:	40020058 	.word	0x40020058
 8002918:	40020070 	.word	0x40020070
 800291c:	40020088 	.word	0x40020088
 8002920:	400200a0 	.word	0x400200a0
 8002924:	400200b8 	.word	0x400200b8
 8002928:	40020410 	.word	0x40020410
 800292c:	40020428 	.word	0x40020428
 8002930:	40020440 	.word	0x40020440
 8002934:	40020458 	.word	0x40020458
 8002938:	40020470 	.word	0x40020470
 800293c:	40020488 	.word	0x40020488
 8002940:	400204a0 	.word	0x400204a0
 8002944:	400204b8 	.word	0x400204b8
 8002948:	58025408 	.word	0x58025408
 800294c:	5802541c 	.word	0x5802541c
 8002950:	58025430 	.word	0x58025430
 8002954:	58025444 	.word	0x58025444
 8002958:	58025458 	.word	0x58025458
 800295c:	5802546c 	.word	0x5802546c
 8002960:	58025480 	.word	0x58025480
 8002964:	58025494 	.word	0x58025494
 8002968:	2300      	movs	r3, #0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d028      	beq.n	80029c0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002978:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800297c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002982:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002988:	f003 031f 	and.w	r3, r3, #31
 800298c:	2201      	movs	r2, #1
 800298e:	409a      	lsls	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800299c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00c      	beq.n	80029c0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029b4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80029be:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d003      	beq.n	80029e0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop

080029ec <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e0e3      	b.n	8002bc6 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d106      	bne.n	8002a16 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2223      	movs	r2, #35	; 0x23
 8002a0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f7fe fb05 	bl	8001020 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a16:	4b6e      	ldr	r3, [pc, #440]	; (8002bd0 <HAL_ETH_Init+0x1e4>)
 8002a18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002a1c:	4a6c      	ldr	r2, [pc, #432]	; (8002bd0 <HAL_ETH_Init+0x1e4>)
 8002a1e:	f043 0302 	orr.w	r3, r3, #2
 8002a22:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002a26:	4b6a      	ldr	r3, [pc, #424]	; (8002bd0 <HAL_ETH_Init+0x1e4>)
 8002a28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	60bb      	str	r3, [r7, #8]
 8002a32:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	7a1b      	ldrb	r3, [r3, #8]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d103      	bne.n	8002a44 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002a3c:	2000      	movs	r0, #0
 8002a3e:	f7ff f94d 	bl	8001cdc <HAL_SYSCFG_ETHInterfaceSelect>
 8002a42:	e003      	b.n	8002a4c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002a44:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002a48:	f7ff f948 	bl	8001cdc <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8002a4c:	4b61      	ldr	r3, [pc, #388]	; (8002bd4 <HAL_ETH_Init+0x1e8>)
 8002a4e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	6812      	ldr	r2, [r2, #0]
 8002a5e:	f043 0301 	orr.w	r3, r3, #1
 8002a62:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a66:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a68:	f7ff f908 	bl	8001c7c <HAL_GetTick>
 8002a6c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002a6e:	e011      	b.n	8002a94 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002a70:	f7ff f904 	bl	8001c7c <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002a7e:	d909      	bls.n	8002a94 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2204      	movs	r2, #4
 8002a84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	22e0      	movs	r2, #224	; 0xe0
 8002a8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e098      	b.n	8002bc6 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1e4      	bne.n	8002a70 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 f89e 	bl	8002be8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002aac:	f001 fcd8 	bl	8004460 <HAL_RCC_GetHCLKFreq>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	4a49      	ldr	r2, [pc, #292]	; (8002bd8 <HAL_ETH_Init+0x1ec>)
 8002ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab8:	0c9a      	lsrs	r2, r3, #18
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	3a01      	subs	r2, #1
 8002ac0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 fa81 	bl	8002fcc <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ad2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002ad6:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	6812      	ldr	r2, [r2, #0]
 8002ade:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002ae2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002ae6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	f003 0303 	and.w	r3, r3, #3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d009      	beq.n	8002b0a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2201      	movs	r2, #1
 8002afa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	22e0      	movs	r2, #224	; 0xe0
 8002b02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e05d      	b.n	8002bc6 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b12:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002b16:	4b31      	ldr	r3, [pc, #196]	; (8002bdc <HAL_ETH_Init+0x1f0>)
 8002b18:	4013      	ands	r3, r2
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	6952      	ldr	r2, [r2, #20]
 8002b1e:	0051      	lsls	r1, r2, #1
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	6812      	ldr	r2, [r2, #0]
 8002b24:	430b      	orrs	r3, r1
 8002b26:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002b2a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 fae9 	bl	8003106 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 fb2f 	bl	8003198 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	3305      	adds	r3, #5
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	021a      	lsls	r2, r3, #8
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	3304      	adds	r3, #4
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	3303      	adds	r3, #3
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	061a      	lsls	r2, r3, #24
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	3302      	adds	r3, #2
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	041b      	lsls	r3, r3, #16
 8002b6c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	3301      	adds	r3, #1
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002b78:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002b86:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002b88:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	4b11      	ldr	r3, [pc, #68]	; (8002be0 <HAL_ETH_Init+0x1f4>)
 8002b9a:	430b      	orrs	r3, r1
 8002b9c:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f8d3 1710 	ldr.w	r1, [r3, #1808]	; 0x710
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	4b0d      	ldr	r3, [pc, #52]	; (8002be4 <HAL_ETH_Init+0x1f8>)
 8002bae:	430b      	orrs	r3, r1
 8002bb0:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2210      	movs	r2, #16
 8002bc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	58024400 	.word	0x58024400
 8002bd4:	58000400 	.word	0x58000400
 8002bd8:	431bde83 	.word	0x431bde83
 8002bdc:	ffff8001 	.word	0xffff8001
 8002be0:	0c020060 	.word	0x0c020060
 8002be4:	0c20c000 	.word	0x0c20c000

08002be8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002bf8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c00:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002c02:	f001 fc2d 	bl	8004460 <HAL_RCC_GetHCLKFreq>
 8002c06:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	4a1a      	ldr	r2, [pc, #104]	; (8002c74 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d804      	bhi.n	8002c1a <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c16:	60fb      	str	r3, [r7, #12]
 8002c18:	e022      	b.n	8002c60 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	4a16      	ldr	r2, [pc, #88]	; (8002c78 <HAL_ETH_SetMDIOClockRange+0x90>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d204      	bcs.n	8002c2c <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002c28:	60fb      	str	r3, [r7, #12]
 8002c2a:	e019      	b.n	8002c60 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	4a13      	ldr	r2, [pc, #76]	; (8002c7c <HAL_ETH_SetMDIOClockRange+0x94>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d915      	bls.n	8002c60 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	4a12      	ldr	r2, [pc, #72]	; (8002c80 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d804      	bhi.n	8002c46 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	e00c      	b.n	8002c60 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	4a0e      	ldr	r2, [pc, #56]	; (8002c84 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d804      	bhi.n	8002c58 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	e003      	b.n	8002c60 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8002c5e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002c6a:	bf00      	nop
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	02160ebf 	.word	0x02160ebf
 8002c78:	03938700 	.word	0x03938700
 8002c7c:	05f5e0ff 	.word	0x05f5e0ff
 8002c80:	08f0d17f 	.word	0x08f0d17f
 8002c84:	0ee6b27f 	.word	0x0ee6b27f

08002c88 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002c9a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	791b      	ldrb	r3, [r3, #4]
 8002ca0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002ca2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	7b1b      	ldrb	r3, [r3, #12]
 8002ca8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002caa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	7b5b      	ldrb	r3, [r3, #13]
 8002cb0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002cb2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	7b9b      	ldrb	r3, [r3, #14]
 8002cb8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002cba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	7bdb      	ldrb	r3, [r3, #15]
 8002cc0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002cc2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	7c12      	ldrb	r2, [r2, #16]
 8002cc8:	2a00      	cmp	r2, #0
 8002cca:	d102      	bne.n	8002cd2 <ETH_SetMACConfig+0x4a>
 8002ccc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002cd0:	e000      	b.n	8002cd4 <ETH_SetMACConfig+0x4c>
 8002cd2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002cd4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	7c52      	ldrb	r2, [r2, #17]
 8002cda:	2a00      	cmp	r2, #0
 8002cdc:	d102      	bne.n	8002ce4 <ETH_SetMACConfig+0x5c>
 8002cde:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ce2:	e000      	b.n	8002ce6 <ETH_SetMACConfig+0x5e>
 8002ce4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002ce6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	7c9b      	ldrb	r3, [r3, #18]
 8002cec:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002cee:	431a      	orrs	r2, r3
               macconf->Speed |
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002cf4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002cfa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	7f1b      	ldrb	r3, [r3, #28]
 8002d00:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002d02:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	7f5b      	ldrb	r3, [r3, #29]
 8002d08:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002d0a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	7f92      	ldrb	r2, [r2, #30]
 8002d10:	2a00      	cmp	r2, #0
 8002d12:	d102      	bne.n	8002d1a <ETH_SetMACConfig+0x92>
 8002d14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d18:	e000      	b.n	8002d1c <ETH_SetMACConfig+0x94>
 8002d1a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002d1c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	7fdb      	ldrb	r3, [r3, #31]
 8002d22:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002d24:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002d26:	683a      	ldr	r2, [r7, #0]
 8002d28:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002d2c:	2a00      	cmp	r2, #0
 8002d2e:	d102      	bne.n	8002d36 <ETH_SetMACConfig+0xae>
 8002d30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d34:	e000      	b.n	8002d38 <ETH_SetMACConfig+0xb0>
 8002d36:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002d38:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002d3e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002d46:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002d48:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	4b56      	ldr	r3, [pc, #344]	; (8002eb4 <ETH_SetMACConfig+0x22c>)
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	6812      	ldr	r2, [r2, #0]
 8002d60:	68f9      	ldr	r1, [r7, #12]
 8002d62:	430b      	orrs	r3, r1
 8002d64:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d6a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d72:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002d74:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d7c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002d7e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002d86:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002d88:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002d90:	2a00      	cmp	r2, #0
 8002d92:	d102      	bne.n	8002d9a <ETH_SetMACConfig+0x112>
 8002d94:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d98:	e000      	b.n	8002d9c <ETH_SetMACConfig+0x114>
 8002d9a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002d9c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002da2:	4313      	orrs	r3, r2
 8002da4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	685a      	ldr	r2, [r3, #4]
 8002dac:	4b42      	ldr	r3, [pc, #264]	; (8002eb8 <ETH_SetMACConfig+0x230>)
 8002dae:	4013      	ands	r3, r2
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	6812      	ldr	r2, [r2, #0]
 8002db4:	68f9      	ldr	r1, [r7, #12]
 8002db6:	430b      	orrs	r3, r1
 8002db8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dc0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68da      	ldr	r2, [r3, #12]
 8002dd0:	4b3a      	ldr	r3, [pc, #232]	; (8002ebc <ETH_SetMACConfig+0x234>)
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	6812      	ldr	r2, [r2, #0]
 8002dd8:	68f9      	ldr	r1, [r7, #12]
 8002dda:	430b      	orrs	r3, r1
 8002ddc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002de4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002dea:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002df2:	2a00      	cmp	r2, #0
 8002df4:	d101      	bne.n	8002dfa <ETH_SetMACConfig+0x172>
 8002df6:	2280      	movs	r2, #128	; 0x80
 8002df8:	e000      	b.n	8002dfc <ETH_SetMACConfig+0x174>
 8002dfa:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002dfc:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e02:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002e04:	4313      	orrs	r3, r2
 8002e06:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e0e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002e12:	4013      	ands	r3, r2
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	6812      	ldr	r2, [r2, #0]
 8002e18:	68f9      	ldr	r1, [r7, #12]
 8002e1a:	430b      	orrs	r3, r1
 8002e1c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002e24:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002e2c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e3a:	f023 0103 	bic.w	r1, r3, #3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	430a      	orrs	r2, r1
 8002e46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002e52:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002e6e:	2a00      	cmp	r2, #0
 8002e70:	d101      	bne.n	8002e76 <ETH_SetMACConfig+0x1ee>
 8002e72:	2240      	movs	r2, #64	; 0x40
 8002e74:	e000      	b.n	8002e78 <ETH_SetMACConfig+0x1f0>
 8002e76:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002e78:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002e80:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002e82:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002e8a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002e98:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002ea8:	bf00      	nop
 8002eaa:	3714      	adds	r7, #20
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr
 8002eb4:	00048083 	.word	0x00048083
 8002eb8:	c0f88000 	.word	0xc0f88000
 8002ebc:	fffffef0 	.word	0xfffffef0

08002ec0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	4b38      	ldr	r3, [pc, #224]	; (8002fb8 <ETH_SetDMAConfig+0xf8>)
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	6811      	ldr	r1, [r2, #0]
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	6812      	ldr	r2, [r2, #0]
 8002ee0:	430b      	orrs	r3, r1
 8002ee2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002ee6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	791b      	ldrb	r3, [r3, #4]
 8002eec:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002ef2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	7b1b      	ldrb	r3, [r3, #12]
 8002ef8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002efa:	4313      	orrs	r3, r2
 8002efc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f06:	685a      	ldr	r2, [r3, #4]
 8002f08:	4b2c      	ldr	r3, [pc, #176]	; (8002fbc <ETH_SetDMAConfig+0xfc>)
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	6812      	ldr	r2, [r2, #0]
 8002f10:	68f9      	ldr	r1, [r7, #12]
 8002f12:	430b      	orrs	r3, r1
 8002f14:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002f18:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	7b5b      	ldrb	r3, [r3, #13]
 8002f1e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002f24:	4313      	orrs	r3, r2
 8002f26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f30:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8002f34:	4b22      	ldr	r3, [pc, #136]	; (8002fc0 <ETH_SetDMAConfig+0x100>)
 8002f36:	4013      	ands	r3, r2
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	6812      	ldr	r2, [r2, #0]
 8002f3c:	68f9      	ldr	r1, [r7, #12]
 8002f3e:	430b      	orrs	r3, r1
 8002f40:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002f44:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	7d1b      	ldrb	r3, [r3, #20]
 8002f50:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002f52:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	7f5b      	ldrb	r3, [r3, #29]
 8002f58:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f66:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8002f6a:	4b16      	ldr	r3, [pc, #88]	; (8002fc4 <ETH_SetDMAConfig+0x104>)
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	6812      	ldr	r2, [r2, #0]
 8002f72:	68f9      	ldr	r1, [r7, #12]
 8002f74:	430b      	orrs	r3, r1
 8002f76:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002f7a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	7f1b      	ldrb	r3, [r3, #28]
 8002f82:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f94:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002f98:	4b0b      	ldr	r3, [pc, #44]	; (8002fc8 <ETH_SetDMAConfig+0x108>)
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	6812      	ldr	r2, [r2, #0]
 8002fa0:	68f9      	ldr	r1, [r7, #12]
 8002fa2:	430b      	orrs	r3, r1
 8002fa4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002fa8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8002fac:	bf00      	nop
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr
 8002fb8:	ffff87fd 	.word	0xffff87fd
 8002fbc:	ffff2ffe 	.word	0xffff2ffe
 8002fc0:	fffec000 	.word	0xfffec000
 8002fc4:	ffc0efef 	.word	0xffc0efef
 8002fc8:	7fc0ffff 	.word	0x7fc0ffff

08002fcc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b0a4      	sub	sp, #144	; 0x90
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002fea:	2301      	movs	r3, #1
 8002fec:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003002:	2301      	movs	r3, #1
 8003004:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003008:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800300c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800300e:	2300      	movs	r3, #0
 8003010:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8003014:	2300      	movs	r3, #0
 8003016:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003018:	2300      	movs	r3, #0
 800301a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800301e:	2300      	movs	r3, #0
 8003020:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8003024:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8003028:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800302a:	2300      	movs	r3, #0
 800302c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003030:	2300      	movs	r3, #0
 8003032:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8003034:	2301      	movs	r3, #1
 8003036:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800303a:	2300      	movs	r3, #0
 800303c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003040:	2300      	movs	r3, #0
 8003042:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8003046:	2300      	movs	r3, #0
 8003048:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0U;
 800304a:	2300      	movs	r3, #0
 800304c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800304e:	2300      	movs	r3, #0
 8003050:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8003052:	2300      	movs	r3, #0
 8003054:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003058:	2300      	movs	r3, #0
 800305a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800305e:	2301      	movs	r3, #1
 8003060:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003064:	2320      	movs	r3, #32
 8003066:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800306a:	2301      	movs	r3, #1
 800306c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003070:	2300      	movs	r3, #0
 8003072:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8003076:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800307a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800307c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003080:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8003082:	2300      	movs	r3, #0
 8003084:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003088:	2302      	movs	r3, #2
 800308a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800308e:	2300      	movs	r3, #0
 8003090:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003094:	2300      	movs	r3, #0
 8003096:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800309a:	2300      	movs	r3, #0
 800309c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80030a0:	2301      	movs	r3, #1
 80030a2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80030a6:	2300      	movs	r3, #0
 80030a8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80030aa:	2301      	movs	r3, #1
 80030ac:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80030b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030b4:	4619      	mov	r1, r3
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7ff fde6 	bl	8002c88 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80030bc:	2301      	movs	r3, #1
 80030be:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80030c0:	2301      	movs	r3, #1
 80030c2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80030c4:	2300      	movs	r3, #0
 80030c6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80030c8:	2300      	movs	r3, #0
 80030ca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80030ce:	2300      	movs	r3, #0
 80030d0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80030d2:	2300      	movs	r3, #0
 80030d4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80030d6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80030da:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80030dc:	2300      	movs	r3, #0
 80030de:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80030e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80030e4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80030e6:	2300      	movs	r3, #0
 80030e8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80030ec:	f44f 7306 	mov.w	r3, #536	; 0x218
 80030f0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80030f2:	f107 0308 	add.w	r3, r7, #8
 80030f6:	4619      	mov	r1, r3
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f7ff fee1 	bl	8002ec0 <ETH_SetDMAConfig>
}
 80030fe:	bf00      	nop
 8003100:	3790      	adds	r7, #144	; 0x90
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003106:	b480      	push	{r7}
 8003108:	b085      	sub	sp, #20
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800310e:	2300      	movs	r3, #0
 8003110:	60fb      	str	r3, [r7, #12]
 8003112:	e01d      	b.n	8003150 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68d9      	ldr	r1, [r3, #12]
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	4613      	mov	r3, r2
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	4413      	add	r3, r2
 8003120:	00db      	lsls	r3, r3, #3
 8003122:	440b      	add	r3, r1
 8003124:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	2200      	movs	r2, #0
 800312a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	2200      	movs	r2, #0
 8003130:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	2200      	movs	r2, #0
 8003136:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	2200      	movs	r2, #0
 800313c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800313e:	68b9      	ldr	r1, [r7, #8]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	3206      	adds	r2, #6
 8003146:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	3301      	adds	r3, #1
 800314e:	60fb      	str	r3, [r7, #12]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2b03      	cmp	r3, #3
 8003154:	d9de      	bls.n	8003114 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003164:	461a      	mov	r2, r3
 8003166:	2303      	movs	r3, #3
 8003168:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68da      	ldr	r2, [r3, #12]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003178:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	68da      	ldr	r2, [r3, #12]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003188:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 800318c:	bf00      	nop
 800318e:	3714      	adds	r7, #20
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003198:	b480      	push	{r7}
 800319a:	b085      	sub	sp, #20
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80031a0:	2300      	movs	r3, #0
 80031a2:	60fb      	str	r3, [r7, #12]
 80031a4:	e023      	b.n	80031ee <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6919      	ldr	r1, [r3, #16]
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	4613      	mov	r3, r2
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	4413      	add	r3, r2
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	440b      	add	r3, r1
 80031b6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	2200      	movs	r2, #0
 80031bc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	2200      	movs	r2, #0
 80031c2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	2200      	movs	r2, #0
 80031c8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	2200      	movs	r2, #0
 80031ce:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	2200      	movs	r2, #0
 80031d4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	2200      	movs	r2, #0
 80031da:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80031dc:	68b9      	ldr	r1, [r7, #8]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	3212      	adds	r2, #18
 80031e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	3301      	adds	r3, #1
 80031ec:	60fb      	str	r3, [r7, #12]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2b03      	cmp	r3, #3
 80031f2:	d9d8      	bls.n	80031a6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800321a:	461a      	mov	r2, r3
 800321c:	2303      	movs	r3, #3
 800321e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	691a      	ldr	r2, [r3, #16]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800322e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003242:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8003246:	bf00      	nop
 8003248:	3714      	adds	r7, #20
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
	...

08003254 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003254:	b480      	push	{r7}
 8003256:	b089      	sub	sp, #36	; 0x24
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800325e:	2300      	movs	r3, #0
 8003260:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003262:	4b86      	ldr	r3, [pc, #536]	; (800347c <HAL_GPIO_Init+0x228>)
 8003264:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003266:	e18c      	b.n	8003582 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	2101      	movs	r1, #1
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	fa01 f303 	lsl.w	r3, r1, r3
 8003274:	4013      	ands	r3, r2
 8003276:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	2b00      	cmp	r3, #0
 800327c:	f000 817e 	beq.w	800357c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f003 0303 	and.w	r3, r3, #3
 8003288:	2b01      	cmp	r3, #1
 800328a:	d005      	beq.n	8003298 <HAL_GPIO_Init+0x44>
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f003 0303 	and.w	r3, r3, #3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d130      	bne.n	80032fa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	2203      	movs	r2, #3
 80032a4:	fa02 f303 	lsl.w	r3, r2, r3
 80032a8:	43db      	mvns	r3, r3
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	4013      	ands	r3, r2
 80032ae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	68da      	ldr	r2, [r3, #12]
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	fa02 f303 	lsl.w	r3, r2, r3
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	4313      	orrs	r3, r2
 80032c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032ce:	2201      	movs	r2, #1
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	fa02 f303 	lsl.w	r3, r2, r3
 80032d6:	43db      	mvns	r3, r3
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	4013      	ands	r3, r2
 80032dc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	091b      	lsrs	r3, r3, #4
 80032e4:	f003 0201 	and.w	r2, r3, #1
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	fa02 f303 	lsl.w	r3, r2, r3
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f003 0303 	and.w	r3, r3, #3
 8003302:	2b03      	cmp	r3, #3
 8003304:	d017      	beq.n	8003336 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	2203      	movs	r2, #3
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
 8003316:	43db      	mvns	r3, r3
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	4013      	ands	r3, r2
 800331c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	689a      	ldr	r2, [r3, #8]
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	fa02 f303 	lsl.w	r3, r2, r3
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	4313      	orrs	r3, r2
 800332e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f003 0303 	and.w	r3, r3, #3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d123      	bne.n	800338a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	08da      	lsrs	r2, r3, #3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	3208      	adds	r2, #8
 800334a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800334e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	f003 0307 	and.w	r3, r3, #7
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	220f      	movs	r2, #15
 800335a:	fa02 f303 	lsl.w	r3, r2, r3
 800335e:	43db      	mvns	r3, r3
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	4013      	ands	r3, r2
 8003364:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	691a      	ldr	r2, [r3, #16]
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	f003 0307 	and.w	r3, r3, #7
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	fa02 f303 	lsl.w	r3, r2, r3
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	4313      	orrs	r3, r2
 800337a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	08da      	lsrs	r2, r3, #3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	3208      	adds	r2, #8
 8003384:	69b9      	ldr	r1, [r7, #24]
 8003386:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	2203      	movs	r2, #3
 8003396:	fa02 f303 	lsl.w	r3, r2, r3
 800339a:	43db      	mvns	r3, r3
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	4013      	ands	r3, r2
 80033a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f003 0203 	and.w	r2, r3, #3
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	fa02 f303 	lsl.w	r3, r2, r3
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	69ba      	ldr	r2, [r7, #24]
 80033bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f000 80d8 	beq.w	800357c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033cc:	4b2c      	ldr	r3, [pc, #176]	; (8003480 <HAL_GPIO_Init+0x22c>)
 80033ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80033d2:	4a2b      	ldr	r2, [pc, #172]	; (8003480 <HAL_GPIO_Init+0x22c>)
 80033d4:	f043 0302 	orr.w	r3, r3, #2
 80033d8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80033dc:	4b28      	ldr	r3, [pc, #160]	; (8003480 <HAL_GPIO_Init+0x22c>)
 80033de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	60fb      	str	r3, [r7, #12]
 80033e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033ea:	4a26      	ldr	r2, [pc, #152]	; (8003484 <HAL_GPIO_Init+0x230>)
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	089b      	lsrs	r3, r3, #2
 80033f0:	3302      	adds	r3, #2
 80033f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	f003 0303 	and.w	r3, r3, #3
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	220f      	movs	r2, #15
 8003402:	fa02 f303 	lsl.w	r3, r2, r3
 8003406:	43db      	mvns	r3, r3
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	4013      	ands	r3, r2
 800340c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a1d      	ldr	r2, [pc, #116]	; (8003488 <HAL_GPIO_Init+0x234>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d04a      	beq.n	80034ac <HAL_GPIO_Init+0x258>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a1c      	ldr	r2, [pc, #112]	; (800348c <HAL_GPIO_Init+0x238>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d02b      	beq.n	8003476 <HAL_GPIO_Init+0x222>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a1b      	ldr	r2, [pc, #108]	; (8003490 <HAL_GPIO_Init+0x23c>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d025      	beq.n	8003472 <HAL_GPIO_Init+0x21e>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a1a      	ldr	r2, [pc, #104]	; (8003494 <HAL_GPIO_Init+0x240>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d01f      	beq.n	800346e <HAL_GPIO_Init+0x21a>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a19      	ldr	r2, [pc, #100]	; (8003498 <HAL_GPIO_Init+0x244>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d019      	beq.n	800346a <HAL_GPIO_Init+0x216>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a18      	ldr	r2, [pc, #96]	; (800349c <HAL_GPIO_Init+0x248>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d013      	beq.n	8003466 <HAL_GPIO_Init+0x212>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a17      	ldr	r2, [pc, #92]	; (80034a0 <HAL_GPIO_Init+0x24c>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d00d      	beq.n	8003462 <HAL_GPIO_Init+0x20e>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a16      	ldr	r2, [pc, #88]	; (80034a4 <HAL_GPIO_Init+0x250>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d007      	beq.n	800345e <HAL_GPIO_Init+0x20a>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a15      	ldr	r2, [pc, #84]	; (80034a8 <HAL_GPIO_Init+0x254>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d101      	bne.n	800345a <HAL_GPIO_Init+0x206>
 8003456:	2309      	movs	r3, #9
 8003458:	e029      	b.n	80034ae <HAL_GPIO_Init+0x25a>
 800345a:	230a      	movs	r3, #10
 800345c:	e027      	b.n	80034ae <HAL_GPIO_Init+0x25a>
 800345e:	2307      	movs	r3, #7
 8003460:	e025      	b.n	80034ae <HAL_GPIO_Init+0x25a>
 8003462:	2306      	movs	r3, #6
 8003464:	e023      	b.n	80034ae <HAL_GPIO_Init+0x25a>
 8003466:	2305      	movs	r3, #5
 8003468:	e021      	b.n	80034ae <HAL_GPIO_Init+0x25a>
 800346a:	2304      	movs	r3, #4
 800346c:	e01f      	b.n	80034ae <HAL_GPIO_Init+0x25a>
 800346e:	2303      	movs	r3, #3
 8003470:	e01d      	b.n	80034ae <HAL_GPIO_Init+0x25a>
 8003472:	2302      	movs	r3, #2
 8003474:	e01b      	b.n	80034ae <HAL_GPIO_Init+0x25a>
 8003476:	2301      	movs	r3, #1
 8003478:	e019      	b.n	80034ae <HAL_GPIO_Init+0x25a>
 800347a:	bf00      	nop
 800347c:	58000080 	.word	0x58000080
 8003480:	58024400 	.word	0x58024400
 8003484:	58000400 	.word	0x58000400
 8003488:	58020000 	.word	0x58020000
 800348c:	58020400 	.word	0x58020400
 8003490:	58020800 	.word	0x58020800
 8003494:	58020c00 	.word	0x58020c00
 8003498:	58021000 	.word	0x58021000
 800349c:	58021400 	.word	0x58021400
 80034a0:	58021800 	.word	0x58021800
 80034a4:	58021c00 	.word	0x58021c00
 80034a8:	58022400 	.word	0x58022400
 80034ac:	2300      	movs	r3, #0
 80034ae:	69fa      	ldr	r2, [r7, #28]
 80034b0:	f002 0203 	and.w	r2, r2, #3
 80034b4:	0092      	lsls	r2, r2, #2
 80034b6:	4093      	lsls	r3, r2
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034be:	4938      	ldr	r1, [pc, #224]	; (80035a0 <HAL_GPIO_Init+0x34c>)
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	089b      	lsrs	r3, r3, #2
 80034c4:	3302      	adds	r3, #2
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	43db      	mvns	r3, r3
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	4013      	ands	r3, r2
 80034dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d003      	beq.n	80034f2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80034f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80034fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	43db      	mvns	r3, r3
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	4013      	ands	r3, r2
 800350a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d003      	beq.n	8003520 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	4313      	orrs	r3, r2
 800351e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003520:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	43db      	mvns	r3, r3
 8003532:	69ba      	ldr	r2, [r7, #24]
 8003534:	4013      	ands	r3, r2
 8003536:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d003      	beq.n	800354c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	4313      	orrs	r3, r2
 800354a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	43db      	mvns	r3, r3
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	4013      	ands	r3, r2
 8003560:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d003      	beq.n	8003576 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800356e:	69ba      	ldr	r2, [r7, #24]
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	4313      	orrs	r3, r2
 8003574:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	3301      	adds	r3, #1
 8003580:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	fa22 f303 	lsr.w	r3, r2, r3
 800358c:	2b00      	cmp	r3, #0
 800358e:	f47f ae6b 	bne.w	8003268 <HAL_GPIO_Init+0x14>
  }
}
 8003592:	bf00      	nop
 8003594:	bf00      	nop
 8003596:	3724      	adds	r7, #36	; 0x24
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	58000400 	.word	0x58000400

080035a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	460b      	mov	r3, r1
 80035ae:	807b      	strh	r3, [r7, #2]
 80035b0:	4613      	mov	r3, r2
 80035b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035b4:	787b      	ldrb	r3, [r7, #1]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035ba:	887a      	ldrh	r2, [r7, #2]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80035c0:	e003      	b.n	80035ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80035c2:	887b      	ldrh	r3, [r7, #2]
 80035c4:	041a      	lsls	r2, r3, #16
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	619a      	str	r2, [r3, #24]
}
 80035ca:	bf00      	nop
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
	...

080035d8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80035e0:	4b19      	ldr	r3, [pc, #100]	; (8003648 <HAL_PWREx_ConfigSupply+0x70>)
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	f003 0304 	and.w	r3, r3, #4
 80035e8:	2b04      	cmp	r3, #4
 80035ea:	d00a      	beq.n	8003602 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80035ec:	4b16      	ldr	r3, [pc, #88]	; (8003648 <HAL_PWREx_ConfigSupply+0x70>)
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	f003 0307 	and.w	r3, r3, #7
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d001      	beq.n	80035fe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e01f      	b.n	800363e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80035fe:	2300      	movs	r3, #0
 8003600:	e01d      	b.n	800363e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003602:	4b11      	ldr	r3, [pc, #68]	; (8003648 <HAL_PWREx_ConfigSupply+0x70>)
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	f023 0207 	bic.w	r2, r3, #7
 800360a:	490f      	ldr	r1, [pc, #60]	; (8003648 <HAL_PWREx_ConfigSupply+0x70>)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4313      	orrs	r3, r2
 8003610:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003612:	f7fe fb33 	bl	8001c7c <HAL_GetTick>
 8003616:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003618:	e009      	b.n	800362e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800361a:	f7fe fb2f 	bl	8001c7c <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003628:	d901      	bls.n	800362e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e007      	b.n	800363e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800362e:	4b06      	ldr	r3, [pc, #24]	; (8003648 <HAL_PWREx_ConfigSupply+0x70>)
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003636:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800363a:	d1ee      	bne.n	800361a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	58024800 	.word	0x58024800

0800364c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b08c      	sub	sp, #48	; 0x30
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e3c8      	b.n	8003df0 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b00      	cmp	r3, #0
 8003668:	f000 8087 	beq.w	800377a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800366c:	4b88      	ldr	r3, [pc, #544]	; (8003890 <HAL_RCC_OscConfig+0x244>)
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003674:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003676:	4b86      	ldr	r3, [pc, #536]	; (8003890 <HAL_RCC_OscConfig+0x244>)
 8003678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800367c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800367e:	2b10      	cmp	r3, #16
 8003680:	d007      	beq.n	8003692 <HAL_RCC_OscConfig+0x46>
 8003682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003684:	2b18      	cmp	r3, #24
 8003686:	d110      	bne.n	80036aa <HAL_RCC_OscConfig+0x5e>
 8003688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800368a:	f003 0303 	and.w	r3, r3, #3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d10b      	bne.n	80036aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003692:	4b7f      	ldr	r3, [pc, #508]	; (8003890 <HAL_RCC_OscConfig+0x244>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d06c      	beq.n	8003778 <HAL_RCC_OscConfig+0x12c>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d168      	bne.n	8003778 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e3a2      	b.n	8003df0 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036b2:	d106      	bne.n	80036c2 <HAL_RCC_OscConfig+0x76>
 80036b4:	4b76      	ldr	r3, [pc, #472]	; (8003890 <HAL_RCC_OscConfig+0x244>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a75      	ldr	r2, [pc, #468]	; (8003890 <HAL_RCC_OscConfig+0x244>)
 80036ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036be:	6013      	str	r3, [r2, #0]
 80036c0:	e02e      	b.n	8003720 <HAL_RCC_OscConfig+0xd4>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10c      	bne.n	80036e4 <HAL_RCC_OscConfig+0x98>
 80036ca:	4b71      	ldr	r3, [pc, #452]	; (8003890 <HAL_RCC_OscConfig+0x244>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a70      	ldr	r2, [pc, #448]	; (8003890 <HAL_RCC_OscConfig+0x244>)
 80036d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036d4:	6013      	str	r3, [r2, #0]
 80036d6:	4b6e      	ldr	r3, [pc, #440]	; (8003890 <HAL_RCC_OscConfig+0x244>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a6d      	ldr	r2, [pc, #436]	; (8003890 <HAL_RCC_OscConfig+0x244>)
 80036dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036e0:	6013      	str	r3, [r2, #0]
 80036e2:	e01d      	b.n	8003720 <HAL_RCC_OscConfig+0xd4>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036ec:	d10c      	bne.n	8003708 <HAL_RCC_OscConfig+0xbc>
 80036ee:	4b68      	ldr	r3, [pc, #416]	; (8003890 <HAL_RCC_OscConfig+0x244>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a67      	ldr	r2, [pc, #412]	; (8003890 <HAL_RCC_OscConfig+0x244>)
 80036f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036f8:	6013      	str	r3, [r2, #0]
 80036fa:	4b65      	ldr	r3, [pc, #404]	; (8003890 <HAL_RCC_OscConfig+0x244>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a64      	ldr	r2, [pc, #400]	; (8003890 <HAL_RCC_OscConfig+0x244>)
 8003700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003704:	6013      	str	r3, [r2, #0]
 8003706:	e00b      	b.n	8003720 <HAL_RCC_OscConfig+0xd4>
 8003708:	4b61      	ldr	r3, [pc, #388]	; (8003890 <HAL_RCC_OscConfig+0x244>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a60      	ldr	r2, [pc, #384]	; (8003890 <HAL_RCC_OscConfig+0x244>)
 800370e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003712:	6013      	str	r3, [r2, #0]
 8003714:	4b5e      	ldr	r3, [pc, #376]	; (8003890 <HAL_RCC_OscConfig+0x244>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a5d      	ldr	r2, [pc, #372]	; (8003890 <HAL_RCC_OscConfig+0x244>)
 800371a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800371e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d013      	beq.n	8003750 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003728:	f7fe faa8 	bl	8001c7c <HAL_GetTick>
 800372c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800372e:	e008      	b.n	8003742 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003730:	f7fe faa4 	bl	8001c7c <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b64      	cmp	r3, #100	; 0x64
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e356      	b.n	8003df0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003742:	4b53      	ldr	r3, [pc, #332]	; (8003890 <HAL_RCC_OscConfig+0x244>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d0f0      	beq.n	8003730 <HAL_RCC_OscConfig+0xe4>
 800374e:	e014      	b.n	800377a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003750:	f7fe fa94 	bl	8001c7c <HAL_GetTick>
 8003754:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003758:	f7fe fa90 	bl	8001c7c <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b64      	cmp	r3, #100	; 0x64
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e342      	b.n	8003df0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800376a:	4b49      	ldr	r3, [pc, #292]	; (8003890 <HAL_RCC_OscConfig+0x244>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1f0      	bne.n	8003758 <HAL_RCC_OscConfig+0x10c>
 8003776:	e000      	b.n	800377a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003778:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	f000 808c 	beq.w	80038a0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003788:	4b41      	ldr	r3, [pc, #260]	; (8003890 <HAL_RCC_OscConfig+0x244>)
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003790:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003792:	4b3f      	ldr	r3, [pc, #252]	; (8003890 <HAL_RCC_OscConfig+0x244>)
 8003794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003796:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003798:	6a3b      	ldr	r3, [r7, #32]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d007      	beq.n	80037ae <HAL_RCC_OscConfig+0x162>
 800379e:	6a3b      	ldr	r3, [r7, #32]
 80037a0:	2b18      	cmp	r3, #24
 80037a2:	d137      	bne.n	8003814 <HAL_RCC_OscConfig+0x1c8>
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	f003 0303 	and.w	r3, r3, #3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d132      	bne.n	8003814 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037ae:	4b38      	ldr	r3, [pc, #224]	; (8003890 <HAL_RCC_OscConfig+0x244>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0304 	and.w	r3, r3, #4
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d005      	beq.n	80037c6 <HAL_RCC_OscConfig+0x17a>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e314      	b.n	8003df0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80037c6:	4b32      	ldr	r3, [pc, #200]	; (8003890 <HAL_RCC_OscConfig+0x244>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f023 0219 	bic.w	r2, r3, #25
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	492f      	ldr	r1, [pc, #188]	; (8003890 <HAL_RCC_OscConfig+0x244>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d8:	f7fe fa50 	bl	8001c7c <HAL_GetTick>
 80037dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037de:	e008      	b.n	80037f2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037e0:	f7fe fa4c 	bl	8001c7c <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e2fe      	b.n	8003df0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037f2:	4b27      	ldr	r3, [pc, #156]	; (8003890 <HAL_RCC_OscConfig+0x244>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0304 	and.w	r3, r3, #4
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d0f0      	beq.n	80037e0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037fe:	4b24      	ldr	r3, [pc, #144]	; (8003890 <HAL_RCC_OscConfig+0x244>)
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	061b      	lsls	r3, r3, #24
 800380c:	4920      	ldr	r1, [pc, #128]	; (8003890 <HAL_RCC_OscConfig+0x244>)
 800380e:	4313      	orrs	r3, r2
 8003810:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003812:	e045      	b.n	80038a0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d026      	beq.n	800386a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800381c:	4b1c      	ldr	r3, [pc, #112]	; (8003890 <HAL_RCC_OscConfig+0x244>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f023 0219 	bic.w	r2, r3, #25
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	4919      	ldr	r1, [pc, #100]	; (8003890 <HAL_RCC_OscConfig+0x244>)
 800382a:	4313      	orrs	r3, r2
 800382c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800382e:	f7fe fa25 	bl	8001c7c <HAL_GetTick>
 8003832:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003834:	e008      	b.n	8003848 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003836:	f7fe fa21 	bl	8001c7c <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	2b02      	cmp	r3, #2
 8003842:	d901      	bls.n	8003848 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e2d3      	b.n	8003df0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003848:	4b11      	ldr	r3, [pc, #68]	; (8003890 <HAL_RCC_OscConfig+0x244>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0304 	and.w	r3, r3, #4
 8003850:	2b00      	cmp	r3, #0
 8003852:	d0f0      	beq.n	8003836 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003854:	4b0e      	ldr	r3, [pc, #56]	; (8003890 <HAL_RCC_OscConfig+0x244>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	061b      	lsls	r3, r3, #24
 8003862:	490b      	ldr	r1, [pc, #44]	; (8003890 <HAL_RCC_OscConfig+0x244>)
 8003864:	4313      	orrs	r3, r2
 8003866:	604b      	str	r3, [r1, #4]
 8003868:	e01a      	b.n	80038a0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800386a:	4b09      	ldr	r3, [pc, #36]	; (8003890 <HAL_RCC_OscConfig+0x244>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a08      	ldr	r2, [pc, #32]	; (8003890 <HAL_RCC_OscConfig+0x244>)
 8003870:	f023 0301 	bic.w	r3, r3, #1
 8003874:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003876:	f7fe fa01 	bl	8001c7c <HAL_GetTick>
 800387a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800387c:	e00a      	b.n	8003894 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800387e:	f7fe f9fd 	bl	8001c7c <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	2b02      	cmp	r3, #2
 800388a:	d903      	bls.n	8003894 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e2af      	b.n	8003df0 <HAL_RCC_OscConfig+0x7a4>
 8003890:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003894:	4b96      	ldr	r3, [pc, #600]	; (8003af0 <HAL_RCC_OscConfig+0x4a4>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0304 	and.w	r3, r3, #4
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1ee      	bne.n	800387e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0310 	and.w	r3, r3, #16
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d06a      	beq.n	8003982 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038ac:	4b90      	ldr	r3, [pc, #576]	; (8003af0 <HAL_RCC_OscConfig+0x4a4>)
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038b4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80038b6:	4b8e      	ldr	r3, [pc, #568]	; (8003af0 <HAL_RCC_OscConfig+0x4a4>)
 80038b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ba:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	2b08      	cmp	r3, #8
 80038c0:	d007      	beq.n	80038d2 <HAL_RCC_OscConfig+0x286>
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	2b18      	cmp	r3, #24
 80038c6:	d11b      	bne.n	8003900 <HAL_RCC_OscConfig+0x2b4>
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	f003 0303 	and.w	r3, r3, #3
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d116      	bne.n	8003900 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80038d2:	4b87      	ldr	r3, [pc, #540]	; (8003af0 <HAL_RCC_OscConfig+0x4a4>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d005      	beq.n	80038ea <HAL_RCC_OscConfig+0x29e>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	2b80      	cmp	r3, #128	; 0x80
 80038e4:	d001      	beq.n	80038ea <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e282      	b.n	8003df0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80038ea:	4b81      	ldr	r3, [pc, #516]	; (8003af0 <HAL_RCC_OscConfig+0x4a4>)
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	061b      	lsls	r3, r3, #24
 80038f8:	497d      	ldr	r1, [pc, #500]	; (8003af0 <HAL_RCC_OscConfig+0x4a4>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80038fe:	e040      	b.n	8003982 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	69db      	ldr	r3, [r3, #28]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d023      	beq.n	8003950 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003908:	4b79      	ldr	r3, [pc, #484]	; (8003af0 <HAL_RCC_OscConfig+0x4a4>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a78      	ldr	r2, [pc, #480]	; (8003af0 <HAL_RCC_OscConfig+0x4a4>)
 800390e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003912:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003914:	f7fe f9b2 	bl	8001c7c <HAL_GetTick>
 8003918:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800391c:	f7fe f9ae 	bl	8001c7c <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e260      	b.n	8003df0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800392e:	4b70      	ldr	r3, [pc, #448]	; (8003af0 <HAL_RCC_OscConfig+0x4a4>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003936:	2b00      	cmp	r3, #0
 8003938:	d0f0      	beq.n	800391c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800393a:	4b6d      	ldr	r3, [pc, #436]	; (8003af0 <HAL_RCC_OscConfig+0x4a4>)
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a1b      	ldr	r3, [r3, #32]
 8003946:	061b      	lsls	r3, r3, #24
 8003948:	4969      	ldr	r1, [pc, #420]	; (8003af0 <HAL_RCC_OscConfig+0x4a4>)
 800394a:	4313      	orrs	r3, r2
 800394c:	60cb      	str	r3, [r1, #12]
 800394e:	e018      	b.n	8003982 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003950:	4b67      	ldr	r3, [pc, #412]	; (8003af0 <HAL_RCC_OscConfig+0x4a4>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a66      	ldr	r2, [pc, #408]	; (8003af0 <HAL_RCC_OscConfig+0x4a4>)
 8003956:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800395a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800395c:	f7fe f98e 	bl	8001c7c <HAL_GetTick>
 8003960:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003962:	e008      	b.n	8003976 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003964:	f7fe f98a 	bl	8001c7c <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	2b02      	cmp	r3, #2
 8003970:	d901      	bls.n	8003976 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e23c      	b.n	8003df0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003976:	4b5e      	ldr	r3, [pc, #376]	; (8003af0 <HAL_RCC_OscConfig+0x4a4>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800397e:	2b00      	cmp	r3, #0
 8003980:	d1f0      	bne.n	8003964 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0308 	and.w	r3, r3, #8
 800398a:	2b00      	cmp	r3, #0
 800398c:	d036      	beq.n	80039fc <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d019      	beq.n	80039ca <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003996:	4b56      	ldr	r3, [pc, #344]	; (8003af0 <HAL_RCC_OscConfig+0x4a4>)
 8003998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800399a:	4a55      	ldr	r2, [pc, #340]	; (8003af0 <HAL_RCC_OscConfig+0x4a4>)
 800399c:	f043 0301 	orr.w	r3, r3, #1
 80039a0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a2:	f7fe f96b 	bl	8001c7c <HAL_GetTick>
 80039a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80039a8:	e008      	b.n	80039bc <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039aa:	f7fe f967 	bl	8001c7c <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d901      	bls.n	80039bc <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e219      	b.n	8003df0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80039bc:	4b4c      	ldr	r3, [pc, #304]	; (8003af0 <HAL_RCC_OscConfig+0x4a4>)
 80039be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d0f0      	beq.n	80039aa <HAL_RCC_OscConfig+0x35e>
 80039c8:	e018      	b.n	80039fc <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039ca:	4b49      	ldr	r3, [pc, #292]	; (8003af0 <HAL_RCC_OscConfig+0x4a4>)
 80039cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039ce:	4a48      	ldr	r2, [pc, #288]	; (8003af0 <HAL_RCC_OscConfig+0x4a4>)
 80039d0:	f023 0301 	bic.w	r3, r3, #1
 80039d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d6:	f7fe f951 	bl	8001c7c <HAL_GetTick>
 80039da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80039dc:	e008      	b.n	80039f0 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039de:	f7fe f94d 	bl	8001c7c <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d901      	bls.n	80039f0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e1ff      	b.n	8003df0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80039f0:	4b3f      	ldr	r3, [pc, #252]	; (8003af0 <HAL_RCC_OscConfig+0x4a4>)
 80039f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039f4:	f003 0302 	and.w	r3, r3, #2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1f0      	bne.n	80039de <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0320 	and.w	r3, r3, #32
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d036      	beq.n	8003a76 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d019      	beq.n	8003a44 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a10:	4b37      	ldr	r3, [pc, #220]	; (8003af0 <HAL_RCC_OscConfig+0x4a4>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a36      	ldr	r2, [pc, #216]	; (8003af0 <HAL_RCC_OscConfig+0x4a4>)
 8003a16:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a1a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003a1c:	f7fe f92e 	bl	8001c7c <HAL_GetTick>
 8003a20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a22:	e008      	b.n	8003a36 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a24:	f7fe f92a 	bl	8001c7c <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e1dc      	b.n	8003df0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a36:	4b2e      	ldr	r3, [pc, #184]	; (8003af0 <HAL_RCC_OscConfig+0x4a4>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d0f0      	beq.n	8003a24 <HAL_RCC_OscConfig+0x3d8>
 8003a42:	e018      	b.n	8003a76 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a44:	4b2a      	ldr	r3, [pc, #168]	; (8003af0 <HAL_RCC_OscConfig+0x4a4>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a29      	ldr	r2, [pc, #164]	; (8003af0 <HAL_RCC_OscConfig+0x4a4>)
 8003a4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a4e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003a50:	f7fe f914 	bl	8001c7c <HAL_GetTick>
 8003a54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003a56:	e008      	b.n	8003a6a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a58:	f7fe f910 	bl	8001c7c <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e1c2      	b.n	8003df0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003a6a:	4b21      	ldr	r3, [pc, #132]	; (8003af0 <HAL_RCC_OscConfig+0x4a4>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1f0      	bne.n	8003a58 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0304 	and.w	r3, r3, #4
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f000 8086 	beq.w	8003b90 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003a84:	4b1b      	ldr	r3, [pc, #108]	; (8003af4 <HAL_RCC_OscConfig+0x4a8>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a1a      	ldr	r2, [pc, #104]	; (8003af4 <HAL_RCC_OscConfig+0x4a8>)
 8003a8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a8e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a90:	f7fe f8f4 	bl	8001c7c <HAL_GetTick>
 8003a94:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a98:	f7fe f8f0 	bl	8001c7c <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b64      	cmp	r3, #100	; 0x64
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e1a2      	b.n	8003df0 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003aaa:	4b12      	ldr	r3, [pc, #72]	; (8003af4 <HAL_RCC_OscConfig+0x4a8>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d0f0      	beq.n	8003a98 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d106      	bne.n	8003acc <HAL_RCC_OscConfig+0x480>
 8003abe:	4b0c      	ldr	r3, [pc, #48]	; (8003af0 <HAL_RCC_OscConfig+0x4a4>)
 8003ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac2:	4a0b      	ldr	r2, [pc, #44]	; (8003af0 <HAL_RCC_OscConfig+0x4a4>)
 8003ac4:	f043 0301 	orr.w	r3, r3, #1
 8003ac8:	6713      	str	r3, [r2, #112]	; 0x70
 8003aca:	e032      	b.n	8003b32 <HAL_RCC_OscConfig+0x4e6>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d111      	bne.n	8003af8 <HAL_RCC_OscConfig+0x4ac>
 8003ad4:	4b06      	ldr	r3, [pc, #24]	; (8003af0 <HAL_RCC_OscConfig+0x4a4>)
 8003ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad8:	4a05      	ldr	r2, [pc, #20]	; (8003af0 <HAL_RCC_OscConfig+0x4a4>)
 8003ada:	f023 0301 	bic.w	r3, r3, #1
 8003ade:	6713      	str	r3, [r2, #112]	; 0x70
 8003ae0:	4b03      	ldr	r3, [pc, #12]	; (8003af0 <HAL_RCC_OscConfig+0x4a4>)
 8003ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae4:	4a02      	ldr	r2, [pc, #8]	; (8003af0 <HAL_RCC_OscConfig+0x4a4>)
 8003ae6:	f023 0304 	bic.w	r3, r3, #4
 8003aea:	6713      	str	r3, [r2, #112]	; 0x70
 8003aec:	e021      	b.n	8003b32 <HAL_RCC_OscConfig+0x4e6>
 8003aee:	bf00      	nop
 8003af0:	58024400 	.word	0x58024400
 8003af4:	58024800 	.word	0x58024800
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	2b05      	cmp	r3, #5
 8003afe:	d10c      	bne.n	8003b1a <HAL_RCC_OscConfig+0x4ce>
 8003b00:	4b83      	ldr	r3, [pc, #524]	; (8003d10 <HAL_RCC_OscConfig+0x6c4>)
 8003b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b04:	4a82      	ldr	r2, [pc, #520]	; (8003d10 <HAL_RCC_OscConfig+0x6c4>)
 8003b06:	f043 0304 	orr.w	r3, r3, #4
 8003b0a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b0c:	4b80      	ldr	r3, [pc, #512]	; (8003d10 <HAL_RCC_OscConfig+0x6c4>)
 8003b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b10:	4a7f      	ldr	r2, [pc, #508]	; (8003d10 <HAL_RCC_OscConfig+0x6c4>)
 8003b12:	f043 0301 	orr.w	r3, r3, #1
 8003b16:	6713      	str	r3, [r2, #112]	; 0x70
 8003b18:	e00b      	b.n	8003b32 <HAL_RCC_OscConfig+0x4e6>
 8003b1a:	4b7d      	ldr	r3, [pc, #500]	; (8003d10 <HAL_RCC_OscConfig+0x6c4>)
 8003b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b1e:	4a7c      	ldr	r2, [pc, #496]	; (8003d10 <HAL_RCC_OscConfig+0x6c4>)
 8003b20:	f023 0301 	bic.w	r3, r3, #1
 8003b24:	6713      	str	r3, [r2, #112]	; 0x70
 8003b26:	4b7a      	ldr	r3, [pc, #488]	; (8003d10 <HAL_RCC_OscConfig+0x6c4>)
 8003b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b2a:	4a79      	ldr	r2, [pc, #484]	; (8003d10 <HAL_RCC_OscConfig+0x6c4>)
 8003b2c:	f023 0304 	bic.w	r3, r3, #4
 8003b30:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d015      	beq.n	8003b66 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b3a:	f7fe f89f 	bl	8001c7c <HAL_GetTick>
 8003b3e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b40:	e00a      	b.n	8003b58 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b42:	f7fe f89b 	bl	8001c7c <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d901      	bls.n	8003b58 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e14b      	b.n	8003df0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b58:	4b6d      	ldr	r3, [pc, #436]	; (8003d10 <HAL_RCC_OscConfig+0x6c4>)
 8003b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5c:	f003 0302 	and.w	r3, r3, #2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d0ee      	beq.n	8003b42 <HAL_RCC_OscConfig+0x4f6>
 8003b64:	e014      	b.n	8003b90 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b66:	f7fe f889 	bl	8001c7c <HAL_GetTick>
 8003b6a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b6c:	e00a      	b.n	8003b84 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b6e:	f7fe f885 	bl	8001c7c <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d901      	bls.n	8003b84 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e135      	b.n	8003df0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b84:	4b62      	ldr	r3, [pc, #392]	; (8003d10 <HAL_RCC_OscConfig+0x6c4>)
 8003b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b88:	f003 0302 	and.w	r3, r3, #2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1ee      	bne.n	8003b6e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f000 812a 	beq.w	8003dee <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003b9a:	4b5d      	ldr	r3, [pc, #372]	; (8003d10 <HAL_RCC_OscConfig+0x6c4>)
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ba2:	2b18      	cmp	r3, #24
 8003ba4:	f000 80ba 	beq.w	8003d1c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	f040 8095 	bne.w	8003cdc <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bb2:	4b57      	ldr	r3, [pc, #348]	; (8003d10 <HAL_RCC_OscConfig+0x6c4>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a56      	ldr	r2, [pc, #344]	; (8003d10 <HAL_RCC_OscConfig+0x6c4>)
 8003bb8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bbe:	f7fe f85d 	bl	8001c7c <HAL_GetTick>
 8003bc2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003bc4:	e008      	b.n	8003bd8 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bc6:	f7fe f859 	bl	8001c7c <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d901      	bls.n	8003bd8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e10b      	b.n	8003df0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003bd8:	4b4d      	ldr	r3, [pc, #308]	; (8003d10 <HAL_RCC_OscConfig+0x6c4>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1f0      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003be4:	4b4a      	ldr	r3, [pc, #296]	; (8003d10 <HAL_RCC_OscConfig+0x6c4>)
 8003be6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003be8:	4b4a      	ldr	r3, [pc, #296]	; (8003d14 <HAL_RCC_OscConfig+0x6c8>)
 8003bea:	4013      	ands	r3, r2
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003bf4:	0112      	lsls	r2, r2, #4
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	4945      	ldr	r1, [pc, #276]	; (8003d10 <HAL_RCC_OscConfig+0x6c4>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	628b      	str	r3, [r1, #40]	; 0x28
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c02:	3b01      	subs	r3, #1
 8003c04:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	025b      	lsls	r3, r3, #9
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	431a      	orrs	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	041b      	lsls	r3, r3, #16
 8003c1c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003c20:	431a      	orrs	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c26:	3b01      	subs	r3, #1
 8003c28:	061b      	lsls	r3, r3, #24
 8003c2a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003c2e:	4938      	ldr	r1, [pc, #224]	; (8003d10 <HAL_RCC_OscConfig+0x6c4>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003c34:	4b36      	ldr	r3, [pc, #216]	; (8003d10 <HAL_RCC_OscConfig+0x6c4>)
 8003c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c38:	4a35      	ldr	r2, [pc, #212]	; (8003d10 <HAL_RCC_OscConfig+0x6c4>)
 8003c3a:	f023 0301 	bic.w	r3, r3, #1
 8003c3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003c40:	4b33      	ldr	r3, [pc, #204]	; (8003d10 <HAL_RCC_OscConfig+0x6c4>)
 8003c42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c44:	4b34      	ldr	r3, [pc, #208]	; (8003d18 <HAL_RCC_OscConfig+0x6cc>)
 8003c46:	4013      	ands	r3, r2
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003c4c:	00d2      	lsls	r2, r2, #3
 8003c4e:	4930      	ldr	r1, [pc, #192]	; (8003d10 <HAL_RCC_OscConfig+0x6c4>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003c54:	4b2e      	ldr	r3, [pc, #184]	; (8003d10 <HAL_RCC_OscConfig+0x6c4>)
 8003c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c58:	f023 020c 	bic.w	r2, r3, #12
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c60:	492b      	ldr	r1, [pc, #172]	; (8003d10 <HAL_RCC_OscConfig+0x6c4>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003c66:	4b2a      	ldr	r3, [pc, #168]	; (8003d10 <HAL_RCC_OscConfig+0x6c4>)
 8003c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6a:	f023 0202 	bic.w	r2, r3, #2
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c72:	4927      	ldr	r1, [pc, #156]	; (8003d10 <HAL_RCC_OscConfig+0x6c4>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003c78:	4b25      	ldr	r3, [pc, #148]	; (8003d10 <HAL_RCC_OscConfig+0x6c4>)
 8003c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7c:	4a24      	ldr	r2, [pc, #144]	; (8003d10 <HAL_RCC_OscConfig+0x6c4>)
 8003c7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c84:	4b22      	ldr	r3, [pc, #136]	; (8003d10 <HAL_RCC_OscConfig+0x6c4>)
 8003c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c88:	4a21      	ldr	r2, [pc, #132]	; (8003d10 <HAL_RCC_OscConfig+0x6c4>)
 8003c8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003c90:	4b1f      	ldr	r3, [pc, #124]	; (8003d10 <HAL_RCC_OscConfig+0x6c4>)
 8003c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c94:	4a1e      	ldr	r2, [pc, #120]	; (8003d10 <HAL_RCC_OscConfig+0x6c4>)
 8003c96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003c9c:	4b1c      	ldr	r3, [pc, #112]	; (8003d10 <HAL_RCC_OscConfig+0x6c4>)
 8003c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca0:	4a1b      	ldr	r2, [pc, #108]	; (8003d10 <HAL_RCC_OscConfig+0x6c4>)
 8003ca2:	f043 0301 	orr.w	r3, r3, #1
 8003ca6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ca8:	4b19      	ldr	r3, [pc, #100]	; (8003d10 <HAL_RCC_OscConfig+0x6c4>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a18      	ldr	r2, [pc, #96]	; (8003d10 <HAL_RCC_OscConfig+0x6c4>)
 8003cae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb4:	f7fd ffe2 	bl	8001c7c <HAL_GetTick>
 8003cb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003cba:	e008      	b.n	8003cce <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cbc:	f7fd ffde 	bl	8001c7c <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e090      	b.n	8003df0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003cce:	4b10      	ldr	r3, [pc, #64]	; (8003d10 <HAL_RCC_OscConfig+0x6c4>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d0f0      	beq.n	8003cbc <HAL_RCC_OscConfig+0x670>
 8003cda:	e088      	b.n	8003dee <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cdc:	4b0c      	ldr	r3, [pc, #48]	; (8003d10 <HAL_RCC_OscConfig+0x6c4>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a0b      	ldr	r2, [pc, #44]	; (8003d10 <HAL_RCC_OscConfig+0x6c4>)
 8003ce2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ce6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce8:	f7fd ffc8 	bl	8001c7c <HAL_GetTick>
 8003cec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003cee:	e008      	b.n	8003d02 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cf0:	f7fd ffc4 	bl	8001c7c <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e076      	b.n	8003df0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d02:	4b03      	ldr	r3, [pc, #12]	; (8003d10 <HAL_RCC_OscConfig+0x6c4>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1f0      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x6a4>
 8003d0e:	e06e      	b.n	8003dee <HAL_RCC_OscConfig+0x7a2>
 8003d10:	58024400 	.word	0x58024400
 8003d14:	fffffc0c 	.word	0xfffffc0c
 8003d18:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003d1c:	4b36      	ldr	r3, [pc, #216]	; (8003df8 <HAL_RCC_OscConfig+0x7ac>)
 8003d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d20:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003d22:	4b35      	ldr	r3, [pc, #212]	; (8003df8 <HAL_RCC_OscConfig+0x7ac>)
 8003d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d26:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d031      	beq.n	8003d94 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	f003 0203 	and.w	r2, r3, #3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d12a      	bne.n	8003d94 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	091b      	lsrs	r3, r3, #4
 8003d42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d122      	bne.n	8003d94 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d58:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d11a      	bne.n	8003d94 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	0a5b      	lsrs	r3, r3, #9
 8003d62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d6a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d111      	bne.n	8003d94 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	0c1b      	lsrs	r3, r3, #16
 8003d74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d108      	bne.n	8003d94 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	0e1b      	lsrs	r3, r3, #24
 8003d86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d8e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d001      	beq.n	8003d98 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e02b      	b.n	8003df0 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003d98:	4b17      	ldr	r3, [pc, #92]	; (8003df8 <HAL_RCC_OscConfig+0x7ac>)
 8003d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d9c:	08db      	lsrs	r3, r3, #3
 8003d9e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003da2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d01f      	beq.n	8003dee <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003dae:	4b12      	ldr	r3, [pc, #72]	; (8003df8 <HAL_RCC_OscConfig+0x7ac>)
 8003db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db2:	4a11      	ldr	r2, [pc, #68]	; (8003df8 <HAL_RCC_OscConfig+0x7ac>)
 8003db4:	f023 0301 	bic.w	r3, r3, #1
 8003db8:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003dba:	f7fd ff5f 	bl	8001c7c <HAL_GetTick>
 8003dbe:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003dc0:	bf00      	nop
 8003dc2:	f7fd ff5b 	bl	8001c7c <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d0f9      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003dce:	4b0a      	ldr	r3, [pc, #40]	; (8003df8 <HAL_RCC_OscConfig+0x7ac>)
 8003dd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dd2:	4b0a      	ldr	r3, [pc, #40]	; (8003dfc <HAL_RCC_OscConfig+0x7b0>)
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003dda:	00d2      	lsls	r2, r2, #3
 8003ddc:	4906      	ldr	r1, [pc, #24]	; (8003df8 <HAL_RCC_OscConfig+0x7ac>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003de2:	4b05      	ldr	r3, [pc, #20]	; (8003df8 <HAL_RCC_OscConfig+0x7ac>)
 8003de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de6:	4a04      	ldr	r2, [pc, #16]	; (8003df8 <HAL_RCC_OscConfig+0x7ac>)
 8003de8:	f043 0301 	orr.w	r3, r3, #1
 8003dec:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3730      	adds	r7, #48	; 0x30
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	58024400 	.word	0x58024400
 8003dfc:	ffff0007 	.word	0xffff0007

08003e00 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d101      	bne.n	8003e14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e19c      	b.n	800414e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e14:	4b8a      	ldr	r3, [pc, #552]	; (8004040 <HAL_RCC_ClockConfig+0x240>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 030f 	and.w	r3, r3, #15
 8003e1c:	683a      	ldr	r2, [r7, #0]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d910      	bls.n	8003e44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e22:	4b87      	ldr	r3, [pc, #540]	; (8004040 <HAL_RCC_ClockConfig+0x240>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f023 020f 	bic.w	r2, r3, #15
 8003e2a:	4985      	ldr	r1, [pc, #532]	; (8004040 <HAL_RCC_ClockConfig+0x240>)
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e32:	4b83      	ldr	r3, [pc, #524]	; (8004040 <HAL_RCC_ClockConfig+0x240>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 030f 	and.w	r3, r3, #15
 8003e3a:	683a      	ldr	r2, [r7, #0]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d001      	beq.n	8003e44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e184      	b.n	800414e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0304 	and.w	r3, r3, #4
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d010      	beq.n	8003e72 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	691a      	ldr	r2, [r3, #16]
 8003e54:	4b7b      	ldr	r3, [pc, #492]	; (8004044 <HAL_RCC_ClockConfig+0x244>)
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d908      	bls.n	8003e72 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003e60:	4b78      	ldr	r3, [pc, #480]	; (8004044 <HAL_RCC_ClockConfig+0x244>)
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	4975      	ldr	r1, [pc, #468]	; (8004044 <HAL_RCC_ClockConfig+0x244>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0308 	and.w	r3, r3, #8
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d010      	beq.n	8003ea0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	695a      	ldr	r2, [r3, #20]
 8003e82:	4b70      	ldr	r3, [pc, #448]	; (8004044 <HAL_RCC_ClockConfig+0x244>)
 8003e84:	69db      	ldr	r3, [r3, #28]
 8003e86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d908      	bls.n	8003ea0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003e8e:	4b6d      	ldr	r3, [pc, #436]	; (8004044 <HAL_RCC_ClockConfig+0x244>)
 8003e90:	69db      	ldr	r3, [r3, #28]
 8003e92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	496a      	ldr	r1, [pc, #424]	; (8004044 <HAL_RCC_ClockConfig+0x244>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0310 	and.w	r3, r3, #16
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d010      	beq.n	8003ece <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	699a      	ldr	r2, [r3, #24]
 8003eb0:	4b64      	ldr	r3, [pc, #400]	; (8004044 <HAL_RCC_ClockConfig+0x244>)
 8003eb2:	69db      	ldr	r3, [r3, #28]
 8003eb4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d908      	bls.n	8003ece <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003ebc:	4b61      	ldr	r3, [pc, #388]	; (8004044 <HAL_RCC_ClockConfig+0x244>)
 8003ebe:	69db      	ldr	r3, [r3, #28]
 8003ec0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	495e      	ldr	r1, [pc, #376]	; (8004044 <HAL_RCC_ClockConfig+0x244>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0320 	and.w	r3, r3, #32
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d010      	beq.n	8003efc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	69da      	ldr	r2, [r3, #28]
 8003ede:	4b59      	ldr	r3, [pc, #356]	; (8004044 <HAL_RCC_ClockConfig+0x244>)
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d908      	bls.n	8003efc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003eea:	4b56      	ldr	r3, [pc, #344]	; (8004044 <HAL_RCC_ClockConfig+0x244>)
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	69db      	ldr	r3, [r3, #28]
 8003ef6:	4953      	ldr	r1, [pc, #332]	; (8004044 <HAL_RCC_ClockConfig+0x244>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0302 	and.w	r3, r3, #2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d010      	beq.n	8003f2a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	68da      	ldr	r2, [r3, #12]
 8003f0c:	4b4d      	ldr	r3, [pc, #308]	; (8004044 <HAL_RCC_ClockConfig+0x244>)
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	f003 030f 	and.w	r3, r3, #15
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d908      	bls.n	8003f2a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f18:	4b4a      	ldr	r3, [pc, #296]	; (8004044 <HAL_RCC_ClockConfig+0x244>)
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	f023 020f 	bic.w	r2, r3, #15
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	4947      	ldr	r1, [pc, #284]	; (8004044 <HAL_RCC_ClockConfig+0x244>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d055      	beq.n	8003fe2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003f36:	4b43      	ldr	r3, [pc, #268]	; (8004044 <HAL_RCC_ClockConfig+0x244>)
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	4940      	ldr	r1, [pc, #256]	; (8004044 <HAL_RCC_ClockConfig+0x244>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d107      	bne.n	8003f60 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f50:	4b3c      	ldr	r3, [pc, #240]	; (8004044 <HAL_RCC_ClockConfig+0x244>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d121      	bne.n	8003fa0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e0f6      	b.n	800414e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	2b03      	cmp	r3, #3
 8003f66:	d107      	bne.n	8003f78 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f68:	4b36      	ldr	r3, [pc, #216]	; (8004044 <HAL_RCC_ClockConfig+0x244>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d115      	bne.n	8003fa0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e0ea      	b.n	800414e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d107      	bne.n	8003f90 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003f80:	4b30      	ldr	r3, [pc, #192]	; (8004044 <HAL_RCC_ClockConfig+0x244>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d109      	bne.n	8003fa0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e0de      	b.n	800414e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f90:	4b2c      	ldr	r3, [pc, #176]	; (8004044 <HAL_RCC_ClockConfig+0x244>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0304 	and.w	r3, r3, #4
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d101      	bne.n	8003fa0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e0d6      	b.n	800414e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003fa0:	4b28      	ldr	r3, [pc, #160]	; (8004044 <HAL_RCC_ClockConfig+0x244>)
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	f023 0207 	bic.w	r2, r3, #7
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	4925      	ldr	r1, [pc, #148]	; (8004044 <HAL_RCC_ClockConfig+0x244>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fb2:	f7fd fe63 	bl	8001c7c <HAL_GetTick>
 8003fb6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fb8:	e00a      	b.n	8003fd0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fba:	f7fd fe5f 	bl	8001c7c <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d901      	bls.n	8003fd0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e0be      	b.n	800414e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fd0:	4b1c      	ldr	r3, [pc, #112]	; (8004044 <HAL_RCC_ClockConfig+0x244>)
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	00db      	lsls	r3, r3, #3
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d1eb      	bne.n	8003fba <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d010      	beq.n	8004010 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	68da      	ldr	r2, [r3, #12]
 8003ff2:	4b14      	ldr	r3, [pc, #80]	; (8004044 <HAL_RCC_ClockConfig+0x244>)
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	f003 030f 	and.w	r3, r3, #15
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d208      	bcs.n	8004010 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ffe:	4b11      	ldr	r3, [pc, #68]	; (8004044 <HAL_RCC_ClockConfig+0x244>)
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	f023 020f 	bic.w	r2, r3, #15
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	490e      	ldr	r1, [pc, #56]	; (8004044 <HAL_RCC_ClockConfig+0x244>)
 800400c:	4313      	orrs	r3, r2
 800400e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004010:	4b0b      	ldr	r3, [pc, #44]	; (8004040 <HAL_RCC_ClockConfig+0x240>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 030f 	and.w	r3, r3, #15
 8004018:	683a      	ldr	r2, [r7, #0]
 800401a:	429a      	cmp	r2, r3
 800401c:	d214      	bcs.n	8004048 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800401e:	4b08      	ldr	r3, [pc, #32]	; (8004040 <HAL_RCC_ClockConfig+0x240>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f023 020f 	bic.w	r2, r3, #15
 8004026:	4906      	ldr	r1, [pc, #24]	; (8004040 <HAL_RCC_ClockConfig+0x240>)
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	4313      	orrs	r3, r2
 800402c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800402e:	4b04      	ldr	r3, [pc, #16]	; (8004040 <HAL_RCC_ClockConfig+0x240>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 030f 	and.w	r3, r3, #15
 8004036:	683a      	ldr	r2, [r7, #0]
 8004038:	429a      	cmp	r2, r3
 800403a:	d005      	beq.n	8004048 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e086      	b.n	800414e <HAL_RCC_ClockConfig+0x34e>
 8004040:	52002000 	.word	0x52002000
 8004044:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0304 	and.w	r3, r3, #4
 8004050:	2b00      	cmp	r3, #0
 8004052:	d010      	beq.n	8004076 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	691a      	ldr	r2, [r3, #16]
 8004058:	4b3f      	ldr	r3, [pc, #252]	; (8004158 <HAL_RCC_ClockConfig+0x358>)
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004060:	429a      	cmp	r2, r3
 8004062:	d208      	bcs.n	8004076 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004064:	4b3c      	ldr	r3, [pc, #240]	; (8004158 <HAL_RCC_ClockConfig+0x358>)
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	4939      	ldr	r1, [pc, #228]	; (8004158 <HAL_RCC_ClockConfig+0x358>)
 8004072:	4313      	orrs	r3, r2
 8004074:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0308 	and.w	r3, r3, #8
 800407e:	2b00      	cmp	r3, #0
 8004080:	d010      	beq.n	80040a4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	695a      	ldr	r2, [r3, #20]
 8004086:	4b34      	ldr	r3, [pc, #208]	; (8004158 <HAL_RCC_ClockConfig+0x358>)
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800408e:	429a      	cmp	r2, r3
 8004090:	d208      	bcs.n	80040a4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004092:	4b31      	ldr	r3, [pc, #196]	; (8004158 <HAL_RCC_ClockConfig+0x358>)
 8004094:	69db      	ldr	r3, [r3, #28]
 8004096:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	492e      	ldr	r1, [pc, #184]	; (8004158 <HAL_RCC_ClockConfig+0x358>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0310 	and.w	r3, r3, #16
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d010      	beq.n	80040d2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	699a      	ldr	r2, [r3, #24]
 80040b4:	4b28      	ldr	r3, [pc, #160]	; (8004158 <HAL_RCC_ClockConfig+0x358>)
 80040b6:	69db      	ldr	r3, [r3, #28]
 80040b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80040bc:	429a      	cmp	r2, r3
 80040be:	d208      	bcs.n	80040d2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80040c0:	4b25      	ldr	r3, [pc, #148]	; (8004158 <HAL_RCC_ClockConfig+0x358>)
 80040c2:	69db      	ldr	r3, [r3, #28]
 80040c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	699b      	ldr	r3, [r3, #24]
 80040cc:	4922      	ldr	r1, [pc, #136]	; (8004158 <HAL_RCC_ClockConfig+0x358>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0320 	and.w	r3, r3, #32
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d010      	beq.n	8004100 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	69da      	ldr	r2, [r3, #28]
 80040e2:	4b1d      	ldr	r3, [pc, #116]	; (8004158 <HAL_RCC_ClockConfig+0x358>)
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d208      	bcs.n	8004100 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80040ee:	4b1a      	ldr	r3, [pc, #104]	; (8004158 <HAL_RCC_ClockConfig+0x358>)
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	69db      	ldr	r3, [r3, #28]
 80040fa:	4917      	ldr	r1, [pc, #92]	; (8004158 <HAL_RCC_ClockConfig+0x358>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004100:	f000 f834 	bl	800416c <HAL_RCC_GetSysClockFreq>
 8004104:	4602      	mov	r2, r0
 8004106:	4b14      	ldr	r3, [pc, #80]	; (8004158 <HAL_RCC_ClockConfig+0x358>)
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	0a1b      	lsrs	r3, r3, #8
 800410c:	f003 030f 	and.w	r3, r3, #15
 8004110:	4912      	ldr	r1, [pc, #72]	; (800415c <HAL_RCC_ClockConfig+0x35c>)
 8004112:	5ccb      	ldrb	r3, [r1, r3]
 8004114:	f003 031f 	and.w	r3, r3, #31
 8004118:	fa22 f303 	lsr.w	r3, r2, r3
 800411c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800411e:	4b0e      	ldr	r3, [pc, #56]	; (8004158 <HAL_RCC_ClockConfig+0x358>)
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	f003 030f 	and.w	r3, r3, #15
 8004126:	4a0d      	ldr	r2, [pc, #52]	; (800415c <HAL_RCC_ClockConfig+0x35c>)
 8004128:	5cd3      	ldrb	r3, [r2, r3]
 800412a:	f003 031f 	and.w	r3, r3, #31
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	fa22 f303 	lsr.w	r3, r2, r3
 8004134:	4a0a      	ldr	r2, [pc, #40]	; (8004160 <HAL_RCC_ClockConfig+0x360>)
 8004136:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004138:	4a0a      	ldr	r2, [pc, #40]	; (8004164 <HAL_RCC_ClockConfig+0x364>)
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800413e:	4b0a      	ldr	r3, [pc, #40]	; (8004168 <HAL_RCC_ClockConfig+0x368>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4618      	mov	r0, r3
 8004144:	f7fd fd50 	bl	8001be8 <HAL_InitTick>
 8004148:	4603      	mov	r3, r0
 800414a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800414c:	7bfb      	ldrb	r3, [r7, #15]
}
 800414e:	4618      	mov	r0, r3
 8004150:	3718      	adds	r7, #24
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	58024400 	.word	0x58024400
 800415c:	0800aa14 	.word	0x0800aa14
 8004160:	24000004 	.word	0x24000004
 8004164:	24000000 	.word	0x24000000
 8004168:	24000008 	.word	0x24000008

0800416c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800416c:	b480      	push	{r7}
 800416e:	b089      	sub	sp, #36	; 0x24
 8004170:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004172:	4bb3      	ldr	r3, [pc, #716]	; (8004440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800417a:	2b18      	cmp	r3, #24
 800417c:	f200 8155 	bhi.w	800442a <HAL_RCC_GetSysClockFreq+0x2be>
 8004180:	a201      	add	r2, pc, #4	; (adr r2, 8004188 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004186:	bf00      	nop
 8004188:	080041ed 	.word	0x080041ed
 800418c:	0800442b 	.word	0x0800442b
 8004190:	0800442b 	.word	0x0800442b
 8004194:	0800442b 	.word	0x0800442b
 8004198:	0800442b 	.word	0x0800442b
 800419c:	0800442b 	.word	0x0800442b
 80041a0:	0800442b 	.word	0x0800442b
 80041a4:	0800442b 	.word	0x0800442b
 80041a8:	08004213 	.word	0x08004213
 80041ac:	0800442b 	.word	0x0800442b
 80041b0:	0800442b 	.word	0x0800442b
 80041b4:	0800442b 	.word	0x0800442b
 80041b8:	0800442b 	.word	0x0800442b
 80041bc:	0800442b 	.word	0x0800442b
 80041c0:	0800442b 	.word	0x0800442b
 80041c4:	0800442b 	.word	0x0800442b
 80041c8:	08004219 	.word	0x08004219
 80041cc:	0800442b 	.word	0x0800442b
 80041d0:	0800442b 	.word	0x0800442b
 80041d4:	0800442b 	.word	0x0800442b
 80041d8:	0800442b 	.word	0x0800442b
 80041dc:	0800442b 	.word	0x0800442b
 80041e0:	0800442b 	.word	0x0800442b
 80041e4:	0800442b 	.word	0x0800442b
 80041e8:	0800421f 	.word	0x0800421f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80041ec:	4b94      	ldr	r3, [pc, #592]	; (8004440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0320 	and.w	r3, r3, #32
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d009      	beq.n	800420c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80041f8:	4b91      	ldr	r3, [pc, #580]	; (8004440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	08db      	lsrs	r3, r3, #3
 80041fe:	f003 0303 	and.w	r3, r3, #3
 8004202:	4a90      	ldr	r2, [pc, #576]	; (8004444 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004204:	fa22 f303 	lsr.w	r3, r2, r3
 8004208:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800420a:	e111      	b.n	8004430 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800420c:	4b8d      	ldr	r3, [pc, #564]	; (8004444 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800420e:	61bb      	str	r3, [r7, #24]
      break;
 8004210:	e10e      	b.n	8004430 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004212:	4b8d      	ldr	r3, [pc, #564]	; (8004448 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004214:	61bb      	str	r3, [r7, #24]
      break;
 8004216:	e10b      	b.n	8004430 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004218:	4b8c      	ldr	r3, [pc, #560]	; (800444c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800421a:	61bb      	str	r3, [r7, #24]
      break;
 800421c:	e108      	b.n	8004430 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800421e:	4b88      	ldr	r3, [pc, #544]	; (8004440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004222:	f003 0303 	and.w	r3, r3, #3
 8004226:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004228:	4b85      	ldr	r3, [pc, #532]	; (8004440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800422a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422c:	091b      	lsrs	r3, r3, #4
 800422e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004232:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004234:	4b82      	ldr	r3, [pc, #520]	; (8004440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004238:	f003 0301 	and.w	r3, r3, #1
 800423c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800423e:	4b80      	ldr	r3, [pc, #512]	; (8004440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004242:	08db      	lsrs	r3, r3, #3
 8004244:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	fb02 f303 	mul.w	r3, r2, r3
 800424e:	ee07 3a90 	vmov	s15, r3
 8004252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004256:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	2b00      	cmp	r3, #0
 800425e:	f000 80e1 	beq.w	8004424 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	2b02      	cmp	r3, #2
 8004266:	f000 8083 	beq.w	8004370 <HAL_RCC_GetSysClockFreq+0x204>
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	2b02      	cmp	r3, #2
 800426e:	f200 80a1 	bhi.w	80043b4 <HAL_RCC_GetSysClockFreq+0x248>
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d003      	beq.n	8004280 <HAL_RCC_GetSysClockFreq+0x114>
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d056      	beq.n	800432c <HAL_RCC_GetSysClockFreq+0x1c0>
 800427e:	e099      	b.n	80043b4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004280:	4b6f      	ldr	r3, [pc, #444]	; (8004440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0320 	and.w	r3, r3, #32
 8004288:	2b00      	cmp	r3, #0
 800428a:	d02d      	beq.n	80042e8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800428c:	4b6c      	ldr	r3, [pc, #432]	; (8004440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	08db      	lsrs	r3, r3, #3
 8004292:	f003 0303 	and.w	r3, r3, #3
 8004296:	4a6b      	ldr	r2, [pc, #428]	; (8004444 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004298:	fa22 f303 	lsr.w	r3, r2, r3
 800429c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	ee07 3a90 	vmov	s15, r3
 80042a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	ee07 3a90 	vmov	s15, r3
 80042ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042b6:	4b62      	ldr	r3, [pc, #392]	; (8004440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042be:	ee07 3a90 	vmov	s15, r3
 80042c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80042ca:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004450 <HAL_RCC_GetSysClockFreq+0x2e4>
 80042ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042e2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80042e6:	e087      	b.n	80043f8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	ee07 3a90 	vmov	s15, r3
 80042ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042f2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004454 <HAL_RCC_GetSysClockFreq+0x2e8>
 80042f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042fa:	4b51      	ldr	r3, [pc, #324]	; (8004440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004302:	ee07 3a90 	vmov	s15, r3
 8004306:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800430a:	ed97 6a02 	vldr	s12, [r7, #8]
 800430e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004450 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004312:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004316:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800431a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800431e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004326:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800432a:	e065      	b.n	80043f8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	ee07 3a90 	vmov	s15, r3
 8004332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004336:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004458 <HAL_RCC_GetSysClockFreq+0x2ec>
 800433a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800433e:	4b40      	ldr	r3, [pc, #256]	; (8004440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004346:	ee07 3a90 	vmov	s15, r3
 800434a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800434e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004352:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004450 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800435a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800435e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800436a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800436e:	e043      	b.n	80043f8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	ee07 3a90 	vmov	s15, r3
 8004376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800437a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800445c <HAL_RCC_GetSysClockFreq+0x2f0>
 800437e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004382:	4b2f      	ldr	r3, [pc, #188]	; (8004440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800438a:	ee07 3a90 	vmov	s15, r3
 800438e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004392:	ed97 6a02 	vldr	s12, [r7, #8]
 8004396:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004450 <HAL_RCC_GetSysClockFreq+0x2e4>
 800439a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800439e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80043b2:	e021      	b.n	80043f8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	ee07 3a90 	vmov	s15, r3
 80043ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043be:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004458 <HAL_RCC_GetSysClockFreq+0x2ec>
 80043c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043c6:	4b1e      	ldr	r3, [pc, #120]	; (8004440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ce:	ee07 3a90 	vmov	s15, r3
 80043d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80043da:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004450 <HAL_RCC_GetSysClockFreq+0x2e4>
 80043de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80043f6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80043f8:	4b11      	ldr	r3, [pc, #68]	; (8004440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fc:	0a5b      	lsrs	r3, r3, #9
 80043fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004402:	3301      	adds	r3, #1
 8004404:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	ee07 3a90 	vmov	s15, r3
 800440c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004410:	edd7 6a07 	vldr	s13, [r7, #28]
 8004414:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004418:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800441c:	ee17 3a90 	vmov	r3, s15
 8004420:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004422:	e005      	b.n	8004430 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004424:	2300      	movs	r3, #0
 8004426:	61bb      	str	r3, [r7, #24]
      break;
 8004428:	e002      	b.n	8004430 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800442a:	4b07      	ldr	r3, [pc, #28]	; (8004448 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800442c:	61bb      	str	r3, [r7, #24]
      break;
 800442e:	bf00      	nop
  }

  return sysclockfreq;
 8004430:	69bb      	ldr	r3, [r7, #24]
}
 8004432:	4618      	mov	r0, r3
 8004434:	3724      	adds	r7, #36	; 0x24
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	58024400 	.word	0x58024400
 8004444:	03d09000 	.word	0x03d09000
 8004448:	003d0900 	.word	0x003d0900
 800444c:	007a1200 	.word	0x007a1200
 8004450:	46000000 	.word	0x46000000
 8004454:	4c742400 	.word	0x4c742400
 8004458:	4a742400 	.word	0x4a742400
 800445c:	4af42400 	.word	0x4af42400

08004460 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004466:	f7ff fe81 	bl	800416c <HAL_RCC_GetSysClockFreq>
 800446a:	4602      	mov	r2, r0
 800446c:	4b10      	ldr	r3, [pc, #64]	; (80044b0 <HAL_RCC_GetHCLKFreq+0x50>)
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	0a1b      	lsrs	r3, r3, #8
 8004472:	f003 030f 	and.w	r3, r3, #15
 8004476:	490f      	ldr	r1, [pc, #60]	; (80044b4 <HAL_RCC_GetHCLKFreq+0x54>)
 8004478:	5ccb      	ldrb	r3, [r1, r3]
 800447a:	f003 031f 	and.w	r3, r3, #31
 800447e:	fa22 f303 	lsr.w	r3, r2, r3
 8004482:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004484:	4b0a      	ldr	r3, [pc, #40]	; (80044b0 <HAL_RCC_GetHCLKFreq+0x50>)
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	f003 030f 	and.w	r3, r3, #15
 800448c:	4a09      	ldr	r2, [pc, #36]	; (80044b4 <HAL_RCC_GetHCLKFreq+0x54>)
 800448e:	5cd3      	ldrb	r3, [r2, r3]
 8004490:	f003 031f 	and.w	r3, r3, #31
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	fa22 f303 	lsr.w	r3, r2, r3
 800449a:	4a07      	ldr	r2, [pc, #28]	; (80044b8 <HAL_RCC_GetHCLKFreq+0x58>)
 800449c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800449e:	4a07      	ldr	r2, [pc, #28]	; (80044bc <HAL_RCC_GetHCLKFreq+0x5c>)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80044a4:	4b04      	ldr	r3, [pc, #16]	; (80044b8 <HAL_RCC_GetHCLKFreq+0x58>)
 80044a6:	681b      	ldr	r3, [r3, #0]
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3708      	adds	r7, #8
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	58024400 	.word	0x58024400
 80044b4:	0800aa14 	.word	0x0800aa14
 80044b8:	24000004 	.word	0x24000004
 80044bc:	24000000 	.word	0x24000000

080044c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80044c4:	f7ff ffcc 	bl	8004460 <HAL_RCC_GetHCLKFreq>
 80044c8:	4602      	mov	r2, r0
 80044ca:	4b06      	ldr	r3, [pc, #24]	; (80044e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044cc:	69db      	ldr	r3, [r3, #28]
 80044ce:	091b      	lsrs	r3, r3, #4
 80044d0:	f003 0307 	and.w	r3, r3, #7
 80044d4:	4904      	ldr	r1, [pc, #16]	; (80044e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80044d6:	5ccb      	ldrb	r3, [r1, r3]
 80044d8:	f003 031f 	and.w	r3, r3, #31
 80044dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	58024400 	.word	0x58024400
 80044e8:	0800aa14 	.word	0x0800aa14

080044ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80044f0:	f7ff ffb6 	bl	8004460 <HAL_RCC_GetHCLKFreq>
 80044f4:	4602      	mov	r2, r0
 80044f6:	4b06      	ldr	r3, [pc, #24]	; (8004510 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044f8:	69db      	ldr	r3, [r3, #28]
 80044fa:	0a1b      	lsrs	r3, r3, #8
 80044fc:	f003 0307 	and.w	r3, r3, #7
 8004500:	4904      	ldr	r1, [pc, #16]	; (8004514 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004502:	5ccb      	ldrb	r3, [r1, r3]
 8004504:	f003 031f 	and.w	r3, r3, #31
 8004508:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800450c:	4618      	mov	r0, r3
 800450e:	bd80      	pop	{r7, pc}
 8004510:	58024400 	.word	0x58024400
 8004514:	0800aa14 	.word	0x0800aa14

08004518 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004518:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800451c:	b0c6      	sub	sp, #280	; 0x118
 800451e:	af00      	add	r7, sp, #0
 8004520:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004524:	2300      	movs	r3, #0
 8004526:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800452a:	2300      	movs	r3, #0
 800452c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004530:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004538:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800453c:	2500      	movs	r5, #0
 800453e:	ea54 0305 	orrs.w	r3, r4, r5
 8004542:	d049      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004544:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004548:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800454a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800454e:	d02f      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004550:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004554:	d828      	bhi.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004556:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800455a:	d01a      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800455c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004560:	d822      	bhi.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004562:	2b00      	cmp	r3, #0
 8004564:	d003      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004566:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800456a:	d007      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800456c:	e01c      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800456e:	4bab      	ldr	r3, [pc, #684]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004572:	4aaa      	ldr	r2, [pc, #680]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004574:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004578:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800457a:	e01a      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800457c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004580:	3308      	adds	r3, #8
 8004582:	2102      	movs	r1, #2
 8004584:	4618      	mov	r0, r3
 8004586:	f001 fc25 	bl	8005dd4 <RCCEx_PLL2_Config>
 800458a:	4603      	mov	r3, r0
 800458c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004590:	e00f      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004592:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004596:	3328      	adds	r3, #40	; 0x28
 8004598:	2102      	movs	r1, #2
 800459a:	4618      	mov	r0, r3
 800459c:	f001 fccc 	bl	8005f38 <RCCEx_PLL3_Config>
 80045a0:	4603      	mov	r3, r0
 80045a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80045a6:	e004      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80045ae:	e000      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80045b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045b2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d10a      	bne.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80045ba:	4b98      	ldr	r3, [pc, #608]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80045bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045be:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80045c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045c8:	4a94      	ldr	r2, [pc, #592]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80045ca:	430b      	orrs	r3, r1
 80045cc:	6513      	str	r3, [r2, #80]	; 0x50
 80045ce:	e003      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045d0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80045d4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80045d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80045e4:	f04f 0900 	mov.w	r9, #0
 80045e8:	ea58 0309 	orrs.w	r3, r8, r9
 80045ec:	d047      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80045ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f4:	2b04      	cmp	r3, #4
 80045f6:	d82a      	bhi.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80045f8:	a201      	add	r2, pc, #4	; (adr r2, 8004600 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80045fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045fe:	bf00      	nop
 8004600:	08004615 	.word	0x08004615
 8004604:	08004623 	.word	0x08004623
 8004608:	08004639 	.word	0x08004639
 800460c:	08004657 	.word	0x08004657
 8004610:	08004657 	.word	0x08004657
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004614:	4b81      	ldr	r3, [pc, #516]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004618:	4a80      	ldr	r2, [pc, #512]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800461a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800461e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004620:	e01a      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004622:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004626:	3308      	adds	r3, #8
 8004628:	2100      	movs	r1, #0
 800462a:	4618      	mov	r0, r3
 800462c:	f001 fbd2 	bl	8005dd4 <RCCEx_PLL2_Config>
 8004630:	4603      	mov	r3, r0
 8004632:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004636:	e00f      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004638:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800463c:	3328      	adds	r3, #40	; 0x28
 800463e:	2100      	movs	r1, #0
 8004640:	4618      	mov	r0, r3
 8004642:	f001 fc79 	bl	8005f38 <RCCEx_PLL3_Config>
 8004646:	4603      	mov	r3, r0
 8004648:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800464c:	e004      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004654:	e000      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004656:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004658:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800465c:	2b00      	cmp	r3, #0
 800465e:	d10a      	bne.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004660:	4b6e      	ldr	r3, [pc, #440]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004664:	f023 0107 	bic.w	r1, r3, #7
 8004668:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800466c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800466e:	4a6b      	ldr	r2, [pc, #428]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004670:	430b      	orrs	r3, r1
 8004672:	6513      	str	r3, [r2, #80]	; 0x50
 8004674:	e003      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004676:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800467a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800467e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004686:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800468a:	f04f 0b00 	mov.w	fp, #0
 800468e:	ea5a 030b 	orrs.w	r3, sl, fp
 8004692:	d05b      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004694:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004698:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800469c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80046a0:	d03b      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x202>
 80046a2:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80046a6:	d834      	bhi.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80046a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046ac:	d037      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x206>
 80046ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046b2:	d82e      	bhi.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80046b4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80046b8:	d033      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80046ba:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80046be:	d828      	bhi.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80046c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046c4:	d01a      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80046c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046ca:	d822      	bhi.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d003      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80046d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046d4:	d007      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80046d6:	e01c      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046d8:	4b50      	ldr	r3, [pc, #320]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80046da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046dc:	4a4f      	ldr	r2, [pc, #316]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80046de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80046e4:	e01e      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046ea:	3308      	adds	r3, #8
 80046ec:	2100      	movs	r1, #0
 80046ee:	4618      	mov	r0, r3
 80046f0:	f001 fb70 	bl	8005dd4 <RCCEx_PLL2_Config>
 80046f4:	4603      	mov	r3, r0
 80046f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80046fa:	e013      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80046fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004700:	3328      	adds	r3, #40	; 0x28
 8004702:	2100      	movs	r1, #0
 8004704:	4618      	mov	r0, r3
 8004706:	f001 fc17 	bl	8005f38 <RCCEx_PLL3_Config>
 800470a:	4603      	mov	r3, r0
 800470c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004710:	e008      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004718:	e004      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800471a:	bf00      	nop
 800471c:	e002      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800471e:	bf00      	nop
 8004720:	e000      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004722:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004724:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004728:	2b00      	cmp	r3, #0
 800472a:	d10b      	bne.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800472c:	4b3b      	ldr	r3, [pc, #236]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800472e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004730:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8004734:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004738:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800473c:	4a37      	ldr	r2, [pc, #220]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800473e:	430b      	orrs	r3, r1
 8004740:	6593      	str	r3, [r2, #88]	; 0x58
 8004742:	e003      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004744:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004748:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800474c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004754:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004758:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800475c:	2300      	movs	r3, #0
 800475e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004762:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8004766:	460b      	mov	r3, r1
 8004768:	4313      	orrs	r3, r2
 800476a:	d05d      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800476c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004770:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004774:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004778:	d03b      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800477a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800477e:	d834      	bhi.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004780:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004784:	d037      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8004786:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800478a:	d82e      	bhi.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800478c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004790:	d033      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8004792:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004796:	d828      	bhi.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004798:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800479c:	d01a      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800479e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047a2:	d822      	bhi.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d003      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80047a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047ac:	d007      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80047ae:	e01c      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047b0:	4b1a      	ldr	r3, [pc, #104]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80047b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b4:	4a19      	ldr	r2, [pc, #100]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80047b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80047bc:	e01e      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047c2:	3308      	adds	r3, #8
 80047c4:	2100      	movs	r1, #0
 80047c6:	4618      	mov	r0, r3
 80047c8:	f001 fb04 	bl	8005dd4 <RCCEx_PLL2_Config>
 80047cc:	4603      	mov	r3, r0
 80047ce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80047d2:	e013      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80047d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047d8:	3328      	adds	r3, #40	; 0x28
 80047da:	2100      	movs	r1, #0
 80047dc:	4618      	mov	r0, r3
 80047de:	f001 fbab 	bl	8005f38 <RCCEx_PLL3_Config>
 80047e2:	4603      	mov	r3, r0
 80047e4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80047e8:	e008      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80047f0:	e004      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80047f2:	bf00      	nop
 80047f4:	e002      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80047f6:	bf00      	nop
 80047f8:	e000      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80047fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004800:	2b00      	cmp	r3, #0
 8004802:	d10d      	bne.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004804:	4b05      	ldr	r3, [pc, #20]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004808:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800480c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004810:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004814:	4a01      	ldr	r2, [pc, #4]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004816:	430b      	orrs	r3, r1
 8004818:	6593      	str	r3, [r2, #88]	; 0x58
 800481a:	e005      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800481c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004820:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004824:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004828:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800482c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004830:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004834:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004838:	2300      	movs	r3, #0
 800483a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800483e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004842:	460b      	mov	r3, r1
 8004844:	4313      	orrs	r3, r2
 8004846:	d03a      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004848:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800484c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800484e:	2b30      	cmp	r3, #48	; 0x30
 8004850:	d01f      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8004852:	2b30      	cmp	r3, #48	; 0x30
 8004854:	d819      	bhi.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004856:	2b20      	cmp	r3, #32
 8004858:	d00c      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800485a:	2b20      	cmp	r3, #32
 800485c:	d815      	bhi.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800485e:	2b00      	cmp	r3, #0
 8004860:	d019      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004862:	2b10      	cmp	r3, #16
 8004864:	d111      	bne.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004866:	4baa      	ldr	r3, [pc, #680]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486a:	4aa9      	ldr	r2, [pc, #676]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800486c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004870:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004872:	e011      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004874:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004878:	3308      	adds	r3, #8
 800487a:	2102      	movs	r1, #2
 800487c:	4618      	mov	r0, r3
 800487e:	f001 faa9 	bl	8005dd4 <RCCEx_PLL2_Config>
 8004882:	4603      	mov	r3, r0
 8004884:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004888:	e006      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004890:	e002      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004892:	bf00      	nop
 8004894:	e000      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004896:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004898:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800489c:	2b00      	cmp	r3, #0
 800489e:	d10a      	bne.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80048a0:	4b9b      	ldr	r3, [pc, #620]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80048a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048a4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80048a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ae:	4a98      	ldr	r2, [pc, #608]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80048b0:	430b      	orrs	r3, r1
 80048b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80048b4:	e003      	b.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048b6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80048ba:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80048be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80048ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80048ce:	2300      	movs	r3, #0
 80048d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80048d4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80048d8:	460b      	mov	r3, r1
 80048da:	4313      	orrs	r3, r2
 80048dc:	d051      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80048de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048e8:	d035      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80048ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048ee:	d82e      	bhi.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80048f0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80048f4:	d031      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x442>
 80048f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80048fa:	d828      	bhi.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80048fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004900:	d01a      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004902:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004906:	d822      	bhi.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004908:	2b00      	cmp	r3, #0
 800490a:	d003      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800490c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004910:	d007      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8004912:	e01c      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004914:	4b7e      	ldr	r3, [pc, #504]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004918:	4a7d      	ldr	r2, [pc, #500]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800491a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800491e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004920:	e01c      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004922:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004926:	3308      	adds	r3, #8
 8004928:	2100      	movs	r1, #0
 800492a:	4618      	mov	r0, r3
 800492c:	f001 fa52 	bl	8005dd4 <RCCEx_PLL2_Config>
 8004930:	4603      	mov	r3, r0
 8004932:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004936:	e011      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004938:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800493c:	3328      	adds	r3, #40	; 0x28
 800493e:	2100      	movs	r1, #0
 8004940:	4618      	mov	r0, r3
 8004942:	f001 faf9 	bl	8005f38 <RCCEx_PLL3_Config>
 8004946:	4603      	mov	r3, r0
 8004948:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800494c:	e006      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004954:	e002      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004956:	bf00      	nop
 8004958:	e000      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800495a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800495c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004960:	2b00      	cmp	r3, #0
 8004962:	d10a      	bne.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004964:	4b6a      	ldr	r3, [pc, #424]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004968:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800496c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004972:	4a67      	ldr	r2, [pc, #412]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004974:	430b      	orrs	r3, r1
 8004976:	6513      	str	r3, [r2, #80]	; 0x50
 8004978:	e003      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800497a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800497e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004982:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800498a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800498e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004992:	2300      	movs	r3, #0
 8004994:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004998:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800499c:	460b      	mov	r3, r1
 800499e:	4313      	orrs	r3, r2
 80049a0:	d053      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80049a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049ac:	d033      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80049ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049b2:	d82c      	bhi.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80049b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80049b8:	d02f      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x502>
 80049ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80049be:	d826      	bhi.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80049c0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80049c4:	d02b      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x506>
 80049c6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80049ca:	d820      	bhi.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80049cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049d0:	d012      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80049d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049d6:	d81a      	bhi.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d022      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80049dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049e0:	d115      	bne.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80049e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049e6:	3308      	adds	r3, #8
 80049e8:	2101      	movs	r1, #1
 80049ea:	4618      	mov	r0, r3
 80049ec:	f001 f9f2 	bl	8005dd4 <RCCEx_PLL2_Config>
 80049f0:	4603      	mov	r3, r0
 80049f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80049f6:	e015      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80049f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049fc:	3328      	adds	r3, #40	; 0x28
 80049fe:	2101      	movs	r1, #1
 8004a00:	4618      	mov	r0, r3
 8004a02:	f001 fa99 	bl	8005f38 <RCCEx_PLL3_Config>
 8004a06:	4603      	mov	r3, r0
 8004a08:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004a0c:	e00a      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004a14:	e006      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004a16:	bf00      	nop
 8004a18:	e004      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004a1a:	bf00      	nop
 8004a1c:	e002      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004a1e:	bf00      	nop
 8004a20:	e000      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004a22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a24:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d10a      	bne.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004a2c:	4b38      	ldr	r3, [pc, #224]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004a2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a30:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004a34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a3a:	4a35      	ldr	r2, [pc, #212]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004a3c:	430b      	orrs	r3, r1
 8004a3e:	6513      	str	r3, [r2, #80]	; 0x50
 8004a40:	e003      	b.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a42:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004a46:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004a4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a52:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004a56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004a60:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004a64:	460b      	mov	r3, r1
 8004a66:	4313      	orrs	r3, r2
 8004a68:	d058      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004a6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a6e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004a72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a76:	d033      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004a78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a7c:	d82c      	bhi.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a82:	d02f      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a88:	d826      	bhi.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004a8a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a8e:	d02b      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004a90:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a94:	d820      	bhi.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004a96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a9a:	d012      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8004a9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004aa0:	d81a      	bhi.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d022      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004aa6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004aaa:	d115      	bne.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004aac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ab0:	3308      	adds	r3, #8
 8004ab2:	2101      	movs	r1, #1
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f001 f98d 	bl	8005dd4 <RCCEx_PLL2_Config>
 8004aba:	4603      	mov	r3, r0
 8004abc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004ac0:	e015      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004ac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ac6:	3328      	adds	r3, #40	; 0x28
 8004ac8:	2101      	movs	r1, #1
 8004aca:	4618      	mov	r0, r3
 8004acc:	f001 fa34 	bl	8005f38 <RCCEx_PLL3_Config>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004ad6:	e00a      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004ade:	e006      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004ae0:	bf00      	nop
 8004ae2:	e004      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004ae4:	bf00      	nop
 8004ae6:	e002      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004ae8:	bf00      	nop
 8004aea:	e000      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004aec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004aee:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10e      	bne.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004af6:	4b06      	ldr	r3, [pc, #24]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004afa:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004afe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b02:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004b06:	4a02      	ldr	r2, [pc, #8]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004b08:	430b      	orrs	r3, r1
 8004b0a:	6593      	str	r3, [r2, #88]	; 0x58
 8004b0c:	e006      	b.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004b0e:	bf00      	nop
 8004b10:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b14:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004b18:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b24:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004b28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004b32:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004b36:	460b      	mov	r3, r1
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	d037      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b46:	d00e      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004b48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b4c:	d816      	bhi.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d018      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004b52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b56:	d111      	bne.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b58:	4bc4      	ldr	r3, [pc, #784]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5c:	4ac3      	ldr	r2, [pc, #780]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004b64:	e00f      	b.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b6a:	3308      	adds	r3, #8
 8004b6c:	2101      	movs	r1, #1
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f001 f930 	bl	8005dd4 <RCCEx_PLL2_Config>
 8004b74:	4603      	mov	r3, r0
 8004b76:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004b7a:	e004      	b.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004b82:	e000      	b.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004b84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b86:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10a      	bne.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004b8e:	4bb7      	ldr	r3, [pc, #732]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b92:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004b96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b9c:	4ab3      	ldr	r2, [pc, #716]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b9e:	430b      	orrs	r3, r1
 8004ba0:	6513      	str	r3, [r2, #80]	; 0x50
 8004ba2:	e003      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ba4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004ba8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004bb8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004bc2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004bc6:	460b      	mov	r3, r1
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	d039      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bd2:	2b03      	cmp	r3, #3
 8004bd4:	d81c      	bhi.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004bd6:	a201      	add	r2, pc, #4	; (adr r2, 8004bdc <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bdc:	08004c19 	.word	0x08004c19
 8004be0:	08004bed 	.word	0x08004bed
 8004be4:	08004bfb 	.word	0x08004bfb
 8004be8:	08004c19 	.word	0x08004c19
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bec:	4b9f      	ldr	r3, [pc, #636]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf0:	4a9e      	ldr	r2, [pc, #632]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004bf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bf6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004bf8:	e00f      	b.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004bfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bfe:	3308      	adds	r3, #8
 8004c00:	2102      	movs	r1, #2
 8004c02:	4618      	mov	r0, r3
 8004c04:	f001 f8e6 	bl	8005dd4 <RCCEx_PLL2_Config>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004c0e:	e004      	b.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004c16:	e000      	b.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004c18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c1a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10a      	bne.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004c22:	4b92      	ldr	r3, [pc, #584]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c26:	f023 0103 	bic.w	r1, r3, #3
 8004c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c30:	4a8e      	ldr	r2, [pc, #568]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004c32:	430b      	orrs	r3, r1
 8004c34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c36:	e003      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c38:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004c3c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c48:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004c4c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c50:	2300      	movs	r3, #0
 8004c52:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004c56:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	f000 8099 	beq.w	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c62:	4b83      	ldr	r3, [pc, #524]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a82      	ldr	r2, [pc, #520]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004c68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c6e:	f7fd f805 	bl	8001c7c <HAL_GetTick>
 8004c72:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c76:	e00b      	b.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c78:	f7fd f800 	bl	8001c7c <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	2b64      	cmp	r3, #100	; 0x64
 8004c86:	d903      	bls.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004c8e:	e005      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c90:	4b77      	ldr	r3, [pc, #476]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d0ed      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004c9c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d173      	bne.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004ca4:	4b71      	ldr	r3, [pc, #452]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ca6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004cb0:	4053      	eors	r3, r2
 8004cb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d015      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004cba:	4b6c      	ldr	r3, [pc, #432]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cc2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004cc6:	4b69      	ldr	r3, [pc, #420]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cca:	4a68      	ldr	r2, [pc, #416]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cd0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004cd2:	4b66      	ldr	r3, [pc, #408]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd6:	4a65      	ldr	r2, [pc, #404]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004cd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cdc:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004cde:	4a63      	ldr	r2, [pc, #396]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ce0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ce4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004ce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004cee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cf2:	d118      	bne.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf4:	f7fc ffc2 	bl	8001c7c <HAL_GetTick>
 8004cf8:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004cfc:	e00d      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cfe:	f7fc ffbd 	bl	8001c7c <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004d08:	1ad2      	subs	r2, r2, r3
 8004d0a:	f241 3388 	movw	r3, #5000	; 0x1388
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d903      	bls.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8004d18:	e005      	b.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d1a:	4b54      	ldr	r3, [pc, #336]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d1e:	f003 0302 	and.w	r3, r3, #2
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d0eb      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8004d26:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d129      	bne.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d3e:	d10e      	bne.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004d40:	4b4a      	ldr	r3, [pc, #296]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d50:	091a      	lsrs	r2, r3, #4
 8004d52:	4b48      	ldr	r3, [pc, #288]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004d54:	4013      	ands	r3, r2
 8004d56:	4a45      	ldr	r2, [pc, #276]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d58:	430b      	orrs	r3, r1
 8004d5a:	6113      	str	r3, [r2, #16]
 8004d5c:	e005      	b.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x852>
 8004d5e:	4b43      	ldr	r3, [pc, #268]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	4a42      	ldr	r2, [pc, #264]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d64:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004d68:	6113      	str	r3, [r2, #16]
 8004d6a:	4b40      	ldr	r3, [pc, #256]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d6c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004d6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d7a:	4a3c      	ldr	r2, [pc, #240]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d7c:	430b      	orrs	r3, r1
 8004d7e:	6713      	str	r3, [r2, #112]	; 0x70
 8004d80:	e008      	b.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d82:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004d86:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8004d8a:	e003      	b.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d8c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004d90:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9c:	f002 0301 	and.w	r3, r2, #1
 8004da0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004da4:	2300      	movs	r3, #0
 8004da6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004daa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004dae:	460b      	mov	r3, r1
 8004db0:	4313      	orrs	r3, r2
 8004db2:	f000 808f 	beq.w	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004dbc:	2b28      	cmp	r3, #40	; 0x28
 8004dbe:	d871      	bhi.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8004dc0:	a201      	add	r2, pc, #4	; (adr r2, 8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc6:	bf00      	nop
 8004dc8:	08004ead 	.word	0x08004ead
 8004dcc:	08004ea5 	.word	0x08004ea5
 8004dd0:	08004ea5 	.word	0x08004ea5
 8004dd4:	08004ea5 	.word	0x08004ea5
 8004dd8:	08004ea5 	.word	0x08004ea5
 8004ddc:	08004ea5 	.word	0x08004ea5
 8004de0:	08004ea5 	.word	0x08004ea5
 8004de4:	08004ea5 	.word	0x08004ea5
 8004de8:	08004e79 	.word	0x08004e79
 8004dec:	08004ea5 	.word	0x08004ea5
 8004df0:	08004ea5 	.word	0x08004ea5
 8004df4:	08004ea5 	.word	0x08004ea5
 8004df8:	08004ea5 	.word	0x08004ea5
 8004dfc:	08004ea5 	.word	0x08004ea5
 8004e00:	08004ea5 	.word	0x08004ea5
 8004e04:	08004ea5 	.word	0x08004ea5
 8004e08:	08004e8f 	.word	0x08004e8f
 8004e0c:	08004ea5 	.word	0x08004ea5
 8004e10:	08004ea5 	.word	0x08004ea5
 8004e14:	08004ea5 	.word	0x08004ea5
 8004e18:	08004ea5 	.word	0x08004ea5
 8004e1c:	08004ea5 	.word	0x08004ea5
 8004e20:	08004ea5 	.word	0x08004ea5
 8004e24:	08004ea5 	.word	0x08004ea5
 8004e28:	08004ead 	.word	0x08004ead
 8004e2c:	08004ea5 	.word	0x08004ea5
 8004e30:	08004ea5 	.word	0x08004ea5
 8004e34:	08004ea5 	.word	0x08004ea5
 8004e38:	08004ea5 	.word	0x08004ea5
 8004e3c:	08004ea5 	.word	0x08004ea5
 8004e40:	08004ea5 	.word	0x08004ea5
 8004e44:	08004ea5 	.word	0x08004ea5
 8004e48:	08004ead 	.word	0x08004ead
 8004e4c:	08004ea5 	.word	0x08004ea5
 8004e50:	08004ea5 	.word	0x08004ea5
 8004e54:	08004ea5 	.word	0x08004ea5
 8004e58:	08004ea5 	.word	0x08004ea5
 8004e5c:	08004ea5 	.word	0x08004ea5
 8004e60:	08004ea5 	.word	0x08004ea5
 8004e64:	08004ea5 	.word	0x08004ea5
 8004e68:	08004ead 	.word	0x08004ead
 8004e6c:	58024400 	.word	0x58024400
 8004e70:	58024800 	.word	0x58024800
 8004e74:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e7c:	3308      	adds	r3, #8
 8004e7e:	2101      	movs	r1, #1
 8004e80:	4618      	mov	r0, r3
 8004e82:	f000 ffa7 	bl	8005dd4 <RCCEx_PLL2_Config>
 8004e86:	4603      	mov	r3, r0
 8004e88:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004e8c:	e00f      	b.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e92:	3328      	adds	r3, #40	; 0x28
 8004e94:	2101      	movs	r1, #1
 8004e96:	4618      	mov	r0, r3
 8004e98:	f001 f84e 	bl	8005f38 <RCCEx_PLL3_Config>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004ea2:	e004      	b.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004eaa:	e000      	b.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004eac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004eae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d10a      	bne.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004eb6:	4bbf      	ldr	r3, [pc, #764]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eba:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ec2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ec4:	4abb      	ldr	r2, [pc, #748]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004ec6:	430b      	orrs	r3, r1
 8004ec8:	6553      	str	r3, [r2, #84]	; 0x54
 8004eca:	e003      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ecc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004ed0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004ed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004edc:	f002 0302 	and.w	r3, r2, #2
 8004ee0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004eea:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004eee:	460b      	mov	r3, r1
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	d041      	beq.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ef8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004efa:	2b05      	cmp	r3, #5
 8004efc:	d824      	bhi.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8004efe:	a201      	add	r2, pc, #4	; (adr r2, 8004f04 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8004f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f04:	08004f51 	.word	0x08004f51
 8004f08:	08004f1d 	.word	0x08004f1d
 8004f0c:	08004f33 	.word	0x08004f33
 8004f10:	08004f51 	.word	0x08004f51
 8004f14:	08004f51 	.word	0x08004f51
 8004f18:	08004f51 	.word	0x08004f51
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f20:	3308      	adds	r3, #8
 8004f22:	2101      	movs	r1, #1
 8004f24:	4618      	mov	r0, r3
 8004f26:	f000 ff55 	bl	8005dd4 <RCCEx_PLL2_Config>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004f30:	e00f      	b.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f36:	3328      	adds	r3, #40	; 0x28
 8004f38:	2101      	movs	r1, #1
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f000 fffc 	bl	8005f38 <RCCEx_PLL3_Config>
 8004f40:	4603      	mov	r3, r0
 8004f42:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004f46:	e004      	b.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004f4e:	e000      	b.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8004f50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f52:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10a      	bne.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004f5a:	4b96      	ldr	r3, [pc, #600]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f5e:	f023 0107 	bic.w	r1, r3, #7
 8004f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f68:	4a92      	ldr	r2, [pc, #584]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004f6a:	430b      	orrs	r3, r1
 8004f6c:	6553      	str	r3, [r2, #84]	; 0x54
 8004f6e:	e003      	b.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f70:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004f74:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f80:	f002 0304 	and.w	r3, r2, #4
 8004f84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f88:	2300      	movs	r3, #0
 8004f8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004f8e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004f92:	460b      	mov	r3, r1
 8004f94:	4313      	orrs	r3, r2
 8004f96:	d044      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa0:	2b05      	cmp	r3, #5
 8004fa2:	d825      	bhi.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8004fa4:	a201      	add	r2, pc, #4	; (adr r2, 8004fac <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8004fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004faa:	bf00      	nop
 8004fac:	08004ff9 	.word	0x08004ff9
 8004fb0:	08004fc5 	.word	0x08004fc5
 8004fb4:	08004fdb 	.word	0x08004fdb
 8004fb8:	08004ff9 	.word	0x08004ff9
 8004fbc:	08004ff9 	.word	0x08004ff9
 8004fc0:	08004ff9 	.word	0x08004ff9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fc8:	3308      	adds	r3, #8
 8004fca:	2101      	movs	r1, #1
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f000 ff01 	bl	8005dd4 <RCCEx_PLL2_Config>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004fd8:	e00f      	b.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004fda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fde:	3328      	adds	r3, #40	; 0x28
 8004fe0:	2101      	movs	r1, #1
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f000 ffa8 	bl	8005f38 <RCCEx_PLL3_Config>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004fee:	e004      	b.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004ff6:	e000      	b.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8004ff8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ffa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d10b      	bne.n	800501a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005002:	4b6c      	ldr	r3, [pc, #432]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005006:	f023 0107 	bic.w	r1, r3, #7
 800500a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800500e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005012:	4a68      	ldr	r2, [pc, #416]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005014:	430b      	orrs	r3, r1
 8005016:	6593      	str	r3, [r2, #88]	; 0x58
 8005018:	e003      	b.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800501a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800501e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005022:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800502a:	f002 0320 	and.w	r3, r2, #32
 800502e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005032:	2300      	movs	r3, #0
 8005034:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005038:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800503c:	460b      	mov	r3, r1
 800503e:	4313      	orrs	r3, r2
 8005040:	d055      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005042:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005046:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800504a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800504e:	d033      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8005050:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005054:	d82c      	bhi.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800505a:	d02f      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800505c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005060:	d826      	bhi.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005062:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005066:	d02b      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8005068:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800506c:	d820      	bhi.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800506e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005072:	d012      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8005074:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005078:	d81a      	bhi.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800507a:	2b00      	cmp	r3, #0
 800507c:	d022      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800507e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005082:	d115      	bne.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005084:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005088:	3308      	adds	r3, #8
 800508a:	2100      	movs	r1, #0
 800508c:	4618      	mov	r0, r3
 800508e:	f000 fea1 	bl	8005dd4 <RCCEx_PLL2_Config>
 8005092:	4603      	mov	r3, r0
 8005094:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005098:	e015      	b.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800509a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800509e:	3328      	adds	r3, #40	; 0x28
 80050a0:	2102      	movs	r1, #2
 80050a2:	4618      	mov	r0, r3
 80050a4:	f000 ff48 	bl	8005f38 <RCCEx_PLL3_Config>
 80050a8:	4603      	mov	r3, r0
 80050aa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80050ae:	e00a      	b.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80050b6:	e006      	b.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80050b8:	bf00      	nop
 80050ba:	e004      	b.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80050bc:	bf00      	nop
 80050be:	e002      	b.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80050c0:	bf00      	nop
 80050c2:	e000      	b.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80050c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050c6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d10b      	bne.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80050ce:	4b39      	ldr	r3, [pc, #228]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80050d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80050d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050de:	4a35      	ldr	r2, [pc, #212]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80050e0:	430b      	orrs	r3, r1
 80050e2:	6553      	str	r3, [r2, #84]	; 0x54
 80050e4:	e003      	b.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050e6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80050ea:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80050ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80050fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80050fe:	2300      	movs	r3, #0
 8005100:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005104:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005108:	460b      	mov	r3, r1
 800510a:	4313      	orrs	r3, r2
 800510c:	d058      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800510e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005112:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005116:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800511a:	d033      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800511c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005120:	d82c      	bhi.n	800517c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005126:	d02f      	beq.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800512c:	d826      	bhi.n	800517c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800512e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005132:	d02b      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005134:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005138:	d820      	bhi.n	800517c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800513a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800513e:	d012      	beq.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8005140:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005144:	d81a      	bhi.n	800517c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005146:	2b00      	cmp	r3, #0
 8005148:	d022      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800514a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800514e:	d115      	bne.n	800517c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005150:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005154:	3308      	adds	r3, #8
 8005156:	2100      	movs	r1, #0
 8005158:	4618      	mov	r0, r3
 800515a:	f000 fe3b 	bl	8005dd4 <RCCEx_PLL2_Config>
 800515e:	4603      	mov	r3, r0
 8005160:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005164:	e015      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005166:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800516a:	3328      	adds	r3, #40	; 0x28
 800516c:	2102      	movs	r1, #2
 800516e:	4618      	mov	r0, r3
 8005170:	f000 fee2 	bl	8005f38 <RCCEx_PLL3_Config>
 8005174:	4603      	mov	r3, r0
 8005176:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800517a:	e00a      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005182:	e006      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005184:	bf00      	nop
 8005186:	e004      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005188:	bf00      	nop
 800518a:	e002      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800518c:	bf00      	nop
 800518e:	e000      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005190:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005192:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005196:	2b00      	cmp	r3, #0
 8005198:	d10e      	bne.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800519a:	4b06      	ldr	r3, [pc, #24]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800519c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800519e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80051a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051aa:	4a02      	ldr	r2, [pc, #8]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80051ac:	430b      	orrs	r3, r1
 80051ae:	6593      	str	r3, [r2, #88]	; 0x58
 80051b0:	e006      	b.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80051b2:	bf00      	nop
 80051b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051b8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80051bc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80051c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80051cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80051d0:	2300      	movs	r3, #0
 80051d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80051d6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80051da:	460b      	mov	r3, r1
 80051dc:	4313      	orrs	r3, r2
 80051de:	d055      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80051e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051e8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80051ec:	d033      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80051ee:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80051f2:	d82c      	bhi.n	800524e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80051f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051f8:	d02f      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80051fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051fe:	d826      	bhi.n	800524e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005200:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005204:	d02b      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8005206:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800520a:	d820      	bhi.n	800524e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800520c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005210:	d012      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8005212:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005216:	d81a      	bhi.n	800524e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005218:	2b00      	cmp	r3, #0
 800521a:	d022      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800521c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005220:	d115      	bne.n	800524e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005222:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005226:	3308      	adds	r3, #8
 8005228:	2100      	movs	r1, #0
 800522a:	4618      	mov	r0, r3
 800522c:	f000 fdd2 	bl	8005dd4 <RCCEx_PLL2_Config>
 8005230:	4603      	mov	r3, r0
 8005232:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005236:	e015      	b.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005238:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800523c:	3328      	adds	r3, #40	; 0x28
 800523e:	2102      	movs	r1, #2
 8005240:	4618      	mov	r0, r3
 8005242:	f000 fe79 	bl	8005f38 <RCCEx_PLL3_Config>
 8005246:	4603      	mov	r3, r0
 8005248:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800524c:	e00a      	b.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005254:	e006      	b.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005256:	bf00      	nop
 8005258:	e004      	b.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800525a:	bf00      	nop
 800525c:	e002      	b.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800525e:	bf00      	nop
 8005260:	e000      	b.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005262:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005264:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005268:	2b00      	cmp	r3, #0
 800526a:	d10b      	bne.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800526c:	4ba0      	ldr	r3, [pc, #640]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800526e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005270:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8005274:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005278:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800527c:	4a9c      	ldr	r2, [pc, #624]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800527e:	430b      	orrs	r3, r1
 8005280:	6593      	str	r3, [r2, #88]	; 0x58
 8005282:	e003      	b.n	800528c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005284:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005288:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800528c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005294:	f002 0308 	and.w	r3, r2, #8
 8005298:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800529c:	2300      	movs	r3, #0
 800529e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80052a2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80052a6:	460b      	mov	r3, r1
 80052a8:	4313      	orrs	r3, r2
 80052aa:	d01e      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80052ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052b8:	d10c      	bne.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80052ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052be:	3328      	adds	r3, #40	; 0x28
 80052c0:	2102      	movs	r1, #2
 80052c2:	4618      	mov	r0, r3
 80052c4:	f000 fe38 	bl	8005f38 <RCCEx_PLL3_Config>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d002      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80052d4:	4b86      	ldr	r3, [pc, #536]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80052d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052d8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052e4:	4a82      	ldr	r2, [pc, #520]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80052e6:	430b      	orrs	r3, r1
 80052e8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80052ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f2:	f002 0310 	and.w	r3, r2, #16
 80052f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80052fa:	2300      	movs	r3, #0
 80052fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005300:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8005304:	460b      	mov	r3, r1
 8005306:	4313      	orrs	r3, r2
 8005308:	d01e      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800530a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800530e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005312:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005316:	d10c      	bne.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005318:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800531c:	3328      	adds	r3, #40	; 0x28
 800531e:	2102      	movs	r1, #2
 8005320:	4618      	mov	r0, r3
 8005322:	f000 fe09 	bl	8005f38 <RCCEx_PLL3_Config>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d002      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005332:	4b6f      	ldr	r3, [pc, #444]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005336:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800533a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800533e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005342:	4a6b      	ldr	r2, [pc, #428]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005344:	430b      	orrs	r3, r1
 8005346:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005348:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800534c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005350:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005354:	67bb      	str	r3, [r7, #120]	; 0x78
 8005356:	2300      	movs	r3, #0
 8005358:	67fb      	str	r3, [r7, #124]	; 0x7c
 800535a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800535e:	460b      	mov	r3, r1
 8005360:	4313      	orrs	r3, r2
 8005362:	d03e      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005364:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005368:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800536c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005370:	d022      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8005372:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005376:	d81b      	bhi.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8005378:	2b00      	cmp	r3, #0
 800537a:	d003      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800537c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005380:	d00b      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8005382:	e015      	b.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005384:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005388:	3308      	adds	r3, #8
 800538a:	2100      	movs	r1, #0
 800538c:	4618      	mov	r0, r3
 800538e:	f000 fd21 	bl	8005dd4 <RCCEx_PLL2_Config>
 8005392:	4603      	mov	r3, r0
 8005394:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005398:	e00f      	b.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800539a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800539e:	3328      	adds	r3, #40	; 0x28
 80053a0:	2102      	movs	r1, #2
 80053a2:	4618      	mov	r0, r3
 80053a4:	f000 fdc8 	bl	8005f38 <RCCEx_PLL3_Config>
 80053a8:	4603      	mov	r3, r0
 80053aa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80053ae:	e004      	b.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80053b6:	e000      	b.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80053b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053ba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d10b      	bne.n	80053da <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80053c2:	4b4b      	ldr	r3, [pc, #300]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80053c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053c6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80053ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80053d2:	4a47      	ldr	r2, [pc, #284]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80053d4:	430b      	orrs	r3, r1
 80053d6:	6593      	str	r3, [r2, #88]	; 0x58
 80053d8:	e003      	b.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053da:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80053de:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80053e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ea:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80053ee:	673b      	str	r3, [r7, #112]	; 0x70
 80053f0:	2300      	movs	r3, #0
 80053f2:	677b      	str	r3, [r7, #116]	; 0x74
 80053f4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80053f8:	460b      	mov	r3, r1
 80053fa:	4313      	orrs	r3, r2
 80053fc:	d03b      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80053fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005402:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005406:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800540a:	d01f      	beq.n	800544c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800540c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005410:	d818      	bhi.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8005412:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005416:	d003      	beq.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8005418:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800541c:	d007      	beq.n	800542e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800541e:	e011      	b.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005420:	4b33      	ldr	r3, [pc, #204]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005424:	4a32      	ldr	r2, [pc, #200]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005426:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800542a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800542c:	e00f      	b.n	800544e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800542e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005432:	3328      	adds	r3, #40	; 0x28
 8005434:	2101      	movs	r1, #1
 8005436:	4618      	mov	r0, r3
 8005438:	f000 fd7e 	bl	8005f38 <RCCEx_PLL3_Config>
 800543c:	4603      	mov	r3, r0
 800543e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8005442:	e004      	b.n	800544e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800544a:	e000      	b.n	800544e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800544c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800544e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005452:	2b00      	cmp	r3, #0
 8005454:	d10b      	bne.n	800546e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005456:	4b26      	ldr	r3, [pc, #152]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800545a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800545e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005462:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005466:	4a22      	ldr	r2, [pc, #136]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005468:	430b      	orrs	r3, r1
 800546a:	6553      	str	r3, [r2, #84]	; 0x54
 800546c:	e003      	b.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800546e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005472:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005476:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800547a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800547e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005482:	66bb      	str	r3, [r7, #104]	; 0x68
 8005484:	2300      	movs	r3, #0
 8005486:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005488:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800548c:	460b      	mov	r3, r1
 800548e:	4313      	orrs	r3, r2
 8005490:	d034      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005492:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005498:	2b00      	cmp	r3, #0
 800549a:	d003      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800549c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054a0:	d007      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80054a2:	e011      	b.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054a4:	4b12      	ldr	r3, [pc, #72]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80054a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a8:	4a11      	ldr	r2, [pc, #68]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80054aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80054b0:	e00e      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80054b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054b6:	3308      	adds	r3, #8
 80054b8:	2102      	movs	r1, #2
 80054ba:	4618      	mov	r0, r3
 80054bc:	f000 fc8a 	bl	8005dd4 <RCCEx_PLL2_Config>
 80054c0:	4603      	mov	r3, r0
 80054c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80054c6:	e003      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80054ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054d0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d10d      	bne.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80054d8:	4b05      	ldr	r3, [pc, #20]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80054da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80054e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054e6:	4a02      	ldr	r2, [pc, #8]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80054e8:	430b      	orrs	r3, r1
 80054ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80054ec:	e006      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80054ee:	bf00      	nop
 80054f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80054f8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80054fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005504:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005508:	663b      	str	r3, [r7, #96]	; 0x60
 800550a:	2300      	movs	r3, #0
 800550c:	667b      	str	r3, [r7, #100]	; 0x64
 800550e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005512:	460b      	mov	r3, r1
 8005514:	4313      	orrs	r3, r2
 8005516:	d00c      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005518:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800551c:	3328      	adds	r3, #40	; 0x28
 800551e:	2102      	movs	r1, #2
 8005520:	4618      	mov	r0, r3
 8005522:	f000 fd09 	bl	8005f38 <RCCEx_PLL3_Config>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d002      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005532:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800553a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800553e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005540:	2300      	movs	r3, #0
 8005542:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005544:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005548:	460b      	mov	r3, r1
 800554a:	4313      	orrs	r3, r2
 800554c:	d036      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800554e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005552:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005554:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005558:	d018      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800555a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800555e:	d811      	bhi.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005560:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005564:	d014      	beq.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8005566:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800556a:	d80b      	bhi.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800556c:	2b00      	cmp	r3, #0
 800556e:	d011      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005570:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005574:	d106      	bne.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005576:	4bb7      	ldr	r3, [pc, #732]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800557a:	4ab6      	ldr	r2, [pc, #728]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800557c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005580:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005582:	e008      	b.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800558a:	e004      	b.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800558c:	bf00      	nop
 800558e:	e002      	b.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005590:	bf00      	nop
 8005592:	e000      	b.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005594:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005596:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800559a:	2b00      	cmp	r3, #0
 800559c:	d10a      	bne.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800559e:	4bad      	ldr	r3, [pc, #692]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80055a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80055a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055ac:	4aa9      	ldr	r2, [pc, #676]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80055ae:	430b      	orrs	r3, r1
 80055b0:	6553      	str	r3, [r2, #84]	; 0x54
 80055b2:	e003      	b.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80055b8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80055bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80055c8:	653b      	str	r3, [r7, #80]	; 0x50
 80055ca:	2300      	movs	r3, #0
 80055cc:	657b      	str	r3, [r7, #84]	; 0x54
 80055ce:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80055d2:	460b      	mov	r3, r1
 80055d4:	4313      	orrs	r3, r2
 80055d6:	d009      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80055d8:	4b9e      	ldr	r3, [pc, #632]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80055da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055dc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80055e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e6:	4a9b      	ldr	r2, [pc, #620]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80055e8:	430b      	orrs	r3, r1
 80055ea:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80055ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f4:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80055f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80055fa:	2300      	movs	r3, #0
 80055fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055fe:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005602:	460b      	mov	r3, r1
 8005604:	4313      	orrs	r3, r2
 8005606:	d009      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005608:	4b92      	ldr	r3, [pc, #584]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800560a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800560c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8005610:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005614:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005616:	4a8f      	ldr	r2, [pc, #572]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005618:	430b      	orrs	r3, r1
 800561a:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800561c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005624:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8005628:	643b      	str	r3, [r7, #64]	; 0x40
 800562a:	2300      	movs	r3, #0
 800562c:	647b      	str	r3, [r7, #68]	; 0x44
 800562e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005632:	460b      	mov	r3, r1
 8005634:	4313      	orrs	r3, r2
 8005636:	d00e      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005638:	4b86      	ldr	r3, [pc, #536]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	4a85      	ldr	r2, [pc, #532]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800563e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005642:	6113      	str	r3, [r2, #16]
 8005644:	4b83      	ldr	r3, [pc, #524]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005646:	6919      	ldr	r1, [r3, #16]
 8005648:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800564c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005650:	4a80      	ldr	r2, [pc, #512]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005652:	430b      	orrs	r3, r1
 8005654:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005656:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800565a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005662:	63bb      	str	r3, [r7, #56]	; 0x38
 8005664:	2300      	movs	r3, #0
 8005666:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005668:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800566c:	460b      	mov	r3, r1
 800566e:	4313      	orrs	r3, r2
 8005670:	d009      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005672:	4b78      	ldr	r3, [pc, #480]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005676:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800567a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800567e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005680:	4a74      	ldr	r2, [pc, #464]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005682:	430b      	orrs	r3, r1
 8005684:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005686:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800568a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800568e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005692:	633b      	str	r3, [r7, #48]	; 0x30
 8005694:	2300      	movs	r3, #0
 8005696:	637b      	str	r3, [r7, #52]	; 0x34
 8005698:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800569c:	460b      	mov	r3, r1
 800569e:	4313      	orrs	r3, r2
 80056a0:	d00a      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80056a2:	4b6c      	ldr	r3, [pc, #432]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80056a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056a6:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80056aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056b2:	4a68      	ldr	r2, [pc, #416]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80056b4:	430b      	orrs	r3, r1
 80056b6:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80056b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c0:	2100      	movs	r1, #0
 80056c2:	62b9      	str	r1, [r7, #40]	; 0x28
 80056c4:	f003 0301 	and.w	r3, r3, #1
 80056c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056ca:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80056ce:	460b      	mov	r3, r1
 80056d0:	4313      	orrs	r3, r2
 80056d2:	d011      	beq.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056d8:	3308      	adds	r3, #8
 80056da:	2100      	movs	r1, #0
 80056dc:	4618      	mov	r0, r3
 80056de:	f000 fb79 	bl	8005dd4 <RCCEx_PLL2_Config>
 80056e2:	4603      	mov	r3, r0
 80056e4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80056e8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d003      	beq.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80056f4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80056f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005700:	2100      	movs	r1, #0
 8005702:	6239      	str	r1, [r7, #32]
 8005704:	f003 0302 	and.w	r3, r3, #2
 8005708:	627b      	str	r3, [r7, #36]	; 0x24
 800570a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800570e:	460b      	mov	r3, r1
 8005710:	4313      	orrs	r3, r2
 8005712:	d011      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005714:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005718:	3308      	adds	r3, #8
 800571a:	2101      	movs	r1, #1
 800571c:	4618      	mov	r0, r3
 800571e:	f000 fb59 	bl	8005dd4 <RCCEx_PLL2_Config>
 8005722:	4603      	mov	r3, r0
 8005724:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8005728:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800572c:	2b00      	cmp	r3, #0
 800572e:	d003      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005730:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005734:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005738:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800573c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005740:	2100      	movs	r1, #0
 8005742:	61b9      	str	r1, [r7, #24]
 8005744:	f003 0304 	and.w	r3, r3, #4
 8005748:	61fb      	str	r3, [r7, #28]
 800574a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800574e:	460b      	mov	r3, r1
 8005750:	4313      	orrs	r3, r2
 8005752:	d011      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005754:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005758:	3308      	adds	r3, #8
 800575a:	2102      	movs	r1, #2
 800575c:	4618      	mov	r0, r3
 800575e:	f000 fb39 	bl	8005dd4 <RCCEx_PLL2_Config>
 8005762:	4603      	mov	r3, r0
 8005764:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8005768:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800576c:	2b00      	cmp	r3, #0
 800576e:	d003      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005770:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005774:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005778:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800577c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005780:	2100      	movs	r1, #0
 8005782:	6139      	str	r1, [r7, #16]
 8005784:	f003 0308 	and.w	r3, r3, #8
 8005788:	617b      	str	r3, [r7, #20]
 800578a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800578e:	460b      	mov	r3, r1
 8005790:	4313      	orrs	r3, r2
 8005792:	d011      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005794:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005798:	3328      	adds	r3, #40	; 0x28
 800579a:	2100      	movs	r1, #0
 800579c:	4618      	mov	r0, r3
 800579e:	f000 fbcb 	bl	8005f38 <RCCEx_PLL3_Config>
 80057a2:	4603      	mov	r3, r0
 80057a4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 80057a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d003      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80057b4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80057b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c0:	2100      	movs	r1, #0
 80057c2:	60b9      	str	r1, [r7, #8]
 80057c4:	f003 0310 	and.w	r3, r3, #16
 80057c8:	60fb      	str	r3, [r7, #12]
 80057ca:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80057ce:	460b      	mov	r3, r1
 80057d0:	4313      	orrs	r3, r2
 80057d2:	d011      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80057d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057d8:	3328      	adds	r3, #40	; 0x28
 80057da:	2101      	movs	r1, #1
 80057dc:	4618      	mov	r0, r3
 80057de:	f000 fbab 	bl	8005f38 <RCCEx_PLL3_Config>
 80057e2:	4603      	mov	r3, r0
 80057e4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80057e8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d003      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80057f4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80057f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005800:	2100      	movs	r1, #0
 8005802:	6039      	str	r1, [r7, #0]
 8005804:	f003 0320 	and.w	r3, r3, #32
 8005808:	607b      	str	r3, [r7, #4]
 800580a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800580e:	460b      	mov	r3, r1
 8005810:	4313      	orrs	r3, r2
 8005812:	d011      	beq.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005814:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005818:	3328      	adds	r3, #40	; 0x28
 800581a:	2102      	movs	r1, #2
 800581c:	4618      	mov	r0, r3
 800581e:	f000 fb8b 	bl	8005f38 <RCCEx_PLL3_Config>
 8005822:	4603      	mov	r3, r0
 8005824:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8005828:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800582c:	2b00      	cmp	r3, #0
 800582e:	d003      	beq.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005830:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005834:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8005838:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800583c:	2b00      	cmp	r3, #0
 800583e:	d101      	bne.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8005840:	2300      	movs	r3, #0
 8005842:	e000      	b.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
}
 8005846:	4618      	mov	r0, r3
 8005848:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800584c:	46bd      	mov	sp, r7
 800584e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005852:	bf00      	nop
 8005854:	58024400 	.word	0x58024400

08005858 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800585c:	f7fe fe00 	bl	8004460 <HAL_RCC_GetHCLKFreq>
 8005860:	4602      	mov	r2, r0
 8005862:	4b06      	ldr	r3, [pc, #24]	; (800587c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005864:	6a1b      	ldr	r3, [r3, #32]
 8005866:	091b      	lsrs	r3, r3, #4
 8005868:	f003 0307 	and.w	r3, r3, #7
 800586c:	4904      	ldr	r1, [pc, #16]	; (8005880 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800586e:	5ccb      	ldrb	r3, [r1, r3]
 8005870:	f003 031f 	and.w	r3, r3, #31
 8005874:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005878:	4618      	mov	r0, r3
 800587a:	bd80      	pop	{r7, pc}
 800587c:	58024400 	.word	0x58024400
 8005880:	0800aa14 	.word	0x0800aa14

08005884 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005884:	b480      	push	{r7}
 8005886:	b089      	sub	sp, #36	; 0x24
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800588c:	4ba1      	ldr	r3, [pc, #644]	; (8005b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800588e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005890:	f003 0303 	and.w	r3, r3, #3
 8005894:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005896:	4b9f      	ldr	r3, [pc, #636]	; (8005b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800589a:	0b1b      	lsrs	r3, r3, #12
 800589c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058a0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80058a2:	4b9c      	ldr	r3, [pc, #624]	; (8005b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a6:	091b      	lsrs	r3, r3, #4
 80058a8:	f003 0301 	and.w	r3, r3, #1
 80058ac:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80058ae:	4b99      	ldr	r3, [pc, #612]	; (8005b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058b2:	08db      	lsrs	r3, r3, #3
 80058b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	fb02 f303 	mul.w	r3, r2, r3
 80058be:	ee07 3a90 	vmov	s15, r3
 80058c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f000 8111 	beq.w	8005af4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	f000 8083 	beq.w	80059e0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	2b02      	cmp	r3, #2
 80058de:	f200 80a1 	bhi.w	8005a24 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d003      	beq.n	80058f0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d056      	beq.n	800599c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80058ee:	e099      	b.n	8005a24 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058f0:	4b88      	ldr	r3, [pc, #544]	; (8005b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 0320 	and.w	r3, r3, #32
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d02d      	beq.n	8005958 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80058fc:	4b85      	ldr	r3, [pc, #532]	; (8005b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	08db      	lsrs	r3, r3, #3
 8005902:	f003 0303 	and.w	r3, r3, #3
 8005906:	4a84      	ldr	r2, [pc, #528]	; (8005b18 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005908:	fa22 f303 	lsr.w	r3, r2, r3
 800590c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	ee07 3a90 	vmov	s15, r3
 8005914:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	ee07 3a90 	vmov	s15, r3
 800591e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005926:	4b7b      	ldr	r3, [pc, #492]	; (8005b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800592e:	ee07 3a90 	vmov	s15, r3
 8005932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005936:	ed97 6a03 	vldr	s12, [r7, #12]
 800593a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005b1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800593e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005946:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800594a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800594e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005952:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005956:	e087      	b.n	8005a68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	ee07 3a90 	vmov	s15, r3
 800595e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005962:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005b20 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800596a:	4b6a      	ldr	r3, [pc, #424]	; (8005b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800596c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800596e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005972:	ee07 3a90 	vmov	s15, r3
 8005976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800597a:	ed97 6a03 	vldr	s12, [r7, #12]
 800597e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005b1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800598a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800598e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005996:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800599a:	e065      	b.n	8005a68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	ee07 3a90 	vmov	s15, r3
 80059a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059a6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005b24 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80059aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059ae:	4b59      	ldr	r3, [pc, #356]	; (8005b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059b6:	ee07 3a90 	vmov	s15, r3
 80059ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059be:	ed97 6a03 	vldr	s12, [r7, #12]
 80059c2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005b1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80059c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80059de:	e043      	b.n	8005a68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	ee07 3a90 	vmov	s15, r3
 80059e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059ea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005b28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80059ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059f2:	4b48      	ldr	r3, [pc, #288]	; (8005b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059fa:	ee07 3a90 	vmov	s15, r3
 80059fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a02:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a06:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005b1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a22:	e021      	b.n	8005a68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	ee07 3a90 	vmov	s15, r3
 8005a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a2e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005b24 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005a32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a36:	4b37      	ldr	r3, [pc, #220]	; (8005b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a3e:	ee07 3a90 	vmov	s15, r3
 8005a42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a46:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a4a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005b1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a66:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005a68:	4b2a      	ldr	r3, [pc, #168]	; (8005b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6c:	0a5b      	lsrs	r3, r3, #9
 8005a6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a72:	ee07 3a90 	vmov	s15, r3
 8005a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a82:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a8e:	ee17 2a90 	vmov	r2, s15
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005a96:	4b1f      	ldr	r3, [pc, #124]	; (8005b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9a:	0c1b      	lsrs	r3, r3, #16
 8005a9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005aa0:	ee07 3a90 	vmov	s15, r3
 8005aa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aa8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005aac:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ab0:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ab4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ab8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005abc:	ee17 2a90 	vmov	r2, s15
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005ac4:	4b13      	ldr	r3, [pc, #76]	; (8005b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac8:	0e1b      	lsrs	r3, r3, #24
 8005aca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ace:	ee07 3a90 	vmov	s15, r3
 8005ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ad6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ada:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ade:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ae2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ae6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005aea:	ee17 2a90 	vmov	r2, s15
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005af2:	e008      	b.n	8005b06 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	609a      	str	r2, [r3, #8]
}
 8005b06:	bf00      	nop
 8005b08:	3724      	adds	r7, #36	; 0x24
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	58024400 	.word	0x58024400
 8005b18:	03d09000 	.word	0x03d09000
 8005b1c:	46000000 	.word	0x46000000
 8005b20:	4c742400 	.word	0x4c742400
 8005b24:	4a742400 	.word	0x4a742400
 8005b28:	4af42400 	.word	0x4af42400

08005b2c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b089      	sub	sp, #36	; 0x24
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b34:	4ba1      	ldr	r3, [pc, #644]	; (8005dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b38:	f003 0303 	and.w	r3, r3, #3
 8005b3c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005b3e:	4b9f      	ldr	r3, [pc, #636]	; (8005dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b42:	0d1b      	lsrs	r3, r3, #20
 8005b44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b48:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005b4a:	4b9c      	ldr	r3, [pc, #624]	; (8005dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b4e:	0a1b      	lsrs	r3, r3, #8
 8005b50:	f003 0301 	and.w	r3, r3, #1
 8005b54:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005b56:	4b99      	ldr	r3, [pc, #612]	; (8005dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b5a:	08db      	lsrs	r3, r3, #3
 8005b5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b60:	693a      	ldr	r2, [r7, #16]
 8005b62:	fb02 f303 	mul.w	r3, r2, r3
 8005b66:	ee07 3a90 	vmov	s15, r3
 8005b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b6e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f000 8111 	beq.w	8005d9c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005b7a:	69bb      	ldr	r3, [r7, #24]
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	f000 8083 	beq.w	8005c88 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	2b02      	cmp	r3, #2
 8005b86:	f200 80a1 	bhi.w	8005ccc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d003      	beq.n	8005b98 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d056      	beq.n	8005c44 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005b96:	e099      	b.n	8005ccc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b98:	4b88      	ldr	r3, [pc, #544]	; (8005dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 0320 	and.w	r3, r3, #32
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d02d      	beq.n	8005c00 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ba4:	4b85      	ldr	r3, [pc, #532]	; (8005dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	08db      	lsrs	r3, r3, #3
 8005baa:	f003 0303 	and.w	r3, r3, #3
 8005bae:	4a84      	ldr	r2, [pc, #528]	; (8005dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8005bb4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	ee07 3a90 	vmov	s15, r3
 8005bbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	ee07 3a90 	vmov	s15, r3
 8005bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bce:	4b7b      	ldr	r3, [pc, #492]	; (8005dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bd6:	ee07 3a90 	vmov	s15, r3
 8005bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bde:	ed97 6a03 	vldr	s12, [r7, #12]
 8005be2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bfa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005bfe:	e087      	b.n	8005d10 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	ee07 3a90 	vmov	s15, r3
 8005c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c0a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005c0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c12:	4b6a      	ldr	r3, [pc, #424]	; (8005dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c1a:	ee07 3a90 	vmov	s15, r3
 8005c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c22:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c26:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c42:	e065      	b.n	8005d10 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	ee07 3a90 	vmov	s15, r3
 8005c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c4e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005dcc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005c52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c56:	4b59      	ldr	r3, [pc, #356]	; (8005dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c5e:	ee07 3a90 	vmov	s15, r3
 8005c62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c66:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c6a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c86:	e043      	b.n	8005d10 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	ee07 3a90 	vmov	s15, r3
 8005c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c92:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005c96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c9a:	4b48      	ldr	r3, [pc, #288]	; (8005dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ca2:	ee07 3a90 	vmov	s15, r3
 8005ca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005caa:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cae:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005cb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005cca:	e021      	b.n	8005d10 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	ee07 3a90 	vmov	s15, r3
 8005cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cd6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005dcc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005cda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cde:	4b37      	ldr	r3, [pc, #220]	; (8005dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ce6:	ee07 3a90 	vmov	s15, r3
 8005cea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cee:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cf2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005cf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d0e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005d10:	4b2a      	ldr	r3, [pc, #168]	; (8005dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d14:	0a5b      	lsrs	r3, r3, #9
 8005d16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d1a:	ee07 3a90 	vmov	s15, r3
 8005d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d36:	ee17 2a90 	vmov	r2, s15
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005d3e:	4b1f      	ldr	r3, [pc, #124]	; (8005dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d42:	0c1b      	lsrs	r3, r3, #16
 8005d44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d48:	ee07 3a90 	vmov	s15, r3
 8005d4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d54:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d58:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d64:	ee17 2a90 	vmov	r2, s15
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005d6c:	4b13      	ldr	r3, [pc, #76]	; (8005dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d70:	0e1b      	lsrs	r3, r3, #24
 8005d72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d76:	ee07 3a90 	vmov	s15, r3
 8005d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d86:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d92:	ee17 2a90 	vmov	r2, s15
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005d9a:	e008      	b.n	8005dae <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	609a      	str	r2, [r3, #8]
}
 8005dae:	bf00      	nop
 8005db0:	3724      	adds	r7, #36	; 0x24
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	58024400 	.word	0x58024400
 8005dc0:	03d09000 	.word	0x03d09000
 8005dc4:	46000000 	.word	0x46000000
 8005dc8:	4c742400 	.word	0x4c742400
 8005dcc:	4a742400 	.word	0x4a742400
 8005dd0:	4af42400 	.word	0x4af42400

08005dd4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005dde:	2300      	movs	r3, #0
 8005de0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005de2:	4b53      	ldr	r3, [pc, #332]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de6:	f003 0303 	and.w	r3, r3, #3
 8005dea:	2b03      	cmp	r3, #3
 8005dec:	d101      	bne.n	8005df2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e099      	b.n	8005f26 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005df2:	4b4f      	ldr	r3, [pc, #316]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a4e      	ldr	r2, [pc, #312]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005df8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005dfc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dfe:	f7fb ff3d 	bl	8001c7c <HAL_GetTick>
 8005e02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005e04:	e008      	b.n	8005e18 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005e06:	f7fb ff39 	bl	8001c7c <HAL_GetTick>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	1ad3      	subs	r3, r2, r3
 8005e10:	2b02      	cmp	r3, #2
 8005e12:	d901      	bls.n	8005e18 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005e14:	2303      	movs	r3, #3
 8005e16:	e086      	b.n	8005f26 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005e18:	4b45      	ldr	r3, [pc, #276]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d1f0      	bne.n	8005e06 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005e24:	4b42      	ldr	r3, [pc, #264]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e28:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	031b      	lsls	r3, r3, #12
 8005e32:	493f      	ldr	r1, [pc, #252]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005e34:	4313      	orrs	r3, r2
 8005e36:	628b      	str	r3, [r1, #40]	; 0x28
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	3b01      	subs	r3, #1
 8005e48:	025b      	lsls	r3, r3, #9
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	431a      	orrs	r2, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	3b01      	subs	r3, #1
 8005e54:	041b      	lsls	r3, r3, #16
 8005e56:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005e5a:	431a      	orrs	r2, r3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	3b01      	subs	r3, #1
 8005e62:	061b      	lsls	r3, r3, #24
 8005e64:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005e68:	4931      	ldr	r1, [pc, #196]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005e6e:	4b30      	ldr	r3, [pc, #192]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e72:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	695b      	ldr	r3, [r3, #20]
 8005e7a:	492d      	ldr	r1, [pc, #180]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005e80:	4b2b      	ldr	r3, [pc, #172]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e84:	f023 0220 	bic.w	r2, r3, #32
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	699b      	ldr	r3, [r3, #24]
 8005e8c:	4928      	ldr	r1, [pc, #160]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005e92:	4b27      	ldr	r3, [pc, #156]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e96:	4a26      	ldr	r2, [pc, #152]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005e98:	f023 0310 	bic.w	r3, r3, #16
 8005e9c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005e9e:	4b24      	ldr	r3, [pc, #144]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005ea0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ea2:	4b24      	ldr	r3, [pc, #144]	; (8005f34 <RCCEx_PLL2_Config+0x160>)
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	69d2      	ldr	r2, [r2, #28]
 8005eaa:	00d2      	lsls	r2, r2, #3
 8005eac:	4920      	ldr	r1, [pc, #128]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005eb2:	4b1f      	ldr	r3, [pc, #124]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb6:	4a1e      	ldr	r2, [pc, #120]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005eb8:	f043 0310 	orr.w	r3, r3, #16
 8005ebc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d106      	bne.n	8005ed2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005ec4:	4b1a      	ldr	r3, [pc, #104]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec8:	4a19      	ldr	r2, [pc, #100]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005eca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ece:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ed0:	e00f      	b.n	8005ef2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d106      	bne.n	8005ee6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005ed8:	4b15      	ldr	r3, [pc, #84]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005edc:	4a14      	ldr	r2, [pc, #80]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005ede:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ee2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ee4:	e005      	b.n	8005ef2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005ee6:	4b12      	ldr	r3, [pc, #72]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eea:	4a11      	ldr	r2, [pc, #68]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005eec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005ef0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005ef2:	4b0f      	ldr	r3, [pc, #60]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a0e      	ldr	r2, [pc, #56]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005ef8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005efc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005efe:	f7fb febd 	bl	8001c7c <HAL_GetTick>
 8005f02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005f04:	e008      	b.n	8005f18 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005f06:	f7fb feb9 	bl	8001c7c <HAL_GetTick>
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	1ad3      	subs	r3, r2, r3
 8005f10:	2b02      	cmp	r3, #2
 8005f12:	d901      	bls.n	8005f18 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005f14:	2303      	movs	r3, #3
 8005f16:	e006      	b.n	8005f26 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005f18:	4b05      	ldr	r3, [pc, #20]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d0f0      	beq.n	8005f06 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3710      	adds	r7, #16
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	58024400 	.word	0x58024400
 8005f34:	ffff0007 	.word	0xffff0007

08005f38 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f42:	2300      	movs	r3, #0
 8005f44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005f46:	4b53      	ldr	r3, [pc, #332]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 8005f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f4a:	f003 0303 	and.w	r3, r3, #3
 8005f4e:	2b03      	cmp	r3, #3
 8005f50:	d101      	bne.n	8005f56 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e099      	b.n	800608a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005f56:	4b4f      	ldr	r3, [pc, #316]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a4e      	ldr	r2, [pc, #312]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 8005f5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f62:	f7fb fe8b 	bl	8001c7c <HAL_GetTick>
 8005f66:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005f68:	e008      	b.n	8005f7c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005f6a:	f7fb fe87 	bl	8001c7c <HAL_GetTick>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	1ad3      	subs	r3, r2, r3
 8005f74:	2b02      	cmp	r3, #2
 8005f76:	d901      	bls.n	8005f7c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	e086      	b.n	800608a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005f7c:	4b45      	ldr	r3, [pc, #276]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d1f0      	bne.n	8005f6a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005f88:	4b42      	ldr	r3, [pc, #264]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 8005f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f8c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	051b      	lsls	r3, r3, #20
 8005f96:	493f      	ldr	r1, [pc, #252]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	628b      	str	r3, [r1, #40]	; 0x28
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	3b01      	subs	r3, #1
 8005fac:	025b      	lsls	r3, r3, #9
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	431a      	orrs	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	3b01      	subs	r3, #1
 8005fb8:	041b      	lsls	r3, r3, #16
 8005fba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005fbe:	431a      	orrs	r2, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	3b01      	subs	r3, #1
 8005fc6:	061b      	lsls	r3, r3, #24
 8005fc8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005fcc:	4931      	ldr	r1, [pc, #196]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005fd2:	4b30      	ldr	r3, [pc, #192]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 8005fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	695b      	ldr	r3, [r3, #20]
 8005fde:	492d      	ldr	r1, [pc, #180]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005fe4:	4b2b      	ldr	r3, [pc, #172]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 8005fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	699b      	ldr	r3, [r3, #24]
 8005ff0:	4928      	ldr	r1, [pc, #160]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005ff6:	4b27      	ldr	r3, [pc, #156]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 8005ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ffa:	4a26      	ldr	r2, [pc, #152]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 8005ffc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006000:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006002:	4b24      	ldr	r3, [pc, #144]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 8006004:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006006:	4b24      	ldr	r3, [pc, #144]	; (8006098 <RCCEx_PLL3_Config+0x160>)
 8006008:	4013      	ands	r3, r2
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	69d2      	ldr	r2, [r2, #28]
 800600e:	00d2      	lsls	r2, r2, #3
 8006010:	4920      	ldr	r1, [pc, #128]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 8006012:	4313      	orrs	r3, r2
 8006014:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006016:	4b1f      	ldr	r3, [pc, #124]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 8006018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601a:	4a1e      	ldr	r2, [pc, #120]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 800601c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006020:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d106      	bne.n	8006036 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006028:	4b1a      	ldr	r3, [pc, #104]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 800602a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602c:	4a19      	ldr	r2, [pc, #100]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 800602e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006032:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006034:	e00f      	b.n	8006056 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	2b01      	cmp	r3, #1
 800603a:	d106      	bne.n	800604a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800603c:	4b15      	ldr	r3, [pc, #84]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 800603e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006040:	4a14      	ldr	r2, [pc, #80]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 8006042:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006046:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006048:	e005      	b.n	8006056 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800604a:	4b12      	ldr	r3, [pc, #72]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 800604c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800604e:	4a11      	ldr	r2, [pc, #68]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 8006050:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006054:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006056:	4b0f      	ldr	r3, [pc, #60]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a0e      	ldr	r2, [pc, #56]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 800605c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006060:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006062:	f7fb fe0b 	bl	8001c7c <HAL_GetTick>
 8006066:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006068:	e008      	b.n	800607c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800606a:	f7fb fe07 	bl	8001c7c <HAL_GetTick>
 800606e:	4602      	mov	r2, r0
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	1ad3      	subs	r3, r2, r3
 8006074:	2b02      	cmp	r3, #2
 8006076:	d901      	bls.n	800607c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006078:	2303      	movs	r3, #3
 800607a:	e006      	b.n	800608a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800607c:	4b05      	ldr	r3, [pc, #20]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006084:	2b00      	cmp	r3, #0
 8006086:	d0f0      	beq.n	800606a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006088:	7bfb      	ldrb	r3, [r7, #15]
}
 800608a:	4618      	mov	r0, r3
 800608c:	3710      	adds	r7, #16
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop
 8006094:	58024400 	.word	0x58024400
 8006098:	ffff0007 	.word	0xffff0007

0800609c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d101      	bne.n	80060ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e10f      	b.n	80062ce <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a87      	ldr	r2, [pc, #540]	; (80062d8 <HAL_SPI_Init+0x23c>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d00f      	beq.n	80060de <HAL_SPI_Init+0x42>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a86      	ldr	r2, [pc, #536]	; (80062dc <HAL_SPI_Init+0x240>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d00a      	beq.n	80060de <HAL_SPI_Init+0x42>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a84      	ldr	r2, [pc, #528]	; (80062e0 <HAL_SPI_Init+0x244>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d005      	beq.n	80060de <HAL_SPI_Init+0x42>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	68db      	ldr	r3, [r3, #12]
 80060d6:	2b0f      	cmp	r3, #15
 80060d8:	d901      	bls.n	80060de <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e0f7      	b.n	80062ce <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 fef6 	bl	8006ed0 <SPI_GetPacketSize>
 80060e4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a7b      	ldr	r2, [pc, #492]	; (80062d8 <HAL_SPI_Init+0x23c>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d00c      	beq.n	800610a <HAL_SPI_Init+0x6e>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a79      	ldr	r2, [pc, #484]	; (80062dc <HAL_SPI_Init+0x240>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d007      	beq.n	800610a <HAL_SPI_Init+0x6e>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a78      	ldr	r2, [pc, #480]	; (80062e0 <HAL_SPI_Init+0x244>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d002      	beq.n	800610a <HAL_SPI_Init+0x6e>
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2b08      	cmp	r3, #8
 8006108:	d811      	bhi.n	800612e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800610e:	4a72      	ldr	r2, [pc, #456]	; (80062d8 <HAL_SPI_Init+0x23c>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d009      	beq.n	8006128 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a70      	ldr	r2, [pc, #448]	; (80062dc <HAL_SPI_Init+0x240>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d004      	beq.n	8006128 <HAL_SPI_Init+0x8c>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a6f      	ldr	r2, [pc, #444]	; (80062e0 <HAL_SPI_Init+0x244>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d104      	bne.n	8006132 <HAL_SPI_Init+0x96>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2b10      	cmp	r3, #16
 800612c:	d901      	bls.n	8006132 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	e0cd      	b.n	80062ce <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006138:	b2db      	uxtb	r3, r3
 800613a:	2b00      	cmp	r3, #0
 800613c:	d106      	bne.n	800614c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f7fb f838 	bl	80011bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2202      	movs	r2, #2
 8006150:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f022 0201 	bic.w	r2, r2, #1
 8006162:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800616e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	699b      	ldr	r3, [r3, #24]
 8006174:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006178:	d119      	bne.n	80061ae <HAL_SPI_Init+0x112>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006182:	d103      	bne.n	800618c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006188:	2b00      	cmp	r3, #0
 800618a:	d008      	beq.n	800619e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006190:	2b00      	cmp	r3, #0
 8006192:	d10c      	bne.n	80061ae <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006198:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800619c:	d107      	bne.n	80061ae <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80061ac:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d00f      	beq.n	80061da <HAL_SPI_Init+0x13e>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	2b06      	cmp	r3, #6
 80061c0:	d90b      	bls.n	80061da <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	430a      	orrs	r2, r1
 80061d6:	601a      	str	r2, [r3, #0]
 80061d8:	e007      	b.n	80061ea <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80061e8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	69da      	ldr	r2, [r3, #28]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f2:	431a      	orrs	r2, r3
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	431a      	orrs	r2, r3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061fc:	ea42 0103 	orr.w	r1, r2, r3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	68da      	ldr	r2, [r3, #12]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	430a      	orrs	r2, r1
 800620a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006214:	431a      	orrs	r2, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800621a:	431a      	orrs	r2, r3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	699b      	ldr	r3, [r3, #24]
 8006220:	431a      	orrs	r2, r3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	431a      	orrs	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	695b      	ldr	r3, [r3, #20]
 800622c:	431a      	orrs	r2, r3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a1b      	ldr	r3, [r3, #32]
 8006232:	431a      	orrs	r2, r3
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	431a      	orrs	r2, r3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800623e:	431a      	orrs	r2, r3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	431a      	orrs	r2, r3
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800624a:	ea42 0103 	orr.w	r1, r2, r3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	430a      	orrs	r2, r1
 8006258:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d113      	bne.n	800628a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006274:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006288:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f022 0201 	bic.w	r2, r2, #1
 8006298:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00a      	beq.n	80062bc <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	430a      	orrs	r2, r1
 80062ba:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3710      	adds	r7, #16
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	40013000 	.word	0x40013000
 80062dc:	40003800 	.word	0x40003800
 80062e0:	40003c00 	.word	0x40003c00

080062e4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b088      	sub	sp, #32
 80062e8:	af02      	add	r7, sp, #8
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	603b      	str	r3, [r7, #0]
 80062f0:	4613      	mov	r3, r2
 80062f2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	3320      	adds	r3, #32
 80062fa:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062fc:	f7fb fcbe 	bl	8001c7c <HAL_GetTick>
 8006300:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006308:	b2db      	uxtb	r3, r3
 800630a:	2b01      	cmp	r3, #1
 800630c:	d001      	beq.n	8006312 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800630e:	2302      	movs	r3, #2
 8006310:	e1d1      	b.n	80066b6 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d002      	beq.n	800631e <HAL_SPI_Transmit+0x3a>
 8006318:	88fb      	ldrh	r3, [r7, #6]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d101      	bne.n	8006322 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e1c9      	b.n	80066b6 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006328:	2b01      	cmp	r3, #1
 800632a:	d101      	bne.n	8006330 <HAL_SPI_Transmit+0x4c>
 800632c:	2302      	movs	r3, #2
 800632e:	e1c2      	b.n	80066b6 <HAL_SPI_Transmit+0x3d2>
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2203      	movs	r2, #3
 800633c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2200      	movs	r2, #0
 8006344:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	68ba      	ldr	r2, [r7, #8]
 800634c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	88fa      	ldrh	r2, [r7, #6]
 8006352:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	88fa      	ldrh	r2, [r7, #6]
 800635a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2200      	movs	r2, #0
 8006362:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2200      	movs	r2, #0
 8006368:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2200      	movs	r2, #0
 8006370:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2200      	movs	r2, #0
 8006378:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2200      	movs	r2, #0
 800637e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8006388:	d108      	bne.n	800639c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006398:	601a      	str	r2, [r3, #0]
 800639a:	e009      	b.n	80063b0 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80063ae:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	685a      	ldr	r2, [r3, #4]
 80063b6:	4b96      	ldr	r3, [pc, #600]	; (8006610 <HAL_SPI_Transmit+0x32c>)
 80063b8:	4013      	ands	r3, r2
 80063ba:	88f9      	ldrh	r1, [r7, #6]
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	6812      	ldr	r2, [r2, #0]
 80063c0:	430b      	orrs	r3, r1
 80063c2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f042 0201 	orr.w	r2, r2, #1
 80063d2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063dc:	d107      	bne.n	80063ee <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	2b0f      	cmp	r3, #15
 80063f4:	d947      	bls.n	8006486 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80063f6:	e03f      	b.n	8006478 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	695b      	ldr	r3, [r3, #20]
 80063fe:	f003 0302 	and.w	r3, r3, #2
 8006402:	2b02      	cmp	r3, #2
 8006404:	d114      	bne.n	8006430 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	6812      	ldr	r2, [r2, #0]
 8006410:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006416:	1d1a      	adds	r2, r3, #4
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006422:	b29b      	uxth	r3, r3
 8006424:	3b01      	subs	r3, #1
 8006426:	b29a      	uxth	r2, r3
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800642e:	e023      	b.n	8006478 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006430:	f7fb fc24 	bl	8001c7c <HAL_GetTick>
 8006434:	4602      	mov	r2, r0
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	1ad3      	subs	r3, r2, r3
 800643a:	683a      	ldr	r2, [r7, #0]
 800643c:	429a      	cmp	r2, r3
 800643e:	d803      	bhi.n	8006448 <HAL_SPI_Transmit+0x164>
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006446:	d102      	bne.n	800644e <HAL_SPI_Transmit+0x16a>
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d114      	bne.n	8006478 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800644e:	68f8      	ldr	r0, [r7, #12]
 8006450:	f000 fc70 	bl	8006d34 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800645a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2200      	movs	r2, #0
 8006470:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006474:	2303      	movs	r3, #3
 8006476:	e11e      	b.n	80066b6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800647e:	b29b      	uxth	r3, r3
 8006480:	2b00      	cmp	r3, #0
 8006482:	d1b9      	bne.n	80063f8 <HAL_SPI_Transmit+0x114>
 8006484:	e0f1      	b.n	800666a <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	2b07      	cmp	r3, #7
 800648c:	f240 80e6 	bls.w	800665c <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006490:	e05d      	b.n	800654e <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	695b      	ldr	r3, [r3, #20]
 8006498:	f003 0302 	and.w	r3, r3, #2
 800649c:	2b02      	cmp	r3, #2
 800649e:	d132      	bne.n	8006506 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d918      	bls.n	80064de <HAL_SPI_Transmit+0x1fa>
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d014      	beq.n	80064de <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	6812      	ldr	r2, [r2, #0]
 80064be:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064c4:	1d1a      	adds	r2, r3, #4
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	3b02      	subs	r3, #2
 80064d4:	b29a      	uxth	r2, r3
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80064dc:	e037      	b.n	800654e <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064e2:	881a      	ldrh	r2, [r3, #0]
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064ec:	1c9a      	adds	r2, r3, #2
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	3b01      	subs	r3, #1
 80064fc:	b29a      	uxth	r2, r3
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006504:	e023      	b.n	800654e <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006506:	f7fb fbb9 	bl	8001c7c <HAL_GetTick>
 800650a:	4602      	mov	r2, r0
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	1ad3      	subs	r3, r2, r3
 8006510:	683a      	ldr	r2, [r7, #0]
 8006512:	429a      	cmp	r2, r3
 8006514:	d803      	bhi.n	800651e <HAL_SPI_Transmit+0x23a>
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800651c:	d102      	bne.n	8006524 <HAL_SPI_Transmit+0x240>
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d114      	bne.n	800654e <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006524:	68f8      	ldr	r0, [r7, #12]
 8006526:	f000 fc05 	bl	8006d34 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006530:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2201      	movs	r2, #1
 800653e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2200      	movs	r2, #0
 8006546:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800654a:	2303      	movs	r3, #3
 800654c:	e0b3      	b.n	80066b6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006554:	b29b      	uxth	r3, r3
 8006556:	2b00      	cmp	r3, #0
 8006558:	d19b      	bne.n	8006492 <HAL_SPI_Transmit+0x1ae>
 800655a:	e086      	b.n	800666a <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	695b      	ldr	r3, [r3, #20]
 8006562:	f003 0302 	and.w	r3, r3, #2
 8006566:	2b02      	cmp	r3, #2
 8006568:	d154      	bne.n	8006614 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006570:	b29b      	uxth	r3, r3
 8006572:	2b03      	cmp	r3, #3
 8006574:	d918      	bls.n	80065a8 <HAL_SPI_Transmit+0x2c4>
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800657a:	2b40      	cmp	r3, #64	; 0x40
 800657c:	d914      	bls.n	80065a8 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	6812      	ldr	r2, [r2, #0]
 8006588:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800658e:	1d1a      	adds	r2, r3, #4
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800659a:	b29b      	uxth	r3, r3
 800659c:	3b04      	subs	r3, #4
 800659e:	b29a      	uxth	r2, r3
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80065a6:	e059      	b.n	800665c <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d917      	bls.n	80065e4 <HAL_SPI_Transmit+0x300>
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d013      	beq.n	80065e4 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065c0:	881a      	ldrh	r2, [r3, #0]
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065ca:	1c9a      	adds	r2, r3, #2
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	3b02      	subs	r3, #2
 80065da:	b29a      	uxth	r2, r3
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80065e2:	e03b      	b.n	800665c <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	3320      	adds	r3, #32
 80065ee:	7812      	ldrb	r2, [r2, #0]
 80065f0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065f6:	1c5a      	adds	r2, r3, #1
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006602:	b29b      	uxth	r3, r3
 8006604:	3b01      	subs	r3, #1
 8006606:	b29a      	uxth	r2, r3
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800660e:	e025      	b.n	800665c <HAL_SPI_Transmit+0x378>
 8006610:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006614:	f7fb fb32 	bl	8001c7c <HAL_GetTick>
 8006618:	4602      	mov	r2, r0
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	683a      	ldr	r2, [r7, #0]
 8006620:	429a      	cmp	r2, r3
 8006622:	d803      	bhi.n	800662c <HAL_SPI_Transmit+0x348>
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800662a:	d102      	bne.n	8006632 <HAL_SPI_Transmit+0x34e>
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d114      	bne.n	800665c <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006632:	68f8      	ldr	r0, [r7, #12]
 8006634:	f000 fb7e 	bl	8006d34 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800663e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2200      	movs	r2, #0
 8006654:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006658:	2303      	movs	r3, #3
 800665a:	e02c      	b.n	80066b6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006662:	b29b      	uxth	r3, r3
 8006664:	2b00      	cmp	r3, #0
 8006666:	f47f af79 	bne.w	800655c <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	9300      	str	r3, [sp, #0]
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	2200      	movs	r2, #0
 8006672:	2108      	movs	r1, #8
 8006674:	68f8      	ldr	r0, [r7, #12]
 8006676:	f000 fbfd 	bl	8006e74 <SPI_WaitOnFlagUntilTimeout>
 800667a:	4603      	mov	r3, r0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d007      	beq.n	8006690 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006686:	f043 0220 	orr.w	r2, r3, #32
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006690:	68f8      	ldr	r0, [r7, #12]
 8006692:	f000 fb4f 	bl	8006d34 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2201      	movs	r2, #1
 800669a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2200      	movs	r2, #0
 80066a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d001      	beq.n	80066b4 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	e000      	b.n	80066b6 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 80066b4:	2300      	movs	r3, #0
  }
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3718      	adds	r7, #24
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop

080066c0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b08e      	sub	sp, #56	; 0x38
 80066c4:	af02      	add	r7, sp, #8
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	607a      	str	r2, [r7, #4]
 80066cc:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	3320      	adds	r3, #32
 80066d4:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	3330      	adds	r3, #48	; 0x30
 80066dc:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066e2:	095b      	lsrs	r3, r3, #5
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	3301      	adds	r3, #1
 80066e8:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80066ea:	f7fb fac7 	bl	8001c7c <HAL_GetTick>
 80066ee:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 80066f0:	887b      	ldrh	r3, [r7, #2]
 80066f2:	857b      	strh	r3, [r7, #42]	; 0x2a
  initial_RxXferCount = Size;
 80066f4:	887b      	ldrh	r3, [r7, #2]
 80066f6:	853b      	strh	r3, [r7, #40]	; 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	2b01      	cmp	r3, #1
 8006702:	d001      	beq.n	8006708 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8006704:	2302      	movs	r3, #2
 8006706:	e310      	b.n	8006d2a <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d005      	beq.n	800671a <HAL_SPI_TransmitReceive+0x5a>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d002      	beq.n	800671a <HAL_SPI_TransmitReceive+0x5a>
 8006714:	887b      	ldrh	r3, [r7, #2]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d101      	bne.n	800671e <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e305      	b.n	8006d2a <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006724:	2b01      	cmp	r3, #1
 8006726:	d101      	bne.n	800672c <HAL_SPI_TransmitReceive+0x6c>
 8006728:	2302      	movs	r3, #2
 800672a:	e2fe      	b.n	8006d2a <HAL_SPI_TransmitReceive+0x66a>
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2205      	movs	r2, #5
 8006738:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2200      	movs	r2, #0
 8006740:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	887a      	ldrh	r2, [r7, #2]
 800674e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	887a      	ldrh	r2, [r7, #2]
 8006756:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	68ba      	ldr	r2, [r7, #8]
 800675e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	887a      	ldrh	r2, [r7, #2]
 8006764:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	887a      	ldrh	r2, [r7, #2]
 800676c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2200      	movs	r2, #0
 8006774:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2200      	movs	r2, #0
 800677a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68da      	ldr	r2, [r3, #12]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 800678a:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a70      	ldr	r2, [pc, #448]	; (8006954 <HAL_SPI_TransmitReceive+0x294>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d009      	beq.n	80067aa <HAL_SPI_TransmitReceive+0xea>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a6f      	ldr	r2, [pc, #444]	; (8006958 <HAL_SPI_TransmitReceive+0x298>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d004      	beq.n	80067aa <HAL_SPI_TransmitReceive+0xea>
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a6d      	ldr	r2, [pc, #436]	; (800695c <HAL_SPI_TransmitReceive+0x29c>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d102      	bne.n	80067b0 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 80067aa:	2310      	movs	r3, #16
 80067ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067ae:	e001      	b.n	80067b4 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 80067b0:	2308      	movs	r3, #8
 80067b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	685a      	ldr	r2, [r3, #4]
 80067ba:	4b69      	ldr	r3, [pc, #420]	; (8006960 <HAL_SPI_TransmitReceive+0x2a0>)
 80067bc:	4013      	ands	r3, r2
 80067be:	8879      	ldrh	r1, [r7, #2]
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	6812      	ldr	r2, [r2, #0]
 80067c4:	430b      	orrs	r3, r1
 80067c6:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f042 0201 	orr.w	r2, r2, #1
 80067d6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067e0:	d107      	bne.n	80067f2 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	2b0f      	cmp	r3, #15
 80067f8:	f240 80a2 	bls.w	8006940 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 80067fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067fe:	089b      	lsrs	r3, r3, #2
 8006800:	62fb      	str	r3, [r7, #44]	; 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006802:	e094      	b.n	800692e <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	695b      	ldr	r3, [r3, #20]
 800680a:	f003 0302 	and.w	r3, r3, #2
 800680e:	2b02      	cmp	r3, #2
 8006810:	d120      	bne.n	8006854 <HAL_SPI_TransmitReceive+0x194>
 8006812:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006814:	2b00      	cmp	r3, #0
 8006816:	d01d      	beq.n	8006854 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8006818:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800681a:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 800681c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800681e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006820:	429a      	cmp	r2, r3
 8006822:	d217      	bcs.n	8006854 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	6812      	ldr	r2, [r2, #0]
 800682e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006834:	1d1a      	adds	r2, r3, #4
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006840:	b29b      	uxth	r3, r3
 8006842:	3b01      	subs	r3, #1
 8006844:	b29a      	uxth	r2, r3
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006852:	857b      	strh	r3, [r7, #42]	; 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	695b      	ldr	r3, [r3, #20]
 800685a:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800685c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800685e:	2b00      	cmp	r3, #0
 8006860:	d065      	beq.n	800692e <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	695b      	ldr	r3, [r3, #20]
 8006868:	f003 0301 	and.w	r3, r3, #1
 800686c:	2b01      	cmp	r3, #1
 800686e:	d118      	bne.n	80068a2 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006878:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800687a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006880:	1d1a      	adds	r2, r3, #4
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800688c:	b29b      	uxth	r3, r3
 800688e:	3b01      	subs	r3, #1
 8006890:	b29a      	uxth	r2, r3
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800689e:	853b      	strh	r3, [r7, #40]	; 0x28
 80068a0:	e045      	b.n	800692e <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80068a2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80068a4:	8bfb      	ldrh	r3, [r7, #30]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d21d      	bcs.n	80068e6 <HAL_SPI_TransmitReceive+0x226>
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d018      	beq.n	80068e6 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80068be:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068c4:	1d1a      	adds	r2, r3, #4
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	3b01      	subs	r3, #1
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80068e2:	853b      	strh	r3, [r7, #40]	; 0x28
 80068e4:	e023      	b.n	800692e <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068e6:	f7fb f9c9 	bl	8001c7c <HAL_GetTick>
 80068ea:	4602      	mov	r2, r0
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	1ad3      	subs	r3, r2, r3
 80068f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d803      	bhi.n	80068fe <HAL_SPI_TransmitReceive+0x23e>
 80068f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068fc:	d102      	bne.n	8006904 <HAL_SPI_TransmitReceive+0x244>
 80068fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006900:	2b00      	cmp	r3, #0
 8006902:	d114      	bne.n	800692e <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8006904:	68f8      	ldr	r0, [r7, #12]
 8006906:	f000 fa15 	bl	8006d34 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006910:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2201      	movs	r2, #1
 800691e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2200      	movs	r2, #0
 8006926:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

            return HAL_TIMEOUT;
 800692a:	2303      	movs	r3, #3
 800692c:	e1fd      	b.n	8006d2a <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800692e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006930:	2b00      	cmp	r3, #0
 8006932:	f47f af67 	bne.w	8006804 <HAL_SPI_TransmitReceive+0x144>
 8006936:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006938:	2b00      	cmp	r3, #0
 800693a:	f47f af63 	bne.w	8006804 <HAL_SPI_TransmitReceive+0x144>
 800693e:	e1ce      	b.n	8006cde <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	2b07      	cmp	r3, #7
 8006946:	f240 81c2 	bls.w	8006cce <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800694a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800694c:	085b      	lsrs	r3, r3, #1
 800694e:	62fb      	str	r3, [r7, #44]	; 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006950:	e0c9      	b.n	8006ae6 <HAL_SPI_TransmitReceive+0x426>
 8006952:	bf00      	nop
 8006954:	40013000 	.word	0x40013000
 8006958:	40003800 	.word	0x40003800
 800695c:	40003c00 	.word	0x40003c00
 8006960:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	695b      	ldr	r3, [r3, #20]
 800696a:	f003 0302 	and.w	r3, r3, #2
 800696e:	2b02      	cmp	r3, #2
 8006970:	d11f      	bne.n	80069b2 <HAL_SPI_TransmitReceive+0x2f2>
 8006972:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006974:	2b00      	cmp	r3, #0
 8006976:	d01c      	beq.n	80069b2 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8006978:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800697a:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 800697c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800697e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006980:	429a      	cmp	r2, r3
 8006982:	d216      	bcs.n	80069b2 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006988:	881a      	ldrh	r2, [r3, #0]
 800698a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698c:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006992:	1c9a      	adds	r2, r3, #2
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800699e:	b29b      	uxth	r3, r3
 80069a0:	3b01      	subs	r3, #1
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80069b0:	857b      	strh	r3, [r7, #42]	; 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	695b      	ldr	r3, [r3, #20]
 80069b8:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80069ba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80069bc:	2b00      	cmp	r3, #0
 80069be:	f000 8092 	beq.w	8006ae6 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	695b      	ldr	r3, [r3, #20]
 80069c8:	f003 0301 	and.w	r3, r3, #1
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d118      	bne.n	8006a02 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069d4:	6a3a      	ldr	r2, [r7, #32]
 80069d6:	8812      	ldrh	r2, [r2, #0]
 80069d8:	b292      	uxth	r2, r2
 80069da:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069e0:	1c9a      	adds	r2, r3, #2
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	3b01      	subs	r3, #1
 80069f0:	b29a      	uxth	r2, r3
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80069fe:	853b      	strh	r3, [r7, #40]	; 0x28
 8006a00:	e071      	b.n	8006ae6 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006a02:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006a04:	8bfb      	ldrh	r3, [r7, #30]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d228      	bcs.n	8006a5c <HAL_SPI_TransmitReceive+0x39c>
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d023      	beq.n	8006a5c <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a18:	6a3a      	ldr	r2, [r7, #32]
 8006a1a:	8812      	ldrh	r2, [r2, #0]
 8006a1c:	b292      	uxth	r2, r2
 8006a1e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a24:	1c9a      	adds	r2, r3, #2
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a2e:	6a3a      	ldr	r2, [r7, #32]
 8006a30:	8812      	ldrh	r2, [r2, #0]
 8006a32:	b292      	uxth	r2, r2
 8006a34:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a3a:	1c9a      	adds	r2, r3, #2
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	3b02      	subs	r3, #2
 8006a4a:	b29a      	uxth	r2, r3
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006a58:	853b      	strh	r3, [r7, #40]	; 0x28
 8006a5a:	e044      	b.n	8006ae6 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8006a5c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d11d      	bne.n	8006a9e <HAL_SPI_TransmitReceive+0x3de>
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d018      	beq.n	8006a9e <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a70:	6a3a      	ldr	r2, [r7, #32]
 8006a72:	8812      	ldrh	r2, [r2, #0]
 8006a74:	b292      	uxth	r2, r2
 8006a76:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a7c:	1c9a      	adds	r2, r3, #2
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	b29a      	uxth	r2, r3
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006a9a:	853b      	strh	r3, [r7, #40]	; 0x28
 8006a9c:	e023      	b.n	8006ae6 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a9e:	f7fb f8ed 	bl	8001c7c <HAL_GetTick>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	69bb      	ldr	r3, [r7, #24]
 8006aa6:	1ad3      	subs	r3, r2, r3
 8006aa8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d803      	bhi.n	8006ab6 <HAL_SPI_TransmitReceive+0x3f6>
 8006aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ab4:	d102      	bne.n	8006abc <HAL_SPI_TransmitReceive+0x3fc>
 8006ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d114      	bne.n	8006ae6 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8006abc:	68f8      	ldr	r0, [r7, #12]
 8006abe:	f000 f939 	bl	8006d34 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ac8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

            return HAL_TIMEOUT;
 8006ae2:	2303      	movs	r3, #3
 8006ae4:	e121      	b.n	8006d2a <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006ae6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	f47f af3b 	bne.w	8006964 <HAL_SPI_TransmitReceive+0x2a4>
 8006aee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	f47f af37 	bne.w	8006964 <HAL_SPI_TransmitReceive+0x2a4>
 8006af6:	e0f2      	b.n	8006cde <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	695b      	ldr	r3, [r3, #20]
 8006afe:	f003 0302 	and.w	r3, r3, #2
 8006b02:	2b02      	cmp	r3, #2
 8006b04:	d121      	bne.n	8006b4a <HAL_SPI_TransmitReceive+0x48a>
 8006b06:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d01e      	beq.n	8006b4a <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8006b0c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006b0e:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8006b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b12:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d218      	bcs.n	8006b4a <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	3320      	adds	r3, #32
 8006b22:	7812      	ldrb	r2, [r2, #0]
 8006b24:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b2a:	1c5a      	adds	r2, r3, #1
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	3b01      	subs	r3, #1
 8006b3a:	b29a      	uxth	r2, r3
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006b48:	857b      	strh	r3, [r7, #42]	; 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	695b      	ldr	r3, [r3, #20]
 8006b50:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8006b52:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	f000 80ba 	beq.w	8006cce <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	695b      	ldr	r3, [r3, #20]
 8006b60:	f003 0301 	and.w	r3, r3, #1
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d11b      	bne.n	8006ba0 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b74:	7812      	ldrb	r2, [r2, #0]
 8006b76:	b2d2      	uxtb	r2, r2
 8006b78:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b7e:	1c5a      	adds	r2, r3, #1
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	3b01      	subs	r3, #1
 8006b8e:	b29a      	uxth	r2, r3
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006b9c:	853b      	strh	r3, [r7, #40]	; 0x28
 8006b9e:	e096      	b.n	8006cce <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006ba0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006ba2:	8bfb      	ldrh	r3, [r7, #30]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d24a      	bcs.n	8006c3e <HAL_SPI_TransmitReceive+0x57e>
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d045      	beq.n	8006c3e <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bbe:	7812      	ldrb	r2, [r2, #0]
 8006bc0:	b2d2      	uxtb	r2, r2
 8006bc2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bc8:	1c5a      	adds	r2, r3, #1
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	665a      	str	r2, [r3, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bda:	7812      	ldrb	r2, [r2, #0]
 8006bdc:	b2d2      	uxtb	r2, r2
 8006bde:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006be4:	1c5a      	adds	r2, r3, #1
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	665a      	str	r2, [r3, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bf6:	7812      	ldrb	r2, [r2, #0]
 8006bf8:	b2d2      	uxtb	r2, r2
 8006bfa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c00:	1c5a      	adds	r2, r3, #1
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	665a      	str	r2, [r3, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c12:	7812      	ldrb	r2, [r2, #0]
 8006c14:	b2d2      	uxtb	r2, r2
 8006c16:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c1c:	1c5a      	adds	r2, r3, #1
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	3b04      	subs	r3, #4
 8006c2c:	b29a      	uxth	r2, r3
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006c3a:	853b      	strh	r3, [r7, #40]	; 0x28
 8006c3c:	e047      	b.n	8006cce <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8006c3e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006c40:	2b03      	cmp	r3, #3
 8006c42:	d820      	bhi.n	8006c86 <HAL_SPI_TransmitReceive+0x5c6>
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d01b      	beq.n	8006c86 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c5a:	7812      	ldrb	r2, [r2, #0]
 8006c5c:	b2d2      	uxtb	r2, r2
 8006c5e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c64:	1c5a      	adds	r2, r3, #1
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	3b01      	subs	r3, #1
 8006c74:	b29a      	uxth	r2, r3
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006c82:	853b      	strh	r3, [r7, #40]	; 0x28
 8006c84:	e023      	b.n	8006cce <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c86:	f7fa fff9 	bl	8001c7c <HAL_GetTick>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	1ad3      	subs	r3, r2, r3
 8006c90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d803      	bhi.n	8006c9e <HAL_SPI_TransmitReceive+0x5de>
 8006c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c9c:	d102      	bne.n	8006ca4 <HAL_SPI_TransmitReceive+0x5e4>
 8006c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d114      	bne.n	8006cce <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8006ca4:	68f8      	ldr	r0, [r7, #12]
 8006ca6:	f000 f845 	bl	8006d34 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cb0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

            return HAL_TIMEOUT;
 8006cca:	2303      	movs	r3, #3
 8006ccc:	e02d      	b.n	8006d2a <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006cce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	f47f af11 	bne.w	8006af8 <HAL_SPI_TransmitReceive+0x438>
 8006cd6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	f47f af0d 	bne.w	8006af8 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	9300      	str	r3, [sp, #0]
 8006ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	2108      	movs	r1, #8
 8006ce8:	68f8      	ldr	r0, [r7, #12]
 8006cea:	f000 f8c3 	bl	8006e74 <SPI_WaitOnFlagUntilTimeout>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d007      	beq.n	8006d04 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cfa:	f043 0220 	orr.w	r2, r3, #32
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006d04:	68f8      	ldr	r0, [r7, #12]
 8006d06:	f000 f815 	bl	8006d34 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2200      	movs	r2, #0
 8006d16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d001      	beq.n	8006d28 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8006d24:	2301      	movs	r3, #1
 8006d26:	e000      	b.n	8006d2a <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8006d28:	2300      	movs	r3, #0
  }
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3730      	adds	r7, #48	; 0x30
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop

08006d34 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	695b      	ldr	r3, [r3, #20]
 8006d42:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	699a      	ldr	r2, [r3, #24]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f042 0208 	orr.w	r2, r2, #8
 8006d52:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	699a      	ldr	r2, [r3, #24]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f042 0210 	orr.w	r2, r2, #16
 8006d62:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f022 0201 	bic.w	r2, r2, #1
 8006d72:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	6919      	ldr	r1, [r3, #16]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	4b3c      	ldr	r3, [pc, #240]	; (8006e70 <SPI_CloseTransfer+0x13c>)
 8006d80:	400b      	ands	r3, r1
 8006d82:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	689a      	ldr	r2, [r3, #8]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006d92:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	2b04      	cmp	r3, #4
 8006d9e:	d014      	beq.n	8006dca <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f003 0320 	and.w	r3, r3, #32
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d00f      	beq.n	8006dca <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006db0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	699a      	ldr	r2, [r3, #24]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f042 0220 	orr.w	r2, r2, #32
 8006dc8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	2b03      	cmp	r3, #3
 8006dd4:	d014      	beq.n	8006e00 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d00f      	beq.n	8006e00 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006de6:	f043 0204 	orr.w	r2, r3, #4
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	699a      	ldr	r2, [r3, #24]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006dfe:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d00f      	beq.n	8006e2a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e10:	f043 0201 	orr.w	r2, r3, #1
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	699a      	ldr	r2, [r3, #24]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e28:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d00f      	beq.n	8006e54 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e3a:	f043 0208 	orr.w	r2, r3, #8
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	699a      	ldr	r2, [r3, #24]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e52:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8006e64:	bf00      	nop
 8006e66:	3714      	adds	r7, #20
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr
 8006e70:	fffffc90 	.word	0xfffffc90

08006e74 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	603b      	str	r3, [r7, #0]
 8006e80:	4613      	mov	r3, r2
 8006e82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006e84:	e010      	b.n	8006ea8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e86:	f7fa fef9 	bl	8001c7c <HAL_GetTick>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	1ad3      	subs	r3, r2, r3
 8006e90:	683a      	ldr	r2, [r7, #0]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d803      	bhi.n	8006e9e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e9c:	d102      	bne.n	8006ea4 <SPI_WaitOnFlagUntilTimeout+0x30>
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d101      	bne.n	8006ea8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006ea4:	2303      	movs	r3, #3
 8006ea6:	e00f      	b.n	8006ec8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	695a      	ldr	r2, [r3, #20]
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	4013      	ands	r3, r2
 8006eb2:	68ba      	ldr	r2, [r7, #8]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	bf0c      	ite	eq
 8006eb8:	2301      	moveq	r3, #1
 8006eba:	2300      	movne	r3, #0
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	79fb      	ldrb	r3, [r7, #7]
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d0df      	beq.n	8006e86 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006ec6:	2300      	movs	r3, #0
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3710      	adds	r7, #16
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b085      	sub	sp, #20
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006edc:	095b      	lsrs	r3, r3, #5
 8006ede:	3301      	adds	r3, #1
 8006ee0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	3307      	adds	r3, #7
 8006eee:	08db      	lsrs	r3, r3, #3
 8006ef0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	68fa      	ldr	r2, [r7, #12]
 8006ef6:	fb02 f303 	mul.w	r3, r2, r3
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3714      	adds	r7, #20
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr

08006f06 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f06:	b580      	push	{r7, lr}
 8006f08:	b082      	sub	sp, #8
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d101      	bne.n	8006f18 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f14:	2301      	movs	r3, #1
 8006f16:	e042      	b.n	8006f9e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d106      	bne.n	8006f30 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f7fa f9d4 	bl	80012d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2224      	movs	r2, #36	; 0x24
 8006f34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f022 0201 	bic.w	r2, r2, #1
 8006f46:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d002      	beq.n	8006f56 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f001 fb49 	bl	80085e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 fcda 	bl	8007910 <UART_SetConfig>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d101      	bne.n	8006f66 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	e01b      	b.n	8006f9e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	685a      	ldr	r2, [r3, #4]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f74:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	689a      	ldr	r2, [r3, #8]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f84:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f042 0201 	orr.w	r2, r2, #1
 8006f94:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f001 fbc8 	bl	800872c <UART_CheckIdleState>
 8006f9c:	4603      	mov	r3, r0
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3708      	adds	r7, #8
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}

08006fa6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fa6:	b580      	push	{r7, lr}
 8006fa8:	b08a      	sub	sp, #40	; 0x28
 8006faa:	af02      	add	r7, sp, #8
 8006fac:	60f8      	str	r0, [r7, #12]
 8006fae:	60b9      	str	r1, [r7, #8]
 8006fb0:	603b      	str	r3, [r7, #0]
 8006fb2:	4613      	mov	r3, r2
 8006fb4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fbc:	2b20      	cmp	r3, #32
 8006fbe:	d17b      	bne.n	80070b8 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d002      	beq.n	8006fcc <HAL_UART_Transmit+0x26>
 8006fc6:	88fb      	ldrh	r3, [r7, #6]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d101      	bne.n	8006fd0 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e074      	b.n	80070ba <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2221      	movs	r2, #33	; 0x21
 8006fdc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006fe0:	f7fa fe4c 	bl	8001c7c <HAL_GetTick>
 8006fe4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	88fa      	ldrh	r2, [r7, #6]
 8006fea:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	88fa      	ldrh	r2, [r7, #6]
 8006ff2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ffe:	d108      	bne.n	8007012 <HAL_UART_Transmit+0x6c>
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	691b      	ldr	r3, [r3, #16]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d104      	bne.n	8007012 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007008:	2300      	movs	r3, #0
 800700a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	61bb      	str	r3, [r7, #24]
 8007010:	e003      	b.n	800701a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007016:	2300      	movs	r3, #0
 8007018:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800701a:	e030      	b.n	800707e <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	9300      	str	r3, [sp, #0]
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	2200      	movs	r2, #0
 8007024:	2180      	movs	r1, #128	; 0x80
 8007026:	68f8      	ldr	r0, [r7, #12]
 8007028:	f001 fc2a 	bl	8008880 <UART_WaitOnFlagUntilTimeout>
 800702c:	4603      	mov	r3, r0
 800702e:	2b00      	cmp	r3, #0
 8007030:	d005      	beq.n	800703e <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2220      	movs	r2, #32
 8007036:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800703a:	2303      	movs	r3, #3
 800703c:	e03d      	b.n	80070ba <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d10b      	bne.n	800705c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007044:	69bb      	ldr	r3, [r7, #24]
 8007046:	881b      	ldrh	r3, [r3, #0]
 8007048:	461a      	mov	r2, r3
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007052:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	3302      	adds	r3, #2
 8007058:	61bb      	str	r3, [r7, #24]
 800705a:	e007      	b.n	800706c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800705c:	69fb      	ldr	r3, [r7, #28]
 800705e:	781a      	ldrb	r2, [r3, #0]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007066:	69fb      	ldr	r3, [r7, #28]
 8007068:	3301      	adds	r3, #1
 800706a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007072:	b29b      	uxth	r3, r3
 8007074:	3b01      	subs	r3, #1
 8007076:	b29a      	uxth	r2, r3
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007084:	b29b      	uxth	r3, r3
 8007086:	2b00      	cmp	r3, #0
 8007088:	d1c8      	bne.n	800701c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	9300      	str	r3, [sp, #0]
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	2200      	movs	r2, #0
 8007092:	2140      	movs	r1, #64	; 0x40
 8007094:	68f8      	ldr	r0, [r7, #12]
 8007096:	f001 fbf3 	bl	8008880 <UART_WaitOnFlagUntilTimeout>
 800709a:	4603      	mov	r3, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d005      	beq.n	80070ac <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2220      	movs	r2, #32
 80070a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80070a8:	2303      	movs	r3, #3
 80070aa:	e006      	b.n	80070ba <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2220      	movs	r2, #32
 80070b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80070b4:	2300      	movs	r3, #0
 80070b6:	e000      	b.n	80070ba <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80070b8:	2302      	movs	r3, #2
  }
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3720      	adds	r7, #32
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
	...

080070c4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b08a      	sub	sp, #40	; 0x28
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	4613      	mov	r3, r2
 80070d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070d8:	2b20      	cmp	r3, #32
 80070da:	d137      	bne.n	800714c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d002      	beq.n	80070e8 <HAL_UART_Receive_IT+0x24>
 80070e2:	88fb      	ldrh	r3, [r7, #6]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d101      	bne.n	80070ec <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	e030      	b.n	800714e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2200      	movs	r2, #0
 80070f0:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a18      	ldr	r2, [pc, #96]	; (8007158 <HAL_UART_Receive_IT+0x94>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d01f      	beq.n	800713c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007106:	2b00      	cmp	r3, #0
 8007108:	d018      	beq.n	800713c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	e853 3f00 	ldrex	r3, [r3]
 8007116:	613b      	str	r3, [r7, #16]
   return(result);
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800711e:	627b      	str	r3, [r7, #36]	; 0x24
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	461a      	mov	r2, r3
 8007126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007128:	623b      	str	r3, [r7, #32]
 800712a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800712c:	69f9      	ldr	r1, [r7, #28]
 800712e:	6a3a      	ldr	r2, [r7, #32]
 8007130:	e841 2300 	strex	r3, r2, [r1]
 8007134:	61bb      	str	r3, [r7, #24]
   return(result);
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d1e6      	bne.n	800710a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800713c:	88fb      	ldrh	r3, [r7, #6]
 800713e:	461a      	mov	r2, r3
 8007140:	68b9      	ldr	r1, [r7, #8]
 8007142:	68f8      	ldr	r0, [r7, #12]
 8007144:	f001 fc0a 	bl	800895c <UART_Start_Receive_IT>
 8007148:	4603      	mov	r3, r0
 800714a:	e000      	b.n	800714e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800714c:	2302      	movs	r3, #2
  }
}
 800714e:	4618      	mov	r0, r3
 8007150:	3728      	adds	r7, #40	; 0x28
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
 8007156:	bf00      	nop
 8007158:	58000c00 	.word	0x58000c00

0800715c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b0ba      	sub	sp, #232	; 0xe8
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	69db      	ldr	r3, [r3, #28]
 800716a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007182:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007186:	f640 030f 	movw	r3, #2063	; 0x80f
 800718a:	4013      	ands	r3, r2
 800718c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007190:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007194:	2b00      	cmp	r3, #0
 8007196:	d11b      	bne.n	80071d0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800719c:	f003 0320 	and.w	r3, r3, #32
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d015      	beq.n	80071d0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80071a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071a8:	f003 0320 	and.w	r3, r3, #32
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d105      	bne.n	80071bc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80071b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d009      	beq.n	80071d0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	f000 8377 	beq.w	80078b4 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	4798      	blx	r3
      }
      return;
 80071ce:	e371      	b.n	80078b4 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80071d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	f000 8123 	beq.w	8007420 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80071da:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80071de:	4b8d      	ldr	r3, [pc, #564]	; (8007414 <HAL_UART_IRQHandler+0x2b8>)
 80071e0:	4013      	ands	r3, r2
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d106      	bne.n	80071f4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80071e6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80071ea:	4b8b      	ldr	r3, [pc, #556]	; (8007418 <HAL_UART_IRQHandler+0x2bc>)
 80071ec:	4013      	ands	r3, r2
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	f000 8116 	beq.w	8007420 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80071f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071f8:	f003 0301 	and.w	r3, r3, #1
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d011      	beq.n	8007224 <HAL_UART_IRQHandler+0xc8>
 8007200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007208:	2b00      	cmp	r3, #0
 800720a:	d00b      	beq.n	8007224 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	2201      	movs	r2, #1
 8007212:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800721a:	f043 0201 	orr.w	r2, r3, #1
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007228:	f003 0302 	and.w	r3, r3, #2
 800722c:	2b00      	cmp	r3, #0
 800722e:	d011      	beq.n	8007254 <HAL_UART_IRQHandler+0xf8>
 8007230:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007234:	f003 0301 	and.w	r3, r3, #1
 8007238:	2b00      	cmp	r3, #0
 800723a:	d00b      	beq.n	8007254 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	2202      	movs	r2, #2
 8007242:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800724a:	f043 0204 	orr.w	r2, r3, #4
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007258:	f003 0304 	and.w	r3, r3, #4
 800725c:	2b00      	cmp	r3, #0
 800725e:	d011      	beq.n	8007284 <HAL_UART_IRQHandler+0x128>
 8007260:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007264:	f003 0301 	and.w	r3, r3, #1
 8007268:	2b00      	cmp	r3, #0
 800726a:	d00b      	beq.n	8007284 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	2204      	movs	r2, #4
 8007272:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800727a:	f043 0202 	orr.w	r2, r3, #2
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007288:	f003 0308 	and.w	r3, r3, #8
 800728c:	2b00      	cmp	r3, #0
 800728e:	d017      	beq.n	80072c0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007290:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007294:	f003 0320 	and.w	r3, r3, #32
 8007298:	2b00      	cmp	r3, #0
 800729a:	d105      	bne.n	80072a8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800729c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80072a0:	4b5c      	ldr	r3, [pc, #368]	; (8007414 <HAL_UART_IRQHandler+0x2b8>)
 80072a2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d00b      	beq.n	80072c0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	2208      	movs	r2, #8
 80072ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072b6:	f043 0208 	orr.w	r2, r3, #8
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80072c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d012      	beq.n	80072f2 <HAL_UART_IRQHandler+0x196>
 80072cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d00c      	beq.n	80072f2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80072e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072e8:	f043 0220 	orr.w	r2, r3, #32
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	f000 82dd 	beq.w	80078b8 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80072fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007302:	f003 0320 	and.w	r3, r3, #32
 8007306:	2b00      	cmp	r3, #0
 8007308:	d013      	beq.n	8007332 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800730a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800730e:	f003 0320 	and.w	r3, r3, #32
 8007312:	2b00      	cmp	r3, #0
 8007314:	d105      	bne.n	8007322 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007316:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800731a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800731e:	2b00      	cmp	r3, #0
 8007320:	d007      	beq.n	8007332 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007326:	2b00      	cmp	r3, #0
 8007328:	d003      	beq.n	8007332 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007338:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007346:	2b40      	cmp	r3, #64	; 0x40
 8007348:	d005      	beq.n	8007356 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800734a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800734e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007352:	2b00      	cmp	r3, #0
 8007354:	d054      	beq.n	8007400 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f001 fc22 	bl	8008ba0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007366:	2b40      	cmp	r3, #64	; 0x40
 8007368:	d146      	bne.n	80073f8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	3308      	adds	r3, #8
 8007370:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007374:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007378:	e853 3f00 	ldrex	r3, [r3]
 800737c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007380:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007384:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007388:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	3308      	adds	r3, #8
 8007392:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007396:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800739a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800739e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80073a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80073a6:	e841 2300 	strex	r3, r2, [r1]
 80073aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80073ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d1d9      	bne.n	800736a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d017      	beq.n	80073f0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073c6:	4a15      	ldr	r2, [pc, #84]	; (800741c <HAL_UART_IRQHandler+0x2c0>)
 80073c8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073d0:	4618      	mov	r0, r3
 80073d2:	f7fb f8c5 	bl	8002560 <HAL_DMA_Abort_IT>
 80073d6:	4603      	mov	r3, r0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d019      	beq.n	8007410 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80073ea:	4610      	mov	r0, r2
 80073ec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073ee:	e00f      	b.n	8007410 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 fa77 	bl	80078e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073f6:	e00b      	b.n	8007410 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 fa73 	bl	80078e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073fe:	e007      	b.n	8007410 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 fa6f 	bl	80078e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800740e:	e253      	b.n	80078b8 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007410:	bf00      	nop
    return;
 8007412:	e251      	b.n	80078b8 <HAL_UART_IRQHandler+0x75c>
 8007414:	10000001 	.word	0x10000001
 8007418:	04000120 	.word	0x04000120
 800741c:	08008c6d 	.word	0x08008c6d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007424:	2b01      	cmp	r3, #1
 8007426:	f040 81e7 	bne.w	80077f8 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800742a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800742e:	f003 0310 	and.w	r3, r3, #16
 8007432:	2b00      	cmp	r3, #0
 8007434:	f000 81e0 	beq.w	80077f8 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800743c:	f003 0310 	and.w	r3, r3, #16
 8007440:	2b00      	cmp	r3, #0
 8007442:	f000 81d9 	beq.w	80077f8 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	2210      	movs	r2, #16
 800744c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007458:	2b40      	cmp	r3, #64	; 0x40
 800745a:	f040 8151 	bne.w	8007700 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a96      	ldr	r2, [pc, #600]	; (80076c0 <HAL_UART_IRQHandler+0x564>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d068      	beq.n	800753e <HAL_UART_IRQHandler+0x3e2>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a93      	ldr	r2, [pc, #588]	; (80076c4 <HAL_UART_IRQHandler+0x568>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d061      	beq.n	800753e <HAL_UART_IRQHandler+0x3e2>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a91      	ldr	r2, [pc, #580]	; (80076c8 <HAL_UART_IRQHandler+0x56c>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d05a      	beq.n	800753e <HAL_UART_IRQHandler+0x3e2>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a8e      	ldr	r2, [pc, #568]	; (80076cc <HAL_UART_IRQHandler+0x570>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d053      	beq.n	800753e <HAL_UART_IRQHandler+0x3e2>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a8c      	ldr	r2, [pc, #560]	; (80076d0 <HAL_UART_IRQHandler+0x574>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d04c      	beq.n	800753e <HAL_UART_IRQHandler+0x3e2>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a89      	ldr	r2, [pc, #548]	; (80076d4 <HAL_UART_IRQHandler+0x578>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d045      	beq.n	800753e <HAL_UART_IRQHandler+0x3e2>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a87      	ldr	r2, [pc, #540]	; (80076d8 <HAL_UART_IRQHandler+0x57c>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d03e      	beq.n	800753e <HAL_UART_IRQHandler+0x3e2>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a84      	ldr	r2, [pc, #528]	; (80076dc <HAL_UART_IRQHandler+0x580>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d037      	beq.n	800753e <HAL_UART_IRQHandler+0x3e2>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a82      	ldr	r2, [pc, #520]	; (80076e0 <HAL_UART_IRQHandler+0x584>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d030      	beq.n	800753e <HAL_UART_IRQHandler+0x3e2>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a7f      	ldr	r2, [pc, #508]	; (80076e4 <HAL_UART_IRQHandler+0x588>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d029      	beq.n	800753e <HAL_UART_IRQHandler+0x3e2>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a7d      	ldr	r2, [pc, #500]	; (80076e8 <HAL_UART_IRQHandler+0x58c>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d022      	beq.n	800753e <HAL_UART_IRQHandler+0x3e2>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a7a      	ldr	r2, [pc, #488]	; (80076ec <HAL_UART_IRQHandler+0x590>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d01b      	beq.n	800753e <HAL_UART_IRQHandler+0x3e2>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a78      	ldr	r2, [pc, #480]	; (80076f0 <HAL_UART_IRQHandler+0x594>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d014      	beq.n	800753e <HAL_UART_IRQHandler+0x3e2>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a75      	ldr	r2, [pc, #468]	; (80076f4 <HAL_UART_IRQHandler+0x598>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d00d      	beq.n	800753e <HAL_UART_IRQHandler+0x3e2>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a73      	ldr	r2, [pc, #460]	; (80076f8 <HAL_UART_IRQHandler+0x59c>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d006      	beq.n	800753e <HAL_UART_IRQHandler+0x3e2>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a70      	ldr	r2, [pc, #448]	; (80076fc <HAL_UART_IRQHandler+0x5a0>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d106      	bne.n	800754c <HAL_UART_IRQHandler+0x3f0>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	b29b      	uxth	r3, r3
 800754a:	e005      	b.n	8007558 <HAL_UART_IRQHandler+0x3fc>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	b29b      	uxth	r3, r3
 8007558:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800755c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007560:	2b00      	cmp	r3, #0
 8007562:	f000 81ab 	beq.w	80078bc <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800756c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007570:	429a      	cmp	r2, r3
 8007572:	f080 81a3 	bcs.w	80078bc <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800757c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007586:	69db      	ldr	r3, [r3, #28]
 8007588:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800758c:	f000 8087 	beq.w	800769e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007598:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800759c:	e853 3f00 	ldrex	r3, [r3]
 80075a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80075a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80075a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	461a      	mov	r2, r3
 80075b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80075ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80075be:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80075c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80075ca:	e841 2300 	strex	r3, r2, [r1]
 80075ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80075d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d1da      	bne.n	8007590 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	3308      	adds	r3, #8
 80075e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075e4:	e853 3f00 	ldrex	r3, [r3]
 80075e8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80075ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80075ec:	f023 0301 	bic.w	r3, r3, #1
 80075f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	3308      	adds	r3, #8
 80075fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80075fe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007602:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007604:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007606:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800760a:	e841 2300 	strex	r3, r2, [r1]
 800760e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007610:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007612:	2b00      	cmp	r3, #0
 8007614:	d1e1      	bne.n	80075da <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	3308      	adds	r3, #8
 800761c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007620:	e853 3f00 	ldrex	r3, [r3]
 8007624:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007626:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007628:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800762c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	3308      	adds	r3, #8
 8007636:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800763a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800763c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800763e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007640:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007642:	e841 2300 	strex	r3, r2, [r1]
 8007646:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007648:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800764a:	2b00      	cmp	r3, #0
 800764c:	d1e3      	bne.n	8007616 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2220      	movs	r2, #32
 8007652:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2200      	movs	r2, #0
 800765a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007664:	e853 3f00 	ldrex	r3, [r3]
 8007668:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800766a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800766c:	f023 0310 	bic.w	r3, r3, #16
 8007670:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	461a      	mov	r2, r3
 800767a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800767e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007680:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007682:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007684:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007686:	e841 2300 	strex	r3, r2, [r1]
 800768a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800768c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800768e:	2b00      	cmp	r3, #0
 8007690:	d1e4      	bne.n	800765c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007698:	4618      	mov	r0, r3
 800769a:	f7fa fc43 	bl	8001f24 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2202      	movs	r2, #2
 80076a2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	1ad3      	subs	r3, r2, r3
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	4619      	mov	r1, r3
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 f91d 	bl	80078f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80076be:	e0fd      	b.n	80078bc <HAL_UART_IRQHandler+0x760>
 80076c0:	40020010 	.word	0x40020010
 80076c4:	40020028 	.word	0x40020028
 80076c8:	40020040 	.word	0x40020040
 80076cc:	40020058 	.word	0x40020058
 80076d0:	40020070 	.word	0x40020070
 80076d4:	40020088 	.word	0x40020088
 80076d8:	400200a0 	.word	0x400200a0
 80076dc:	400200b8 	.word	0x400200b8
 80076e0:	40020410 	.word	0x40020410
 80076e4:	40020428 	.word	0x40020428
 80076e8:	40020440 	.word	0x40020440
 80076ec:	40020458 	.word	0x40020458
 80076f0:	40020470 	.word	0x40020470
 80076f4:	40020488 	.word	0x40020488
 80076f8:	400204a0 	.word	0x400204a0
 80076fc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800770c:	b29b      	uxth	r3, r3
 800770e:	1ad3      	subs	r3, r2, r3
 8007710:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800771a:	b29b      	uxth	r3, r3
 800771c:	2b00      	cmp	r3, #0
 800771e:	f000 80cf 	beq.w	80078c0 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8007722:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007726:	2b00      	cmp	r3, #0
 8007728:	f000 80ca 	beq.w	80078c0 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007734:	e853 3f00 	ldrex	r3, [r3]
 8007738:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800773a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800773c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007740:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	461a      	mov	r2, r3
 800774a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800774e:	647b      	str	r3, [r7, #68]	; 0x44
 8007750:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007752:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007754:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007756:	e841 2300 	strex	r3, r2, [r1]
 800775a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800775c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800775e:	2b00      	cmp	r3, #0
 8007760:	d1e4      	bne.n	800772c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	3308      	adds	r3, #8
 8007768:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800776a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776c:	e853 3f00 	ldrex	r3, [r3]
 8007770:	623b      	str	r3, [r7, #32]
   return(result);
 8007772:	6a3a      	ldr	r2, [r7, #32]
 8007774:	4b55      	ldr	r3, [pc, #340]	; (80078cc <HAL_UART_IRQHandler+0x770>)
 8007776:	4013      	ands	r3, r2
 8007778:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	3308      	adds	r3, #8
 8007782:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007786:	633a      	str	r2, [r7, #48]	; 0x30
 8007788:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800778a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800778c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800778e:	e841 2300 	strex	r3, r2, [r1]
 8007792:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007796:	2b00      	cmp	r3, #0
 8007798:	d1e3      	bne.n	8007762 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2220      	movs	r2, #32
 800779e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	e853 3f00 	ldrex	r3, [r3]
 80077ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f023 0310 	bic.w	r3, r3, #16
 80077c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	461a      	mov	r2, r3
 80077cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80077d0:	61fb      	str	r3, [r7, #28]
 80077d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d4:	69b9      	ldr	r1, [r7, #24]
 80077d6:	69fa      	ldr	r2, [r7, #28]
 80077d8:	e841 2300 	strex	r3, r2, [r1]
 80077dc:	617b      	str	r3, [r7, #20]
   return(result);
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d1e4      	bne.n	80077ae <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2202      	movs	r2, #2
 80077e8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80077ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80077ee:	4619      	mov	r1, r3
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 f881 	bl	80078f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80077f6:	e063      	b.n	80078c0 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80077f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007800:	2b00      	cmp	r3, #0
 8007802:	d00e      	beq.n	8007822 <HAL_UART_IRQHandler+0x6c6>
 8007804:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007808:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800780c:	2b00      	cmp	r3, #0
 800780e:	d008      	beq.n	8007822 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007818:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f001 ff84 	bl	8009728 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007820:	e051      	b.n	80078c6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800782a:	2b00      	cmp	r3, #0
 800782c:	d014      	beq.n	8007858 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800782e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007836:	2b00      	cmp	r3, #0
 8007838:	d105      	bne.n	8007846 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800783a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800783e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007842:	2b00      	cmp	r3, #0
 8007844:	d008      	beq.n	8007858 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800784a:	2b00      	cmp	r3, #0
 800784c:	d03a      	beq.n	80078c4 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	4798      	blx	r3
    }
    return;
 8007856:	e035      	b.n	80078c4 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800785c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007860:	2b00      	cmp	r3, #0
 8007862:	d009      	beq.n	8007878 <HAL_UART_IRQHandler+0x71c>
 8007864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800786c:	2b00      	cmp	r3, #0
 800786e:	d003      	beq.n	8007878 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f001 fa11 	bl	8008c98 <UART_EndTransmit_IT>
    return;
 8007876:	e026      	b.n	80078c6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800787c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007880:	2b00      	cmp	r3, #0
 8007882:	d009      	beq.n	8007898 <HAL_UART_IRQHandler+0x73c>
 8007884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007888:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800788c:	2b00      	cmp	r3, #0
 800788e:	d003      	beq.n	8007898 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f001 ff5d 	bl	8009750 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007896:	e016      	b.n	80078c6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800789c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d010      	beq.n	80078c6 <HAL_UART_IRQHandler+0x76a>
 80078a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	da0c      	bge.n	80078c6 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f001 ff45 	bl	800973c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80078b2:	e008      	b.n	80078c6 <HAL_UART_IRQHandler+0x76a>
      return;
 80078b4:	bf00      	nop
 80078b6:	e006      	b.n	80078c6 <HAL_UART_IRQHandler+0x76a>
    return;
 80078b8:	bf00      	nop
 80078ba:	e004      	b.n	80078c6 <HAL_UART_IRQHandler+0x76a>
      return;
 80078bc:	bf00      	nop
 80078be:	e002      	b.n	80078c6 <HAL_UART_IRQHandler+0x76a>
      return;
 80078c0:	bf00      	nop
 80078c2:	e000      	b.n	80078c6 <HAL_UART_IRQHandler+0x76a>
    return;
 80078c4:	bf00      	nop
  }
}
 80078c6:	37e8      	adds	r7, #232	; 0xe8
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}
 80078cc:	effffffe 	.word	0xeffffffe

080078d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b083      	sub	sp, #12
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80078d8:	bf00      	nop
 80078da:	370c      	adds	r7, #12
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b083      	sub	sp, #12
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80078ec:	bf00      	nop
 80078ee:	370c      	adds	r7, #12
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr

080078f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b083      	sub	sp, #12
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	460b      	mov	r3, r1
 8007902:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007904:	bf00      	nop
 8007906:	370c      	adds	r7, #12
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr

08007910 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007910:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007914:	b092      	sub	sp, #72	; 0x48
 8007916:	af00      	add	r7, sp, #0
 8007918:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800791a:	2300      	movs	r3, #0
 800791c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	689a      	ldr	r2, [r3, #8]
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	691b      	ldr	r3, [r3, #16]
 8007928:	431a      	orrs	r2, r3
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	695b      	ldr	r3, [r3, #20]
 800792e:	431a      	orrs	r2, r3
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	69db      	ldr	r3, [r3, #28]
 8007934:	4313      	orrs	r3, r2
 8007936:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	4bbe      	ldr	r3, [pc, #760]	; (8007c38 <UART_SetConfig+0x328>)
 8007940:	4013      	ands	r3, r2
 8007942:	697a      	ldr	r2, [r7, #20]
 8007944:	6812      	ldr	r2, [r2, #0]
 8007946:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007948:	430b      	orrs	r3, r1
 800794a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	68da      	ldr	r2, [r3, #12]
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	430a      	orrs	r2, r1
 8007960:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	699b      	ldr	r3, [r3, #24]
 8007966:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4ab3      	ldr	r2, [pc, #716]	; (8007c3c <UART_SetConfig+0x32c>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d004      	beq.n	800797c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	6a1b      	ldr	r3, [r3, #32]
 8007976:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007978:	4313      	orrs	r3, r2
 800797a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	689a      	ldr	r2, [r3, #8]
 8007982:	4baf      	ldr	r3, [pc, #700]	; (8007c40 <UART_SetConfig+0x330>)
 8007984:	4013      	ands	r3, r2
 8007986:	697a      	ldr	r2, [r7, #20]
 8007988:	6812      	ldr	r2, [r2, #0]
 800798a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800798c:	430b      	orrs	r3, r1
 800798e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007996:	f023 010f 	bic.w	r1, r3, #15
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	430a      	orrs	r2, r1
 80079a4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4aa6      	ldr	r2, [pc, #664]	; (8007c44 <UART_SetConfig+0x334>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d177      	bne.n	8007aa0 <UART_SetConfig+0x190>
 80079b0:	4ba5      	ldr	r3, [pc, #660]	; (8007c48 <UART_SetConfig+0x338>)
 80079b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80079b8:	2b28      	cmp	r3, #40	; 0x28
 80079ba:	d86d      	bhi.n	8007a98 <UART_SetConfig+0x188>
 80079bc:	a201      	add	r2, pc, #4	; (adr r2, 80079c4 <UART_SetConfig+0xb4>)
 80079be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c2:	bf00      	nop
 80079c4:	08007a69 	.word	0x08007a69
 80079c8:	08007a99 	.word	0x08007a99
 80079cc:	08007a99 	.word	0x08007a99
 80079d0:	08007a99 	.word	0x08007a99
 80079d4:	08007a99 	.word	0x08007a99
 80079d8:	08007a99 	.word	0x08007a99
 80079dc:	08007a99 	.word	0x08007a99
 80079e0:	08007a99 	.word	0x08007a99
 80079e4:	08007a71 	.word	0x08007a71
 80079e8:	08007a99 	.word	0x08007a99
 80079ec:	08007a99 	.word	0x08007a99
 80079f0:	08007a99 	.word	0x08007a99
 80079f4:	08007a99 	.word	0x08007a99
 80079f8:	08007a99 	.word	0x08007a99
 80079fc:	08007a99 	.word	0x08007a99
 8007a00:	08007a99 	.word	0x08007a99
 8007a04:	08007a79 	.word	0x08007a79
 8007a08:	08007a99 	.word	0x08007a99
 8007a0c:	08007a99 	.word	0x08007a99
 8007a10:	08007a99 	.word	0x08007a99
 8007a14:	08007a99 	.word	0x08007a99
 8007a18:	08007a99 	.word	0x08007a99
 8007a1c:	08007a99 	.word	0x08007a99
 8007a20:	08007a99 	.word	0x08007a99
 8007a24:	08007a81 	.word	0x08007a81
 8007a28:	08007a99 	.word	0x08007a99
 8007a2c:	08007a99 	.word	0x08007a99
 8007a30:	08007a99 	.word	0x08007a99
 8007a34:	08007a99 	.word	0x08007a99
 8007a38:	08007a99 	.word	0x08007a99
 8007a3c:	08007a99 	.word	0x08007a99
 8007a40:	08007a99 	.word	0x08007a99
 8007a44:	08007a89 	.word	0x08007a89
 8007a48:	08007a99 	.word	0x08007a99
 8007a4c:	08007a99 	.word	0x08007a99
 8007a50:	08007a99 	.word	0x08007a99
 8007a54:	08007a99 	.word	0x08007a99
 8007a58:	08007a99 	.word	0x08007a99
 8007a5c:	08007a99 	.word	0x08007a99
 8007a60:	08007a99 	.word	0x08007a99
 8007a64:	08007a91 	.word	0x08007a91
 8007a68:	2301      	movs	r3, #1
 8007a6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a6e:	e326      	b.n	80080be <UART_SetConfig+0x7ae>
 8007a70:	2304      	movs	r3, #4
 8007a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a76:	e322      	b.n	80080be <UART_SetConfig+0x7ae>
 8007a78:	2308      	movs	r3, #8
 8007a7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a7e:	e31e      	b.n	80080be <UART_SetConfig+0x7ae>
 8007a80:	2310      	movs	r3, #16
 8007a82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a86:	e31a      	b.n	80080be <UART_SetConfig+0x7ae>
 8007a88:	2320      	movs	r3, #32
 8007a8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a8e:	e316      	b.n	80080be <UART_SetConfig+0x7ae>
 8007a90:	2340      	movs	r3, #64	; 0x40
 8007a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a96:	e312      	b.n	80080be <UART_SetConfig+0x7ae>
 8007a98:	2380      	movs	r3, #128	; 0x80
 8007a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a9e:	e30e      	b.n	80080be <UART_SetConfig+0x7ae>
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a69      	ldr	r2, [pc, #420]	; (8007c4c <UART_SetConfig+0x33c>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d130      	bne.n	8007b0c <UART_SetConfig+0x1fc>
 8007aaa:	4b67      	ldr	r3, [pc, #412]	; (8007c48 <UART_SetConfig+0x338>)
 8007aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aae:	f003 0307 	and.w	r3, r3, #7
 8007ab2:	2b05      	cmp	r3, #5
 8007ab4:	d826      	bhi.n	8007b04 <UART_SetConfig+0x1f4>
 8007ab6:	a201      	add	r2, pc, #4	; (adr r2, 8007abc <UART_SetConfig+0x1ac>)
 8007ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007abc:	08007ad5 	.word	0x08007ad5
 8007ac0:	08007add 	.word	0x08007add
 8007ac4:	08007ae5 	.word	0x08007ae5
 8007ac8:	08007aed 	.word	0x08007aed
 8007acc:	08007af5 	.word	0x08007af5
 8007ad0:	08007afd 	.word	0x08007afd
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ada:	e2f0      	b.n	80080be <UART_SetConfig+0x7ae>
 8007adc:	2304      	movs	r3, #4
 8007ade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ae2:	e2ec      	b.n	80080be <UART_SetConfig+0x7ae>
 8007ae4:	2308      	movs	r3, #8
 8007ae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aea:	e2e8      	b.n	80080be <UART_SetConfig+0x7ae>
 8007aec:	2310      	movs	r3, #16
 8007aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007af2:	e2e4      	b.n	80080be <UART_SetConfig+0x7ae>
 8007af4:	2320      	movs	r3, #32
 8007af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007afa:	e2e0      	b.n	80080be <UART_SetConfig+0x7ae>
 8007afc:	2340      	movs	r3, #64	; 0x40
 8007afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b02:	e2dc      	b.n	80080be <UART_SetConfig+0x7ae>
 8007b04:	2380      	movs	r3, #128	; 0x80
 8007b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b0a:	e2d8      	b.n	80080be <UART_SetConfig+0x7ae>
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a4f      	ldr	r2, [pc, #316]	; (8007c50 <UART_SetConfig+0x340>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d130      	bne.n	8007b78 <UART_SetConfig+0x268>
 8007b16:	4b4c      	ldr	r3, [pc, #304]	; (8007c48 <UART_SetConfig+0x338>)
 8007b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b1a:	f003 0307 	and.w	r3, r3, #7
 8007b1e:	2b05      	cmp	r3, #5
 8007b20:	d826      	bhi.n	8007b70 <UART_SetConfig+0x260>
 8007b22:	a201      	add	r2, pc, #4	; (adr r2, 8007b28 <UART_SetConfig+0x218>)
 8007b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b28:	08007b41 	.word	0x08007b41
 8007b2c:	08007b49 	.word	0x08007b49
 8007b30:	08007b51 	.word	0x08007b51
 8007b34:	08007b59 	.word	0x08007b59
 8007b38:	08007b61 	.word	0x08007b61
 8007b3c:	08007b69 	.word	0x08007b69
 8007b40:	2300      	movs	r3, #0
 8007b42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b46:	e2ba      	b.n	80080be <UART_SetConfig+0x7ae>
 8007b48:	2304      	movs	r3, #4
 8007b4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b4e:	e2b6      	b.n	80080be <UART_SetConfig+0x7ae>
 8007b50:	2308      	movs	r3, #8
 8007b52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b56:	e2b2      	b.n	80080be <UART_SetConfig+0x7ae>
 8007b58:	2310      	movs	r3, #16
 8007b5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b5e:	e2ae      	b.n	80080be <UART_SetConfig+0x7ae>
 8007b60:	2320      	movs	r3, #32
 8007b62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b66:	e2aa      	b.n	80080be <UART_SetConfig+0x7ae>
 8007b68:	2340      	movs	r3, #64	; 0x40
 8007b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b6e:	e2a6      	b.n	80080be <UART_SetConfig+0x7ae>
 8007b70:	2380      	movs	r3, #128	; 0x80
 8007b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b76:	e2a2      	b.n	80080be <UART_SetConfig+0x7ae>
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a35      	ldr	r2, [pc, #212]	; (8007c54 <UART_SetConfig+0x344>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d130      	bne.n	8007be4 <UART_SetConfig+0x2d4>
 8007b82:	4b31      	ldr	r3, [pc, #196]	; (8007c48 <UART_SetConfig+0x338>)
 8007b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b86:	f003 0307 	and.w	r3, r3, #7
 8007b8a:	2b05      	cmp	r3, #5
 8007b8c:	d826      	bhi.n	8007bdc <UART_SetConfig+0x2cc>
 8007b8e:	a201      	add	r2, pc, #4	; (adr r2, 8007b94 <UART_SetConfig+0x284>)
 8007b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b94:	08007bad 	.word	0x08007bad
 8007b98:	08007bb5 	.word	0x08007bb5
 8007b9c:	08007bbd 	.word	0x08007bbd
 8007ba0:	08007bc5 	.word	0x08007bc5
 8007ba4:	08007bcd 	.word	0x08007bcd
 8007ba8:	08007bd5 	.word	0x08007bd5
 8007bac:	2300      	movs	r3, #0
 8007bae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bb2:	e284      	b.n	80080be <UART_SetConfig+0x7ae>
 8007bb4:	2304      	movs	r3, #4
 8007bb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bba:	e280      	b.n	80080be <UART_SetConfig+0x7ae>
 8007bbc:	2308      	movs	r3, #8
 8007bbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bc2:	e27c      	b.n	80080be <UART_SetConfig+0x7ae>
 8007bc4:	2310      	movs	r3, #16
 8007bc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bca:	e278      	b.n	80080be <UART_SetConfig+0x7ae>
 8007bcc:	2320      	movs	r3, #32
 8007bce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bd2:	e274      	b.n	80080be <UART_SetConfig+0x7ae>
 8007bd4:	2340      	movs	r3, #64	; 0x40
 8007bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bda:	e270      	b.n	80080be <UART_SetConfig+0x7ae>
 8007bdc:	2380      	movs	r3, #128	; 0x80
 8007bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007be2:	e26c      	b.n	80080be <UART_SetConfig+0x7ae>
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a1b      	ldr	r2, [pc, #108]	; (8007c58 <UART_SetConfig+0x348>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d142      	bne.n	8007c74 <UART_SetConfig+0x364>
 8007bee:	4b16      	ldr	r3, [pc, #88]	; (8007c48 <UART_SetConfig+0x338>)
 8007bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bf2:	f003 0307 	and.w	r3, r3, #7
 8007bf6:	2b05      	cmp	r3, #5
 8007bf8:	d838      	bhi.n	8007c6c <UART_SetConfig+0x35c>
 8007bfa:	a201      	add	r2, pc, #4	; (adr r2, 8007c00 <UART_SetConfig+0x2f0>)
 8007bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c00:	08007c19 	.word	0x08007c19
 8007c04:	08007c21 	.word	0x08007c21
 8007c08:	08007c29 	.word	0x08007c29
 8007c0c:	08007c31 	.word	0x08007c31
 8007c10:	08007c5d 	.word	0x08007c5d
 8007c14:	08007c65 	.word	0x08007c65
 8007c18:	2300      	movs	r3, #0
 8007c1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c1e:	e24e      	b.n	80080be <UART_SetConfig+0x7ae>
 8007c20:	2304      	movs	r3, #4
 8007c22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c26:	e24a      	b.n	80080be <UART_SetConfig+0x7ae>
 8007c28:	2308      	movs	r3, #8
 8007c2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c2e:	e246      	b.n	80080be <UART_SetConfig+0x7ae>
 8007c30:	2310      	movs	r3, #16
 8007c32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c36:	e242      	b.n	80080be <UART_SetConfig+0x7ae>
 8007c38:	cfff69f3 	.word	0xcfff69f3
 8007c3c:	58000c00 	.word	0x58000c00
 8007c40:	11fff4ff 	.word	0x11fff4ff
 8007c44:	40011000 	.word	0x40011000
 8007c48:	58024400 	.word	0x58024400
 8007c4c:	40004400 	.word	0x40004400
 8007c50:	40004800 	.word	0x40004800
 8007c54:	40004c00 	.word	0x40004c00
 8007c58:	40005000 	.word	0x40005000
 8007c5c:	2320      	movs	r3, #32
 8007c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c62:	e22c      	b.n	80080be <UART_SetConfig+0x7ae>
 8007c64:	2340      	movs	r3, #64	; 0x40
 8007c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c6a:	e228      	b.n	80080be <UART_SetConfig+0x7ae>
 8007c6c:	2380      	movs	r3, #128	; 0x80
 8007c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c72:	e224      	b.n	80080be <UART_SetConfig+0x7ae>
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4ab1      	ldr	r2, [pc, #708]	; (8007f40 <UART_SetConfig+0x630>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d176      	bne.n	8007d6c <UART_SetConfig+0x45c>
 8007c7e:	4bb1      	ldr	r3, [pc, #708]	; (8007f44 <UART_SetConfig+0x634>)
 8007c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c86:	2b28      	cmp	r3, #40	; 0x28
 8007c88:	d86c      	bhi.n	8007d64 <UART_SetConfig+0x454>
 8007c8a:	a201      	add	r2, pc, #4	; (adr r2, 8007c90 <UART_SetConfig+0x380>)
 8007c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c90:	08007d35 	.word	0x08007d35
 8007c94:	08007d65 	.word	0x08007d65
 8007c98:	08007d65 	.word	0x08007d65
 8007c9c:	08007d65 	.word	0x08007d65
 8007ca0:	08007d65 	.word	0x08007d65
 8007ca4:	08007d65 	.word	0x08007d65
 8007ca8:	08007d65 	.word	0x08007d65
 8007cac:	08007d65 	.word	0x08007d65
 8007cb0:	08007d3d 	.word	0x08007d3d
 8007cb4:	08007d65 	.word	0x08007d65
 8007cb8:	08007d65 	.word	0x08007d65
 8007cbc:	08007d65 	.word	0x08007d65
 8007cc0:	08007d65 	.word	0x08007d65
 8007cc4:	08007d65 	.word	0x08007d65
 8007cc8:	08007d65 	.word	0x08007d65
 8007ccc:	08007d65 	.word	0x08007d65
 8007cd0:	08007d45 	.word	0x08007d45
 8007cd4:	08007d65 	.word	0x08007d65
 8007cd8:	08007d65 	.word	0x08007d65
 8007cdc:	08007d65 	.word	0x08007d65
 8007ce0:	08007d65 	.word	0x08007d65
 8007ce4:	08007d65 	.word	0x08007d65
 8007ce8:	08007d65 	.word	0x08007d65
 8007cec:	08007d65 	.word	0x08007d65
 8007cf0:	08007d4d 	.word	0x08007d4d
 8007cf4:	08007d65 	.word	0x08007d65
 8007cf8:	08007d65 	.word	0x08007d65
 8007cfc:	08007d65 	.word	0x08007d65
 8007d00:	08007d65 	.word	0x08007d65
 8007d04:	08007d65 	.word	0x08007d65
 8007d08:	08007d65 	.word	0x08007d65
 8007d0c:	08007d65 	.word	0x08007d65
 8007d10:	08007d55 	.word	0x08007d55
 8007d14:	08007d65 	.word	0x08007d65
 8007d18:	08007d65 	.word	0x08007d65
 8007d1c:	08007d65 	.word	0x08007d65
 8007d20:	08007d65 	.word	0x08007d65
 8007d24:	08007d65 	.word	0x08007d65
 8007d28:	08007d65 	.word	0x08007d65
 8007d2c:	08007d65 	.word	0x08007d65
 8007d30:	08007d5d 	.word	0x08007d5d
 8007d34:	2301      	movs	r3, #1
 8007d36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d3a:	e1c0      	b.n	80080be <UART_SetConfig+0x7ae>
 8007d3c:	2304      	movs	r3, #4
 8007d3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d42:	e1bc      	b.n	80080be <UART_SetConfig+0x7ae>
 8007d44:	2308      	movs	r3, #8
 8007d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d4a:	e1b8      	b.n	80080be <UART_SetConfig+0x7ae>
 8007d4c:	2310      	movs	r3, #16
 8007d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d52:	e1b4      	b.n	80080be <UART_SetConfig+0x7ae>
 8007d54:	2320      	movs	r3, #32
 8007d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d5a:	e1b0      	b.n	80080be <UART_SetConfig+0x7ae>
 8007d5c:	2340      	movs	r3, #64	; 0x40
 8007d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d62:	e1ac      	b.n	80080be <UART_SetConfig+0x7ae>
 8007d64:	2380      	movs	r3, #128	; 0x80
 8007d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d6a:	e1a8      	b.n	80080be <UART_SetConfig+0x7ae>
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a75      	ldr	r2, [pc, #468]	; (8007f48 <UART_SetConfig+0x638>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d130      	bne.n	8007dd8 <UART_SetConfig+0x4c8>
 8007d76:	4b73      	ldr	r3, [pc, #460]	; (8007f44 <UART_SetConfig+0x634>)
 8007d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d7a:	f003 0307 	and.w	r3, r3, #7
 8007d7e:	2b05      	cmp	r3, #5
 8007d80:	d826      	bhi.n	8007dd0 <UART_SetConfig+0x4c0>
 8007d82:	a201      	add	r2, pc, #4	; (adr r2, 8007d88 <UART_SetConfig+0x478>)
 8007d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d88:	08007da1 	.word	0x08007da1
 8007d8c:	08007da9 	.word	0x08007da9
 8007d90:	08007db1 	.word	0x08007db1
 8007d94:	08007db9 	.word	0x08007db9
 8007d98:	08007dc1 	.word	0x08007dc1
 8007d9c:	08007dc9 	.word	0x08007dc9
 8007da0:	2300      	movs	r3, #0
 8007da2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007da6:	e18a      	b.n	80080be <UART_SetConfig+0x7ae>
 8007da8:	2304      	movs	r3, #4
 8007daa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dae:	e186      	b.n	80080be <UART_SetConfig+0x7ae>
 8007db0:	2308      	movs	r3, #8
 8007db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007db6:	e182      	b.n	80080be <UART_SetConfig+0x7ae>
 8007db8:	2310      	movs	r3, #16
 8007dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dbe:	e17e      	b.n	80080be <UART_SetConfig+0x7ae>
 8007dc0:	2320      	movs	r3, #32
 8007dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dc6:	e17a      	b.n	80080be <UART_SetConfig+0x7ae>
 8007dc8:	2340      	movs	r3, #64	; 0x40
 8007dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dce:	e176      	b.n	80080be <UART_SetConfig+0x7ae>
 8007dd0:	2380      	movs	r3, #128	; 0x80
 8007dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dd6:	e172      	b.n	80080be <UART_SetConfig+0x7ae>
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a5b      	ldr	r2, [pc, #364]	; (8007f4c <UART_SetConfig+0x63c>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d130      	bne.n	8007e44 <UART_SetConfig+0x534>
 8007de2:	4b58      	ldr	r3, [pc, #352]	; (8007f44 <UART_SetConfig+0x634>)
 8007de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007de6:	f003 0307 	and.w	r3, r3, #7
 8007dea:	2b05      	cmp	r3, #5
 8007dec:	d826      	bhi.n	8007e3c <UART_SetConfig+0x52c>
 8007dee:	a201      	add	r2, pc, #4	; (adr r2, 8007df4 <UART_SetConfig+0x4e4>)
 8007df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df4:	08007e0d 	.word	0x08007e0d
 8007df8:	08007e15 	.word	0x08007e15
 8007dfc:	08007e1d 	.word	0x08007e1d
 8007e00:	08007e25 	.word	0x08007e25
 8007e04:	08007e2d 	.word	0x08007e2d
 8007e08:	08007e35 	.word	0x08007e35
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e12:	e154      	b.n	80080be <UART_SetConfig+0x7ae>
 8007e14:	2304      	movs	r3, #4
 8007e16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e1a:	e150      	b.n	80080be <UART_SetConfig+0x7ae>
 8007e1c:	2308      	movs	r3, #8
 8007e1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e22:	e14c      	b.n	80080be <UART_SetConfig+0x7ae>
 8007e24:	2310      	movs	r3, #16
 8007e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e2a:	e148      	b.n	80080be <UART_SetConfig+0x7ae>
 8007e2c:	2320      	movs	r3, #32
 8007e2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e32:	e144      	b.n	80080be <UART_SetConfig+0x7ae>
 8007e34:	2340      	movs	r3, #64	; 0x40
 8007e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e3a:	e140      	b.n	80080be <UART_SetConfig+0x7ae>
 8007e3c:	2380      	movs	r3, #128	; 0x80
 8007e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e42:	e13c      	b.n	80080be <UART_SetConfig+0x7ae>
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a41      	ldr	r2, [pc, #260]	; (8007f50 <UART_SetConfig+0x640>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	f040 8082 	bne.w	8007f54 <UART_SetConfig+0x644>
 8007e50:	4b3c      	ldr	r3, [pc, #240]	; (8007f44 <UART_SetConfig+0x634>)
 8007e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e58:	2b28      	cmp	r3, #40	; 0x28
 8007e5a:	d86d      	bhi.n	8007f38 <UART_SetConfig+0x628>
 8007e5c:	a201      	add	r2, pc, #4	; (adr r2, 8007e64 <UART_SetConfig+0x554>)
 8007e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e62:	bf00      	nop
 8007e64:	08007f09 	.word	0x08007f09
 8007e68:	08007f39 	.word	0x08007f39
 8007e6c:	08007f39 	.word	0x08007f39
 8007e70:	08007f39 	.word	0x08007f39
 8007e74:	08007f39 	.word	0x08007f39
 8007e78:	08007f39 	.word	0x08007f39
 8007e7c:	08007f39 	.word	0x08007f39
 8007e80:	08007f39 	.word	0x08007f39
 8007e84:	08007f11 	.word	0x08007f11
 8007e88:	08007f39 	.word	0x08007f39
 8007e8c:	08007f39 	.word	0x08007f39
 8007e90:	08007f39 	.word	0x08007f39
 8007e94:	08007f39 	.word	0x08007f39
 8007e98:	08007f39 	.word	0x08007f39
 8007e9c:	08007f39 	.word	0x08007f39
 8007ea0:	08007f39 	.word	0x08007f39
 8007ea4:	08007f19 	.word	0x08007f19
 8007ea8:	08007f39 	.word	0x08007f39
 8007eac:	08007f39 	.word	0x08007f39
 8007eb0:	08007f39 	.word	0x08007f39
 8007eb4:	08007f39 	.word	0x08007f39
 8007eb8:	08007f39 	.word	0x08007f39
 8007ebc:	08007f39 	.word	0x08007f39
 8007ec0:	08007f39 	.word	0x08007f39
 8007ec4:	08007f21 	.word	0x08007f21
 8007ec8:	08007f39 	.word	0x08007f39
 8007ecc:	08007f39 	.word	0x08007f39
 8007ed0:	08007f39 	.word	0x08007f39
 8007ed4:	08007f39 	.word	0x08007f39
 8007ed8:	08007f39 	.word	0x08007f39
 8007edc:	08007f39 	.word	0x08007f39
 8007ee0:	08007f39 	.word	0x08007f39
 8007ee4:	08007f29 	.word	0x08007f29
 8007ee8:	08007f39 	.word	0x08007f39
 8007eec:	08007f39 	.word	0x08007f39
 8007ef0:	08007f39 	.word	0x08007f39
 8007ef4:	08007f39 	.word	0x08007f39
 8007ef8:	08007f39 	.word	0x08007f39
 8007efc:	08007f39 	.word	0x08007f39
 8007f00:	08007f39 	.word	0x08007f39
 8007f04:	08007f31 	.word	0x08007f31
 8007f08:	2301      	movs	r3, #1
 8007f0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f0e:	e0d6      	b.n	80080be <UART_SetConfig+0x7ae>
 8007f10:	2304      	movs	r3, #4
 8007f12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f16:	e0d2      	b.n	80080be <UART_SetConfig+0x7ae>
 8007f18:	2308      	movs	r3, #8
 8007f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f1e:	e0ce      	b.n	80080be <UART_SetConfig+0x7ae>
 8007f20:	2310      	movs	r3, #16
 8007f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f26:	e0ca      	b.n	80080be <UART_SetConfig+0x7ae>
 8007f28:	2320      	movs	r3, #32
 8007f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f2e:	e0c6      	b.n	80080be <UART_SetConfig+0x7ae>
 8007f30:	2340      	movs	r3, #64	; 0x40
 8007f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f36:	e0c2      	b.n	80080be <UART_SetConfig+0x7ae>
 8007f38:	2380      	movs	r3, #128	; 0x80
 8007f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f3e:	e0be      	b.n	80080be <UART_SetConfig+0x7ae>
 8007f40:	40011400 	.word	0x40011400
 8007f44:	58024400 	.word	0x58024400
 8007f48:	40007800 	.word	0x40007800
 8007f4c:	40007c00 	.word	0x40007c00
 8007f50:	40011800 	.word	0x40011800
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4aad      	ldr	r2, [pc, #692]	; (8008210 <UART_SetConfig+0x900>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d176      	bne.n	800804c <UART_SetConfig+0x73c>
 8007f5e:	4bad      	ldr	r3, [pc, #692]	; (8008214 <UART_SetConfig+0x904>)
 8007f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f66:	2b28      	cmp	r3, #40	; 0x28
 8007f68:	d86c      	bhi.n	8008044 <UART_SetConfig+0x734>
 8007f6a:	a201      	add	r2, pc, #4	; (adr r2, 8007f70 <UART_SetConfig+0x660>)
 8007f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f70:	08008015 	.word	0x08008015
 8007f74:	08008045 	.word	0x08008045
 8007f78:	08008045 	.word	0x08008045
 8007f7c:	08008045 	.word	0x08008045
 8007f80:	08008045 	.word	0x08008045
 8007f84:	08008045 	.word	0x08008045
 8007f88:	08008045 	.word	0x08008045
 8007f8c:	08008045 	.word	0x08008045
 8007f90:	0800801d 	.word	0x0800801d
 8007f94:	08008045 	.word	0x08008045
 8007f98:	08008045 	.word	0x08008045
 8007f9c:	08008045 	.word	0x08008045
 8007fa0:	08008045 	.word	0x08008045
 8007fa4:	08008045 	.word	0x08008045
 8007fa8:	08008045 	.word	0x08008045
 8007fac:	08008045 	.word	0x08008045
 8007fb0:	08008025 	.word	0x08008025
 8007fb4:	08008045 	.word	0x08008045
 8007fb8:	08008045 	.word	0x08008045
 8007fbc:	08008045 	.word	0x08008045
 8007fc0:	08008045 	.word	0x08008045
 8007fc4:	08008045 	.word	0x08008045
 8007fc8:	08008045 	.word	0x08008045
 8007fcc:	08008045 	.word	0x08008045
 8007fd0:	0800802d 	.word	0x0800802d
 8007fd4:	08008045 	.word	0x08008045
 8007fd8:	08008045 	.word	0x08008045
 8007fdc:	08008045 	.word	0x08008045
 8007fe0:	08008045 	.word	0x08008045
 8007fe4:	08008045 	.word	0x08008045
 8007fe8:	08008045 	.word	0x08008045
 8007fec:	08008045 	.word	0x08008045
 8007ff0:	08008035 	.word	0x08008035
 8007ff4:	08008045 	.word	0x08008045
 8007ff8:	08008045 	.word	0x08008045
 8007ffc:	08008045 	.word	0x08008045
 8008000:	08008045 	.word	0x08008045
 8008004:	08008045 	.word	0x08008045
 8008008:	08008045 	.word	0x08008045
 800800c:	08008045 	.word	0x08008045
 8008010:	0800803d 	.word	0x0800803d
 8008014:	2301      	movs	r3, #1
 8008016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800801a:	e050      	b.n	80080be <UART_SetConfig+0x7ae>
 800801c:	2304      	movs	r3, #4
 800801e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008022:	e04c      	b.n	80080be <UART_SetConfig+0x7ae>
 8008024:	2308      	movs	r3, #8
 8008026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800802a:	e048      	b.n	80080be <UART_SetConfig+0x7ae>
 800802c:	2310      	movs	r3, #16
 800802e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008032:	e044      	b.n	80080be <UART_SetConfig+0x7ae>
 8008034:	2320      	movs	r3, #32
 8008036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800803a:	e040      	b.n	80080be <UART_SetConfig+0x7ae>
 800803c:	2340      	movs	r3, #64	; 0x40
 800803e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008042:	e03c      	b.n	80080be <UART_SetConfig+0x7ae>
 8008044:	2380      	movs	r3, #128	; 0x80
 8008046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800804a:	e038      	b.n	80080be <UART_SetConfig+0x7ae>
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a71      	ldr	r2, [pc, #452]	; (8008218 <UART_SetConfig+0x908>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d130      	bne.n	80080b8 <UART_SetConfig+0x7a8>
 8008056:	4b6f      	ldr	r3, [pc, #444]	; (8008214 <UART_SetConfig+0x904>)
 8008058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800805a:	f003 0307 	and.w	r3, r3, #7
 800805e:	2b05      	cmp	r3, #5
 8008060:	d826      	bhi.n	80080b0 <UART_SetConfig+0x7a0>
 8008062:	a201      	add	r2, pc, #4	; (adr r2, 8008068 <UART_SetConfig+0x758>)
 8008064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008068:	08008081 	.word	0x08008081
 800806c:	08008089 	.word	0x08008089
 8008070:	08008091 	.word	0x08008091
 8008074:	08008099 	.word	0x08008099
 8008078:	080080a1 	.word	0x080080a1
 800807c:	080080a9 	.word	0x080080a9
 8008080:	2302      	movs	r3, #2
 8008082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008086:	e01a      	b.n	80080be <UART_SetConfig+0x7ae>
 8008088:	2304      	movs	r3, #4
 800808a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800808e:	e016      	b.n	80080be <UART_SetConfig+0x7ae>
 8008090:	2308      	movs	r3, #8
 8008092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008096:	e012      	b.n	80080be <UART_SetConfig+0x7ae>
 8008098:	2310      	movs	r3, #16
 800809a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800809e:	e00e      	b.n	80080be <UART_SetConfig+0x7ae>
 80080a0:	2320      	movs	r3, #32
 80080a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080a6:	e00a      	b.n	80080be <UART_SetConfig+0x7ae>
 80080a8:	2340      	movs	r3, #64	; 0x40
 80080aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080ae:	e006      	b.n	80080be <UART_SetConfig+0x7ae>
 80080b0:	2380      	movs	r3, #128	; 0x80
 80080b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080b6:	e002      	b.n	80080be <UART_SetConfig+0x7ae>
 80080b8:	2380      	movs	r3, #128	; 0x80
 80080ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a55      	ldr	r2, [pc, #340]	; (8008218 <UART_SetConfig+0x908>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	f040 80f8 	bne.w	80082ba <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80080ca:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80080ce:	2b20      	cmp	r3, #32
 80080d0:	dc46      	bgt.n	8008160 <UART_SetConfig+0x850>
 80080d2:	2b02      	cmp	r3, #2
 80080d4:	db75      	blt.n	80081c2 <UART_SetConfig+0x8b2>
 80080d6:	3b02      	subs	r3, #2
 80080d8:	2b1e      	cmp	r3, #30
 80080da:	d872      	bhi.n	80081c2 <UART_SetConfig+0x8b2>
 80080dc:	a201      	add	r2, pc, #4	; (adr r2, 80080e4 <UART_SetConfig+0x7d4>)
 80080de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080e2:	bf00      	nop
 80080e4:	08008167 	.word	0x08008167
 80080e8:	080081c3 	.word	0x080081c3
 80080ec:	0800816f 	.word	0x0800816f
 80080f0:	080081c3 	.word	0x080081c3
 80080f4:	080081c3 	.word	0x080081c3
 80080f8:	080081c3 	.word	0x080081c3
 80080fc:	0800817f 	.word	0x0800817f
 8008100:	080081c3 	.word	0x080081c3
 8008104:	080081c3 	.word	0x080081c3
 8008108:	080081c3 	.word	0x080081c3
 800810c:	080081c3 	.word	0x080081c3
 8008110:	080081c3 	.word	0x080081c3
 8008114:	080081c3 	.word	0x080081c3
 8008118:	080081c3 	.word	0x080081c3
 800811c:	0800818f 	.word	0x0800818f
 8008120:	080081c3 	.word	0x080081c3
 8008124:	080081c3 	.word	0x080081c3
 8008128:	080081c3 	.word	0x080081c3
 800812c:	080081c3 	.word	0x080081c3
 8008130:	080081c3 	.word	0x080081c3
 8008134:	080081c3 	.word	0x080081c3
 8008138:	080081c3 	.word	0x080081c3
 800813c:	080081c3 	.word	0x080081c3
 8008140:	080081c3 	.word	0x080081c3
 8008144:	080081c3 	.word	0x080081c3
 8008148:	080081c3 	.word	0x080081c3
 800814c:	080081c3 	.word	0x080081c3
 8008150:	080081c3 	.word	0x080081c3
 8008154:	080081c3 	.word	0x080081c3
 8008158:	080081c3 	.word	0x080081c3
 800815c:	080081b5 	.word	0x080081b5
 8008160:	2b40      	cmp	r3, #64	; 0x40
 8008162:	d02a      	beq.n	80081ba <UART_SetConfig+0x8aa>
 8008164:	e02d      	b.n	80081c2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008166:	f7fd fb77 	bl	8005858 <HAL_RCCEx_GetD3PCLK1Freq>
 800816a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800816c:	e02f      	b.n	80081ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800816e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008172:	4618      	mov	r0, r3
 8008174:	f7fd fb86 	bl	8005884 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800817a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800817c:	e027      	b.n	80081ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800817e:	f107 0318 	add.w	r3, r7, #24
 8008182:	4618      	mov	r0, r3
 8008184:	f7fd fcd2 	bl	8005b2c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008188:	69fb      	ldr	r3, [r7, #28]
 800818a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800818c:	e01f      	b.n	80081ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800818e:	4b21      	ldr	r3, [pc, #132]	; (8008214 <UART_SetConfig+0x904>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f003 0320 	and.w	r3, r3, #32
 8008196:	2b00      	cmp	r3, #0
 8008198:	d009      	beq.n	80081ae <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800819a:	4b1e      	ldr	r3, [pc, #120]	; (8008214 <UART_SetConfig+0x904>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	08db      	lsrs	r3, r3, #3
 80081a0:	f003 0303 	and.w	r3, r3, #3
 80081a4:	4a1d      	ldr	r2, [pc, #116]	; (800821c <UART_SetConfig+0x90c>)
 80081a6:	fa22 f303 	lsr.w	r3, r2, r3
 80081aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80081ac:	e00f      	b.n	80081ce <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80081ae:	4b1b      	ldr	r3, [pc, #108]	; (800821c <UART_SetConfig+0x90c>)
 80081b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081b2:	e00c      	b.n	80081ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80081b4:	4b1a      	ldr	r3, [pc, #104]	; (8008220 <UART_SetConfig+0x910>)
 80081b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081b8:	e009      	b.n	80081ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081c0:	e005      	b.n	80081ce <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80081c2:	2300      	movs	r3, #0
 80081c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80081c6:	2301      	movs	r3, #1
 80081c8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80081cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80081ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	f000 81ee 	beq.w	80085b2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081da:	4a12      	ldr	r2, [pc, #72]	; (8008224 <UART_SetConfig+0x914>)
 80081dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081e0:	461a      	mov	r2, r3
 80081e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80081e8:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	685a      	ldr	r2, [r3, #4]
 80081ee:	4613      	mov	r3, r2
 80081f0:	005b      	lsls	r3, r3, #1
 80081f2:	4413      	add	r3, r2
 80081f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081f6:	429a      	cmp	r2, r3
 80081f8:	d305      	bcc.n	8008206 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008200:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008202:	429a      	cmp	r2, r3
 8008204:	d910      	bls.n	8008228 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8008206:	2301      	movs	r3, #1
 8008208:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800820c:	e1d1      	b.n	80085b2 <UART_SetConfig+0xca2>
 800820e:	bf00      	nop
 8008210:	40011c00 	.word	0x40011c00
 8008214:	58024400 	.word	0x58024400
 8008218:	58000c00 	.word	0x58000c00
 800821c:	03d09000 	.word	0x03d09000
 8008220:	003d0900 	.word	0x003d0900
 8008224:	0800aa24 	.word	0x0800aa24
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800822a:	2200      	movs	r2, #0
 800822c:	60bb      	str	r3, [r7, #8]
 800822e:	60fa      	str	r2, [r7, #12]
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008234:	4ac0      	ldr	r2, [pc, #768]	; (8008538 <UART_SetConfig+0xc28>)
 8008236:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800823a:	b29b      	uxth	r3, r3
 800823c:	2200      	movs	r2, #0
 800823e:	603b      	str	r3, [r7, #0]
 8008240:	607a      	str	r2, [r7, #4]
 8008242:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008246:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800824a:	f7f8 f8b9 	bl	80003c0 <__aeabi_uldivmod>
 800824e:	4602      	mov	r2, r0
 8008250:	460b      	mov	r3, r1
 8008252:	4610      	mov	r0, r2
 8008254:	4619      	mov	r1, r3
 8008256:	f04f 0200 	mov.w	r2, #0
 800825a:	f04f 0300 	mov.w	r3, #0
 800825e:	020b      	lsls	r3, r1, #8
 8008260:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008264:	0202      	lsls	r2, r0, #8
 8008266:	6979      	ldr	r1, [r7, #20]
 8008268:	6849      	ldr	r1, [r1, #4]
 800826a:	0849      	lsrs	r1, r1, #1
 800826c:	2000      	movs	r0, #0
 800826e:	460c      	mov	r4, r1
 8008270:	4605      	mov	r5, r0
 8008272:	eb12 0804 	adds.w	r8, r2, r4
 8008276:	eb43 0905 	adc.w	r9, r3, r5
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	469a      	mov	sl, r3
 8008282:	4693      	mov	fp, r2
 8008284:	4652      	mov	r2, sl
 8008286:	465b      	mov	r3, fp
 8008288:	4640      	mov	r0, r8
 800828a:	4649      	mov	r1, r9
 800828c:	f7f8 f898 	bl	80003c0 <__aeabi_uldivmod>
 8008290:	4602      	mov	r2, r0
 8008292:	460b      	mov	r3, r1
 8008294:	4613      	mov	r3, r2
 8008296:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800829a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800829e:	d308      	bcc.n	80082b2 <UART_SetConfig+0x9a2>
 80082a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082a6:	d204      	bcs.n	80082b2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082ae:	60da      	str	r2, [r3, #12]
 80082b0:	e17f      	b.n	80085b2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80082b2:	2301      	movs	r3, #1
 80082b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80082b8:	e17b      	b.n	80085b2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	69db      	ldr	r3, [r3, #28]
 80082be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082c2:	f040 80bd 	bne.w	8008440 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80082c6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80082ca:	2b20      	cmp	r3, #32
 80082cc:	dc48      	bgt.n	8008360 <UART_SetConfig+0xa50>
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	db7b      	blt.n	80083ca <UART_SetConfig+0xaba>
 80082d2:	2b20      	cmp	r3, #32
 80082d4:	d879      	bhi.n	80083ca <UART_SetConfig+0xaba>
 80082d6:	a201      	add	r2, pc, #4	; (adr r2, 80082dc <UART_SetConfig+0x9cc>)
 80082d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082dc:	08008367 	.word	0x08008367
 80082e0:	0800836f 	.word	0x0800836f
 80082e4:	080083cb 	.word	0x080083cb
 80082e8:	080083cb 	.word	0x080083cb
 80082ec:	08008377 	.word	0x08008377
 80082f0:	080083cb 	.word	0x080083cb
 80082f4:	080083cb 	.word	0x080083cb
 80082f8:	080083cb 	.word	0x080083cb
 80082fc:	08008387 	.word	0x08008387
 8008300:	080083cb 	.word	0x080083cb
 8008304:	080083cb 	.word	0x080083cb
 8008308:	080083cb 	.word	0x080083cb
 800830c:	080083cb 	.word	0x080083cb
 8008310:	080083cb 	.word	0x080083cb
 8008314:	080083cb 	.word	0x080083cb
 8008318:	080083cb 	.word	0x080083cb
 800831c:	08008397 	.word	0x08008397
 8008320:	080083cb 	.word	0x080083cb
 8008324:	080083cb 	.word	0x080083cb
 8008328:	080083cb 	.word	0x080083cb
 800832c:	080083cb 	.word	0x080083cb
 8008330:	080083cb 	.word	0x080083cb
 8008334:	080083cb 	.word	0x080083cb
 8008338:	080083cb 	.word	0x080083cb
 800833c:	080083cb 	.word	0x080083cb
 8008340:	080083cb 	.word	0x080083cb
 8008344:	080083cb 	.word	0x080083cb
 8008348:	080083cb 	.word	0x080083cb
 800834c:	080083cb 	.word	0x080083cb
 8008350:	080083cb 	.word	0x080083cb
 8008354:	080083cb 	.word	0x080083cb
 8008358:	080083cb 	.word	0x080083cb
 800835c:	080083bd 	.word	0x080083bd
 8008360:	2b40      	cmp	r3, #64	; 0x40
 8008362:	d02e      	beq.n	80083c2 <UART_SetConfig+0xab2>
 8008364:	e031      	b.n	80083ca <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008366:	f7fc f8ab 	bl	80044c0 <HAL_RCC_GetPCLK1Freq>
 800836a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800836c:	e033      	b.n	80083d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800836e:	f7fc f8bd 	bl	80044ec <HAL_RCC_GetPCLK2Freq>
 8008372:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008374:	e02f      	b.n	80083d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008376:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800837a:	4618      	mov	r0, r3
 800837c:	f7fd fa82 	bl	8005884 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008382:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008384:	e027      	b.n	80083d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008386:	f107 0318 	add.w	r3, r7, #24
 800838a:	4618      	mov	r0, r3
 800838c:	f7fd fbce 	bl	8005b2c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008390:	69fb      	ldr	r3, [r7, #28]
 8008392:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008394:	e01f      	b.n	80083d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008396:	4b69      	ldr	r3, [pc, #420]	; (800853c <UART_SetConfig+0xc2c>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f003 0320 	and.w	r3, r3, #32
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d009      	beq.n	80083b6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80083a2:	4b66      	ldr	r3, [pc, #408]	; (800853c <UART_SetConfig+0xc2c>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	08db      	lsrs	r3, r3, #3
 80083a8:	f003 0303 	and.w	r3, r3, #3
 80083ac:	4a64      	ldr	r2, [pc, #400]	; (8008540 <UART_SetConfig+0xc30>)
 80083ae:	fa22 f303 	lsr.w	r3, r2, r3
 80083b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80083b4:	e00f      	b.n	80083d6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80083b6:	4b62      	ldr	r3, [pc, #392]	; (8008540 <UART_SetConfig+0xc30>)
 80083b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083ba:	e00c      	b.n	80083d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80083bc:	4b61      	ldr	r3, [pc, #388]	; (8008544 <UART_SetConfig+0xc34>)
 80083be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083c0:	e009      	b.n	80083d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083c8:	e005      	b.n	80083d6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80083ca:	2300      	movs	r3, #0
 80083cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80083ce:	2301      	movs	r3, #1
 80083d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80083d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80083d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083d8:	2b00      	cmp	r3, #0
 80083da:	f000 80ea 	beq.w	80085b2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e2:	4a55      	ldr	r2, [pc, #340]	; (8008538 <UART_SetConfig+0xc28>)
 80083e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083e8:	461a      	mov	r2, r3
 80083ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80083f0:	005a      	lsls	r2, r3, #1
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	085b      	lsrs	r3, r3, #1
 80083f8:	441a      	add	r2, r3
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008402:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008406:	2b0f      	cmp	r3, #15
 8008408:	d916      	bls.n	8008438 <UART_SetConfig+0xb28>
 800840a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800840c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008410:	d212      	bcs.n	8008438 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008414:	b29b      	uxth	r3, r3
 8008416:	f023 030f 	bic.w	r3, r3, #15
 800841a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800841c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800841e:	085b      	lsrs	r3, r3, #1
 8008420:	b29b      	uxth	r3, r3
 8008422:	f003 0307 	and.w	r3, r3, #7
 8008426:	b29a      	uxth	r2, r3
 8008428:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800842a:	4313      	orrs	r3, r2
 800842c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008434:	60da      	str	r2, [r3, #12]
 8008436:	e0bc      	b.n	80085b2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008438:	2301      	movs	r3, #1
 800843a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800843e:	e0b8      	b.n	80085b2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008440:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008444:	2b20      	cmp	r3, #32
 8008446:	dc4b      	bgt.n	80084e0 <UART_SetConfig+0xbd0>
 8008448:	2b00      	cmp	r3, #0
 800844a:	f2c0 8087 	blt.w	800855c <UART_SetConfig+0xc4c>
 800844e:	2b20      	cmp	r3, #32
 8008450:	f200 8084 	bhi.w	800855c <UART_SetConfig+0xc4c>
 8008454:	a201      	add	r2, pc, #4	; (adr r2, 800845c <UART_SetConfig+0xb4c>)
 8008456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800845a:	bf00      	nop
 800845c:	080084e7 	.word	0x080084e7
 8008460:	080084ef 	.word	0x080084ef
 8008464:	0800855d 	.word	0x0800855d
 8008468:	0800855d 	.word	0x0800855d
 800846c:	080084f7 	.word	0x080084f7
 8008470:	0800855d 	.word	0x0800855d
 8008474:	0800855d 	.word	0x0800855d
 8008478:	0800855d 	.word	0x0800855d
 800847c:	08008507 	.word	0x08008507
 8008480:	0800855d 	.word	0x0800855d
 8008484:	0800855d 	.word	0x0800855d
 8008488:	0800855d 	.word	0x0800855d
 800848c:	0800855d 	.word	0x0800855d
 8008490:	0800855d 	.word	0x0800855d
 8008494:	0800855d 	.word	0x0800855d
 8008498:	0800855d 	.word	0x0800855d
 800849c:	08008517 	.word	0x08008517
 80084a0:	0800855d 	.word	0x0800855d
 80084a4:	0800855d 	.word	0x0800855d
 80084a8:	0800855d 	.word	0x0800855d
 80084ac:	0800855d 	.word	0x0800855d
 80084b0:	0800855d 	.word	0x0800855d
 80084b4:	0800855d 	.word	0x0800855d
 80084b8:	0800855d 	.word	0x0800855d
 80084bc:	0800855d 	.word	0x0800855d
 80084c0:	0800855d 	.word	0x0800855d
 80084c4:	0800855d 	.word	0x0800855d
 80084c8:	0800855d 	.word	0x0800855d
 80084cc:	0800855d 	.word	0x0800855d
 80084d0:	0800855d 	.word	0x0800855d
 80084d4:	0800855d 	.word	0x0800855d
 80084d8:	0800855d 	.word	0x0800855d
 80084dc:	0800854f 	.word	0x0800854f
 80084e0:	2b40      	cmp	r3, #64	; 0x40
 80084e2:	d037      	beq.n	8008554 <UART_SetConfig+0xc44>
 80084e4:	e03a      	b.n	800855c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084e6:	f7fb ffeb 	bl	80044c0 <HAL_RCC_GetPCLK1Freq>
 80084ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80084ec:	e03c      	b.n	8008568 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80084ee:	f7fb fffd 	bl	80044ec <HAL_RCC_GetPCLK2Freq>
 80084f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80084f4:	e038      	b.n	8008568 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084fa:	4618      	mov	r0, r3
 80084fc:	f7fd f9c2 	bl	8005884 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008502:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008504:	e030      	b.n	8008568 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008506:	f107 0318 	add.w	r3, r7, #24
 800850a:	4618      	mov	r0, r3
 800850c:	f7fd fb0e 	bl	8005b2c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008510:	69fb      	ldr	r3, [r7, #28]
 8008512:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008514:	e028      	b.n	8008568 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008516:	4b09      	ldr	r3, [pc, #36]	; (800853c <UART_SetConfig+0xc2c>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f003 0320 	and.w	r3, r3, #32
 800851e:	2b00      	cmp	r3, #0
 8008520:	d012      	beq.n	8008548 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008522:	4b06      	ldr	r3, [pc, #24]	; (800853c <UART_SetConfig+0xc2c>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	08db      	lsrs	r3, r3, #3
 8008528:	f003 0303 	and.w	r3, r3, #3
 800852c:	4a04      	ldr	r2, [pc, #16]	; (8008540 <UART_SetConfig+0xc30>)
 800852e:	fa22 f303 	lsr.w	r3, r2, r3
 8008532:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008534:	e018      	b.n	8008568 <UART_SetConfig+0xc58>
 8008536:	bf00      	nop
 8008538:	0800aa24 	.word	0x0800aa24
 800853c:	58024400 	.word	0x58024400
 8008540:	03d09000 	.word	0x03d09000
 8008544:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8008548:	4b24      	ldr	r3, [pc, #144]	; (80085dc <UART_SetConfig+0xccc>)
 800854a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800854c:	e00c      	b.n	8008568 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800854e:	4b24      	ldr	r3, [pc, #144]	; (80085e0 <UART_SetConfig+0xcd0>)
 8008550:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008552:	e009      	b.n	8008568 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008554:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008558:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800855a:	e005      	b.n	8008568 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800855c:	2300      	movs	r3, #0
 800855e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008560:	2301      	movs	r3, #1
 8008562:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008566:	bf00      	nop
    }

    if (pclk != 0U)
 8008568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800856a:	2b00      	cmp	r3, #0
 800856c:	d021      	beq.n	80085b2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008572:	4a1c      	ldr	r2, [pc, #112]	; (80085e4 <UART_SetConfig+0xcd4>)
 8008574:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008578:	461a      	mov	r2, r3
 800857a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800857c:	fbb3 f2f2 	udiv	r2, r3, r2
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	085b      	lsrs	r3, r3, #1
 8008586:	441a      	add	r2, r3
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008590:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008594:	2b0f      	cmp	r3, #15
 8008596:	d909      	bls.n	80085ac <UART_SetConfig+0xc9c>
 8008598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800859a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800859e:	d205      	bcs.n	80085ac <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80085a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a2:	b29a      	uxth	r2, r3
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	60da      	str	r2, [r3, #12]
 80085aa:	e002      	b.n	80085b2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80085ac:	2301      	movs	r3, #1
 80085ae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	2201      	movs	r2, #1
 80085b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	2201      	movs	r2, #1
 80085be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	2200      	movs	r2, #0
 80085c6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	2200      	movs	r2, #0
 80085cc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80085ce:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3748      	adds	r7, #72	; 0x48
 80085d6:	46bd      	mov	sp, r7
 80085d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80085dc:	03d09000 	.word	0x03d09000
 80085e0:	003d0900 	.word	0x003d0900
 80085e4:	0800aa24 	.word	0x0800aa24

080085e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b083      	sub	sp, #12
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085f4:	f003 0308 	and.w	r3, r3, #8
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d00a      	beq.n	8008612 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	430a      	orrs	r2, r1
 8008610:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008616:	f003 0301 	and.w	r3, r3, #1
 800861a:	2b00      	cmp	r3, #0
 800861c:	d00a      	beq.n	8008634 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	430a      	orrs	r2, r1
 8008632:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008638:	f003 0302 	and.w	r3, r3, #2
 800863c:	2b00      	cmp	r3, #0
 800863e:	d00a      	beq.n	8008656 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	430a      	orrs	r2, r1
 8008654:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800865a:	f003 0304 	and.w	r3, r3, #4
 800865e:	2b00      	cmp	r3, #0
 8008660:	d00a      	beq.n	8008678 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	430a      	orrs	r2, r1
 8008676:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800867c:	f003 0310 	and.w	r3, r3, #16
 8008680:	2b00      	cmp	r3, #0
 8008682:	d00a      	beq.n	800869a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	689b      	ldr	r3, [r3, #8]
 800868a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	430a      	orrs	r2, r1
 8008698:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800869e:	f003 0320 	and.w	r3, r3, #32
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d00a      	beq.n	80086bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	689b      	ldr	r3, [r3, #8]
 80086ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	430a      	orrs	r2, r1
 80086ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d01a      	beq.n	80086fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	430a      	orrs	r2, r1
 80086dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086e6:	d10a      	bne.n	80086fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	430a      	orrs	r2, r1
 80086fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008706:	2b00      	cmp	r3, #0
 8008708:	d00a      	beq.n	8008720 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	430a      	orrs	r2, r1
 800871e:	605a      	str	r2, [r3, #4]
  }
}
 8008720:	bf00      	nop
 8008722:	370c      	adds	r7, #12
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr

0800872c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b098      	sub	sp, #96	; 0x60
 8008730:	af02      	add	r7, sp, #8
 8008732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2200      	movs	r2, #0
 8008738:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800873c:	f7f9 fa9e 	bl	8001c7c <HAL_GetTick>
 8008740:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f003 0308 	and.w	r3, r3, #8
 800874c:	2b08      	cmp	r3, #8
 800874e:	d12f      	bne.n	80087b0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008750:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008754:	9300      	str	r3, [sp, #0]
 8008756:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008758:	2200      	movs	r2, #0
 800875a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f000 f88e 	bl	8008880 <UART_WaitOnFlagUntilTimeout>
 8008764:	4603      	mov	r3, r0
 8008766:	2b00      	cmp	r3, #0
 8008768:	d022      	beq.n	80087b0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008772:	e853 3f00 	ldrex	r3, [r3]
 8008776:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800877a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800877e:	653b      	str	r3, [r7, #80]	; 0x50
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	461a      	mov	r2, r3
 8008786:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008788:	647b      	str	r3, [r7, #68]	; 0x44
 800878a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800878c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800878e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008790:	e841 2300 	strex	r3, r2, [r1]
 8008794:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008798:	2b00      	cmp	r3, #0
 800879a:	d1e6      	bne.n	800876a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2220      	movs	r2, #32
 80087a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2200      	movs	r2, #0
 80087a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087ac:	2303      	movs	r3, #3
 80087ae:	e063      	b.n	8008878 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f003 0304 	and.w	r3, r3, #4
 80087ba:	2b04      	cmp	r3, #4
 80087bc:	d149      	bne.n	8008852 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087be:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80087c2:	9300      	str	r3, [sp, #0]
 80087c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087c6:	2200      	movs	r2, #0
 80087c8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 f857 	bl	8008880 <UART_WaitOnFlagUntilTimeout>
 80087d2:	4603      	mov	r3, r0
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d03c      	beq.n	8008852 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e0:	e853 3f00 	ldrex	r3, [r3]
 80087e4:	623b      	str	r3, [r7, #32]
   return(result);
 80087e6:	6a3b      	ldr	r3, [r7, #32]
 80087e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80087ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	461a      	mov	r2, r3
 80087f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087f6:	633b      	str	r3, [r7, #48]	; 0x30
 80087f8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087fe:	e841 2300 	strex	r3, r2, [r1]
 8008802:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008806:	2b00      	cmp	r3, #0
 8008808:	d1e6      	bne.n	80087d8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	3308      	adds	r3, #8
 8008810:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	e853 3f00 	ldrex	r3, [r3]
 8008818:	60fb      	str	r3, [r7, #12]
   return(result);
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	f023 0301 	bic.w	r3, r3, #1
 8008820:	64bb      	str	r3, [r7, #72]	; 0x48
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	3308      	adds	r3, #8
 8008828:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800882a:	61fa      	str	r2, [r7, #28]
 800882c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800882e:	69b9      	ldr	r1, [r7, #24]
 8008830:	69fa      	ldr	r2, [r7, #28]
 8008832:	e841 2300 	strex	r3, r2, [r1]
 8008836:	617b      	str	r3, [r7, #20]
   return(result);
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d1e5      	bne.n	800880a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2220      	movs	r2, #32
 8008842:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2200      	movs	r2, #0
 800884a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800884e:	2303      	movs	r3, #3
 8008850:	e012      	b.n	8008878 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2220      	movs	r2, #32
 8008856:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2220      	movs	r2, #32
 800885e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2200      	movs	r2, #0
 8008866:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2200      	movs	r2, #0
 800886c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2200      	movs	r2, #0
 8008872:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008876:	2300      	movs	r3, #0
}
 8008878:	4618      	mov	r0, r3
 800887a:	3758      	adds	r7, #88	; 0x58
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b084      	sub	sp, #16
 8008884:	af00      	add	r7, sp, #0
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	60b9      	str	r1, [r7, #8]
 800888a:	603b      	str	r3, [r7, #0]
 800888c:	4613      	mov	r3, r2
 800888e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008890:	e04f      	b.n	8008932 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008892:	69bb      	ldr	r3, [r7, #24]
 8008894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008898:	d04b      	beq.n	8008932 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800889a:	f7f9 f9ef 	bl	8001c7c <HAL_GetTick>
 800889e:	4602      	mov	r2, r0
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	1ad3      	subs	r3, r2, r3
 80088a4:	69ba      	ldr	r2, [r7, #24]
 80088a6:	429a      	cmp	r2, r3
 80088a8:	d302      	bcc.n	80088b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80088aa:	69bb      	ldr	r3, [r7, #24]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d101      	bne.n	80088b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80088b0:	2303      	movs	r3, #3
 80088b2:	e04e      	b.n	8008952 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f003 0304 	and.w	r3, r3, #4
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d037      	beq.n	8008932 <UART_WaitOnFlagUntilTimeout+0xb2>
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	2b80      	cmp	r3, #128	; 0x80
 80088c6:	d034      	beq.n	8008932 <UART_WaitOnFlagUntilTimeout+0xb2>
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	2b40      	cmp	r3, #64	; 0x40
 80088cc:	d031      	beq.n	8008932 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	69db      	ldr	r3, [r3, #28]
 80088d4:	f003 0308 	and.w	r3, r3, #8
 80088d8:	2b08      	cmp	r3, #8
 80088da:	d110      	bne.n	80088fe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	2208      	movs	r2, #8
 80088e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80088e4:	68f8      	ldr	r0, [r7, #12]
 80088e6:	f000 f95b 	bl	8008ba0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2208      	movs	r2, #8
 80088ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2200      	movs	r2, #0
 80088f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80088fa:	2301      	movs	r3, #1
 80088fc:	e029      	b.n	8008952 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	69db      	ldr	r3, [r3, #28]
 8008904:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008908:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800890c:	d111      	bne.n	8008932 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008916:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008918:	68f8      	ldr	r0, [r7, #12]
 800891a:	f000 f941 	bl	8008ba0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2220      	movs	r2, #32
 8008922:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2200      	movs	r2, #0
 800892a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800892e:	2303      	movs	r3, #3
 8008930:	e00f      	b.n	8008952 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	69da      	ldr	r2, [r3, #28]
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	4013      	ands	r3, r2
 800893c:	68ba      	ldr	r2, [r7, #8]
 800893e:	429a      	cmp	r2, r3
 8008940:	bf0c      	ite	eq
 8008942:	2301      	moveq	r3, #1
 8008944:	2300      	movne	r3, #0
 8008946:	b2db      	uxtb	r3, r3
 8008948:	461a      	mov	r2, r3
 800894a:	79fb      	ldrb	r3, [r7, #7]
 800894c:	429a      	cmp	r2, r3
 800894e:	d0a0      	beq.n	8008892 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008950:	2300      	movs	r3, #0
}
 8008952:	4618      	mov	r0, r3
 8008954:	3710      	adds	r7, #16
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}
	...

0800895c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800895c:	b480      	push	{r7}
 800895e:	b0a3      	sub	sp, #140	; 0x8c
 8008960:	af00      	add	r7, sp, #0
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	60b9      	str	r1, [r7, #8]
 8008966:	4613      	mov	r3, r2
 8008968:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	68ba      	ldr	r2, [r7, #8]
 800896e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	88fa      	ldrh	r2, [r7, #6]
 8008974:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	88fa      	ldrh	r2, [r7, #6]
 800897c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2200      	movs	r2, #0
 8008984:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	689b      	ldr	r3, [r3, #8]
 800898a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800898e:	d10e      	bne.n	80089ae <UART_Start_Receive_IT+0x52>
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	691b      	ldr	r3, [r3, #16]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d105      	bne.n	80089a4 <UART_Start_Receive_IT+0x48>
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800899e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80089a2:	e02d      	b.n	8008a00 <UART_Start_Receive_IT+0xa4>
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	22ff      	movs	r2, #255	; 0xff
 80089a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80089ac:	e028      	b.n	8008a00 <UART_Start_Receive_IT+0xa4>
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d10d      	bne.n	80089d2 <UART_Start_Receive_IT+0x76>
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	691b      	ldr	r3, [r3, #16]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d104      	bne.n	80089c8 <UART_Start_Receive_IT+0x6c>
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	22ff      	movs	r2, #255	; 0xff
 80089c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80089c6:	e01b      	b.n	8008a00 <UART_Start_Receive_IT+0xa4>
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	227f      	movs	r2, #127	; 0x7f
 80089cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80089d0:	e016      	b.n	8008a00 <UART_Start_Receive_IT+0xa4>
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	689b      	ldr	r3, [r3, #8]
 80089d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80089da:	d10d      	bne.n	80089f8 <UART_Start_Receive_IT+0x9c>
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	691b      	ldr	r3, [r3, #16]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d104      	bne.n	80089ee <UART_Start_Receive_IT+0x92>
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	227f      	movs	r2, #127	; 0x7f
 80089e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80089ec:	e008      	b.n	8008a00 <UART_Start_Receive_IT+0xa4>
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	223f      	movs	r2, #63	; 0x3f
 80089f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80089f6:	e003      	b.n	8008a00 <UART_Start_Receive_IT+0xa4>
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2200      	movs	r2, #0
 80089fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2200      	movs	r2, #0
 8008a04:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2222      	movs	r2, #34	; 0x22
 8008a0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	3308      	adds	r3, #8
 8008a16:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a1a:	e853 3f00 	ldrex	r3, [r3]
 8008a1e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008a20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a22:	f043 0301 	orr.w	r3, r3, #1
 8008a26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	3308      	adds	r3, #8
 8008a30:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008a34:	673a      	str	r2, [r7, #112]	; 0x70
 8008a36:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a38:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008a3a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008a3c:	e841 2300 	strex	r3, r2, [r1]
 8008a40:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008a42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d1e3      	bne.n	8008a10 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a50:	d14f      	bne.n	8008af2 <UART_Start_Receive_IT+0x196>
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008a58:	88fa      	ldrh	r2, [r7, #6]
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d349      	bcc.n	8008af2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	689b      	ldr	r3, [r3, #8]
 8008a62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a66:	d107      	bne.n	8008a78 <UART_Start_Receive_IT+0x11c>
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	691b      	ldr	r3, [r3, #16]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d103      	bne.n	8008a78 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	4a47      	ldr	r2, [pc, #284]	; (8008b90 <UART_Start_Receive_IT+0x234>)
 8008a74:	675a      	str	r2, [r3, #116]	; 0x74
 8008a76:	e002      	b.n	8008a7e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	4a46      	ldr	r2, [pc, #280]	; (8008b94 <UART_Start_Receive_IT+0x238>)
 8008a7c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	691b      	ldr	r3, [r3, #16]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d01a      	beq.n	8008abc <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a8e:	e853 3f00 	ldrex	r3, [r3]
 8008a92:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008a94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008aa8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008aaa:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008aae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008ab0:	e841 2300 	strex	r3, r2, [r1]
 8008ab4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008ab6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d1e4      	bne.n	8008a86 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	3308      	adds	r3, #8
 8008ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ac6:	e853 3f00 	ldrex	r3, [r3]
 8008aca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ace:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ad2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	3308      	adds	r3, #8
 8008ada:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008adc:	64ba      	str	r2, [r7, #72]	; 0x48
 8008ade:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008ae2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ae4:	e841 2300 	strex	r3, r2, [r1]
 8008ae8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008aea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d1e5      	bne.n	8008abc <UART_Start_Receive_IT+0x160>
 8008af0:	e046      	b.n	8008b80 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	689b      	ldr	r3, [r3, #8]
 8008af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008afa:	d107      	bne.n	8008b0c <UART_Start_Receive_IT+0x1b0>
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	691b      	ldr	r3, [r3, #16]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d103      	bne.n	8008b0c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	4a24      	ldr	r2, [pc, #144]	; (8008b98 <UART_Start_Receive_IT+0x23c>)
 8008b08:	675a      	str	r2, [r3, #116]	; 0x74
 8008b0a:	e002      	b.n	8008b12 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	4a23      	ldr	r2, [pc, #140]	; (8008b9c <UART_Start_Receive_IT+0x240>)
 8008b10:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	691b      	ldr	r3, [r3, #16]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d019      	beq.n	8008b4e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b22:	e853 3f00 	ldrex	r3, [r3]
 8008b26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008b2e:	677b      	str	r3, [r7, #116]	; 0x74
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	461a      	mov	r2, r3
 8008b36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b38:	637b      	str	r3, [r7, #52]	; 0x34
 8008b3a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008b3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b40:	e841 2300 	strex	r3, r2, [r1]
 8008b44:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d1e6      	bne.n	8008b1a <UART_Start_Receive_IT+0x1be>
 8008b4c:	e018      	b.n	8008b80 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	e853 3f00 	ldrex	r3, [r3]
 8008b5a:	613b      	str	r3, [r7, #16]
   return(result);
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	f043 0320 	orr.w	r3, r3, #32
 8008b62:	67bb      	str	r3, [r7, #120]	; 0x78
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	461a      	mov	r2, r3
 8008b6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b6c:	623b      	str	r3, [r7, #32]
 8008b6e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b70:	69f9      	ldr	r1, [r7, #28]
 8008b72:	6a3a      	ldr	r2, [r7, #32]
 8008b74:	e841 2300 	strex	r3, r2, [r1]
 8008b78:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b7a:	69bb      	ldr	r3, [r7, #24]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d1e6      	bne.n	8008b4e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008b80:	2300      	movs	r3, #0
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	378c      	adds	r7, #140	; 0x8c
 8008b86:	46bd      	mov	sp, r7
 8008b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8c:	4770      	bx	lr
 8008b8e:	bf00      	nop
 8008b90:	080093c1 	.word	0x080093c1
 8008b94:	08009061 	.word	0x08009061
 8008b98:	08008ea9 	.word	0x08008ea9
 8008b9c:	08008cf1 	.word	0x08008cf1

08008ba0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b095      	sub	sp, #84	; 0x54
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bb0:	e853 3f00 	ldrex	r3, [r3]
 8008bb4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008bbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bc6:	643b      	str	r3, [r7, #64]	; 0x40
 8008bc8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008bcc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008bce:	e841 2300 	strex	r3, r2, [r1]
 8008bd2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d1e6      	bne.n	8008ba8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	3308      	adds	r3, #8
 8008be0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008be2:	6a3b      	ldr	r3, [r7, #32]
 8008be4:	e853 3f00 	ldrex	r3, [r3]
 8008be8:	61fb      	str	r3, [r7, #28]
   return(result);
 8008bea:	69fa      	ldr	r2, [r7, #28]
 8008bec:	4b1e      	ldr	r3, [pc, #120]	; (8008c68 <UART_EndRxTransfer+0xc8>)
 8008bee:	4013      	ands	r3, r2
 8008bf0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	3308      	adds	r3, #8
 8008bf8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008bfa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008bfc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bfe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c02:	e841 2300 	strex	r3, r2, [r1]
 8008c06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d1e5      	bne.n	8008bda <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	d118      	bne.n	8008c48 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	e853 3f00 	ldrex	r3, [r3]
 8008c22:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	f023 0310 	bic.w	r3, r3, #16
 8008c2a:	647b      	str	r3, [r7, #68]	; 0x44
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	461a      	mov	r2, r3
 8008c32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c34:	61bb      	str	r3, [r7, #24]
 8008c36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c38:	6979      	ldr	r1, [r7, #20]
 8008c3a:	69ba      	ldr	r2, [r7, #24]
 8008c3c:	e841 2300 	strex	r3, r2, [r1]
 8008c40:	613b      	str	r3, [r7, #16]
   return(result);
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d1e6      	bne.n	8008c16 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2220      	movs	r2, #32
 8008c4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2200      	movs	r2, #0
 8008c54:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008c5c:	bf00      	nop
 8008c5e:	3754      	adds	r7, #84	; 0x54
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr
 8008c68:	effffffe 	.word	0xeffffffe

08008c6c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b084      	sub	sp, #16
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2200      	movs	r2, #0
 8008c86:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c8a:	68f8      	ldr	r0, [r7, #12]
 8008c8c:	f7fe fe2a 	bl	80078e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c90:	bf00      	nop
 8008c92:	3710      	adds	r7, #16
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b088      	sub	sp, #32
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	e853 3f00 	ldrex	r3, [r3]
 8008cac:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cb4:	61fb      	str	r3, [r7, #28]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	461a      	mov	r2, r3
 8008cbc:	69fb      	ldr	r3, [r7, #28]
 8008cbe:	61bb      	str	r3, [r7, #24]
 8008cc0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cc2:	6979      	ldr	r1, [r7, #20]
 8008cc4:	69ba      	ldr	r2, [r7, #24]
 8008cc6:	e841 2300 	strex	r3, r2, [r1]
 8008cca:	613b      	str	r3, [r7, #16]
   return(result);
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d1e6      	bne.n	8008ca0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2220      	movs	r2, #32
 8008cd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f7fe fdf5 	bl	80078d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ce6:	bf00      	nop
 8008ce8:	3720      	adds	r7, #32
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}
	...

08008cf0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b09c      	sub	sp, #112	; 0x70
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008cfe:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d08:	2b22      	cmp	r3, #34	; 0x22
 8008d0a:	f040 80be 	bne.w	8008e8a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d14:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008d18:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008d1c:	b2d9      	uxtb	r1, r3
 8008d1e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008d22:	b2da      	uxtb	r2, r3
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d28:	400a      	ands	r2, r1
 8008d2a:	b2d2      	uxtb	r2, r2
 8008d2c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d32:	1c5a      	adds	r2, r3, #1
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	3b01      	subs	r3, #1
 8008d42:	b29a      	uxth	r2, r3
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008d50:	b29b      	uxth	r3, r3
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	f040 80a1 	bne.w	8008e9a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d60:	e853 3f00 	ldrex	r3, [r3]
 8008d64:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008d66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d6c:	66bb      	str	r3, [r7, #104]	; 0x68
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	461a      	mov	r2, r3
 8008d74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d76:	65bb      	str	r3, [r7, #88]	; 0x58
 8008d78:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d7a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008d7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008d7e:	e841 2300 	strex	r3, r2, [r1]
 8008d82:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008d84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d1e6      	bne.n	8008d58 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	3308      	adds	r3, #8
 8008d90:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d94:	e853 3f00 	ldrex	r3, [r3]
 8008d98:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d9c:	f023 0301 	bic.w	r3, r3, #1
 8008da0:	667b      	str	r3, [r7, #100]	; 0x64
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	3308      	adds	r3, #8
 8008da8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008daa:	647a      	str	r2, [r7, #68]	; 0x44
 8008dac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008db0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008db2:	e841 2300 	strex	r3, r2, [r1]
 8008db6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d1e5      	bne.n	8008d8a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2220      	movs	r2, #32
 8008dc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4a33      	ldr	r2, [pc, #204]	; (8008ea4 <UART_RxISR_8BIT+0x1b4>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d01f      	beq.n	8008e1c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d018      	beq.n	8008e1c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df2:	e853 3f00 	ldrex	r3, [r3]
 8008df6:	623b      	str	r3, [r7, #32]
   return(result);
 8008df8:	6a3b      	ldr	r3, [r7, #32]
 8008dfa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008dfe:	663b      	str	r3, [r7, #96]	; 0x60
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	461a      	mov	r2, r3
 8008e06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008e08:	633b      	str	r3, [r7, #48]	; 0x30
 8008e0a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e10:	e841 2300 	strex	r3, r2, [r1]
 8008e14:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d1e6      	bne.n	8008dea <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d12e      	bne.n	8008e82 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2200      	movs	r2, #0
 8008e28:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	e853 3f00 	ldrex	r3, [r3]
 8008e36:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f023 0310 	bic.w	r3, r3, #16
 8008e3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	461a      	mov	r2, r3
 8008e46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e48:	61fb      	str	r3, [r7, #28]
 8008e4a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e4c:	69b9      	ldr	r1, [r7, #24]
 8008e4e:	69fa      	ldr	r2, [r7, #28]
 8008e50:	e841 2300 	strex	r3, r2, [r1]
 8008e54:	617b      	str	r3, [r7, #20]
   return(result);
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d1e6      	bne.n	8008e2a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	69db      	ldr	r3, [r3, #28]
 8008e62:	f003 0310 	and.w	r3, r3, #16
 8008e66:	2b10      	cmp	r3, #16
 8008e68:	d103      	bne.n	8008e72 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	2210      	movs	r2, #16
 8008e70:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008e78:	4619      	mov	r1, r3
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f7fe fd3c 	bl	80078f8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008e80:	e00b      	b.n	8008e9a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f7f7 fd6c 	bl	8000960 <HAL_UART_RxCpltCallback>
}
 8008e88:	e007      	b.n	8008e9a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	699a      	ldr	r2, [r3, #24]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f042 0208 	orr.w	r2, r2, #8
 8008e98:	619a      	str	r2, [r3, #24]
}
 8008e9a:	bf00      	nop
 8008e9c:	3770      	adds	r7, #112	; 0x70
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
 8008ea2:	bf00      	nop
 8008ea4:	58000c00 	.word	0x58000c00

08008ea8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b09c      	sub	sp, #112	; 0x70
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008eb6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ec0:	2b22      	cmp	r3, #34	; 0x22
 8008ec2:	f040 80be 	bne.w	8009042 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ecc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ed4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008ed6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8008eda:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008ede:	4013      	ands	r3, r2
 8008ee0:	b29a      	uxth	r2, r3
 8008ee2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008ee4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eea:	1c9a      	adds	r2, r3, #2
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ef6:	b29b      	uxth	r3, r3
 8008ef8:	3b01      	subs	r3, #1
 8008efa:	b29a      	uxth	r2, r3
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	f040 80a1 	bne.w	8009052 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f18:	e853 3f00 	ldrex	r3, [r3]
 8008f1c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008f1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008f24:	667b      	str	r3, [r7, #100]	; 0x64
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	461a      	mov	r2, r3
 8008f2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f2e:	657b      	str	r3, [r7, #84]	; 0x54
 8008f30:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f32:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008f34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008f36:	e841 2300 	strex	r3, r2, [r1]
 8008f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008f3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d1e6      	bne.n	8008f10 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	3308      	adds	r3, #8
 8008f48:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f4c:	e853 3f00 	ldrex	r3, [r3]
 8008f50:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f54:	f023 0301 	bic.w	r3, r3, #1
 8008f58:	663b      	str	r3, [r7, #96]	; 0x60
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	3308      	adds	r3, #8
 8008f60:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008f62:	643a      	str	r2, [r7, #64]	; 0x40
 8008f64:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f66:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008f68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008f6a:	e841 2300 	strex	r3, r2, [r1]
 8008f6e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d1e5      	bne.n	8008f42 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2220      	movs	r2, #32
 8008f7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2200      	movs	r2, #0
 8008f82:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2200      	movs	r2, #0
 8008f88:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	4a33      	ldr	r2, [pc, #204]	; (800905c <UART_RxISR_16BIT+0x1b4>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d01f      	beq.n	8008fd4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	685b      	ldr	r3, [r3, #4]
 8008f9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d018      	beq.n	8008fd4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa8:	6a3b      	ldr	r3, [r7, #32]
 8008faa:	e853 3f00 	ldrex	r3, [r3]
 8008fae:	61fb      	str	r3, [r7, #28]
   return(result);
 8008fb0:	69fb      	ldr	r3, [r7, #28]
 8008fb2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008fb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	461a      	mov	r2, r3
 8008fbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008fc2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008fc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fc8:	e841 2300 	strex	r3, r2, [r1]
 8008fcc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d1e6      	bne.n	8008fa2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d12e      	bne.n	800903a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	e853 3f00 	ldrex	r3, [r3]
 8008fee:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	f023 0310 	bic.w	r3, r3, #16
 8008ff6:	65bb      	str	r3, [r7, #88]	; 0x58
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	461a      	mov	r2, r3
 8008ffe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009000:	61bb      	str	r3, [r7, #24]
 8009002:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009004:	6979      	ldr	r1, [r7, #20]
 8009006:	69ba      	ldr	r2, [r7, #24]
 8009008:	e841 2300 	strex	r3, r2, [r1]
 800900c:	613b      	str	r3, [r7, #16]
   return(result);
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d1e6      	bne.n	8008fe2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	69db      	ldr	r3, [r3, #28]
 800901a:	f003 0310 	and.w	r3, r3, #16
 800901e:	2b10      	cmp	r3, #16
 8009020:	d103      	bne.n	800902a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	2210      	movs	r2, #16
 8009028:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009030:	4619      	mov	r1, r3
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f7fe fc60 	bl	80078f8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009038:	e00b      	b.n	8009052 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f7f7 fc90 	bl	8000960 <HAL_UART_RxCpltCallback>
}
 8009040:	e007      	b.n	8009052 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	699a      	ldr	r2, [r3, #24]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f042 0208 	orr.w	r2, r2, #8
 8009050:	619a      	str	r2, [r3, #24]
}
 8009052:	bf00      	nop
 8009054:	3770      	adds	r7, #112	; 0x70
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}
 800905a:	bf00      	nop
 800905c:	58000c00 	.word	0x58000c00

08009060 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b0ac      	sub	sp, #176	; 0xb0
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800906e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	69db      	ldr	r3, [r3, #28]
 8009078:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	689b      	ldr	r3, [r3, #8]
 800908c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009096:	2b22      	cmp	r3, #34	; 0x22
 8009098:	f040 8180 	bne.w	800939c <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80090a2:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80090a6:	e123      	b.n	80092f0 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ae:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80090b2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80090b6:	b2d9      	uxtb	r1, r3
 80090b8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80090bc:	b2da      	uxtb	r2, r3
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090c2:	400a      	ands	r2, r1
 80090c4:	b2d2      	uxtb	r2, r2
 80090c6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090cc:	1c5a      	adds	r2, r3, #1
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80090d8:	b29b      	uxth	r3, r3
 80090da:	3b01      	subs	r3, #1
 80090dc:	b29a      	uxth	r2, r3
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	69db      	ldr	r3, [r3, #28]
 80090ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80090ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80090f2:	f003 0307 	and.w	r3, r3, #7
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d053      	beq.n	80091a2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80090fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80090fe:	f003 0301 	and.w	r3, r3, #1
 8009102:	2b00      	cmp	r3, #0
 8009104:	d011      	beq.n	800912a <UART_RxISR_8BIT_FIFOEN+0xca>
 8009106:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800910a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800910e:	2b00      	cmp	r3, #0
 8009110:	d00b      	beq.n	800912a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	2201      	movs	r2, #1
 8009118:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009120:	f043 0201 	orr.w	r2, r3, #1
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800912a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800912e:	f003 0302 	and.w	r3, r3, #2
 8009132:	2b00      	cmp	r3, #0
 8009134:	d011      	beq.n	800915a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009136:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800913a:	f003 0301 	and.w	r3, r3, #1
 800913e:	2b00      	cmp	r3, #0
 8009140:	d00b      	beq.n	800915a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	2202      	movs	r2, #2
 8009148:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009150:	f043 0204 	orr.w	r2, r3, #4
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800915a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800915e:	f003 0304 	and.w	r3, r3, #4
 8009162:	2b00      	cmp	r3, #0
 8009164:	d011      	beq.n	800918a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009166:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800916a:	f003 0301 	and.w	r3, r3, #1
 800916e:	2b00      	cmp	r3, #0
 8009170:	d00b      	beq.n	800918a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	2204      	movs	r2, #4
 8009178:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009180:	f043 0202 	orr.w	r2, r3, #2
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009190:	2b00      	cmp	r3, #0
 8009192:	d006      	beq.n	80091a2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f7fe fba5 	bl	80078e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2200      	movs	r2, #0
 800919e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091a8:	b29b      	uxth	r3, r3
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	f040 80a0 	bne.w	80092f0 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80091b8:	e853 3f00 	ldrex	r3, [r3]
 80091bc:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80091be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	461a      	mov	r2, r3
 80091ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80091d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80091d4:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091d6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80091d8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80091da:	e841 2300 	strex	r3, r2, [r1]
 80091de:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80091e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d1e4      	bne.n	80091b0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	3308      	adds	r3, #8
 80091ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091f0:	e853 3f00 	ldrex	r3, [r3]
 80091f4:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80091f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80091f8:	4b6e      	ldr	r3, [pc, #440]	; (80093b4 <UART_RxISR_8BIT_FIFOEN+0x354>)
 80091fa:	4013      	ands	r3, r2
 80091fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	3308      	adds	r3, #8
 8009206:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800920a:	66ba      	str	r2, [r7, #104]	; 0x68
 800920c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800920e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009210:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009212:	e841 2300 	strex	r3, r2, [r1]
 8009216:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009218:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800921a:	2b00      	cmp	r3, #0
 800921c:	d1e3      	bne.n	80091e6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2220      	movs	r2, #32
 8009222:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2200      	movs	r2, #0
 800922a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2200      	movs	r2, #0
 8009230:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	4a60      	ldr	r2, [pc, #384]	; (80093b8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8009238:	4293      	cmp	r3, r2
 800923a:	d021      	beq.n	8009280 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	685b      	ldr	r3, [r3, #4]
 8009242:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009246:	2b00      	cmp	r3, #0
 8009248:	d01a      	beq.n	8009280 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009250:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009252:	e853 3f00 	ldrex	r3, [r3]
 8009256:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009258:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800925a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800925e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	461a      	mov	r2, r3
 8009268:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800926c:	657b      	str	r3, [r7, #84]	; 0x54
 800926e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009270:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009272:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009274:	e841 2300 	strex	r3, r2, [r1]
 8009278:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800927a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800927c:	2b00      	cmp	r3, #0
 800927e:	d1e4      	bne.n	800924a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009284:	2b01      	cmp	r3, #1
 8009286:	d130      	bne.n	80092ea <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2200      	movs	r2, #0
 800928c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009296:	e853 3f00 	ldrex	r3, [r3]
 800929a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800929c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800929e:	f023 0310 	bic.w	r3, r3, #16
 80092a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	461a      	mov	r2, r3
 80092ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80092b0:	643b      	str	r3, [r7, #64]	; 0x40
 80092b2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80092b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80092b8:	e841 2300 	strex	r3, r2, [r1]
 80092bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80092be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d1e4      	bne.n	800928e <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	69db      	ldr	r3, [r3, #28]
 80092ca:	f003 0310 	and.w	r3, r3, #16
 80092ce:	2b10      	cmp	r3, #16
 80092d0:	d103      	bne.n	80092da <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	2210      	movs	r2, #16
 80092d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80092e0:	4619      	mov	r1, r3
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f7fe fb08 	bl	80078f8 <HAL_UARTEx_RxEventCallback>
 80092e8:	e002      	b.n	80092f0 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f7f7 fb38 	bl	8000960 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80092f0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d006      	beq.n	8009306 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80092f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80092fc:	f003 0320 	and.w	r3, r3, #32
 8009300:	2b00      	cmp	r3, #0
 8009302:	f47f aed1 	bne.w	80090a8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800930c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009310:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009314:	2b00      	cmp	r3, #0
 8009316:	d049      	beq.n	80093ac <UART_RxISR_8BIT_FIFOEN+0x34c>
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800931e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8009322:	429a      	cmp	r2, r3
 8009324:	d242      	bcs.n	80093ac <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	3308      	adds	r3, #8
 800932c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800932e:	6a3b      	ldr	r3, [r7, #32]
 8009330:	e853 3f00 	ldrex	r3, [r3]
 8009334:	61fb      	str	r3, [r7, #28]
   return(result);
 8009336:	69fb      	ldr	r3, [r7, #28]
 8009338:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800933c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	3308      	adds	r3, #8
 8009346:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800934a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800934c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800934e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009350:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009352:	e841 2300 	strex	r3, r2, [r1]
 8009356:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800935a:	2b00      	cmp	r3, #0
 800935c:	d1e3      	bne.n	8009326 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	4a16      	ldr	r2, [pc, #88]	; (80093bc <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009362:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	e853 3f00 	ldrex	r3, [r3]
 8009370:	60bb      	str	r3, [r7, #8]
   return(result);
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	f043 0320 	orr.w	r3, r3, #32
 8009378:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	461a      	mov	r2, r3
 8009382:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009386:	61bb      	str	r3, [r7, #24]
 8009388:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800938a:	6979      	ldr	r1, [r7, #20]
 800938c:	69ba      	ldr	r2, [r7, #24]
 800938e:	e841 2300 	strex	r3, r2, [r1]
 8009392:	613b      	str	r3, [r7, #16]
   return(result);
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d1e4      	bne.n	8009364 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800939a:	e007      	b.n	80093ac <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	699a      	ldr	r2, [r3, #24]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f042 0208 	orr.w	r2, r2, #8
 80093aa:	619a      	str	r2, [r3, #24]
}
 80093ac:	bf00      	nop
 80093ae:	37b0      	adds	r7, #176	; 0xb0
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}
 80093b4:	effffffe 	.word	0xeffffffe
 80093b8:	58000c00 	.word	0x58000c00
 80093bc:	08008cf1 	.word	0x08008cf1

080093c0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b0ae      	sub	sp, #184	; 0xb8
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80093ce:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	69db      	ldr	r3, [r3, #28]
 80093d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	689b      	ldr	r3, [r3, #8]
 80093ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093f6:	2b22      	cmp	r3, #34	; 0x22
 80093f8:	f040 8184 	bne.w	8009704 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009402:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009406:	e127      	b.n	8009658 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800940e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009416:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800941a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800941e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8009422:	4013      	ands	r3, r2
 8009424:	b29a      	uxth	r2, r3
 8009426:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800942a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009430:	1c9a      	adds	r2, r3, #2
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800943c:	b29b      	uxth	r3, r3
 800943e:	3b01      	subs	r3, #1
 8009440:	b29a      	uxth	r2, r3
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	69db      	ldr	r3, [r3, #28]
 800944e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009452:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009456:	f003 0307 	and.w	r3, r3, #7
 800945a:	2b00      	cmp	r3, #0
 800945c:	d053      	beq.n	8009506 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800945e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009462:	f003 0301 	and.w	r3, r3, #1
 8009466:	2b00      	cmp	r3, #0
 8009468:	d011      	beq.n	800948e <UART_RxISR_16BIT_FIFOEN+0xce>
 800946a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800946e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009472:	2b00      	cmp	r3, #0
 8009474:	d00b      	beq.n	800948e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	2201      	movs	r2, #1
 800947c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009484:	f043 0201 	orr.w	r2, r3, #1
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800948e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009492:	f003 0302 	and.w	r3, r3, #2
 8009496:	2b00      	cmp	r3, #0
 8009498:	d011      	beq.n	80094be <UART_RxISR_16BIT_FIFOEN+0xfe>
 800949a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800949e:	f003 0301 	and.w	r3, r3, #1
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d00b      	beq.n	80094be <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	2202      	movs	r2, #2
 80094ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094b4:	f043 0204 	orr.w	r2, r3, #4
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80094be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80094c2:	f003 0304 	and.w	r3, r3, #4
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d011      	beq.n	80094ee <UART_RxISR_16BIT_FIFOEN+0x12e>
 80094ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80094ce:	f003 0301 	and.w	r3, r3, #1
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d00b      	beq.n	80094ee <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	2204      	movs	r2, #4
 80094dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094e4:	f043 0202 	orr.w	r2, r3, #2
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d006      	beq.n	8009506 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f7fe f9f3 	bl	80078e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2200      	movs	r2, #0
 8009502:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800950c:	b29b      	uxth	r3, r3
 800950e:	2b00      	cmp	r3, #0
 8009510:	f040 80a2 	bne.w	8009658 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800951a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800951c:	e853 3f00 	ldrex	r3, [r3]
 8009520:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009522:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009524:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009528:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	461a      	mov	r2, r3
 8009532:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009536:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800953a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800953c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800953e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009542:	e841 2300 	strex	r3, r2, [r1]
 8009546:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009548:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800954a:	2b00      	cmp	r3, #0
 800954c:	d1e2      	bne.n	8009514 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	3308      	adds	r3, #8
 8009554:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009556:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009558:	e853 3f00 	ldrex	r3, [r3]
 800955c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800955e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009560:	4b6e      	ldr	r3, [pc, #440]	; (800971c <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8009562:	4013      	ands	r3, r2
 8009564:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	3308      	adds	r3, #8
 800956e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009572:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009574:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009576:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009578:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800957a:	e841 2300 	strex	r3, r2, [r1]
 800957e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009580:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009582:	2b00      	cmp	r3, #0
 8009584:	d1e3      	bne.n	800954e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2220      	movs	r2, #32
 800958a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2200      	movs	r2, #0
 8009592:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2200      	movs	r2, #0
 8009598:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	4a60      	ldr	r2, [pc, #384]	; (8009720 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d021      	beq.n	80095e8 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d01a      	beq.n	80095e8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095ba:	e853 3f00 	ldrex	r3, [r3]
 80095be:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80095c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80095c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	461a      	mov	r2, r3
 80095d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80095d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80095d6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80095da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80095dc:	e841 2300 	strex	r3, r2, [r1]
 80095e0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80095e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d1e4      	bne.n	80095b2 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095ec:	2b01      	cmp	r3, #1
 80095ee:	d130      	bne.n	8009652 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2200      	movs	r2, #0
 80095f4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095fe:	e853 3f00 	ldrex	r3, [r3]
 8009602:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009606:	f023 0310 	bic.w	r3, r3, #16
 800960a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	461a      	mov	r2, r3
 8009614:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009618:	647b      	str	r3, [r7, #68]	; 0x44
 800961a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800961c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800961e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009620:	e841 2300 	strex	r3, r2, [r1]
 8009624:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009628:	2b00      	cmp	r3, #0
 800962a:	d1e4      	bne.n	80095f6 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	69db      	ldr	r3, [r3, #28]
 8009632:	f003 0310 	and.w	r3, r3, #16
 8009636:	2b10      	cmp	r3, #16
 8009638:	d103      	bne.n	8009642 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	2210      	movs	r2, #16
 8009640:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009648:	4619      	mov	r1, r3
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f7fe f954 	bl	80078f8 <HAL_UARTEx_RxEventCallback>
 8009650:	e002      	b.n	8009658 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f7f7 f984 	bl	8000960 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009658:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800965c:	2b00      	cmp	r3, #0
 800965e:	d006      	beq.n	800966e <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8009660:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009664:	f003 0320 	and.w	r3, r3, #32
 8009668:	2b00      	cmp	r3, #0
 800966a:	f47f aecd 	bne.w	8009408 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009674:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009678:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800967c:	2b00      	cmp	r3, #0
 800967e:	d049      	beq.n	8009714 <UART_RxISR_16BIT_FIFOEN+0x354>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009686:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800968a:	429a      	cmp	r2, r3
 800968c:	d242      	bcs.n	8009714 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	3308      	adds	r3, #8
 8009694:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009698:	e853 3f00 	ldrex	r3, [r3]
 800969c:	623b      	str	r3, [r7, #32]
   return(result);
 800969e:	6a3b      	ldr	r3, [r7, #32]
 80096a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80096a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	3308      	adds	r3, #8
 80096ae:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80096b2:	633a      	str	r2, [r7, #48]	; 0x30
 80096b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80096b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096ba:	e841 2300 	strex	r3, r2, [r1]
 80096be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80096c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d1e3      	bne.n	800968e <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	4a16      	ldr	r2, [pc, #88]	; (8009724 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80096ca:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	e853 3f00 	ldrex	r3, [r3]
 80096d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	f043 0320 	orr.w	r3, r3, #32
 80096e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	461a      	mov	r2, r3
 80096ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80096ee:	61fb      	str	r3, [r7, #28]
 80096f0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f2:	69b9      	ldr	r1, [r7, #24]
 80096f4:	69fa      	ldr	r2, [r7, #28]
 80096f6:	e841 2300 	strex	r3, r2, [r1]
 80096fa:	617b      	str	r3, [r7, #20]
   return(result);
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d1e4      	bne.n	80096cc <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009702:	e007      	b.n	8009714 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	699a      	ldr	r2, [r3, #24]
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f042 0208 	orr.w	r2, r2, #8
 8009712:	619a      	str	r2, [r3, #24]
}
 8009714:	bf00      	nop
 8009716:	37b8      	adds	r7, #184	; 0xb8
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}
 800971c:	effffffe 	.word	0xeffffffe
 8009720:	58000c00 	.word	0x58000c00
 8009724:	08008ea9 	.word	0x08008ea9

08009728 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009728:	b480      	push	{r7}
 800972a:	b083      	sub	sp, #12
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009730:	bf00      	nop
 8009732:	370c      	adds	r7, #12
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr

0800973c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800973c:	b480      	push	{r7}
 800973e:	b083      	sub	sp, #12
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009744:	bf00      	nop
 8009746:	370c      	adds	r7, #12
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr

08009750 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009750:	b480      	push	{r7}
 8009752:	b083      	sub	sp, #12
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009758:	bf00      	nop
 800975a:	370c      	adds	r7, #12
 800975c:	46bd      	mov	sp, r7
 800975e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009762:	4770      	bx	lr

08009764 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009764:	b480      	push	{r7}
 8009766:	b085      	sub	sp, #20
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009772:	2b01      	cmp	r3, #1
 8009774:	d101      	bne.n	800977a <HAL_UARTEx_DisableFifoMode+0x16>
 8009776:	2302      	movs	r3, #2
 8009778:	e027      	b.n	80097ca <HAL_UARTEx_DisableFifoMode+0x66>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2201      	movs	r2, #1
 800977e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2224      	movs	r2, #36	; 0x24
 8009786:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	681a      	ldr	r2, [r3, #0]
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f022 0201 	bic.w	r2, r2, #1
 80097a0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80097a8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2200      	movs	r2, #0
 80097ae:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	68fa      	ldr	r2, [r7, #12]
 80097b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2220      	movs	r2, #32
 80097bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2200      	movs	r2, #0
 80097c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80097c8:	2300      	movs	r3, #0
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3714      	adds	r7, #20
 80097ce:	46bd      	mov	sp, r7
 80097d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d4:	4770      	bx	lr

080097d6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80097d6:	b580      	push	{r7, lr}
 80097d8:	b084      	sub	sp, #16
 80097da:	af00      	add	r7, sp, #0
 80097dc:	6078      	str	r0, [r7, #4]
 80097de:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80097e6:	2b01      	cmp	r3, #1
 80097e8:	d101      	bne.n	80097ee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80097ea:	2302      	movs	r3, #2
 80097ec:	e02d      	b.n	800984a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2201      	movs	r2, #1
 80097f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2224      	movs	r2, #36	; 0x24
 80097fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	681a      	ldr	r2, [r3, #0]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f022 0201 	bic.w	r2, r2, #1
 8009814:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	689b      	ldr	r3, [r3, #8]
 800981c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	683a      	ldr	r2, [r7, #0]
 8009826:	430a      	orrs	r2, r1
 8009828:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f000 f850 	bl	80098d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	68fa      	ldr	r2, [r7, #12]
 8009836:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2220      	movs	r2, #32
 800983c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2200      	movs	r2, #0
 8009844:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009848:	2300      	movs	r3, #0
}
 800984a:	4618      	mov	r0, r3
 800984c:	3710      	adds	r7, #16
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}

08009852 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009852:	b580      	push	{r7, lr}
 8009854:	b084      	sub	sp, #16
 8009856:	af00      	add	r7, sp, #0
 8009858:	6078      	str	r0, [r7, #4]
 800985a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009862:	2b01      	cmp	r3, #1
 8009864:	d101      	bne.n	800986a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009866:	2302      	movs	r3, #2
 8009868:	e02d      	b.n	80098c6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2201      	movs	r2, #1
 800986e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2224      	movs	r2, #36	; 0x24
 8009876:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	681a      	ldr	r2, [r3, #0]
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f022 0201 	bic.w	r2, r2, #1
 8009890:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	689b      	ldr	r3, [r3, #8]
 8009898:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	683a      	ldr	r2, [r7, #0]
 80098a2:	430a      	orrs	r2, r1
 80098a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f000 f812 	bl	80098d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	68fa      	ldr	r2, [r7, #12]
 80098b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2220      	movs	r2, #32
 80098b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2200      	movs	r2, #0
 80098c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80098c4:	2300      	movs	r3, #0
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3710      	adds	r7, #16
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}
	...

080098d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b085      	sub	sp, #20
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d108      	bne.n	80098f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2201      	movs	r2, #1
 80098e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2201      	movs	r2, #1
 80098ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80098f0:	e031      	b.n	8009956 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80098f2:	2310      	movs	r3, #16
 80098f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80098f6:	2310      	movs	r3, #16
 80098f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	689b      	ldr	r3, [r3, #8]
 8009900:	0e5b      	lsrs	r3, r3, #25
 8009902:	b2db      	uxtb	r3, r3
 8009904:	f003 0307 	and.w	r3, r3, #7
 8009908:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	689b      	ldr	r3, [r3, #8]
 8009910:	0f5b      	lsrs	r3, r3, #29
 8009912:	b2db      	uxtb	r3, r3
 8009914:	f003 0307 	and.w	r3, r3, #7
 8009918:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800991a:	7bbb      	ldrb	r3, [r7, #14]
 800991c:	7b3a      	ldrb	r2, [r7, #12]
 800991e:	4911      	ldr	r1, [pc, #68]	; (8009964 <UARTEx_SetNbDataToProcess+0x94>)
 8009920:	5c8a      	ldrb	r2, [r1, r2]
 8009922:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009926:	7b3a      	ldrb	r2, [r7, #12]
 8009928:	490f      	ldr	r1, [pc, #60]	; (8009968 <UARTEx_SetNbDataToProcess+0x98>)
 800992a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800992c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009930:	b29a      	uxth	r2, r3
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009938:	7bfb      	ldrb	r3, [r7, #15]
 800993a:	7b7a      	ldrb	r2, [r7, #13]
 800993c:	4909      	ldr	r1, [pc, #36]	; (8009964 <UARTEx_SetNbDataToProcess+0x94>)
 800993e:	5c8a      	ldrb	r2, [r1, r2]
 8009940:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009944:	7b7a      	ldrb	r2, [r7, #13]
 8009946:	4908      	ldr	r1, [pc, #32]	; (8009968 <UARTEx_SetNbDataToProcess+0x98>)
 8009948:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800994a:	fb93 f3f2 	sdiv	r3, r3, r2
 800994e:	b29a      	uxth	r2, r3
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009956:	bf00      	nop
 8009958:	3714      	adds	r7, #20
 800995a:	46bd      	mov	sp, r7
 800995c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009960:	4770      	bx	lr
 8009962:	bf00      	nop
 8009964:	0800aa3c 	.word	0x0800aa3c
 8009968:	0800aa44 	.word	0x0800aa44

0800996c <std>:
 800996c:	2300      	movs	r3, #0
 800996e:	b510      	push	{r4, lr}
 8009970:	4604      	mov	r4, r0
 8009972:	e9c0 3300 	strd	r3, r3, [r0]
 8009976:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800997a:	6083      	str	r3, [r0, #8]
 800997c:	8181      	strh	r1, [r0, #12]
 800997e:	6643      	str	r3, [r0, #100]	; 0x64
 8009980:	81c2      	strh	r2, [r0, #14]
 8009982:	6183      	str	r3, [r0, #24]
 8009984:	4619      	mov	r1, r3
 8009986:	2208      	movs	r2, #8
 8009988:	305c      	adds	r0, #92	; 0x5c
 800998a:	f000 f9f7 	bl	8009d7c <memset>
 800998e:	4b0d      	ldr	r3, [pc, #52]	; (80099c4 <std+0x58>)
 8009990:	6263      	str	r3, [r4, #36]	; 0x24
 8009992:	4b0d      	ldr	r3, [pc, #52]	; (80099c8 <std+0x5c>)
 8009994:	62a3      	str	r3, [r4, #40]	; 0x28
 8009996:	4b0d      	ldr	r3, [pc, #52]	; (80099cc <std+0x60>)
 8009998:	62e3      	str	r3, [r4, #44]	; 0x2c
 800999a:	4b0d      	ldr	r3, [pc, #52]	; (80099d0 <std+0x64>)
 800999c:	6323      	str	r3, [r4, #48]	; 0x30
 800999e:	4b0d      	ldr	r3, [pc, #52]	; (80099d4 <std+0x68>)
 80099a0:	6224      	str	r4, [r4, #32]
 80099a2:	429c      	cmp	r4, r3
 80099a4:	d006      	beq.n	80099b4 <std+0x48>
 80099a6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80099aa:	4294      	cmp	r4, r2
 80099ac:	d002      	beq.n	80099b4 <std+0x48>
 80099ae:	33d0      	adds	r3, #208	; 0xd0
 80099b0:	429c      	cmp	r4, r3
 80099b2:	d105      	bne.n	80099c0 <std+0x54>
 80099b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80099b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099bc:	f000 ba56 	b.w	8009e6c <__retarget_lock_init_recursive>
 80099c0:	bd10      	pop	{r4, pc}
 80099c2:	bf00      	nop
 80099c4:	08009bcd 	.word	0x08009bcd
 80099c8:	08009bef 	.word	0x08009bef
 80099cc:	08009c27 	.word	0x08009c27
 80099d0:	08009c4b 	.word	0x08009c4b
 80099d4:	2400042c 	.word	0x2400042c

080099d8 <stdio_exit_handler>:
 80099d8:	4a02      	ldr	r2, [pc, #8]	; (80099e4 <stdio_exit_handler+0xc>)
 80099da:	4903      	ldr	r1, [pc, #12]	; (80099e8 <stdio_exit_handler+0x10>)
 80099dc:	4803      	ldr	r0, [pc, #12]	; (80099ec <stdio_exit_handler+0x14>)
 80099de:	f000 b869 	b.w	8009ab4 <_fwalk_sglue>
 80099e2:	bf00      	nop
 80099e4:	24000010 	.word	0x24000010
 80099e8:	0800a719 	.word	0x0800a719
 80099ec:	2400001c 	.word	0x2400001c

080099f0 <cleanup_stdio>:
 80099f0:	6841      	ldr	r1, [r0, #4]
 80099f2:	4b0c      	ldr	r3, [pc, #48]	; (8009a24 <cleanup_stdio+0x34>)
 80099f4:	4299      	cmp	r1, r3
 80099f6:	b510      	push	{r4, lr}
 80099f8:	4604      	mov	r4, r0
 80099fa:	d001      	beq.n	8009a00 <cleanup_stdio+0x10>
 80099fc:	f000 fe8c 	bl	800a718 <_fflush_r>
 8009a00:	68a1      	ldr	r1, [r4, #8]
 8009a02:	4b09      	ldr	r3, [pc, #36]	; (8009a28 <cleanup_stdio+0x38>)
 8009a04:	4299      	cmp	r1, r3
 8009a06:	d002      	beq.n	8009a0e <cleanup_stdio+0x1e>
 8009a08:	4620      	mov	r0, r4
 8009a0a:	f000 fe85 	bl	800a718 <_fflush_r>
 8009a0e:	68e1      	ldr	r1, [r4, #12]
 8009a10:	4b06      	ldr	r3, [pc, #24]	; (8009a2c <cleanup_stdio+0x3c>)
 8009a12:	4299      	cmp	r1, r3
 8009a14:	d004      	beq.n	8009a20 <cleanup_stdio+0x30>
 8009a16:	4620      	mov	r0, r4
 8009a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a1c:	f000 be7c 	b.w	800a718 <_fflush_r>
 8009a20:	bd10      	pop	{r4, pc}
 8009a22:	bf00      	nop
 8009a24:	2400042c 	.word	0x2400042c
 8009a28:	24000494 	.word	0x24000494
 8009a2c:	240004fc 	.word	0x240004fc

08009a30 <global_stdio_init.part.0>:
 8009a30:	b510      	push	{r4, lr}
 8009a32:	4b0b      	ldr	r3, [pc, #44]	; (8009a60 <global_stdio_init.part.0+0x30>)
 8009a34:	4c0b      	ldr	r4, [pc, #44]	; (8009a64 <global_stdio_init.part.0+0x34>)
 8009a36:	4a0c      	ldr	r2, [pc, #48]	; (8009a68 <global_stdio_init.part.0+0x38>)
 8009a38:	601a      	str	r2, [r3, #0]
 8009a3a:	4620      	mov	r0, r4
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	2104      	movs	r1, #4
 8009a40:	f7ff ff94 	bl	800996c <std>
 8009a44:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009a48:	2201      	movs	r2, #1
 8009a4a:	2109      	movs	r1, #9
 8009a4c:	f7ff ff8e 	bl	800996c <std>
 8009a50:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009a54:	2202      	movs	r2, #2
 8009a56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a5a:	2112      	movs	r1, #18
 8009a5c:	f7ff bf86 	b.w	800996c <std>
 8009a60:	24000564 	.word	0x24000564
 8009a64:	2400042c 	.word	0x2400042c
 8009a68:	080099d9 	.word	0x080099d9

08009a6c <__sfp_lock_acquire>:
 8009a6c:	4801      	ldr	r0, [pc, #4]	; (8009a74 <__sfp_lock_acquire+0x8>)
 8009a6e:	f000 b9fe 	b.w	8009e6e <__retarget_lock_acquire_recursive>
 8009a72:	bf00      	nop
 8009a74:	2400056d 	.word	0x2400056d

08009a78 <__sfp_lock_release>:
 8009a78:	4801      	ldr	r0, [pc, #4]	; (8009a80 <__sfp_lock_release+0x8>)
 8009a7a:	f000 b9f9 	b.w	8009e70 <__retarget_lock_release_recursive>
 8009a7e:	bf00      	nop
 8009a80:	2400056d 	.word	0x2400056d

08009a84 <__sinit>:
 8009a84:	b510      	push	{r4, lr}
 8009a86:	4604      	mov	r4, r0
 8009a88:	f7ff fff0 	bl	8009a6c <__sfp_lock_acquire>
 8009a8c:	6a23      	ldr	r3, [r4, #32]
 8009a8e:	b11b      	cbz	r3, 8009a98 <__sinit+0x14>
 8009a90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a94:	f7ff bff0 	b.w	8009a78 <__sfp_lock_release>
 8009a98:	4b04      	ldr	r3, [pc, #16]	; (8009aac <__sinit+0x28>)
 8009a9a:	6223      	str	r3, [r4, #32]
 8009a9c:	4b04      	ldr	r3, [pc, #16]	; (8009ab0 <__sinit+0x2c>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d1f5      	bne.n	8009a90 <__sinit+0xc>
 8009aa4:	f7ff ffc4 	bl	8009a30 <global_stdio_init.part.0>
 8009aa8:	e7f2      	b.n	8009a90 <__sinit+0xc>
 8009aaa:	bf00      	nop
 8009aac:	080099f1 	.word	0x080099f1
 8009ab0:	24000564 	.word	0x24000564

08009ab4 <_fwalk_sglue>:
 8009ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ab8:	4607      	mov	r7, r0
 8009aba:	4688      	mov	r8, r1
 8009abc:	4614      	mov	r4, r2
 8009abe:	2600      	movs	r6, #0
 8009ac0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009ac4:	f1b9 0901 	subs.w	r9, r9, #1
 8009ac8:	d505      	bpl.n	8009ad6 <_fwalk_sglue+0x22>
 8009aca:	6824      	ldr	r4, [r4, #0]
 8009acc:	2c00      	cmp	r4, #0
 8009ace:	d1f7      	bne.n	8009ac0 <_fwalk_sglue+0xc>
 8009ad0:	4630      	mov	r0, r6
 8009ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ad6:	89ab      	ldrh	r3, [r5, #12]
 8009ad8:	2b01      	cmp	r3, #1
 8009ada:	d907      	bls.n	8009aec <_fwalk_sglue+0x38>
 8009adc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009ae0:	3301      	adds	r3, #1
 8009ae2:	d003      	beq.n	8009aec <_fwalk_sglue+0x38>
 8009ae4:	4629      	mov	r1, r5
 8009ae6:	4638      	mov	r0, r7
 8009ae8:	47c0      	blx	r8
 8009aea:	4306      	orrs	r6, r0
 8009aec:	3568      	adds	r5, #104	; 0x68
 8009aee:	e7e9      	b.n	8009ac4 <_fwalk_sglue+0x10>

08009af0 <iprintf>:
 8009af0:	b40f      	push	{r0, r1, r2, r3}
 8009af2:	b507      	push	{r0, r1, r2, lr}
 8009af4:	4906      	ldr	r1, [pc, #24]	; (8009b10 <iprintf+0x20>)
 8009af6:	ab04      	add	r3, sp, #16
 8009af8:	6808      	ldr	r0, [r1, #0]
 8009afa:	f853 2b04 	ldr.w	r2, [r3], #4
 8009afe:	6881      	ldr	r1, [r0, #8]
 8009b00:	9301      	str	r3, [sp, #4]
 8009b02:	f000 fad9 	bl	800a0b8 <_vfiprintf_r>
 8009b06:	b003      	add	sp, #12
 8009b08:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b0c:	b004      	add	sp, #16
 8009b0e:	4770      	bx	lr
 8009b10:	24000068 	.word	0x24000068

08009b14 <_puts_r>:
 8009b14:	6a03      	ldr	r3, [r0, #32]
 8009b16:	b570      	push	{r4, r5, r6, lr}
 8009b18:	6884      	ldr	r4, [r0, #8]
 8009b1a:	4605      	mov	r5, r0
 8009b1c:	460e      	mov	r6, r1
 8009b1e:	b90b      	cbnz	r3, 8009b24 <_puts_r+0x10>
 8009b20:	f7ff ffb0 	bl	8009a84 <__sinit>
 8009b24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b26:	07db      	lsls	r3, r3, #31
 8009b28:	d405      	bmi.n	8009b36 <_puts_r+0x22>
 8009b2a:	89a3      	ldrh	r3, [r4, #12]
 8009b2c:	0598      	lsls	r0, r3, #22
 8009b2e:	d402      	bmi.n	8009b36 <_puts_r+0x22>
 8009b30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b32:	f000 f99c 	bl	8009e6e <__retarget_lock_acquire_recursive>
 8009b36:	89a3      	ldrh	r3, [r4, #12]
 8009b38:	0719      	lsls	r1, r3, #28
 8009b3a:	d513      	bpl.n	8009b64 <_puts_r+0x50>
 8009b3c:	6923      	ldr	r3, [r4, #16]
 8009b3e:	b18b      	cbz	r3, 8009b64 <_puts_r+0x50>
 8009b40:	3e01      	subs	r6, #1
 8009b42:	68a3      	ldr	r3, [r4, #8]
 8009b44:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009b48:	3b01      	subs	r3, #1
 8009b4a:	60a3      	str	r3, [r4, #8]
 8009b4c:	b9e9      	cbnz	r1, 8009b8a <_puts_r+0x76>
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	da2e      	bge.n	8009bb0 <_puts_r+0x9c>
 8009b52:	4622      	mov	r2, r4
 8009b54:	210a      	movs	r1, #10
 8009b56:	4628      	mov	r0, r5
 8009b58:	f000 f87b 	bl	8009c52 <__swbuf_r>
 8009b5c:	3001      	adds	r0, #1
 8009b5e:	d007      	beq.n	8009b70 <_puts_r+0x5c>
 8009b60:	250a      	movs	r5, #10
 8009b62:	e007      	b.n	8009b74 <_puts_r+0x60>
 8009b64:	4621      	mov	r1, r4
 8009b66:	4628      	mov	r0, r5
 8009b68:	f000 f8b0 	bl	8009ccc <__swsetup_r>
 8009b6c:	2800      	cmp	r0, #0
 8009b6e:	d0e7      	beq.n	8009b40 <_puts_r+0x2c>
 8009b70:	f04f 35ff 	mov.w	r5, #4294967295
 8009b74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b76:	07da      	lsls	r2, r3, #31
 8009b78:	d405      	bmi.n	8009b86 <_puts_r+0x72>
 8009b7a:	89a3      	ldrh	r3, [r4, #12]
 8009b7c:	059b      	lsls	r3, r3, #22
 8009b7e:	d402      	bmi.n	8009b86 <_puts_r+0x72>
 8009b80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b82:	f000 f975 	bl	8009e70 <__retarget_lock_release_recursive>
 8009b86:	4628      	mov	r0, r5
 8009b88:	bd70      	pop	{r4, r5, r6, pc}
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	da04      	bge.n	8009b98 <_puts_r+0x84>
 8009b8e:	69a2      	ldr	r2, [r4, #24]
 8009b90:	429a      	cmp	r2, r3
 8009b92:	dc06      	bgt.n	8009ba2 <_puts_r+0x8e>
 8009b94:	290a      	cmp	r1, #10
 8009b96:	d004      	beq.n	8009ba2 <_puts_r+0x8e>
 8009b98:	6823      	ldr	r3, [r4, #0]
 8009b9a:	1c5a      	adds	r2, r3, #1
 8009b9c:	6022      	str	r2, [r4, #0]
 8009b9e:	7019      	strb	r1, [r3, #0]
 8009ba0:	e7cf      	b.n	8009b42 <_puts_r+0x2e>
 8009ba2:	4622      	mov	r2, r4
 8009ba4:	4628      	mov	r0, r5
 8009ba6:	f000 f854 	bl	8009c52 <__swbuf_r>
 8009baa:	3001      	adds	r0, #1
 8009bac:	d1c9      	bne.n	8009b42 <_puts_r+0x2e>
 8009bae:	e7df      	b.n	8009b70 <_puts_r+0x5c>
 8009bb0:	6823      	ldr	r3, [r4, #0]
 8009bb2:	250a      	movs	r5, #10
 8009bb4:	1c5a      	adds	r2, r3, #1
 8009bb6:	6022      	str	r2, [r4, #0]
 8009bb8:	701d      	strb	r5, [r3, #0]
 8009bba:	e7db      	b.n	8009b74 <_puts_r+0x60>

08009bbc <puts>:
 8009bbc:	4b02      	ldr	r3, [pc, #8]	; (8009bc8 <puts+0xc>)
 8009bbe:	4601      	mov	r1, r0
 8009bc0:	6818      	ldr	r0, [r3, #0]
 8009bc2:	f7ff bfa7 	b.w	8009b14 <_puts_r>
 8009bc6:	bf00      	nop
 8009bc8:	24000068 	.word	0x24000068

08009bcc <__sread>:
 8009bcc:	b510      	push	{r4, lr}
 8009bce:	460c      	mov	r4, r1
 8009bd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bd4:	f000 f8fc 	bl	8009dd0 <_read_r>
 8009bd8:	2800      	cmp	r0, #0
 8009bda:	bfab      	itete	ge
 8009bdc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009bde:	89a3      	ldrhlt	r3, [r4, #12]
 8009be0:	181b      	addge	r3, r3, r0
 8009be2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009be6:	bfac      	ite	ge
 8009be8:	6563      	strge	r3, [r4, #84]	; 0x54
 8009bea:	81a3      	strhlt	r3, [r4, #12]
 8009bec:	bd10      	pop	{r4, pc}

08009bee <__swrite>:
 8009bee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bf2:	461f      	mov	r7, r3
 8009bf4:	898b      	ldrh	r3, [r1, #12]
 8009bf6:	05db      	lsls	r3, r3, #23
 8009bf8:	4605      	mov	r5, r0
 8009bfa:	460c      	mov	r4, r1
 8009bfc:	4616      	mov	r6, r2
 8009bfe:	d505      	bpl.n	8009c0c <__swrite+0x1e>
 8009c00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c04:	2302      	movs	r3, #2
 8009c06:	2200      	movs	r2, #0
 8009c08:	f000 f8d0 	bl	8009dac <_lseek_r>
 8009c0c:	89a3      	ldrh	r3, [r4, #12]
 8009c0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c16:	81a3      	strh	r3, [r4, #12]
 8009c18:	4632      	mov	r2, r6
 8009c1a:	463b      	mov	r3, r7
 8009c1c:	4628      	mov	r0, r5
 8009c1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c22:	f000 b8e7 	b.w	8009df4 <_write_r>

08009c26 <__sseek>:
 8009c26:	b510      	push	{r4, lr}
 8009c28:	460c      	mov	r4, r1
 8009c2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c2e:	f000 f8bd 	bl	8009dac <_lseek_r>
 8009c32:	1c43      	adds	r3, r0, #1
 8009c34:	89a3      	ldrh	r3, [r4, #12]
 8009c36:	bf15      	itete	ne
 8009c38:	6560      	strne	r0, [r4, #84]	; 0x54
 8009c3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009c3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009c42:	81a3      	strheq	r3, [r4, #12]
 8009c44:	bf18      	it	ne
 8009c46:	81a3      	strhne	r3, [r4, #12]
 8009c48:	bd10      	pop	{r4, pc}

08009c4a <__sclose>:
 8009c4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c4e:	f000 b89d 	b.w	8009d8c <_close_r>

08009c52 <__swbuf_r>:
 8009c52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c54:	460e      	mov	r6, r1
 8009c56:	4614      	mov	r4, r2
 8009c58:	4605      	mov	r5, r0
 8009c5a:	b118      	cbz	r0, 8009c64 <__swbuf_r+0x12>
 8009c5c:	6a03      	ldr	r3, [r0, #32]
 8009c5e:	b90b      	cbnz	r3, 8009c64 <__swbuf_r+0x12>
 8009c60:	f7ff ff10 	bl	8009a84 <__sinit>
 8009c64:	69a3      	ldr	r3, [r4, #24]
 8009c66:	60a3      	str	r3, [r4, #8]
 8009c68:	89a3      	ldrh	r3, [r4, #12]
 8009c6a:	071a      	lsls	r2, r3, #28
 8009c6c:	d525      	bpl.n	8009cba <__swbuf_r+0x68>
 8009c6e:	6923      	ldr	r3, [r4, #16]
 8009c70:	b31b      	cbz	r3, 8009cba <__swbuf_r+0x68>
 8009c72:	6823      	ldr	r3, [r4, #0]
 8009c74:	6922      	ldr	r2, [r4, #16]
 8009c76:	1a98      	subs	r0, r3, r2
 8009c78:	6963      	ldr	r3, [r4, #20]
 8009c7a:	b2f6      	uxtb	r6, r6
 8009c7c:	4283      	cmp	r3, r0
 8009c7e:	4637      	mov	r7, r6
 8009c80:	dc04      	bgt.n	8009c8c <__swbuf_r+0x3a>
 8009c82:	4621      	mov	r1, r4
 8009c84:	4628      	mov	r0, r5
 8009c86:	f000 fd47 	bl	800a718 <_fflush_r>
 8009c8a:	b9e0      	cbnz	r0, 8009cc6 <__swbuf_r+0x74>
 8009c8c:	68a3      	ldr	r3, [r4, #8]
 8009c8e:	3b01      	subs	r3, #1
 8009c90:	60a3      	str	r3, [r4, #8]
 8009c92:	6823      	ldr	r3, [r4, #0]
 8009c94:	1c5a      	adds	r2, r3, #1
 8009c96:	6022      	str	r2, [r4, #0]
 8009c98:	701e      	strb	r6, [r3, #0]
 8009c9a:	6962      	ldr	r2, [r4, #20]
 8009c9c:	1c43      	adds	r3, r0, #1
 8009c9e:	429a      	cmp	r2, r3
 8009ca0:	d004      	beq.n	8009cac <__swbuf_r+0x5a>
 8009ca2:	89a3      	ldrh	r3, [r4, #12]
 8009ca4:	07db      	lsls	r3, r3, #31
 8009ca6:	d506      	bpl.n	8009cb6 <__swbuf_r+0x64>
 8009ca8:	2e0a      	cmp	r6, #10
 8009caa:	d104      	bne.n	8009cb6 <__swbuf_r+0x64>
 8009cac:	4621      	mov	r1, r4
 8009cae:	4628      	mov	r0, r5
 8009cb0:	f000 fd32 	bl	800a718 <_fflush_r>
 8009cb4:	b938      	cbnz	r0, 8009cc6 <__swbuf_r+0x74>
 8009cb6:	4638      	mov	r0, r7
 8009cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cba:	4621      	mov	r1, r4
 8009cbc:	4628      	mov	r0, r5
 8009cbe:	f000 f805 	bl	8009ccc <__swsetup_r>
 8009cc2:	2800      	cmp	r0, #0
 8009cc4:	d0d5      	beq.n	8009c72 <__swbuf_r+0x20>
 8009cc6:	f04f 37ff 	mov.w	r7, #4294967295
 8009cca:	e7f4      	b.n	8009cb6 <__swbuf_r+0x64>

08009ccc <__swsetup_r>:
 8009ccc:	b538      	push	{r3, r4, r5, lr}
 8009cce:	4b2a      	ldr	r3, [pc, #168]	; (8009d78 <__swsetup_r+0xac>)
 8009cd0:	4605      	mov	r5, r0
 8009cd2:	6818      	ldr	r0, [r3, #0]
 8009cd4:	460c      	mov	r4, r1
 8009cd6:	b118      	cbz	r0, 8009ce0 <__swsetup_r+0x14>
 8009cd8:	6a03      	ldr	r3, [r0, #32]
 8009cda:	b90b      	cbnz	r3, 8009ce0 <__swsetup_r+0x14>
 8009cdc:	f7ff fed2 	bl	8009a84 <__sinit>
 8009ce0:	89a3      	ldrh	r3, [r4, #12]
 8009ce2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ce6:	0718      	lsls	r0, r3, #28
 8009ce8:	d422      	bmi.n	8009d30 <__swsetup_r+0x64>
 8009cea:	06d9      	lsls	r1, r3, #27
 8009cec:	d407      	bmi.n	8009cfe <__swsetup_r+0x32>
 8009cee:	2309      	movs	r3, #9
 8009cf0:	602b      	str	r3, [r5, #0]
 8009cf2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009cf6:	81a3      	strh	r3, [r4, #12]
 8009cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8009cfc:	e034      	b.n	8009d68 <__swsetup_r+0x9c>
 8009cfe:	0758      	lsls	r0, r3, #29
 8009d00:	d512      	bpl.n	8009d28 <__swsetup_r+0x5c>
 8009d02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d04:	b141      	cbz	r1, 8009d18 <__swsetup_r+0x4c>
 8009d06:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d0a:	4299      	cmp	r1, r3
 8009d0c:	d002      	beq.n	8009d14 <__swsetup_r+0x48>
 8009d0e:	4628      	mov	r0, r5
 8009d10:	f000 f8b0 	bl	8009e74 <_free_r>
 8009d14:	2300      	movs	r3, #0
 8009d16:	6363      	str	r3, [r4, #52]	; 0x34
 8009d18:	89a3      	ldrh	r3, [r4, #12]
 8009d1a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009d1e:	81a3      	strh	r3, [r4, #12]
 8009d20:	2300      	movs	r3, #0
 8009d22:	6063      	str	r3, [r4, #4]
 8009d24:	6923      	ldr	r3, [r4, #16]
 8009d26:	6023      	str	r3, [r4, #0]
 8009d28:	89a3      	ldrh	r3, [r4, #12]
 8009d2a:	f043 0308 	orr.w	r3, r3, #8
 8009d2e:	81a3      	strh	r3, [r4, #12]
 8009d30:	6923      	ldr	r3, [r4, #16]
 8009d32:	b94b      	cbnz	r3, 8009d48 <__swsetup_r+0x7c>
 8009d34:	89a3      	ldrh	r3, [r4, #12]
 8009d36:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009d3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d3e:	d003      	beq.n	8009d48 <__swsetup_r+0x7c>
 8009d40:	4621      	mov	r1, r4
 8009d42:	4628      	mov	r0, r5
 8009d44:	f000 fd36 	bl	800a7b4 <__smakebuf_r>
 8009d48:	89a0      	ldrh	r0, [r4, #12]
 8009d4a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d4e:	f010 0301 	ands.w	r3, r0, #1
 8009d52:	d00a      	beq.n	8009d6a <__swsetup_r+0x9e>
 8009d54:	2300      	movs	r3, #0
 8009d56:	60a3      	str	r3, [r4, #8]
 8009d58:	6963      	ldr	r3, [r4, #20]
 8009d5a:	425b      	negs	r3, r3
 8009d5c:	61a3      	str	r3, [r4, #24]
 8009d5e:	6923      	ldr	r3, [r4, #16]
 8009d60:	b943      	cbnz	r3, 8009d74 <__swsetup_r+0xa8>
 8009d62:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009d66:	d1c4      	bne.n	8009cf2 <__swsetup_r+0x26>
 8009d68:	bd38      	pop	{r3, r4, r5, pc}
 8009d6a:	0781      	lsls	r1, r0, #30
 8009d6c:	bf58      	it	pl
 8009d6e:	6963      	ldrpl	r3, [r4, #20]
 8009d70:	60a3      	str	r3, [r4, #8]
 8009d72:	e7f4      	b.n	8009d5e <__swsetup_r+0x92>
 8009d74:	2000      	movs	r0, #0
 8009d76:	e7f7      	b.n	8009d68 <__swsetup_r+0x9c>
 8009d78:	24000068 	.word	0x24000068

08009d7c <memset>:
 8009d7c:	4402      	add	r2, r0
 8009d7e:	4603      	mov	r3, r0
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d100      	bne.n	8009d86 <memset+0xa>
 8009d84:	4770      	bx	lr
 8009d86:	f803 1b01 	strb.w	r1, [r3], #1
 8009d8a:	e7f9      	b.n	8009d80 <memset+0x4>

08009d8c <_close_r>:
 8009d8c:	b538      	push	{r3, r4, r5, lr}
 8009d8e:	4d06      	ldr	r5, [pc, #24]	; (8009da8 <_close_r+0x1c>)
 8009d90:	2300      	movs	r3, #0
 8009d92:	4604      	mov	r4, r0
 8009d94:	4608      	mov	r0, r1
 8009d96:	602b      	str	r3, [r5, #0]
 8009d98:	f7f7 fb61 	bl	800145e <_close>
 8009d9c:	1c43      	adds	r3, r0, #1
 8009d9e:	d102      	bne.n	8009da6 <_close_r+0x1a>
 8009da0:	682b      	ldr	r3, [r5, #0]
 8009da2:	b103      	cbz	r3, 8009da6 <_close_r+0x1a>
 8009da4:	6023      	str	r3, [r4, #0]
 8009da6:	bd38      	pop	{r3, r4, r5, pc}
 8009da8:	24000568 	.word	0x24000568

08009dac <_lseek_r>:
 8009dac:	b538      	push	{r3, r4, r5, lr}
 8009dae:	4d07      	ldr	r5, [pc, #28]	; (8009dcc <_lseek_r+0x20>)
 8009db0:	4604      	mov	r4, r0
 8009db2:	4608      	mov	r0, r1
 8009db4:	4611      	mov	r1, r2
 8009db6:	2200      	movs	r2, #0
 8009db8:	602a      	str	r2, [r5, #0]
 8009dba:	461a      	mov	r2, r3
 8009dbc:	f7f7 fb76 	bl	80014ac <_lseek>
 8009dc0:	1c43      	adds	r3, r0, #1
 8009dc2:	d102      	bne.n	8009dca <_lseek_r+0x1e>
 8009dc4:	682b      	ldr	r3, [r5, #0]
 8009dc6:	b103      	cbz	r3, 8009dca <_lseek_r+0x1e>
 8009dc8:	6023      	str	r3, [r4, #0]
 8009dca:	bd38      	pop	{r3, r4, r5, pc}
 8009dcc:	24000568 	.word	0x24000568

08009dd0 <_read_r>:
 8009dd0:	b538      	push	{r3, r4, r5, lr}
 8009dd2:	4d07      	ldr	r5, [pc, #28]	; (8009df0 <_read_r+0x20>)
 8009dd4:	4604      	mov	r4, r0
 8009dd6:	4608      	mov	r0, r1
 8009dd8:	4611      	mov	r1, r2
 8009dda:	2200      	movs	r2, #0
 8009ddc:	602a      	str	r2, [r5, #0]
 8009dde:	461a      	mov	r2, r3
 8009de0:	f7f7 fb20 	bl	8001424 <_read>
 8009de4:	1c43      	adds	r3, r0, #1
 8009de6:	d102      	bne.n	8009dee <_read_r+0x1e>
 8009de8:	682b      	ldr	r3, [r5, #0]
 8009dea:	b103      	cbz	r3, 8009dee <_read_r+0x1e>
 8009dec:	6023      	str	r3, [r4, #0]
 8009dee:	bd38      	pop	{r3, r4, r5, pc}
 8009df0:	24000568 	.word	0x24000568

08009df4 <_write_r>:
 8009df4:	b538      	push	{r3, r4, r5, lr}
 8009df6:	4d07      	ldr	r5, [pc, #28]	; (8009e14 <_write_r+0x20>)
 8009df8:	4604      	mov	r4, r0
 8009dfa:	4608      	mov	r0, r1
 8009dfc:	4611      	mov	r1, r2
 8009dfe:	2200      	movs	r2, #0
 8009e00:	602a      	str	r2, [r5, #0]
 8009e02:	461a      	mov	r2, r3
 8009e04:	f7f6 fc5a 	bl	80006bc <_write>
 8009e08:	1c43      	adds	r3, r0, #1
 8009e0a:	d102      	bne.n	8009e12 <_write_r+0x1e>
 8009e0c:	682b      	ldr	r3, [r5, #0]
 8009e0e:	b103      	cbz	r3, 8009e12 <_write_r+0x1e>
 8009e10:	6023      	str	r3, [r4, #0]
 8009e12:	bd38      	pop	{r3, r4, r5, pc}
 8009e14:	24000568 	.word	0x24000568

08009e18 <__errno>:
 8009e18:	4b01      	ldr	r3, [pc, #4]	; (8009e20 <__errno+0x8>)
 8009e1a:	6818      	ldr	r0, [r3, #0]
 8009e1c:	4770      	bx	lr
 8009e1e:	bf00      	nop
 8009e20:	24000068 	.word	0x24000068

08009e24 <__libc_init_array>:
 8009e24:	b570      	push	{r4, r5, r6, lr}
 8009e26:	4d0d      	ldr	r5, [pc, #52]	; (8009e5c <__libc_init_array+0x38>)
 8009e28:	4c0d      	ldr	r4, [pc, #52]	; (8009e60 <__libc_init_array+0x3c>)
 8009e2a:	1b64      	subs	r4, r4, r5
 8009e2c:	10a4      	asrs	r4, r4, #2
 8009e2e:	2600      	movs	r6, #0
 8009e30:	42a6      	cmp	r6, r4
 8009e32:	d109      	bne.n	8009e48 <__libc_init_array+0x24>
 8009e34:	4d0b      	ldr	r5, [pc, #44]	; (8009e64 <__libc_init_array+0x40>)
 8009e36:	4c0c      	ldr	r4, [pc, #48]	; (8009e68 <__libc_init_array+0x44>)
 8009e38:	f000 fd2a 	bl	800a890 <_init>
 8009e3c:	1b64      	subs	r4, r4, r5
 8009e3e:	10a4      	asrs	r4, r4, #2
 8009e40:	2600      	movs	r6, #0
 8009e42:	42a6      	cmp	r6, r4
 8009e44:	d105      	bne.n	8009e52 <__libc_init_array+0x2e>
 8009e46:	bd70      	pop	{r4, r5, r6, pc}
 8009e48:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e4c:	4798      	blx	r3
 8009e4e:	3601      	adds	r6, #1
 8009e50:	e7ee      	b.n	8009e30 <__libc_init_array+0xc>
 8009e52:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e56:	4798      	blx	r3
 8009e58:	3601      	adds	r6, #1
 8009e5a:	e7f2      	b.n	8009e42 <__libc_init_array+0x1e>
 8009e5c:	0800aa88 	.word	0x0800aa88
 8009e60:	0800aa88 	.word	0x0800aa88
 8009e64:	0800aa88 	.word	0x0800aa88
 8009e68:	0800aa8c 	.word	0x0800aa8c

08009e6c <__retarget_lock_init_recursive>:
 8009e6c:	4770      	bx	lr

08009e6e <__retarget_lock_acquire_recursive>:
 8009e6e:	4770      	bx	lr

08009e70 <__retarget_lock_release_recursive>:
 8009e70:	4770      	bx	lr
	...

08009e74 <_free_r>:
 8009e74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e76:	2900      	cmp	r1, #0
 8009e78:	d044      	beq.n	8009f04 <_free_r+0x90>
 8009e7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e7e:	9001      	str	r0, [sp, #4]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	f1a1 0404 	sub.w	r4, r1, #4
 8009e86:	bfb8      	it	lt
 8009e88:	18e4      	addlt	r4, r4, r3
 8009e8a:	f000 f8df 	bl	800a04c <__malloc_lock>
 8009e8e:	4a1e      	ldr	r2, [pc, #120]	; (8009f08 <_free_r+0x94>)
 8009e90:	9801      	ldr	r0, [sp, #4]
 8009e92:	6813      	ldr	r3, [r2, #0]
 8009e94:	b933      	cbnz	r3, 8009ea4 <_free_r+0x30>
 8009e96:	6063      	str	r3, [r4, #4]
 8009e98:	6014      	str	r4, [r2, #0]
 8009e9a:	b003      	add	sp, #12
 8009e9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ea0:	f000 b8da 	b.w	800a058 <__malloc_unlock>
 8009ea4:	42a3      	cmp	r3, r4
 8009ea6:	d908      	bls.n	8009eba <_free_r+0x46>
 8009ea8:	6825      	ldr	r5, [r4, #0]
 8009eaa:	1961      	adds	r1, r4, r5
 8009eac:	428b      	cmp	r3, r1
 8009eae:	bf01      	itttt	eq
 8009eb0:	6819      	ldreq	r1, [r3, #0]
 8009eb2:	685b      	ldreq	r3, [r3, #4]
 8009eb4:	1949      	addeq	r1, r1, r5
 8009eb6:	6021      	streq	r1, [r4, #0]
 8009eb8:	e7ed      	b.n	8009e96 <_free_r+0x22>
 8009eba:	461a      	mov	r2, r3
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	b10b      	cbz	r3, 8009ec4 <_free_r+0x50>
 8009ec0:	42a3      	cmp	r3, r4
 8009ec2:	d9fa      	bls.n	8009eba <_free_r+0x46>
 8009ec4:	6811      	ldr	r1, [r2, #0]
 8009ec6:	1855      	adds	r5, r2, r1
 8009ec8:	42a5      	cmp	r5, r4
 8009eca:	d10b      	bne.n	8009ee4 <_free_r+0x70>
 8009ecc:	6824      	ldr	r4, [r4, #0]
 8009ece:	4421      	add	r1, r4
 8009ed0:	1854      	adds	r4, r2, r1
 8009ed2:	42a3      	cmp	r3, r4
 8009ed4:	6011      	str	r1, [r2, #0]
 8009ed6:	d1e0      	bne.n	8009e9a <_free_r+0x26>
 8009ed8:	681c      	ldr	r4, [r3, #0]
 8009eda:	685b      	ldr	r3, [r3, #4]
 8009edc:	6053      	str	r3, [r2, #4]
 8009ede:	440c      	add	r4, r1
 8009ee0:	6014      	str	r4, [r2, #0]
 8009ee2:	e7da      	b.n	8009e9a <_free_r+0x26>
 8009ee4:	d902      	bls.n	8009eec <_free_r+0x78>
 8009ee6:	230c      	movs	r3, #12
 8009ee8:	6003      	str	r3, [r0, #0]
 8009eea:	e7d6      	b.n	8009e9a <_free_r+0x26>
 8009eec:	6825      	ldr	r5, [r4, #0]
 8009eee:	1961      	adds	r1, r4, r5
 8009ef0:	428b      	cmp	r3, r1
 8009ef2:	bf04      	itt	eq
 8009ef4:	6819      	ldreq	r1, [r3, #0]
 8009ef6:	685b      	ldreq	r3, [r3, #4]
 8009ef8:	6063      	str	r3, [r4, #4]
 8009efa:	bf04      	itt	eq
 8009efc:	1949      	addeq	r1, r1, r5
 8009efe:	6021      	streq	r1, [r4, #0]
 8009f00:	6054      	str	r4, [r2, #4]
 8009f02:	e7ca      	b.n	8009e9a <_free_r+0x26>
 8009f04:	b003      	add	sp, #12
 8009f06:	bd30      	pop	{r4, r5, pc}
 8009f08:	24000570 	.word	0x24000570

08009f0c <sbrk_aligned>:
 8009f0c:	b570      	push	{r4, r5, r6, lr}
 8009f0e:	4e0e      	ldr	r6, [pc, #56]	; (8009f48 <sbrk_aligned+0x3c>)
 8009f10:	460c      	mov	r4, r1
 8009f12:	6831      	ldr	r1, [r6, #0]
 8009f14:	4605      	mov	r5, r0
 8009f16:	b911      	cbnz	r1, 8009f1e <sbrk_aligned+0x12>
 8009f18:	f000 fcaa 	bl	800a870 <_sbrk_r>
 8009f1c:	6030      	str	r0, [r6, #0]
 8009f1e:	4621      	mov	r1, r4
 8009f20:	4628      	mov	r0, r5
 8009f22:	f000 fca5 	bl	800a870 <_sbrk_r>
 8009f26:	1c43      	adds	r3, r0, #1
 8009f28:	d00a      	beq.n	8009f40 <sbrk_aligned+0x34>
 8009f2a:	1cc4      	adds	r4, r0, #3
 8009f2c:	f024 0403 	bic.w	r4, r4, #3
 8009f30:	42a0      	cmp	r0, r4
 8009f32:	d007      	beq.n	8009f44 <sbrk_aligned+0x38>
 8009f34:	1a21      	subs	r1, r4, r0
 8009f36:	4628      	mov	r0, r5
 8009f38:	f000 fc9a 	bl	800a870 <_sbrk_r>
 8009f3c:	3001      	adds	r0, #1
 8009f3e:	d101      	bne.n	8009f44 <sbrk_aligned+0x38>
 8009f40:	f04f 34ff 	mov.w	r4, #4294967295
 8009f44:	4620      	mov	r0, r4
 8009f46:	bd70      	pop	{r4, r5, r6, pc}
 8009f48:	24000574 	.word	0x24000574

08009f4c <_malloc_r>:
 8009f4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f50:	1ccd      	adds	r5, r1, #3
 8009f52:	f025 0503 	bic.w	r5, r5, #3
 8009f56:	3508      	adds	r5, #8
 8009f58:	2d0c      	cmp	r5, #12
 8009f5a:	bf38      	it	cc
 8009f5c:	250c      	movcc	r5, #12
 8009f5e:	2d00      	cmp	r5, #0
 8009f60:	4607      	mov	r7, r0
 8009f62:	db01      	blt.n	8009f68 <_malloc_r+0x1c>
 8009f64:	42a9      	cmp	r1, r5
 8009f66:	d905      	bls.n	8009f74 <_malloc_r+0x28>
 8009f68:	230c      	movs	r3, #12
 8009f6a:	603b      	str	r3, [r7, #0]
 8009f6c:	2600      	movs	r6, #0
 8009f6e:	4630      	mov	r0, r6
 8009f70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f74:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a048 <_malloc_r+0xfc>
 8009f78:	f000 f868 	bl	800a04c <__malloc_lock>
 8009f7c:	f8d8 3000 	ldr.w	r3, [r8]
 8009f80:	461c      	mov	r4, r3
 8009f82:	bb5c      	cbnz	r4, 8009fdc <_malloc_r+0x90>
 8009f84:	4629      	mov	r1, r5
 8009f86:	4638      	mov	r0, r7
 8009f88:	f7ff ffc0 	bl	8009f0c <sbrk_aligned>
 8009f8c:	1c43      	adds	r3, r0, #1
 8009f8e:	4604      	mov	r4, r0
 8009f90:	d155      	bne.n	800a03e <_malloc_r+0xf2>
 8009f92:	f8d8 4000 	ldr.w	r4, [r8]
 8009f96:	4626      	mov	r6, r4
 8009f98:	2e00      	cmp	r6, #0
 8009f9a:	d145      	bne.n	800a028 <_malloc_r+0xdc>
 8009f9c:	2c00      	cmp	r4, #0
 8009f9e:	d048      	beq.n	800a032 <_malloc_r+0xe6>
 8009fa0:	6823      	ldr	r3, [r4, #0]
 8009fa2:	4631      	mov	r1, r6
 8009fa4:	4638      	mov	r0, r7
 8009fa6:	eb04 0903 	add.w	r9, r4, r3
 8009faa:	f000 fc61 	bl	800a870 <_sbrk_r>
 8009fae:	4581      	cmp	r9, r0
 8009fb0:	d13f      	bne.n	800a032 <_malloc_r+0xe6>
 8009fb2:	6821      	ldr	r1, [r4, #0]
 8009fb4:	1a6d      	subs	r5, r5, r1
 8009fb6:	4629      	mov	r1, r5
 8009fb8:	4638      	mov	r0, r7
 8009fba:	f7ff ffa7 	bl	8009f0c <sbrk_aligned>
 8009fbe:	3001      	adds	r0, #1
 8009fc0:	d037      	beq.n	800a032 <_malloc_r+0xe6>
 8009fc2:	6823      	ldr	r3, [r4, #0]
 8009fc4:	442b      	add	r3, r5
 8009fc6:	6023      	str	r3, [r4, #0]
 8009fc8:	f8d8 3000 	ldr.w	r3, [r8]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d038      	beq.n	800a042 <_malloc_r+0xf6>
 8009fd0:	685a      	ldr	r2, [r3, #4]
 8009fd2:	42a2      	cmp	r2, r4
 8009fd4:	d12b      	bne.n	800a02e <_malloc_r+0xe2>
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	605a      	str	r2, [r3, #4]
 8009fda:	e00f      	b.n	8009ffc <_malloc_r+0xb0>
 8009fdc:	6822      	ldr	r2, [r4, #0]
 8009fde:	1b52      	subs	r2, r2, r5
 8009fe0:	d41f      	bmi.n	800a022 <_malloc_r+0xd6>
 8009fe2:	2a0b      	cmp	r2, #11
 8009fe4:	d917      	bls.n	800a016 <_malloc_r+0xca>
 8009fe6:	1961      	adds	r1, r4, r5
 8009fe8:	42a3      	cmp	r3, r4
 8009fea:	6025      	str	r5, [r4, #0]
 8009fec:	bf18      	it	ne
 8009fee:	6059      	strne	r1, [r3, #4]
 8009ff0:	6863      	ldr	r3, [r4, #4]
 8009ff2:	bf08      	it	eq
 8009ff4:	f8c8 1000 	streq.w	r1, [r8]
 8009ff8:	5162      	str	r2, [r4, r5]
 8009ffa:	604b      	str	r3, [r1, #4]
 8009ffc:	4638      	mov	r0, r7
 8009ffe:	f104 060b 	add.w	r6, r4, #11
 800a002:	f000 f829 	bl	800a058 <__malloc_unlock>
 800a006:	f026 0607 	bic.w	r6, r6, #7
 800a00a:	1d23      	adds	r3, r4, #4
 800a00c:	1af2      	subs	r2, r6, r3
 800a00e:	d0ae      	beq.n	8009f6e <_malloc_r+0x22>
 800a010:	1b9b      	subs	r3, r3, r6
 800a012:	50a3      	str	r3, [r4, r2]
 800a014:	e7ab      	b.n	8009f6e <_malloc_r+0x22>
 800a016:	42a3      	cmp	r3, r4
 800a018:	6862      	ldr	r2, [r4, #4]
 800a01a:	d1dd      	bne.n	8009fd8 <_malloc_r+0x8c>
 800a01c:	f8c8 2000 	str.w	r2, [r8]
 800a020:	e7ec      	b.n	8009ffc <_malloc_r+0xb0>
 800a022:	4623      	mov	r3, r4
 800a024:	6864      	ldr	r4, [r4, #4]
 800a026:	e7ac      	b.n	8009f82 <_malloc_r+0x36>
 800a028:	4634      	mov	r4, r6
 800a02a:	6876      	ldr	r6, [r6, #4]
 800a02c:	e7b4      	b.n	8009f98 <_malloc_r+0x4c>
 800a02e:	4613      	mov	r3, r2
 800a030:	e7cc      	b.n	8009fcc <_malloc_r+0x80>
 800a032:	230c      	movs	r3, #12
 800a034:	603b      	str	r3, [r7, #0]
 800a036:	4638      	mov	r0, r7
 800a038:	f000 f80e 	bl	800a058 <__malloc_unlock>
 800a03c:	e797      	b.n	8009f6e <_malloc_r+0x22>
 800a03e:	6025      	str	r5, [r4, #0]
 800a040:	e7dc      	b.n	8009ffc <_malloc_r+0xb0>
 800a042:	605b      	str	r3, [r3, #4]
 800a044:	deff      	udf	#255	; 0xff
 800a046:	bf00      	nop
 800a048:	24000570 	.word	0x24000570

0800a04c <__malloc_lock>:
 800a04c:	4801      	ldr	r0, [pc, #4]	; (800a054 <__malloc_lock+0x8>)
 800a04e:	f7ff bf0e 	b.w	8009e6e <__retarget_lock_acquire_recursive>
 800a052:	bf00      	nop
 800a054:	2400056c 	.word	0x2400056c

0800a058 <__malloc_unlock>:
 800a058:	4801      	ldr	r0, [pc, #4]	; (800a060 <__malloc_unlock+0x8>)
 800a05a:	f7ff bf09 	b.w	8009e70 <__retarget_lock_release_recursive>
 800a05e:	bf00      	nop
 800a060:	2400056c 	.word	0x2400056c

0800a064 <__sfputc_r>:
 800a064:	6893      	ldr	r3, [r2, #8]
 800a066:	3b01      	subs	r3, #1
 800a068:	2b00      	cmp	r3, #0
 800a06a:	b410      	push	{r4}
 800a06c:	6093      	str	r3, [r2, #8]
 800a06e:	da08      	bge.n	800a082 <__sfputc_r+0x1e>
 800a070:	6994      	ldr	r4, [r2, #24]
 800a072:	42a3      	cmp	r3, r4
 800a074:	db01      	blt.n	800a07a <__sfputc_r+0x16>
 800a076:	290a      	cmp	r1, #10
 800a078:	d103      	bne.n	800a082 <__sfputc_r+0x1e>
 800a07a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a07e:	f7ff bde8 	b.w	8009c52 <__swbuf_r>
 800a082:	6813      	ldr	r3, [r2, #0]
 800a084:	1c58      	adds	r0, r3, #1
 800a086:	6010      	str	r0, [r2, #0]
 800a088:	7019      	strb	r1, [r3, #0]
 800a08a:	4608      	mov	r0, r1
 800a08c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a090:	4770      	bx	lr

0800a092 <__sfputs_r>:
 800a092:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a094:	4606      	mov	r6, r0
 800a096:	460f      	mov	r7, r1
 800a098:	4614      	mov	r4, r2
 800a09a:	18d5      	adds	r5, r2, r3
 800a09c:	42ac      	cmp	r4, r5
 800a09e:	d101      	bne.n	800a0a4 <__sfputs_r+0x12>
 800a0a0:	2000      	movs	r0, #0
 800a0a2:	e007      	b.n	800a0b4 <__sfputs_r+0x22>
 800a0a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0a8:	463a      	mov	r2, r7
 800a0aa:	4630      	mov	r0, r6
 800a0ac:	f7ff ffda 	bl	800a064 <__sfputc_r>
 800a0b0:	1c43      	adds	r3, r0, #1
 800a0b2:	d1f3      	bne.n	800a09c <__sfputs_r+0xa>
 800a0b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a0b8 <_vfiprintf_r>:
 800a0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0bc:	460d      	mov	r5, r1
 800a0be:	b09d      	sub	sp, #116	; 0x74
 800a0c0:	4614      	mov	r4, r2
 800a0c2:	4698      	mov	r8, r3
 800a0c4:	4606      	mov	r6, r0
 800a0c6:	b118      	cbz	r0, 800a0d0 <_vfiprintf_r+0x18>
 800a0c8:	6a03      	ldr	r3, [r0, #32]
 800a0ca:	b90b      	cbnz	r3, 800a0d0 <_vfiprintf_r+0x18>
 800a0cc:	f7ff fcda 	bl	8009a84 <__sinit>
 800a0d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0d2:	07d9      	lsls	r1, r3, #31
 800a0d4:	d405      	bmi.n	800a0e2 <_vfiprintf_r+0x2a>
 800a0d6:	89ab      	ldrh	r3, [r5, #12]
 800a0d8:	059a      	lsls	r2, r3, #22
 800a0da:	d402      	bmi.n	800a0e2 <_vfiprintf_r+0x2a>
 800a0dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0de:	f7ff fec6 	bl	8009e6e <__retarget_lock_acquire_recursive>
 800a0e2:	89ab      	ldrh	r3, [r5, #12]
 800a0e4:	071b      	lsls	r3, r3, #28
 800a0e6:	d501      	bpl.n	800a0ec <_vfiprintf_r+0x34>
 800a0e8:	692b      	ldr	r3, [r5, #16]
 800a0ea:	b99b      	cbnz	r3, 800a114 <_vfiprintf_r+0x5c>
 800a0ec:	4629      	mov	r1, r5
 800a0ee:	4630      	mov	r0, r6
 800a0f0:	f7ff fdec 	bl	8009ccc <__swsetup_r>
 800a0f4:	b170      	cbz	r0, 800a114 <_vfiprintf_r+0x5c>
 800a0f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0f8:	07dc      	lsls	r4, r3, #31
 800a0fa:	d504      	bpl.n	800a106 <_vfiprintf_r+0x4e>
 800a0fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a100:	b01d      	add	sp, #116	; 0x74
 800a102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a106:	89ab      	ldrh	r3, [r5, #12]
 800a108:	0598      	lsls	r0, r3, #22
 800a10a:	d4f7      	bmi.n	800a0fc <_vfiprintf_r+0x44>
 800a10c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a10e:	f7ff feaf 	bl	8009e70 <__retarget_lock_release_recursive>
 800a112:	e7f3      	b.n	800a0fc <_vfiprintf_r+0x44>
 800a114:	2300      	movs	r3, #0
 800a116:	9309      	str	r3, [sp, #36]	; 0x24
 800a118:	2320      	movs	r3, #32
 800a11a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a11e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a122:	2330      	movs	r3, #48	; 0x30
 800a124:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a2d8 <_vfiprintf_r+0x220>
 800a128:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a12c:	f04f 0901 	mov.w	r9, #1
 800a130:	4623      	mov	r3, r4
 800a132:	469a      	mov	sl, r3
 800a134:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a138:	b10a      	cbz	r2, 800a13e <_vfiprintf_r+0x86>
 800a13a:	2a25      	cmp	r2, #37	; 0x25
 800a13c:	d1f9      	bne.n	800a132 <_vfiprintf_r+0x7a>
 800a13e:	ebba 0b04 	subs.w	fp, sl, r4
 800a142:	d00b      	beq.n	800a15c <_vfiprintf_r+0xa4>
 800a144:	465b      	mov	r3, fp
 800a146:	4622      	mov	r2, r4
 800a148:	4629      	mov	r1, r5
 800a14a:	4630      	mov	r0, r6
 800a14c:	f7ff ffa1 	bl	800a092 <__sfputs_r>
 800a150:	3001      	adds	r0, #1
 800a152:	f000 80a9 	beq.w	800a2a8 <_vfiprintf_r+0x1f0>
 800a156:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a158:	445a      	add	r2, fp
 800a15a:	9209      	str	r2, [sp, #36]	; 0x24
 800a15c:	f89a 3000 	ldrb.w	r3, [sl]
 800a160:	2b00      	cmp	r3, #0
 800a162:	f000 80a1 	beq.w	800a2a8 <_vfiprintf_r+0x1f0>
 800a166:	2300      	movs	r3, #0
 800a168:	f04f 32ff 	mov.w	r2, #4294967295
 800a16c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a170:	f10a 0a01 	add.w	sl, sl, #1
 800a174:	9304      	str	r3, [sp, #16]
 800a176:	9307      	str	r3, [sp, #28]
 800a178:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a17c:	931a      	str	r3, [sp, #104]	; 0x68
 800a17e:	4654      	mov	r4, sl
 800a180:	2205      	movs	r2, #5
 800a182:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a186:	4854      	ldr	r0, [pc, #336]	; (800a2d8 <_vfiprintf_r+0x220>)
 800a188:	f7f6 f8ca 	bl	8000320 <memchr>
 800a18c:	9a04      	ldr	r2, [sp, #16]
 800a18e:	b9d8      	cbnz	r0, 800a1c8 <_vfiprintf_r+0x110>
 800a190:	06d1      	lsls	r1, r2, #27
 800a192:	bf44      	itt	mi
 800a194:	2320      	movmi	r3, #32
 800a196:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a19a:	0713      	lsls	r3, r2, #28
 800a19c:	bf44      	itt	mi
 800a19e:	232b      	movmi	r3, #43	; 0x2b
 800a1a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1a4:	f89a 3000 	ldrb.w	r3, [sl]
 800a1a8:	2b2a      	cmp	r3, #42	; 0x2a
 800a1aa:	d015      	beq.n	800a1d8 <_vfiprintf_r+0x120>
 800a1ac:	9a07      	ldr	r2, [sp, #28]
 800a1ae:	4654      	mov	r4, sl
 800a1b0:	2000      	movs	r0, #0
 800a1b2:	f04f 0c0a 	mov.w	ip, #10
 800a1b6:	4621      	mov	r1, r4
 800a1b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1bc:	3b30      	subs	r3, #48	; 0x30
 800a1be:	2b09      	cmp	r3, #9
 800a1c0:	d94d      	bls.n	800a25e <_vfiprintf_r+0x1a6>
 800a1c2:	b1b0      	cbz	r0, 800a1f2 <_vfiprintf_r+0x13a>
 800a1c4:	9207      	str	r2, [sp, #28]
 800a1c6:	e014      	b.n	800a1f2 <_vfiprintf_r+0x13a>
 800a1c8:	eba0 0308 	sub.w	r3, r0, r8
 800a1cc:	fa09 f303 	lsl.w	r3, r9, r3
 800a1d0:	4313      	orrs	r3, r2
 800a1d2:	9304      	str	r3, [sp, #16]
 800a1d4:	46a2      	mov	sl, r4
 800a1d6:	e7d2      	b.n	800a17e <_vfiprintf_r+0xc6>
 800a1d8:	9b03      	ldr	r3, [sp, #12]
 800a1da:	1d19      	adds	r1, r3, #4
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	9103      	str	r1, [sp, #12]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	bfbb      	ittet	lt
 800a1e4:	425b      	neglt	r3, r3
 800a1e6:	f042 0202 	orrlt.w	r2, r2, #2
 800a1ea:	9307      	strge	r3, [sp, #28]
 800a1ec:	9307      	strlt	r3, [sp, #28]
 800a1ee:	bfb8      	it	lt
 800a1f0:	9204      	strlt	r2, [sp, #16]
 800a1f2:	7823      	ldrb	r3, [r4, #0]
 800a1f4:	2b2e      	cmp	r3, #46	; 0x2e
 800a1f6:	d10c      	bne.n	800a212 <_vfiprintf_r+0x15a>
 800a1f8:	7863      	ldrb	r3, [r4, #1]
 800a1fa:	2b2a      	cmp	r3, #42	; 0x2a
 800a1fc:	d134      	bne.n	800a268 <_vfiprintf_r+0x1b0>
 800a1fe:	9b03      	ldr	r3, [sp, #12]
 800a200:	1d1a      	adds	r2, r3, #4
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	9203      	str	r2, [sp, #12]
 800a206:	2b00      	cmp	r3, #0
 800a208:	bfb8      	it	lt
 800a20a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a20e:	3402      	adds	r4, #2
 800a210:	9305      	str	r3, [sp, #20]
 800a212:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a2e8 <_vfiprintf_r+0x230>
 800a216:	7821      	ldrb	r1, [r4, #0]
 800a218:	2203      	movs	r2, #3
 800a21a:	4650      	mov	r0, sl
 800a21c:	f7f6 f880 	bl	8000320 <memchr>
 800a220:	b138      	cbz	r0, 800a232 <_vfiprintf_r+0x17a>
 800a222:	9b04      	ldr	r3, [sp, #16]
 800a224:	eba0 000a 	sub.w	r0, r0, sl
 800a228:	2240      	movs	r2, #64	; 0x40
 800a22a:	4082      	lsls	r2, r0
 800a22c:	4313      	orrs	r3, r2
 800a22e:	3401      	adds	r4, #1
 800a230:	9304      	str	r3, [sp, #16]
 800a232:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a236:	4829      	ldr	r0, [pc, #164]	; (800a2dc <_vfiprintf_r+0x224>)
 800a238:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a23c:	2206      	movs	r2, #6
 800a23e:	f7f6 f86f 	bl	8000320 <memchr>
 800a242:	2800      	cmp	r0, #0
 800a244:	d03f      	beq.n	800a2c6 <_vfiprintf_r+0x20e>
 800a246:	4b26      	ldr	r3, [pc, #152]	; (800a2e0 <_vfiprintf_r+0x228>)
 800a248:	bb1b      	cbnz	r3, 800a292 <_vfiprintf_r+0x1da>
 800a24a:	9b03      	ldr	r3, [sp, #12]
 800a24c:	3307      	adds	r3, #7
 800a24e:	f023 0307 	bic.w	r3, r3, #7
 800a252:	3308      	adds	r3, #8
 800a254:	9303      	str	r3, [sp, #12]
 800a256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a258:	443b      	add	r3, r7
 800a25a:	9309      	str	r3, [sp, #36]	; 0x24
 800a25c:	e768      	b.n	800a130 <_vfiprintf_r+0x78>
 800a25e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a262:	460c      	mov	r4, r1
 800a264:	2001      	movs	r0, #1
 800a266:	e7a6      	b.n	800a1b6 <_vfiprintf_r+0xfe>
 800a268:	2300      	movs	r3, #0
 800a26a:	3401      	adds	r4, #1
 800a26c:	9305      	str	r3, [sp, #20]
 800a26e:	4619      	mov	r1, r3
 800a270:	f04f 0c0a 	mov.w	ip, #10
 800a274:	4620      	mov	r0, r4
 800a276:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a27a:	3a30      	subs	r2, #48	; 0x30
 800a27c:	2a09      	cmp	r2, #9
 800a27e:	d903      	bls.n	800a288 <_vfiprintf_r+0x1d0>
 800a280:	2b00      	cmp	r3, #0
 800a282:	d0c6      	beq.n	800a212 <_vfiprintf_r+0x15a>
 800a284:	9105      	str	r1, [sp, #20]
 800a286:	e7c4      	b.n	800a212 <_vfiprintf_r+0x15a>
 800a288:	fb0c 2101 	mla	r1, ip, r1, r2
 800a28c:	4604      	mov	r4, r0
 800a28e:	2301      	movs	r3, #1
 800a290:	e7f0      	b.n	800a274 <_vfiprintf_r+0x1bc>
 800a292:	ab03      	add	r3, sp, #12
 800a294:	9300      	str	r3, [sp, #0]
 800a296:	462a      	mov	r2, r5
 800a298:	4b12      	ldr	r3, [pc, #72]	; (800a2e4 <_vfiprintf_r+0x22c>)
 800a29a:	a904      	add	r1, sp, #16
 800a29c:	4630      	mov	r0, r6
 800a29e:	f3af 8000 	nop.w
 800a2a2:	4607      	mov	r7, r0
 800a2a4:	1c78      	adds	r0, r7, #1
 800a2a6:	d1d6      	bne.n	800a256 <_vfiprintf_r+0x19e>
 800a2a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2aa:	07d9      	lsls	r1, r3, #31
 800a2ac:	d405      	bmi.n	800a2ba <_vfiprintf_r+0x202>
 800a2ae:	89ab      	ldrh	r3, [r5, #12]
 800a2b0:	059a      	lsls	r2, r3, #22
 800a2b2:	d402      	bmi.n	800a2ba <_vfiprintf_r+0x202>
 800a2b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2b6:	f7ff fddb 	bl	8009e70 <__retarget_lock_release_recursive>
 800a2ba:	89ab      	ldrh	r3, [r5, #12]
 800a2bc:	065b      	lsls	r3, r3, #25
 800a2be:	f53f af1d 	bmi.w	800a0fc <_vfiprintf_r+0x44>
 800a2c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2c4:	e71c      	b.n	800a100 <_vfiprintf_r+0x48>
 800a2c6:	ab03      	add	r3, sp, #12
 800a2c8:	9300      	str	r3, [sp, #0]
 800a2ca:	462a      	mov	r2, r5
 800a2cc:	4b05      	ldr	r3, [pc, #20]	; (800a2e4 <_vfiprintf_r+0x22c>)
 800a2ce:	a904      	add	r1, sp, #16
 800a2d0:	4630      	mov	r0, r6
 800a2d2:	f000 f879 	bl	800a3c8 <_printf_i>
 800a2d6:	e7e4      	b.n	800a2a2 <_vfiprintf_r+0x1ea>
 800a2d8:	0800aa4c 	.word	0x0800aa4c
 800a2dc:	0800aa56 	.word	0x0800aa56
 800a2e0:	00000000 	.word	0x00000000
 800a2e4:	0800a093 	.word	0x0800a093
 800a2e8:	0800aa52 	.word	0x0800aa52

0800a2ec <_printf_common>:
 800a2ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2f0:	4616      	mov	r6, r2
 800a2f2:	4699      	mov	r9, r3
 800a2f4:	688a      	ldr	r2, [r1, #8]
 800a2f6:	690b      	ldr	r3, [r1, #16]
 800a2f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	bfb8      	it	lt
 800a300:	4613      	movlt	r3, r2
 800a302:	6033      	str	r3, [r6, #0]
 800a304:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a308:	4607      	mov	r7, r0
 800a30a:	460c      	mov	r4, r1
 800a30c:	b10a      	cbz	r2, 800a312 <_printf_common+0x26>
 800a30e:	3301      	adds	r3, #1
 800a310:	6033      	str	r3, [r6, #0]
 800a312:	6823      	ldr	r3, [r4, #0]
 800a314:	0699      	lsls	r1, r3, #26
 800a316:	bf42      	ittt	mi
 800a318:	6833      	ldrmi	r3, [r6, #0]
 800a31a:	3302      	addmi	r3, #2
 800a31c:	6033      	strmi	r3, [r6, #0]
 800a31e:	6825      	ldr	r5, [r4, #0]
 800a320:	f015 0506 	ands.w	r5, r5, #6
 800a324:	d106      	bne.n	800a334 <_printf_common+0x48>
 800a326:	f104 0a19 	add.w	sl, r4, #25
 800a32a:	68e3      	ldr	r3, [r4, #12]
 800a32c:	6832      	ldr	r2, [r6, #0]
 800a32e:	1a9b      	subs	r3, r3, r2
 800a330:	42ab      	cmp	r3, r5
 800a332:	dc26      	bgt.n	800a382 <_printf_common+0x96>
 800a334:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a338:	1e13      	subs	r3, r2, #0
 800a33a:	6822      	ldr	r2, [r4, #0]
 800a33c:	bf18      	it	ne
 800a33e:	2301      	movne	r3, #1
 800a340:	0692      	lsls	r2, r2, #26
 800a342:	d42b      	bmi.n	800a39c <_printf_common+0xb0>
 800a344:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a348:	4649      	mov	r1, r9
 800a34a:	4638      	mov	r0, r7
 800a34c:	47c0      	blx	r8
 800a34e:	3001      	adds	r0, #1
 800a350:	d01e      	beq.n	800a390 <_printf_common+0xa4>
 800a352:	6823      	ldr	r3, [r4, #0]
 800a354:	6922      	ldr	r2, [r4, #16]
 800a356:	f003 0306 	and.w	r3, r3, #6
 800a35a:	2b04      	cmp	r3, #4
 800a35c:	bf02      	ittt	eq
 800a35e:	68e5      	ldreq	r5, [r4, #12]
 800a360:	6833      	ldreq	r3, [r6, #0]
 800a362:	1aed      	subeq	r5, r5, r3
 800a364:	68a3      	ldr	r3, [r4, #8]
 800a366:	bf0c      	ite	eq
 800a368:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a36c:	2500      	movne	r5, #0
 800a36e:	4293      	cmp	r3, r2
 800a370:	bfc4      	itt	gt
 800a372:	1a9b      	subgt	r3, r3, r2
 800a374:	18ed      	addgt	r5, r5, r3
 800a376:	2600      	movs	r6, #0
 800a378:	341a      	adds	r4, #26
 800a37a:	42b5      	cmp	r5, r6
 800a37c:	d11a      	bne.n	800a3b4 <_printf_common+0xc8>
 800a37e:	2000      	movs	r0, #0
 800a380:	e008      	b.n	800a394 <_printf_common+0xa8>
 800a382:	2301      	movs	r3, #1
 800a384:	4652      	mov	r2, sl
 800a386:	4649      	mov	r1, r9
 800a388:	4638      	mov	r0, r7
 800a38a:	47c0      	blx	r8
 800a38c:	3001      	adds	r0, #1
 800a38e:	d103      	bne.n	800a398 <_printf_common+0xac>
 800a390:	f04f 30ff 	mov.w	r0, #4294967295
 800a394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a398:	3501      	adds	r5, #1
 800a39a:	e7c6      	b.n	800a32a <_printf_common+0x3e>
 800a39c:	18e1      	adds	r1, r4, r3
 800a39e:	1c5a      	adds	r2, r3, #1
 800a3a0:	2030      	movs	r0, #48	; 0x30
 800a3a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a3a6:	4422      	add	r2, r4
 800a3a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a3ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a3b0:	3302      	adds	r3, #2
 800a3b2:	e7c7      	b.n	800a344 <_printf_common+0x58>
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	4622      	mov	r2, r4
 800a3b8:	4649      	mov	r1, r9
 800a3ba:	4638      	mov	r0, r7
 800a3bc:	47c0      	blx	r8
 800a3be:	3001      	adds	r0, #1
 800a3c0:	d0e6      	beq.n	800a390 <_printf_common+0xa4>
 800a3c2:	3601      	adds	r6, #1
 800a3c4:	e7d9      	b.n	800a37a <_printf_common+0x8e>
	...

0800a3c8 <_printf_i>:
 800a3c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a3cc:	7e0f      	ldrb	r7, [r1, #24]
 800a3ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a3d0:	2f78      	cmp	r7, #120	; 0x78
 800a3d2:	4691      	mov	r9, r2
 800a3d4:	4680      	mov	r8, r0
 800a3d6:	460c      	mov	r4, r1
 800a3d8:	469a      	mov	sl, r3
 800a3da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a3de:	d807      	bhi.n	800a3f0 <_printf_i+0x28>
 800a3e0:	2f62      	cmp	r7, #98	; 0x62
 800a3e2:	d80a      	bhi.n	800a3fa <_printf_i+0x32>
 800a3e4:	2f00      	cmp	r7, #0
 800a3e6:	f000 80d4 	beq.w	800a592 <_printf_i+0x1ca>
 800a3ea:	2f58      	cmp	r7, #88	; 0x58
 800a3ec:	f000 80c0 	beq.w	800a570 <_printf_i+0x1a8>
 800a3f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a3f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a3f8:	e03a      	b.n	800a470 <_printf_i+0xa8>
 800a3fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a3fe:	2b15      	cmp	r3, #21
 800a400:	d8f6      	bhi.n	800a3f0 <_printf_i+0x28>
 800a402:	a101      	add	r1, pc, #4	; (adr r1, 800a408 <_printf_i+0x40>)
 800a404:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a408:	0800a461 	.word	0x0800a461
 800a40c:	0800a475 	.word	0x0800a475
 800a410:	0800a3f1 	.word	0x0800a3f1
 800a414:	0800a3f1 	.word	0x0800a3f1
 800a418:	0800a3f1 	.word	0x0800a3f1
 800a41c:	0800a3f1 	.word	0x0800a3f1
 800a420:	0800a475 	.word	0x0800a475
 800a424:	0800a3f1 	.word	0x0800a3f1
 800a428:	0800a3f1 	.word	0x0800a3f1
 800a42c:	0800a3f1 	.word	0x0800a3f1
 800a430:	0800a3f1 	.word	0x0800a3f1
 800a434:	0800a579 	.word	0x0800a579
 800a438:	0800a4a1 	.word	0x0800a4a1
 800a43c:	0800a533 	.word	0x0800a533
 800a440:	0800a3f1 	.word	0x0800a3f1
 800a444:	0800a3f1 	.word	0x0800a3f1
 800a448:	0800a59b 	.word	0x0800a59b
 800a44c:	0800a3f1 	.word	0x0800a3f1
 800a450:	0800a4a1 	.word	0x0800a4a1
 800a454:	0800a3f1 	.word	0x0800a3f1
 800a458:	0800a3f1 	.word	0x0800a3f1
 800a45c:	0800a53b 	.word	0x0800a53b
 800a460:	682b      	ldr	r3, [r5, #0]
 800a462:	1d1a      	adds	r2, r3, #4
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	602a      	str	r2, [r5, #0]
 800a468:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a46c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a470:	2301      	movs	r3, #1
 800a472:	e09f      	b.n	800a5b4 <_printf_i+0x1ec>
 800a474:	6820      	ldr	r0, [r4, #0]
 800a476:	682b      	ldr	r3, [r5, #0]
 800a478:	0607      	lsls	r7, r0, #24
 800a47a:	f103 0104 	add.w	r1, r3, #4
 800a47e:	6029      	str	r1, [r5, #0]
 800a480:	d501      	bpl.n	800a486 <_printf_i+0xbe>
 800a482:	681e      	ldr	r6, [r3, #0]
 800a484:	e003      	b.n	800a48e <_printf_i+0xc6>
 800a486:	0646      	lsls	r6, r0, #25
 800a488:	d5fb      	bpl.n	800a482 <_printf_i+0xba>
 800a48a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a48e:	2e00      	cmp	r6, #0
 800a490:	da03      	bge.n	800a49a <_printf_i+0xd2>
 800a492:	232d      	movs	r3, #45	; 0x2d
 800a494:	4276      	negs	r6, r6
 800a496:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a49a:	485a      	ldr	r0, [pc, #360]	; (800a604 <_printf_i+0x23c>)
 800a49c:	230a      	movs	r3, #10
 800a49e:	e012      	b.n	800a4c6 <_printf_i+0xfe>
 800a4a0:	682b      	ldr	r3, [r5, #0]
 800a4a2:	6820      	ldr	r0, [r4, #0]
 800a4a4:	1d19      	adds	r1, r3, #4
 800a4a6:	6029      	str	r1, [r5, #0]
 800a4a8:	0605      	lsls	r5, r0, #24
 800a4aa:	d501      	bpl.n	800a4b0 <_printf_i+0xe8>
 800a4ac:	681e      	ldr	r6, [r3, #0]
 800a4ae:	e002      	b.n	800a4b6 <_printf_i+0xee>
 800a4b0:	0641      	lsls	r1, r0, #25
 800a4b2:	d5fb      	bpl.n	800a4ac <_printf_i+0xe4>
 800a4b4:	881e      	ldrh	r6, [r3, #0]
 800a4b6:	4853      	ldr	r0, [pc, #332]	; (800a604 <_printf_i+0x23c>)
 800a4b8:	2f6f      	cmp	r7, #111	; 0x6f
 800a4ba:	bf0c      	ite	eq
 800a4bc:	2308      	moveq	r3, #8
 800a4be:	230a      	movne	r3, #10
 800a4c0:	2100      	movs	r1, #0
 800a4c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a4c6:	6865      	ldr	r5, [r4, #4]
 800a4c8:	60a5      	str	r5, [r4, #8]
 800a4ca:	2d00      	cmp	r5, #0
 800a4cc:	bfa2      	ittt	ge
 800a4ce:	6821      	ldrge	r1, [r4, #0]
 800a4d0:	f021 0104 	bicge.w	r1, r1, #4
 800a4d4:	6021      	strge	r1, [r4, #0]
 800a4d6:	b90e      	cbnz	r6, 800a4dc <_printf_i+0x114>
 800a4d8:	2d00      	cmp	r5, #0
 800a4da:	d04b      	beq.n	800a574 <_printf_i+0x1ac>
 800a4dc:	4615      	mov	r5, r2
 800a4de:	fbb6 f1f3 	udiv	r1, r6, r3
 800a4e2:	fb03 6711 	mls	r7, r3, r1, r6
 800a4e6:	5dc7      	ldrb	r7, [r0, r7]
 800a4e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a4ec:	4637      	mov	r7, r6
 800a4ee:	42bb      	cmp	r3, r7
 800a4f0:	460e      	mov	r6, r1
 800a4f2:	d9f4      	bls.n	800a4de <_printf_i+0x116>
 800a4f4:	2b08      	cmp	r3, #8
 800a4f6:	d10b      	bne.n	800a510 <_printf_i+0x148>
 800a4f8:	6823      	ldr	r3, [r4, #0]
 800a4fa:	07de      	lsls	r6, r3, #31
 800a4fc:	d508      	bpl.n	800a510 <_printf_i+0x148>
 800a4fe:	6923      	ldr	r3, [r4, #16]
 800a500:	6861      	ldr	r1, [r4, #4]
 800a502:	4299      	cmp	r1, r3
 800a504:	bfde      	ittt	le
 800a506:	2330      	movle	r3, #48	; 0x30
 800a508:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a50c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a510:	1b52      	subs	r2, r2, r5
 800a512:	6122      	str	r2, [r4, #16]
 800a514:	f8cd a000 	str.w	sl, [sp]
 800a518:	464b      	mov	r3, r9
 800a51a:	aa03      	add	r2, sp, #12
 800a51c:	4621      	mov	r1, r4
 800a51e:	4640      	mov	r0, r8
 800a520:	f7ff fee4 	bl	800a2ec <_printf_common>
 800a524:	3001      	adds	r0, #1
 800a526:	d14a      	bne.n	800a5be <_printf_i+0x1f6>
 800a528:	f04f 30ff 	mov.w	r0, #4294967295
 800a52c:	b004      	add	sp, #16
 800a52e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a532:	6823      	ldr	r3, [r4, #0]
 800a534:	f043 0320 	orr.w	r3, r3, #32
 800a538:	6023      	str	r3, [r4, #0]
 800a53a:	4833      	ldr	r0, [pc, #204]	; (800a608 <_printf_i+0x240>)
 800a53c:	2778      	movs	r7, #120	; 0x78
 800a53e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a542:	6823      	ldr	r3, [r4, #0]
 800a544:	6829      	ldr	r1, [r5, #0]
 800a546:	061f      	lsls	r7, r3, #24
 800a548:	f851 6b04 	ldr.w	r6, [r1], #4
 800a54c:	d402      	bmi.n	800a554 <_printf_i+0x18c>
 800a54e:	065f      	lsls	r7, r3, #25
 800a550:	bf48      	it	mi
 800a552:	b2b6      	uxthmi	r6, r6
 800a554:	07df      	lsls	r7, r3, #31
 800a556:	bf48      	it	mi
 800a558:	f043 0320 	orrmi.w	r3, r3, #32
 800a55c:	6029      	str	r1, [r5, #0]
 800a55e:	bf48      	it	mi
 800a560:	6023      	strmi	r3, [r4, #0]
 800a562:	b91e      	cbnz	r6, 800a56c <_printf_i+0x1a4>
 800a564:	6823      	ldr	r3, [r4, #0]
 800a566:	f023 0320 	bic.w	r3, r3, #32
 800a56a:	6023      	str	r3, [r4, #0]
 800a56c:	2310      	movs	r3, #16
 800a56e:	e7a7      	b.n	800a4c0 <_printf_i+0xf8>
 800a570:	4824      	ldr	r0, [pc, #144]	; (800a604 <_printf_i+0x23c>)
 800a572:	e7e4      	b.n	800a53e <_printf_i+0x176>
 800a574:	4615      	mov	r5, r2
 800a576:	e7bd      	b.n	800a4f4 <_printf_i+0x12c>
 800a578:	682b      	ldr	r3, [r5, #0]
 800a57a:	6826      	ldr	r6, [r4, #0]
 800a57c:	6961      	ldr	r1, [r4, #20]
 800a57e:	1d18      	adds	r0, r3, #4
 800a580:	6028      	str	r0, [r5, #0]
 800a582:	0635      	lsls	r5, r6, #24
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	d501      	bpl.n	800a58c <_printf_i+0x1c4>
 800a588:	6019      	str	r1, [r3, #0]
 800a58a:	e002      	b.n	800a592 <_printf_i+0x1ca>
 800a58c:	0670      	lsls	r0, r6, #25
 800a58e:	d5fb      	bpl.n	800a588 <_printf_i+0x1c0>
 800a590:	8019      	strh	r1, [r3, #0]
 800a592:	2300      	movs	r3, #0
 800a594:	6123      	str	r3, [r4, #16]
 800a596:	4615      	mov	r5, r2
 800a598:	e7bc      	b.n	800a514 <_printf_i+0x14c>
 800a59a:	682b      	ldr	r3, [r5, #0]
 800a59c:	1d1a      	adds	r2, r3, #4
 800a59e:	602a      	str	r2, [r5, #0]
 800a5a0:	681d      	ldr	r5, [r3, #0]
 800a5a2:	6862      	ldr	r2, [r4, #4]
 800a5a4:	2100      	movs	r1, #0
 800a5a6:	4628      	mov	r0, r5
 800a5a8:	f7f5 feba 	bl	8000320 <memchr>
 800a5ac:	b108      	cbz	r0, 800a5b2 <_printf_i+0x1ea>
 800a5ae:	1b40      	subs	r0, r0, r5
 800a5b0:	6060      	str	r0, [r4, #4]
 800a5b2:	6863      	ldr	r3, [r4, #4]
 800a5b4:	6123      	str	r3, [r4, #16]
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a5bc:	e7aa      	b.n	800a514 <_printf_i+0x14c>
 800a5be:	6923      	ldr	r3, [r4, #16]
 800a5c0:	462a      	mov	r2, r5
 800a5c2:	4649      	mov	r1, r9
 800a5c4:	4640      	mov	r0, r8
 800a5c6:	47d0      	blx	sl
 800a5c8:	3001      	adds	r0, #1
 800a5ca:	d0ad      	beq.n	800a528 <_printf_i+0x160>
 800a5cc:	6823      	ldr	r3, [r4, #0]
 800a5ce:	079b      	lsls	r3, r3, #30
 800a5d0:	d413      	bmi.n	800a5fa <_printf_i+0x232>
 800a5d2:	68e0      	ldr	r0, [r4, #12]
 800a5d4:	9b03      	ldr	r3, [sp, #12]
 800a5d6:	4298      	cmp	r0, r3
 800a5d8:	bfb8      	it	lt
 800a5da:	4618      	movlt	r0, r3
 800a5dc:	e7a6      	b.n	800a52c <_printf_i+0x164>
 800a5de:	2301      	movs	r3, #1
 800a5e0:	4632      	mov	r2, r6
 800a5e2:	4649      	mov	r1, r9
 800a5e4:	4640      	mov	r0, r8
 800a5e6:	47d0      	blx	sl
 800a5e8:	3001      	adds	r0, #1
 800a5ea:	d09d      	beq.n	800a528 <_printf_i+0x160>
 800a5ec:	3501      	adds	r5, #1
 800a5ee:	68e3      	ldr	r3, [r4, #12]
 800a5f0:	9903      	ldr	r1, [sp, #12]
 800a5f2:	1a5b      	subs	r3, r3, r1
 800a5f4:	42ab      	cmp	r3, r5
 800a5f6:	dcf2      	bgt.n	800a5de <_printf_i+0x216>
 800a5f8:	e7eb      	b.n	800a5d2 <_printf_i+0x20a>
 800a5fa:	2500      	movs	r5, #0
 800a5fc:	f104 0619 	add.w	r6, r4, #25
 800a600:	e7f5      	b.n	800a5ee <_printf_i+0x226>
 800a602:	bf00      	nop
 800a604:	0800aa5d 	.word	0x0800aa5d
 800a608:	0800aa6e 	.word	0x0800aa6e

0800a60c <__sflush_r>:
 800a60c:	898a      	ldrh	r2, [r1, #12]
 800a60e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a612:	4605      	mov	r5, r0
 800a614:	0710      	lsls	r0, r2, #28
 800a616:	460c      	mov	r4, r1
 800a618:	d458      	bmi.n	800a6cc <__sflush_r+0xc0>
 800a61a:	684b      	ldr	r3, [r1, #4]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	dc05      	bgt.n	800a62c <__sflush_r+0x20>
 800a620:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a622:	2b00      	cmp	r3, #0
 800a624:	dc02      	bgt.n	800a62c <__sflush_r+0x20>
 800a626:	2000      	movs	r0, #0
 800a628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a62c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a62e:	2e00      	cmp	r6, #0
 800a630:	d0f9      	beq.n	800a626 <__sflush_r+0x1a>
 800a632:	2300      	movs	r3, #0
 800a634:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a638:	682f      	ldr	r7, [r5, #0]
 800a63a:	6a21      	ldr	r1, [r4, #32]
 800a63c:	602b      	str	r3, [r5, #0]
 800a63e:	d032      	beq.n	800a6a6 <__sflush_r+0x9a>
 800a640:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a642:	89a3      	ldrh	r3, [r4, #12]
 800a644:	075a      	lsls	r2, r3, #29
 800a646:	d505      	bpl.n	800a654 <__sflush_r+0x48>
 800a648:	6863      	ldr	r3, [r4, #4]
 800a64a:	1ac0      	subs	r0, r0, r3
 800a64c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a64e:	b10b      	cbz	r3, 800a654 <__sflush_r+0x48>
 800a650:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a652:	1ac0      	subs	r0, r0, r3
 800a654:	2300      	movs	r3, #0
 800a656:	4602      	mov	r2, r0
 800a658:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a65a:	6a21      	ldr	r1, [r4, #32]
 800a65c:	4628      	mov	r0, r5
 800a65e:	47b0      	blx	r6
 800a660:	1c43      	adds	r3, r0, #1
 800a662:	89a3      	ldrh	r3, [r4, #12]
 800a664:	d106      	bne.n	800a674 <__sflush_r+0x68>
 800a666:	6829      	ldr	r1, [r5, #0]
 800a668:	291d      	cmp	r1, #29
 800a66a:	d82b      	bhi.n	800a6c4 <__sflush_r+0xb8>
 800a66c:	4a29      	ldr	r2, [pc, #164]	; (800a714 <__sflush_r+0x108>)
 800a66e:	410a      	asrs	r2, r1
 800a670:	07d6      	lsls	r6, r2, #31
 800a672:	d427      	bmi.n	800a6c4 <__sflush_r+0xb8>
 800a674:	2200      	movs	r2, #0
 800a676:	6062      	str	r2, [r4, #4]
 800a678:	04d9      	lsls	r1, r3, #19
 800a67a:	6922      	ldr	r2, [r4, #16]
 800a67c:	6022      	str	r2, [r4, #0]
 800a67e:	d504      	bpl.n	800a68a <__sflush_r+0x7e>
 800a680:	1c42      	adds	r2, r0, #1
 800a682:	d101      	bne.n	800a688 <__sflush_r+0x7c>
 800a684:	682b      	ldr	r3, [r5, #0]
 800a686:	b903      	cbnz	r3, 800a68a <__sflush_r+0x7e>
 800a688:	6560      	str	r0, [r4, #84]	; 0x54
 800a68a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a68c:	602f      	str	r7, [r5, #0]
 800a68e:	2900      	cmp	r1, #0
 800a690:	d0c9      	beq.n	800a626 <__sflush_r+0x1a>
 800a692:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a696:	4299      	cmp	r1, r3
 800a698:	d002      	beq.n	800a6a0 <__sflush_r+0x94>
 800a69a:	4628      	mov	r0, r5
 800a69c:	f7ff fbea 	bl	8009e74 <_free_r>
 800a6a0:	2000      	movs	r0, #0
 800a6a2:	6360      	str	r0, [r4, #52]	; 0x34
 800a6a4:	e7c0      	b.n	800a628 <__sflush_r+0x1c>
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	4628      	mov	r0, r5
 800a6aa:	47b0      	blx	r6
 800a6ac:	1c41      	adds	r1, r0, #1
 800a6ae:	d1c8      	bne.n	800a642 <__sflush_r+0x36>
 800a6b0:	682b      	ldr	r3, [r5, #0]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d0c5      	beq.n	800a642 <__sflush_r+0x36>
 800a6b6:	2b1d      	cmp	r3, #29
 800a6b8:	d001      	beq.n	800a6be <__sflush_r+0xb2>
 800a6ba:	2b16      	cmp	r3, #22
 800a6bc:	d101      	bne.n	800a6c2 <__sflush_r+0xb6>
 800a6be:	602f      	str	r7, [r5, #0]
 800a6c0:	e7b1      	b.n	800a626 <__sflush_r+0x1a>
 800a6c2:	89a3      	ldrh	r3, [r4, #12]
 800a6c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6c8:	81a3      	strh	r3, [r4, #12]
 800a6ca:	e7ad      	b.n	800a628 <__sflush_r+0x1c>
 800a6cc:	690f      	ldr	r7, [r1, #16]
 800a6ce:	2f00      	cmp	r7, #0
 800a6d0:	d0a9      	beq.n	800a626 <__sflush_r+0x1a>
 800a6d2:	0793      	lsls	r3, r2, #30
 800a6d4:	680e      	ldr	r6, [r1, #0]
 800a6d6:	bf08      	it	eq
 800a6d8:	694b      	ldreq	r3, [r1, #20]
 800a6da:	600f      	str	r7, [r1, #0]
 800a6dc:	bf18      	it	ne
 800a6de:	2300      	movne	r3, #0
 800a6e0:	eba6 0807 	sub.w	r8, r6, r7
 800a6e4:	608b      	str	r3, [r1, #8]
 800a6e6:	f1b8 0f00 	cmp.w	r8, #0
 800a6ea:	dd9c      	ble.n	800a626 <__sflush_r+0x1a>
 800a6ec:	6a21      	ldr	r1, [r4, #32]
 800a6ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a6f0:	4643      	mov	r3, r8
 800a6f2:	463a      	mov	r2, r7
 800a6f4:	4628      	mov	r0, r5
 800a6f6:	47b0      	blx	r6
 800a6f8:	2800      	cmp	r0, #0
 800a6fa:	dc06      	bgt.n	800a70a <__sflush_r+0xfe>
 800a6fc:	89a3      	ldrh	r3, [r4, #12]
 800a6fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a702:	81a3      	strh	r3, [r4, #12]
 800a704:	f04f 30ff 	mov.w	r0, #4294967295
 800a708:	e78e      	b.n	800a628 <__sflush_r+0x1c>
 800a70a:	4407      	add	r7, r0
 800a70c:	eba8 0800 	sub.w	r8, r8, r0
 800a710:	e7e9      	b.n	800a6e6 <__sflush_r+0xda>
 800a712:	bf00      	nop
 800a714:	dfbffffe 	.word	0xdfbffffe

0800a718 <_fflush_r>:
 800a718:	b538      	push	{r3, r4, r5, lr}
 800a71a:	690b      	ldr	r3, [r1, #16]
 800a71c:	4605      	mov	r5, r0
 800a71e:	460c      	mov	r4, r1
 800a720:	b913      	cbnz	r3, 800a728 <_fflush_r+0x10>
 800a722:	2500      	movs	r5, #0
 800a724:	4628      	mov	r0, r5
 800a726:	bd38      	pop	{r3, r4, r5, pc}
 800a728:	b118      	cbz	r0, 800a732 <_fflush_r+0x1a>
 800a72a:	6a03      	ldr	r3, [r0, #32]
 800a72c:	b90b      	cbnz	r3, 800a732 <_fflush_r+0x1a>
 800a72e:	f7ff f9a9 	bl	8009a84 <__sinit>
 800a732:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d0f3      	beq.n	800a722 <_fflush_r+0xa>
 800a73a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a73c:	07d0      	lsls	r0, r2, #31
 800a73e:	d404      	bmi.n	800a74a <_fflush_r+0x32>
 800a740:	0599      	lsls	r1, r3, #22
 800a742:	d402      	bmi.n	800a74a <_fflush_r+0x32>
 800a744:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a746:	f7ff fb92 	bl	8009e6e <__retarget_lock_acquire_recursive>
 800a74a:	4628      	mov	r0, r5
 800a74c:	4621      	mov	r1, r4
 800a74e:	f7ff ff5d 	bl	800a60c <__sflush_r>
 800a752:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a754:	07da      	lsls	r2, r3, #31
 800a756:	4605      	mov	r5, r0
 800a758:	d4e4      	bmi.n	800a724 <_fflush_r+0xc>
 800a75a:	89a3      	ldrh	r3, [r4, #12]
 800a75c:	059b      	lsls	r3, r3, #22
 800a75e:	d4e1      	bmi.n	800a724 <_fflush_r+0xc>
 800a760:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a762:	f7ff fb85 	bl	8009e70 <__retarget_lock_release_recursive>
 800a766:	e7dd      	b.n	800a724 <_fflush_r+0xc>

0800a768 <__swhatbuf_r>:
 800a768:	b570      	push	{r4, r5, r6, lr}
 800a76a:	460c      	mov	r4, r1
 800a76c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a770:	2900      	cmp	r1, #0
 800a772:	b096      	sub	sp, #88	; 0x58
 800a774:	4615      	mov	r5, r2
 800a776:	461e      	mov	r6, r3
 800a778:	da0d      	bge.n	800a796 <__swhatbuf_r+0x2e>
 800a77a:	89a3      	ldrh	r3, [r4, #12]
 800a77c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a780:	f04f 0100 	mov.w	r1, #0
 800a784:	bf0c      	ite	eq
 800a786:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a78a:	2340      	movne	r3, #64	; 0x40
 800a78c:	2000      	movs	r0, #0
 800a78e:	6031      	str	r1, [r6, #0]
 800a790:	602b      	str	r3, [r5, #0]
 800a792:	b016      	add	sp, #88	; 0x58
 800a794:	bd70      	pop	{r4, r5, r6, pc}
 800a796:	466a      	mov	r2, sp
 800a798:	f000 f848 	bl	800a82c <_fstat_r>
 800a79c:	2800      	cmp	r0, #0
 800a79e:	dbec      	blt.n	800a77a <__swhatbuf_r+0x12>
 800a7a0:	9901      	ldr	r1, [sp, #4]
 800a7a2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a7a6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a7aa:	4259      	negs	r1, r3
 800a7ac:	4159      	adcs	r1, r3
 800a7ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7b2:	e7eb      	b.n	800a78c <__swhatbuf_r+0x24>

0800a7b4 <__smakebuf_r>:
 800a7b4:	898b      	ldrh	r3, [r1, #12]
 800a7b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a7b8:	079d      	lsls	r5, r3, #30
 800a7ba:	4606      	mov	r6, r0
 800a7bc:	460c      	mov	r4, r1
 800a7be:	d507      	bpl.n	800a7d0 <__smakebuf_r+0x1c>
 800a7c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a7c4:	6023      	str	r3, [r4, #0]
 800a7c6:	6123      	str	r3, [r4, #16]
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	6163      	str	r3, [r4, #20]
 800a7cc:	b002      	add	sp, #8
 800a7ce:	bd70      	pop	{r4, r5, r6, pc}
 800a7d0:	ab01      	add	r3, sp, #4
 800a7d2:	466a      	mov	r2, sp
 800a7d4:	f7ff ffc8 	bl	800a768 <__swhatbuf_r>
 800a7d8:	9900      	ldr	r1, [sp, #0]
 800a7da:	4605      	mov	r5, r0
 800a7dc:	4630      	mov	r0, r6
 800a7de:	f7ff fbb5 	bl	8009f4c <_malloc_r>
 800a7e2:	b948      	cbnz	r0, 800a7f8 <__smakebuf_r+0x44>
 800a7e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7e8:	059a      	lsls	r2, r3, #22
 800a7ea:	d4ef      	bmi.n	800a7cc <__smakebuf_r+0x18>
 800a7ec:	f023 0303 	bic.w	r3, r3, #3
 800a7f0:	f043 0302 	orr.w	r3, r3, #2
 800a7f4:	81a3      	strh	r3, [r4, #12]
 800a7f6:	e7e3      	b.n	800a7c0 <__smakebuf_r+0xc>
 800a7f8:	89a3      	ldrh	r3, [r4, #12]
 800a7fa:	6020      	str	r0, [r4, #0]
 800a7fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a800:	81a3      	strh	r3, [r4, #12]
 800a802:	9b00      	ldr	r3, [sp, #0]
 800a804:	6163      	str	r3, [r4, #20]
 800a806:	9b01      	ldr	r3, [sp, #4]
 800a808:	6120      	str	r0, [r4, #16]
 800a80a:	b15b      	cbz	r3, 800a824 <__smakebuf_r+0x70>
 800a80c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a810:	4630      	mov	r0, r6
 800a812:	f000 f81d 	bl	800a850 <_isatty_r>
 800a816:	b128      	cbz	r0, 800a824 <__smakebuf_r+0x70>
 800a818:	89a3      	ldrh	r3, [r4, #12]
 800a81a:	f023 0303 	bic.w	r3, r3, #3
 800a81e:	f043 0301 	orr.w	r3, r3, #1
 800a822:	81a3      	strh	r3, [r4, #12]
 800a824:	89a3      	ldrh	r3, [r4, #12]
 800a826:	431d      	orrs	r5, r3
 800a828:	81a5      	strh	r5, [r4, #12]
 800a82a:	e7cf      	b.n	800a7cc <__smakebuf_r+0x18>

0800a82c <_fstat_r>:
 800a82c:	b538      	push	{r3, r4, r5, lr}
 800a82e:	4d07      	ldr	r5, [pc, #28]	; (800a84c <_fstat_r+0x20>)
 800a830:	2300      	movs	r3, #0
 800a832:	4604      	mov	r4, r0
 800a834:	4608      	mov	r0, r1
 800a836:	4611      	mov	r1, r2
 800a838:	602b      	str	r3, [r5, #0]
 800a83a:	f7f6 fe1c 	bl	8001476 <_fstat>
 800a83e:	1c43      	adds	r3, r0, #1
 800a840:	d102      	bne.n	800a848 <_fstat_r+0x1c>
 800a842:	682b      	ldr	r3, [r5, #0]
 800a844:	b103      	cbz	r3, 800a848 <_fstat_r+0x1c>
 800a846:	6023      	str	r3, [r4, #0]
 800a848:	bd38      	pop	{r3, r4, r5, pc}
 800a84a:	bf00      	nop
 800a84c:	24000568 	.word	0x24000568

0800a850 <_isatty_r>:
 800a850:	b538      	push	{r3, r4, r5, lr}
 800a852:	4d06      	ldr	r5, [pc, #24]	; (800a86c <_isatty_r+0x1c>)
 800a854:	2300      	movs	r3, #0
 800a856:	4604      	mov	r4, r0
 800a858:	4608      	mov	r0, r1
 800a85a:	602b      	str	r3, [r5, #0]
 800a85c:	f7f6 fe1b 	bl	8001496 <_isatty>
 800a860:	1c43      	adds	r3, r0, #1
 800a862:	d102      	bne.n	800a86a <_isatty_r+0x1a>
 800a864:	682b      	ldr	r3, [r5, #0]
 800a866:	b103      	cbz	r3, 800a86a <_isatty_r+0x1a>
 800a868:	6023      	str	r3, [r4, #0]
 800a86a:	bd38      	pop	{r3, r4, r5, pc}
 800a86c:	24000568 	.word	0x24000568

0800a870 <_sbrk_r>:
 800a870:	b538      	push	{r3, r4, r5, lr}
 800a872:	4d06      	ldr	r5, [pc, #24]	; (800a88c <_sbrk_r+0x1c>)
 800a874:	2300      	movs	r3, #0
 800a876:	4604      	mov	r4, r0
 800a878:	4608      	mov	r0, r1
 800a87a:	602b      	str	r3, [r5, #0]
 800a87c:	f7f6 fe24 	bl	80014c8 <_sbrk>
 800a880:	1c43      	adds	r3, r0, #1
 800a882:	d102      	bne.n	800a88a <_sbrk_r+0x1a>
 800a884:	682b      	ldr	r3, [r5, #0]
 800a886:	b103      	cbz	r3, 800a88a <_sbrk_r+0x1a>
 800a888:	6023      	str	r3, [r4, #0]
 800a88a:	bd38      	pop	{r3, r4, r5, pc}
 800a88c:	24000568 	.word	0x24000568

0800a890 <_init>:
 800a890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a892:	bf00      	nop
 800a894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a896:	bc08      	pop	{r3}
 800a898:	469e      	mov	lr, r3
 800a89a:	4770      	bx	lr

0800a89c <_fini>:
 800a89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a89e:	bf00      	nop
 800a8a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8a2:	bc08      	pop	{r3}
 800a8a4:	469e      	mov	lr, r3
 800a8a6:	4770      	bx	lr
